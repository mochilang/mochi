-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:24Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}
module Main where

import Data.Maybe (fromMaybe)
import Data.Time.Clock.POSIX (getPOSIXTime)
import qualified Data.Map as Map
import Data.List (intercalate, isPrefixOf, isInfixOf)
import qualified Data.List as List
import GHC.Generics (Generic)


forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i | i < end =
            case f i of
              Just v -> Just v
              Nothing -> go (i + 1)
         | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _ | cond () =
            case body () of
              Just v -> Just v
              Nothing -> go ()
         | otherwise = Nothing

avg :: Integral a => [a] -> a
avg xs | null xs = 0
       | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup { key :: k, items :: [a] } deriving (Show)

_group_by :: Ord k => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x:xs) m order =
        let k = keyfn x
        in case Map.lookup k m of
             Just is -> go xs (Map.insert k (is ++ [x]) m) order
             Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
  in [ MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order ]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
  in if idx < 0 || idx >= length s
       then error "index out of range"
       else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine
_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p | null p || p == "-" -> putStr text
         | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
  in h : case t of
            []      -> []
            (_:rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
  in if null ls then [] else
       let heads = if header
                      then _split delim (head ls)
                      else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
           start = if header then 1 else 0
           row line =
             let parts = _split delim line
             in Map.fromList [ (heads !! j, if j < length parts then parts !! j else "")
                             | j <- [0 .. length heads - 1] ]
      in map row (drop start ls)


_now :: IO Int
_now = fmap round getPOSIXTime


data Pixel = Pixel {
    R :: Int,
    G :: Int,
    B :: Int
} deriving (Eq, Show, Generic)


data Bitmap = Bitmap {
    cols :: Int,
    rows :: Int,
    px :: [[Pixel]]
} deriving (Eq, Show, Generic)


pixelFromRgb :: Int -> Pixel
pixelFromRgb c = fromMaybe (()) $
    (let r = (((read ((div c 65536)) :: Int)) `mod` 256) in (let g = (((read ((div c 256)) :: Int)) `mod` 256) in (let b = (c `mod` 256) in Just (Pixel { R = r, G = g, B = b }))))
  where
    r = (((read ((div c 65536)) :: Int)) `mod` 256)
    g = (((read ((div c 256)) :: Int)) `mod` 256)
    b = (c `mod` 256)

rgbFromPixel :: Pixel -> Int
rgbFromPixel p = ((((_asInt (fromMaybe (error "missing") (Map.lookup "R" (p))) * 65536) + _asInt (fromMaybe (error "missing") (Map.lookup "G" (p)))) * 256) + _asInt (fromMaybe (error "missing") (Map.lookup "B" (p))))

NewBitmap :: Int -> Int -> Bitmap
NewBitmap x y = fromMaybe (()) $
    (let _data = [] in (let row = 0 in case whileLoop (\() -> (row < y)) (\() -> (let r = [] in (let col = 0 in case whileLoop (\() -> (col < x)) (\() -> (let r = (r ++ [Pixel { R = 0, G = 0, B = 0 }]) in (let col = (_asInt (col) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let _data = (_data ++ [r]) in (let row = (_asInt (row) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (Bitmap { cols = x, rows = y, px = _data })))

FillRgb :: Bitmap -> Int -> ()
FillRgb b c = fromMaybe (()) $
    (let y = 0 in (let p = pixelFromRgb c in whileLoop (\() -> (y < fromMaybe (error "missing") (Map.lookup "rows" (b)))) (\() -> (let x = 0 in case whileLoop (\() -> (x < fromMaybe (error "missing") (Map.lookup "cols" (b)))) (\() -> (let px = fromMaybe (error "missing") (Map.lookup "px" (b)) in (let row = (px !! y) in (let row = Map.insert x p row in (let px = Map.insert y row px in (let b = px in (let x = (_asInt (x) + 1) in Nothing))))))) of Just v -> Just v; Nothing -> (let y = (_asInt (y) + 1) in Nothing)))))

SetPxRgb :: Bitmap -> Int -> Int -> Int -> Bool
SetPxRgb b x y c = fromMaybe (False) $
    case if (((((((_asInt (x) < 0) || x) >= fromMaybe (error "missing") (Map.lookup "cols" (b))) || y) < 0) || y) >= fromMaybe (error "missing") (Map.lookup "rows" (b))) then Just (False) else Nothing of Just v -> Just v; Nothing -> (let px = fromMaybe (error "missing") (Map.lookup "px" (b)) in (let row = (px !! y) in (let row = Map.insert x pixelFromRgb c row in (let px = Map.insert y row px in (let b = px in Just (True))))))

nextRand :: Int -> Int
nextRand seed = ((((_asInt (seed) * 1664525) + 1013904223)) `mod` 2147483648)

main :: ()
main  = fromMaybe (()) $
    (let bm = NewBitmap 400 300 in case (let _ = FillRgb bm 12615744 in Nothing) of Just v -> Just v; Nothing -> (let seed = _now in (let i = 0 in case whileLoop (\() -> (_asInt (i) < 2000)) (\() -> (let seed = nextRand seed in (let x = (seed `mod` 400) in (let seed = nextRand seed in (let y = (seed `mod` 300) in case (let _ = SetPxRgb bm x y 8405024 in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)))))) of Just v -> Just v; Nothing -> (let x = 0 in case whileLoop (\() -> (_asInt (x) < 400)) (\() -> (let y = 240 in case whileLoop (\() -> (_asInt (y) < 245)) (\() -> case (let _ = SetPxRgb bm x y 8405024 in Nothing) of Just v -> Just v; Nothing -> (let y = (_asInt (y) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let y = 260 in case whileLoop (\() -> (_asInt (y) < 265)) (\() -> case (let _ = SetPxRgb bm x y 8405024 in Nothing) of Just v -> Just v; Nothing -> (let y = (_asInt (y) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let x = (_asInt (x) + 1) in Nothing)))) of Just v -> Just v; Nothing -> (let y = 0 in whileLoop (\() -> (_asInt (y) < 300)) (\() -> (let x = 80 in case whileLoop (\() -> (_asInt (x) < 85)) (\() -> case (let _ = SetPxRgb bm x y 8405024 in Nothing) of Just v -> Just v; Nothing -> (let x = (_asInt (x) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let x = 95 in case whileLoop (\() -> (_asInt (x) < 100)) (\() -> case (let _ = SetPxRgb bm x y 8405024 in Nothing) of Just v -> Just v; Nothing -> (let x = (_asInt (x) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let y = (_asInt (y) + 1) in Nothing)))))))))

main :: IO ()
main = do
    main 
