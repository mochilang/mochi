-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:12Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

node :: String -> () -> Int -> () -> Map.Map String ()
node cl le aa ri = Map.fromList [("cl", cl), ("le", le), ("aa", aa), ("ri", ri)]

treeString :: () -> String
treeString t = fromMaybe ("") $
  case if (t == 0) then Just ("E") else Nothing of Just v -> Just v; Nothing -> (let m = t in Just ((((((((("T(" + (m !! "cl")) + ", ") + treeString (m !! "le")) + ", ") + show (m !! "aa")) + ", ") + treeString (m !! "ri")) + ")")))

balance :: () -> ()
balance t = fromMaybe (()) $
  case if (t == 0) then Just (t) else Nothing of Just v -> Just v; Nothing -> (let m = t in case if ((m !! "cl") /= "B") then Just (t) else Nothing of Just v -> Just v; Nothing -> (let le = (m !! "le") in (let ri = (m !! "ri") in case if (le /= 0) then (let leMap = le in if ((leMap !! "cl") == "R") then (let lele = (leMap !! "le") in case if (lele /= 0) then (let leleMap = lele in if ((leleMap !! "cl") == "R") then Just (node "R" node "B" (leleMap !! "le") (leleMap !! "aa") (leleMap !! "ri") (leMap !! "aa") node "B" (leMap !! "ri") (m !! "aa") ri) else Nothing) else Nothing of Just v -> Just v; Nothing -> (let leri = (leMap !! "ri") in if (leri /= 0) then (let leriMap = leri in if ((leriMap !! "cl") == "R") then Just (node "R" node "B" (leMap !! "le") (leMap !! "aa") (leriMap !! "le") (leriMap !! "aa") node "B" (leriMap !! "ri") (m !! "aa") ri) else Nothing) else Nothing)) else Nothing) else Nothing of Just v -> Just v; Nothing -> case if (ri /= 0) then (let riMap = ri in if ((riMap !! "cl") == "R") then (let rile = (riMap !! "le") in case if (rile /= 0) then (let rileMap = rile in if ((rileMap !! "cl") == "R") then Just (node "R" node "B" (m !! "le") (m !! "aa") (rileMap !! "le") (rileMap !! "aa") node "B" (rileMap !! "ri") (riMap !! "aa") (riMap !! "ri")) else Nothing) else Nothing of Just v -> Just v; Nothing -> (let riri = (riMap !! "ri") in if (riri /= 0) then (let ririMap = riri in if ((ririMap !! "cl") == "R") then Just (node "R" node "B" (m !! "le") (m !! "aa") (riMap !! "le") (riMap !! "aa") node "B" (ririMap !! "le") (ririMap !! "aa") (ririMap !! "ri")) else Nothing) else Nothing)) else Nothing) else Nothing of Just v -> Just v; Nothing -> Just (t))))

ins :: () -> Int -> ()
ins tr x = fromMaybe (()) $
  case if (tr == 0) then Just (node "R" 0 x 0) else Nothing of Just v -> Just v; Nothing -> case if (x < (tr !! "aa")) then Just (balance node (tr !! "cl") ins (tr !! "le") x (tr !! "aa") (tr !! "ri")) else Nothing of Just v -> Just v; Nothing -> case if (x > (tr !! "aa")) then Just (balance node (tr !! "cl") (tr !! "le") (tr !! "aa") ins (tr !! "ri") x) else Nothing of Just v -> Just v; Nothing -> Just (tr)

insert :: () -> Int -> Map.Map String ()
insert tr x =
  fromMaybe (()) $
    (let t = ins tr x in case if (t == 0) then Just (0) else Nothing of Just v -> Just v; Nothing -> (let m = t in Just (node "B" (m !! "le") (m !! "aa") (m !! "ri"))))
  where
    t = ins tr x

tr = 0

i = 1

main :: IO ()
main = do
  let loop i = do
        if (i <= 16)
          then do
            let tr = insert tr i
            loop ((i + 1))
          else return ()
  loop i
  putStrLn (treeString tr)
