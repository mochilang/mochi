-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:11Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

sinApprox :: Double -> Double
sinApprox x =
  fromMaybe (0.0) $
    (let term = x in (let sum = x in (let n = 1 in case whileLoop (\() -> (_asInt (n) <= 12)) (\() -> (let denom = (read ((((2 * _asInt (n))) * (((2 * _asInt (n)) + 1)))) :: Double) in (let term = ((((-(_asInt (term))) * x) * x) / denom) in (let sum = (sum + term) in (let n = (_asInt (n) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (sum))))

PI = 3.141592653589793

dt = 0.01

s = 0.0

t1 = 0.0

k1 = sinApprox 0.0

i = 1

i2 = 1

main :: IO ()
main = do
  let loop i = do
        if (i <= 200)
          then do
            let t2 = (((read i :: Double)) * dt)
            let k2 = sinApprox (_asDouble (t2) * PI)
            let s = (((s + _asDouble (((k1 + _asDouble (k2))))) * 0.5) * _asDouble (((_asDouble (t2) - t1))))
            let t1 = t2
            let k1 = k2
            loop ((i + 1))
          else return ()
  loop i
  let loop i2 = do
        if (i2 <= 50)
          then do
            let t2 = ((2.0 + ((read i2 :: Double))) * dt)
            let k2 = 0.0
            let s = (((s + _asDouble (((k1 + _asDouble (k2))))) * 0.5) * _asDouble (((_asDouble (t2) - t1))))
            let t1 = t2
            let k1 = k2
            loop ((i2 + 1))
          else return ()
  loop i2
  print (s)
