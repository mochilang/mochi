-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:28Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

absf :: Double -> Double
absf x = fromMaybe (0.0) $
  case if (_asDouble (x) < 0.0) then Just ((-(_asInt (x)))) else Nothing of Just v -> Just v; Nothing -> Just (x)

pow10 :: Int -> Double
pow10 n =
  fromMaybe (0.0) $
    (let r = 1.0 in (let i = 0 in case whileLoop (\() -> (_asInt (i) < n)) (\() -> (let r = (_asDouble (r) * 10.0) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (r)))

formatFloat :: Double -> Int -> String
formatFloat f prec =
  fromMaybe ("") $
    (let scale = pow10 prec in (let scaled = (_asDouble (((f * scale))) + 0.5) in (let n = ((read scaled :: Int)) in (let digits = show n in case whileLoop (\() -> (length digits <= _asInt (prec))) (\() -> (let digits = ("0" + digits) in Nothing)) of Just v -> Just v; Nothing -> (let intPart = take ((length digits - _asInt (prec)) - 0) (drop 0 digits) in (let fracPart = take (length digits - (length digits - _asInt (prec))) (drop (length digits - _asInt (prec)) digits) in Just (((intPart + ".") + fracPart))))))))
  where
    scale = pow10 prec
    scaled = (_asDouble (((f * scale))) + 0.5)

epsilon = 0.000000000000001

factval = 1

e = 2.0

n = 2

term = 1.0

main :: IO ()
main = do
  let _ = whileLoop (\() -> True) (\() -> Nothing <$ (fromMaybe () ((let factval = (factval * n) in (let n = (n + 1) in (let term = (1.0 / ((read factval :: Double))) in (let e = (e + term) in if (absf term < epsilon) then Just () else Nothing))))))) in return ()
  putStrLn (("e = " ++ formatFloat e 15))
