-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:25Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.Maybe (fromMaybe)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

parseBool :: String -> Bool
parseBool s =
  fromMaybe (False) $
    (let l = lower s in case if (((((((((l == "1") || l) == "t") || l) == True) || l) == "yes") || l) == "y") then Just (True) else Nothing of Just v -> Just v; Nothing -> Just (False))
  where
    l = lower s

main :: ()
main =
  fromMaybe (()) $
    (let n = True in case (let _ = putStrLn (_showAny (n)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("bool") in Nothing) of Just v -> Just v; Nothing -> (let n = not n in case (let _ = putStrLn (_showAny (n)) in Nothing) of Just v -> Just v; Nothing -> (let x = 5 in (let y = 8 in case (let _ = putStrLn (unwords ["x == y:", show ((x == y))]) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (unwords ["x < y:", show ((x < y))]) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\nConvert String into Boolean Data type\n") in Nothing) of Just v -> Just v; Nothing -> (let str1 = "japan" in case (let _ = putStrLn (unwords ["Before :", "string"]) in Nothing) of Just v -> Just v; Nothing -> (let bolStr = parseBool str1 in (let _ = putStrLn (unwords ["After :", "bool"]) in Nothing)))))))

main :: IO ()
main = do
  main
