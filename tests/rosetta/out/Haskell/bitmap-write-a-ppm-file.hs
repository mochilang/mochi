-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:24Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}
module Main where

import Data.Maybe (fromMaybe)
import qualified Data.Map as Map
import Data.List (intercalate, isPrefixOf, isInfixOf)
import qualified Data.List as List
import GHC.Generics (Generic)


forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i | i < end =
            case f i of
              Just v -> Just v
              Nothing -> go (i + 1)
         | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _ | cond () =
            case body () of
              Just v -> Just v
              Nothing -> go ()
         | otherwise = Nothing

avg :: Integral a => [a] -> a
avg xs | null xs = 0
       | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup { key :: k, items :: [a] } deriving (Show)

_group_by :: Ord k => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x:xs) m order =
        let k = keyfn x
        in case Map.lookup k m of
             Just is -> go xs (Map.insert k (is ++ [x]) m) order
             Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
  in [ MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order ]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
  in if idx < 0 || idx >= length s
       then error "index out of range"
       else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine
_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p | null p || p == "-" -> putStr text
         | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
  in h : case t of
            []      -> []
            (_:rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
  in if null ls then [] else
       let heads = if header
                      then _split delim (head ls)
                      else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
           start = if header then 1 else 0
           row line =
             let parts = _split delim line
             in Map.fromList [ (heads !! j, if j < length parts then parts !! j else "")
                             | j <- [0 .. length heads - 1] ]
      in map row (drop start ls)


data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"


data Colour = Colour {
    R :: Int,
    G :: Int,
    B :: Int
} deriving (Eq, Show, Generic)


data Bitmap = Bitmap {
    width :: Int,
    height :: Int,
    pixels :: [[Colour]]
} deriving (Eq, Show, Generic)


newBitmap :: Int -> Int -> Colour -> Bitmap
newBitmap w h c = fromMaybe (()) $
    (let rows = [] in (let y = 0 in case whileLoop (\() -> (y < h)) (\() -> (let row = [] in (let x = 0 in case whileLoop (\() -> (x < w)) (\() -> (let row = (row ++ [c]) in (let x = (_asInt (x) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let rows = (rows ++ [row]) in (let y = (_asInt (y) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (Bitmap { width = w, height = h, pixels = rows })))

setPixel :: Bitmap -> Int -> Int -> Colour -> ()
setPixel b x y c = fromMaybe (()) $
    (let rows = fromMaybe (error "missing") (Map.lookup "pixels" (b)) in (let row = (rows !! y) in (let row = Map.insert x c row in (let rows = Map.insert y row rows in (let b = rows in Nothing)))))

fillRect :: Bitmap -> Int -> Int -> Int -> Int -> Colour -> ()
fillRect b x y w h c = fromMaybe (()) $
    (let yy = y in whileLoop (\() -> ((yy < y) + h)) (\() -> (let xx = x in case whileLoop (\() -> ((xx < x) + w)) (\() -> case (let _ = setPixel b xx yy c in Nothing) of Just v -> Just v; Nothing -> (let xx = (_asInt (xx) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let yy = (_asInt (yy) + 1) in Nothing))))

pad :: Int -> Int -> String
pad n width = fromMaybe ("") $
    (let s = show n in case whileLoop (\() -> (length s < _asInt (width))) (\() -> (let s = (" " + s) in Nothing)) of Just v -> Just v; Nothing -> Just (s))

writePPMP3 :: Bitmap -> String
writePPMP3 b = fromMaybe ("") $
    (let maxv = 0 in (let y = 0 in case whileLoop (\() -> (y < fromMaybe (error "missing") (Map.lookup "height" (b)))) (\() -> (let x = 0 in case whileLoop (\() -> (x < fromMaybe (error "missing") (Map.lookup "width" (b)))) (\() -> (let p = ((fromMaybe (error "missing") (Map.lookup "pixels" (b)) !! y) !! x) in case if (fromMaybe (error "missing") (Map.lookup "R" (p)) > maxv) then (let maxv = fromMaybe (error "missing") (Map.lookup "R" (p)) in Nothing) else Nothing of Just v -> Just v; Nothing -> case if (fromMaybe (error "missing") (Map.lookup "G" (p)) > maxv) then (let maxv = fromMaybe (error "missing") (Map.lookup "G" (p)) in Nothing) else Nothing of Just v -> Just v; Nothing -> case if (fromMaybe (error "missing") (Map.lookup "B" (p)) > maxv) then (let maxv = fromMaybe (error "missing") (Map.lookup "B" (p)) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let x = (_asInt (x) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let y = (_asInt (y) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let out = (((((("P3\n# generated from Bitmap.writeppmp3\n" ++ show fromMaybe (error "missing") (Map.lookup "width" (b))) ++ " ") ++ show fromMaybe (error "missing") (Map.lookup "height" (b))) ++ "\n") ++ show maxv) ++ "\n") in (let numsize = length show maxv in (let y = (_asInt (fromMaybe (error "missing") (Map.lookup "height" (b))) - 1) in case whileLoop (\() -> (_asInt (y) >= 0)) (\() -> (let line = "" in (let x = 0 in case whileLoop (\() -> (x < fromMaybe (error "missing") (Map.lookup "width" (b)))) (\() -> (let p = ((fromMaybe (error "missing") (Map.lookup "pixels" (b)) !! y) !! x) in (let line = ((((((line + "   ") + pad fromMaybe (error "missing") (Map.lookup "R" (p)) numsize) + " ") + pad fromMaybe (error "missing") (Map.lookup "G" (p)) numsize) + " ") + pad fromMaybe (error "missing") (Map.lookup "B" (p)) numsize) in (let x = (_asInt (x) + 1) in Nothing)))) of Just v -> Just v; Nothing -> (let out = (out + line) in case if (_asInt (y) > 0) then (let out = (out + "\n") in Nothing) else (let out = (out + "\n") in Nothing) of Just v -> Just v; Nothing -> (let y = (_asInt (y) - 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (out))))))

main :: ()
main  = fromMaybe (()) $
    (let black = Colour { R = 0, G = 0, B = 0 } in (let white = Colour { R = 255, G = 255, B = 255 } in (let bm = newBitmap 4 4 black in case (let _ = fillRect bm 1 0 1 2 white in Nothing) of Just v -> Just v; Nothing -> case (let _ = setPixel bm 3 3 Colour { R = 127, G = 0, B = 63 } in Nothing) of Just v -> Just v; Nothing -> (let ppm = writePPMP3 bm in (let _ = putStrLn (_showAny (ppm)) in Nothing)))))
  where
    black = Colour { R = 0, G = 0, B = 0 }
    white = Colour { R = 255, G = 255, B = 255 }

main :: IO ()
main = do
    main 
