-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:08Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.Maybe (fromMaybe)
import GHC.Generics (Generic)

data Beast
  = Cat {kind :: String, name :: String}
  | Dog {kind :: String, name :: String}
  deriving (Eq, Show, Generic)

beastKind :: () -> String
beastKind b = (case b of Dog k _ -> k; Cat k _ -> k)

beastName :: () -> String
beastName b = (case b of Dog _ n -> n; Cat _ n -> n)

beastCry :: () -> String
beastCry b = (case b of Dog _ _ -> "Woof"; Cat _ _ -> "Meow")

bprint :: () -> ()
bprint b =
  fromMaybe (()) $
    (let _ = putStrLn ((((((beastName b ++ ", who's a ") ++ beastKind b) ++ ", cries: \"") ++ beastCry b) ++ "\".")) in Nothing)

main :: ()
main =
  fromMaybe (()) $
    (let d = Dog {kind = "labrador", name = "Max"} in (let c = Cat {kind = "siamese", name = "Sammy"} in case (let _ = bprint d in Nothing) of Just v -> Just v; Nothing -> (let _ = bprint c in Nothing)))
  where
    d = Dog {kind = "labrador", name = "Max"}
    c = Cat {kind = "siamese", name = "Sammy"}

main :: IO ()
main = do
  main
