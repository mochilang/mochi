-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:26Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

absf :: Double -> Double
absf x = fromMaybe (0.0) $
  case if (_asDouble (x) < 0.0) then Just ((-(_asInt (x)))) else Nothing of Just v -> Just v; Nothing -> Just (x)

floorf :: Double -> Double
floorf x = (read ((read x :: Int)) :: Double)

indexOf :: String -> String -> Int
indexOf s ch =
  fromMaybe (0) $
    (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> case if (take ((_asInt (i) + 1) - i) (drop i s) == ch) then Just (i) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just ((-1)))

fmtF :: Double -> String
fmtF x =
  fromMaybe ("") $
    (let y = (floorf ((_asDouble (x) * 10000.0) + 0.5) / 10000.0) in (let s = show y in (let dot = indexOf s "." in case if ((_asInt (dot) == 0) - 1) then (let s = (s + ".0000") in Nothing) else (let decs = ((length s - _asInt (dot)) - 1) in if (_asInt (decs) > 4) then (let s = take ((_asInt (dot) + 5) - 0) (drop 0 s) in Nothing) else whileLoop (\() -> (_asInt (decs) < 4)) (\() -> (let s = (s + "0") in (let decs = (_asInt (decs) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (s))))

padInt :: Int -> Int -> String
padInt n width =
  fromMaybe ("") $
    (let s = show n in case whileLoop (\() -> (length s < _asInt (width))) (\() -> (let s = (" " + s) in Nothing)) of Just v -> Just v; Nothing -> Just (s))

padFloat :: Double -> Int -> String
padFloat x width =
  fromMaybe ("") $
    (let s = fmtF x in case whileLoop (\() -> (length s < _asInt (width))) (\() -> (let s = (" " + s) in Nothing)) of Just v -> Just v; Nothing -> Just (s))

avgLen :: Int -> Double
avgLen n =
  fromMaybe (0.0) $
    (let tests = 10000 in (let sum = 0 in (let seed = 1 in (let t = 0 in case whileLoop (\() -> (t < tests)) (\() -> (let visited = [] in (let i = 0 in case whileLoop (\() -> (i < n)) (\() -> (let visited = (visited ++ [False]) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let x = 0 in case whileLoop (\() -> _asBool (not (visited !! x))) (\() -> (let visited = Map.insert x True visited in (let sum = (sum + 1) in (let seed = ((((_asInt (seed) * 1664525) + 1013904223)) `mod` 2147483647) in (let x = (seed `mod` n) in Nothing))))) of Just v -> Just v; Nothing -> (let t = (_asInt (t) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just ((((read sum :: Double)) / _asDouble (tests)))))))
  where
    tests = 10000

ana :: Int -> Double
ana n =
  fromMaybe (0.0) $
    (let nn = (read n :: Double) in (let term = 1.0 in (let sum = 1.0 in (let i = (_asDouble (nn) - 1.0) in case whileLoop (\() -> (_asDouble (i) >= 1.0)) (\() -> (let term = (term * ((i / nn))) in (let sum = (sum + term) in (let i = (_asDouble (i) - 1.0) in Nothing)))) of Just v -> Just v; Nothing -> Just (sum)))))

main :: ()
main =
  fromMaybe (()) $
    (let nmax = 20 in case (let _ = putStrLn (" N    average    analytical    (error)") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("===  =========  ============  =========") in Nothing) of Just v -> Just v; Nothing -> (let n = 1 in whileLoop (\() -> (n <= nmax)) (\() -> (let a = avgLen n in (let b = ana n in (let err = ((absf (a - b) / _asDouble (b)) * 100.0) in (let line = (((((((padInt n 3 ++ "  ") ++ padFloat a 9) ++ "  ") ++ padFloat b 12) ++ "  (") ++ padFloat err 6) ++ "%)") in case (let _ = putStrLn (_showAny (line)) in Nothing) of Just v -> Just v; Nothing -> (let n = (_asInt (n) + 1) in Nothing))))))))
  where
    nmax = 20

main :: IO ()
main = do
  main
