-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:21Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}
module Main where

import Data.Maybe (fromMaybe)
import Data.List (intercalate, isPrefixOf, isInfixOf)
import qualified Data.List as List


forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i | i < end =
            case f i of
              Just v -> Just v
              Nothing -> go (i + 1)
         | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _ | cond () =
            case body () of
              Just v -> Just v
              Nothing -> go ()
         | otherwise = Nothing

avg :: Integral a => [a] -> a
avg xs | null xs = 0
       | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup { key :: k, items :: [a] } deriving (Show)

_group_by :: Ord k => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x:xs) m order =
        let k = keyfn x
        in case Map.lookup k m of
             Just is -> go xs (Map.insert k (is ++ [x]) m) order
             Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
  in [ MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order ]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
  in if idx < 0 || idx >= length s
       then error "index out of range"
       else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine
_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p | null p || p == "-" -> putStr text
         | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
  in h : case t of
            []      -> []
            (_:rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
  in if null ls then [] else
       let heads = if header
                      then _split delim (head ls)
                      else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
           start = if header then 1 else 0
           row line =
             let parts = _split delim line
             in Map.fromList [ (heads !! j, if j < length parts then parts !! j else "")
                             | j <- [0 .. length heads - 1] ]
      in map row (drop start ls)


data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"


primeFactors :: Int -> [Int]
primeFactors n = fromMaybe ([]) $
    (let factors = [] in (let x = n in case whileLoop (\() -> ((x `mod` 2) == 0)) (\() -> (let factors = (factors ++ [2]) in (let x = (read ((div x 2)) :: Int) in Nothing))) of Just v -> Just v; Nothing -> (let p = 3 in case whileLoop (\() -> ((p * p) <= x)) (\() -> case whileLoop (\() -> ((x `mod` p) == 0)) (\() -> (let factors = (factors ++ [p]) in (let x = (read ((x / p)) :: Int) in Nothing))) of Just v -> Just v; Nothing -> (let p = (_asInt (p) + 2) in Nothing)) of Just v -> Just v; Nothing -> case if (_asInt (x) > 1) then (let factors = (factors ++ [x]) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (factors))))

repeat :: String -> Int -> String
repeat ch n = fromMaybe ("") $
    (let s = "" in (let i = 0 in case whileLoop (\() -> (i < n)) (\() -> (let s = (s + ch) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (s)))

D :: Double -> Double
D n = fromMaybe (0.0) $
    case if (_asDouble (n) < 0.0) then Just ((-D (- (_asInt (n))))) else Nothing of Just v -> Just v; Nothing -> case if (_asDouble (n) < 2.0) then Just (0.0) else Nothing of Just v -> Just v; Nothing -> (let factors = [] in case if (_asDouble (n) < 10000000000000000000.0) then (let factors = primeFactors (read (n) :: Int) in Nothing) else (let g = (read ((_asDouble (n) / 100.0)) :: Int) in (let factors = primeFactors g in (let factors = (factors ++ [2]) in (let factors = (factors ++ [2]) in (let factors = (factors ++ [5]) in (let factors = (factors ++ [5]) in Nothing)))))) of Just v -> Just v; Nothing -> (let c = length factors in case if (_asInt (c) == 1) then Just (1.0) else Nothing of Just v -> Just v; Nothing -> case if (_asInt (c) == 2) then Just ((read (((factors !! 0) + (factors !! 1))) :: Double)) else Nothing of Just v -> Just v; Nothing -> (let d = (_asDouble (n) / ((read (factors !! 0) :: Double))) in Just (((D d * ((read (factors !! 0) :: Double))) + _asDouble (d))))))

pad :: Int -> String
pad n = fromMaybe ("") $
    (let s = show n in case whileLoop (\() -> (length s < 4)) (\() -> (let s = (" " + s) in Nothing)) of Just v -> Just v; Nothing -> Just (s))

main :: ()
main  = fromMaybe (()) $
    (let vals = [] in (let n = (-99) in case whileLoop (\() -> (_asInt (n) < 101)) (\() -> (let vals = (vals ++ [(read (D (read n :: Double)) :: Int)]) in (let n = (_asInt (n) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let i = 0 in case whileLoop (\() -> (_asInt (i) < length vals)) (\() -> (let line = "" in (let j = 0 in case whileLoop (\() -> (_asInt (j) < 10)) (\() -> (let line = (line + pad (vals !! (i + j))) in case if (_asInt (j) < 9) then (let line = (line + " ") in Nothing) else Nothing of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing))) of Just v -> Just v; Nothing -> case (let _ = putStrLn (_showAny (line)) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 10) in Nothing)))) of Just v -> Just v; Nothing -> (let pow = 1.0 in (let m = 1 in whileLoop (\() -> (_asInt (m) < 21)) (\() -> (let pow = (_asDouble (pow) * 10.0) in (let exp = show m in case if (length exp < 2) then (let exp = (exp + " ") in Nothing) else Nothing of Just v -> Just v; Nothing -> (let res = (show m ++ repeat "0" (_asInt (m) - 1)) in case (let _ = putStrLn (_showAny (((("D(10^" + exp) + ") / 7 = ") + res))) in Nothing) of Just v -> Just v; Nothing -> (let m = (_asInt (m) + 1) in Nothing))))))))))

main :: IO ()
main = do
    main 
