-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:16Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

d2d :: Double -> Double
d2d d = (d `mod` 360.0)

g2g :: Double -> Double
g2g g = (g `mod` 400.0)

m2m :: Double -> Double
m2m m = (m `mod` 6400.0)

r2r :: Double -> Double
r2r r = (r `mod` ((2.0 * 3.141592653589793)))

d2g :: Double -> Double
d2g d = ((d2d d * 400.0) / 360.0)

d2m :: Double -> Double
d2m d = ((d2d d * 6400.0) / 360.0)

d2r :: Double -> Double
d2r d = ((d2d d * 3.141592653589793) / 180.0)

g2d :: Double -> Double
g2d g = ((g2g g * 360.0) / 400.0)

g2m :: Double -> Double
g2m g = ((g2g g * 6400.0) / 400.0)

g2r :: Double -> Double
g2r g = ((g2g g * 3.141592653589793) / 200.0)

m2d :: Double -> Double
m2d m = ((m2m m * 360.0) / 6400.0)

m2g :: Double -> Double
m2g m = ((m2m m * 400.0) / 6400.0)

m2r :: Double -> Double
m2r m = ((m2m m * 3.141592653589793) / 3200.0)

r2d :: Double -> Double
r2d r = ((r2r r * 180.0) / 3.141592653589793)

r2g :: Double -> Double
r2g r = ((r2r r * 200.0) / 3.141592653589793)

r2m :: Double -> Double
r2m r = ((r2r r * 3200.0) / 3.141592653589793)

main :: ()
main =
  fromMaybe (()) $
    (let angles = [(-2.0), (-1.0), 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1000000.0] in case (let _ = putStrLn ("degrees normalized_degs gradians mils radians") in Nothing) of Just v -> Just v; Nothing -> case foldr (\a acc -> case (let _ = putStrLn (((((((((show a ++ " ") ++ show d2d a) ++ " ") ++ show d2g a) ++ " ") ++ show d2m a) ++ " ") ++ show d2r a)) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing angles of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\ngradians normalized_grds degrees mils radians") in Nothing) of Just v -> Just v; Nothing -> case foldr (\a acc -> case (let _ = putStrLn (((((((((show a ++ " ") ++ show g2g a) ++ " ") ++ show g2d a) ++ " ") ++ show g2m a) ++ " ") ++ show g2r a)) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing angles of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\nmils normalized_mils degrees gradians radians") in Nothing) of Just v -> Just v; Nothing -> case foldr (\a acc -> case (let _ = putStrLn (((((((((show a ++ " ") ++ show m2m a) ++ " ") ++ show m2d a) ++ " ") ++ show m2g a) ++ " ") ++ show m2r a)) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing angles of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\nradians normalized_rads degrees gradians mils") in Nothing) of Just v -> Just v; Nothing -> foldr (\a acc -> case (let _ = putStrLn (((((((((show a ++ " ") ++ show r2r a) ++ " ") ++ show r2d a) ++ " ") ++ show r2g a) ++ " ") ++ show r2m a)) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing angles)
  where
    angles = [(-2.0), (-1.0), 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1000000.0]

main :: IO ()
main = do
  main
