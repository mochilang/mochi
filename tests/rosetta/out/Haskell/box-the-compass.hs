-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:25Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

padLeft :: String -> Int -> String
padLeft s w =
  fromMaybe ("") $
    (let res = "" in (let n = (_asInt (w) - length s) in case whileLoop (\() -> (_asInt (n) > 0)) (\() -> (let res = (res + " ") in (let n = (_asInt (n) - 1) in Nothing))) of Just v -> Just v; Nothing -> Just ((res + s))))

padRight :: String -> Int -> String
padRight s w =
  fromMaybe ("") $
    (let out = s in (let i = length s in case whileLoop (\() -> (i < _asInt (w))) (\() -> (let out = (out + " ") in (let i = (i + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (out)))

indexOf :: String -> String -> Int
indexOf s ch =
  fromMaybe (0) $
    (let i = 0 in case whileLoop (\() -> (i < length s)) (\() -> case if (take ((i + 1) - i) (drop i s) == ch) then Just (i) else Nothing of Just v -> Just v; Nothing -> (let i = (i + 1) in Nothing)) of Just v -> Just v; Nothing -> Just ((-1)))

format2 :: Double -> String
format2 f =
  fromMaybe ("") $
    (let s = show f in (let idx = indexOf s "." in case if (_asInt (idx) < 0) then (let s = (s + ".00") in Nothing) else (let need = (_asInt (idx) + 3) in if (length s > _asInt (need)) then (let s = take (need - 0) (drop 0 s) in Nothing) else whileLoop (\() -> (length s < _asInt (need))) (\() -> (let s = (s + "0") in Nothing))) of Just v -> Just v; Nothing -> Just (s)))

cpx :: Double -> Int
cpx h =
  fromMaybe (0) $
    (let x = (read ((_asDouble (((_asDouble (h) / 11.25))) + 0.5)) :: Int) in (let x = (x `mod` 32) in case if (_asInt (x) < 0) then (let x = (_asInt (x) + 32) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (x)))

degrees2compasspoint :: Double -> String
degrees2compasspoint h = (compassPoint !! cpx h)

compassPoint = ["North", "North by east", "North-northeast", "Northeast by north", "Northeast", "Northeast by east", "East-northeast", "East by north", "East", "East by south", "East-southeast", "Southeast by east", "Southeast", "Southeast by south", "South-southeast", "South by east", "South", "South by west", "South-southwest", "Southwest by south", "Southwest", "Southwest by west", "West-southwest", "West by south", "West", "West by north", "West-northwest", "Northwest by west", "Northwest", "Northwest by north", "North-northwest", "North by west"]

headings = [0.0, 16.87, 16.88, 33.75, 50.62, 50.63, 67.5, 84.37, 84.38, 101.25, 118.12, 118.13, 135.0, 151.87, 151.88, 168.75, 185.62, 185.63, 202.5, 219.37, 219.38, 236.25, 253.12, 253.13, 270.0, 286.87, 286.88, 303.75, 320.62, 320.63, 337.5, 354.37, 354.38]

i = 0

main :: IO ()
main = do
  putStrLn ("Index  Compass point         Degree")
  let loop i = do
        if (i < length headings)
          then do
            let h = (headings !! i)
            let idx = ((i `mod` 32) + 1)
            let cp = degrees2compasspoint h
            putStrLn ((((((padLeft show idx 4 ++ "   ") ++ padRight cp 19) ++ " ") ++ format2 h) ++ "Â°"))
            loop ((i + 1))
          else return ()
  loop i
