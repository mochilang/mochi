-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:05Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

bigTrim :: [Int] -> [Int]
bigTrim a =
  fromMaybe ([]) $
    (let n = length a in case whileLoop (\() -> (((_asInt (n) > 1) && (a !! (_asInt (n) - 1))) == 0)) (\() -> (let a = take ((_asInt (n) - 1) - 0) (drop 0 a) in (let n = (_asInt (n) - 1) in Nothing))) of Just v -> Just v; Nothing -> Just (a))

bigFromInt :: Int -> [Int]
bigFromInt x = fromMaybe ([]) $
  case if (x == 0) then Just ([0]) else Nothing of Just v -> Just v; Nothing -> (let digits = [] in (let n = x in case whileLoop (\() -> (_asInt (n) > 0)) (\() -> (let digits = (digits ++ [(n `mod` 10)]) in (let n = (div n 10) in Nothing))) of Just v -> Just v; Nothing -> Just (digits)))

bigAdd :: [Int] -> [Int] -> [Int]
bigAdd a b =
  fromMaybe ([]) $
    (let res = [] in (let carry = 0 in (let i = 0 in case whileLoop (\() -> (((((_asInt (i) < length a) || i) < length b) || carry) > 0)) (\() -> (let av = 0 in case if (_asInt (i) < length a) then (let av = (a !! i) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let bv = 0 in case if (_asInt (i) < length b) then (let bv = (b !! i) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let s = ((av + bv) + carry) in (let res = (res ++ [(s `mod` 10)]) in (let carry = (div s 10) in (let i = (_asInt (i) + 1) in Nothing))))))) of Just v -> Just v; Nothing -> Just (bigTrim res))))

bigSub :: [Int] -> [Int] -> [Int]
bigSub a b =
  fromMaybe ([]) $
    (let res = [] in (let borrow = 0 in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length a)) (\() -> (let av = (a !! i) in (let bv = 0 in case if (_asInt (i) < length b) then (let bv = (b !! i) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let diff = ((av - bv) - borrow) in case if (_asInt (diff) < 0) then (let diff = (_asInt (diff) + 10) in (let borrow = 1 in Nothing)) else (let borrow = 0 in Nothing) of Just v -> Just v; Nothing -> (let res = (res ++ [diff]) in (let i = (_asInt (i) + 1) in Nothing)))))) of Just v -> Just v; Nothing -> Just (bigTrim res))))

bigToString :: [Int] -> String
bigToString a =
  fromMaybe ("") $
    (let s = "" in (let i = (length a - 1) in case whileLoop (\() -> (_asInt (i) >= 0)) (\() -> (let s = (s + show (a !! i)) in (let i = (_asInt (i) - 1) in Nothing))) of Just v -> Just v; Nothing -> Just (s)))

minInt :: Int -> Int -> Int
minInt a b =
  fromMaybe (0) $
    if (a < b) then Just (a) else Just (b)

cumu :: Int -> [[Int]]
cumu n =
  fromMaybe ([]) $
    (let cache = [[bigFromInt 1]] in (let y = 1 in case whileLoop (\() -> (y <= n)) (\() -> (let row = [bigFromInt 0] in (let x = 1 in case whileLoop (\() -> (x <= _asInt (y))) (\() -> (let val = ((cache !! (_asInt (y) - x)) !! minInt x (_asInt (y) - x)) in (let row = (row ++ [bigAdd (row !! (length row - 1)) val]) in (let x = (x + 1) in Nothing)))) of Just v -> Just v; Nothing -> (let cache = (cache ++ [row]) in (let y = (_asInt (y) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just ((cache !! n))))

row :: Int -> [String]
row n =
  fromMaybe ([]) $
    (let e = cumu n in (let out = [] in (let i = 0 in case whileLoop (\() -> (i < n)) (\() -> (let diff = bigSub (e !! (_asInt (i) + 1)) (e !! i) in (let out = (out ++ [bigToString diff]) in (let i = (_asInt (i) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (out))))
  where
    e = cumu n

x = 1

main :: IO ()
main = do
  putStrLn ("rows:")
  let loop x = do
        if (x < 11)
          then do
            let r = row x
            let line = ""
            let i = 0
            let loop i = do
                  if (_asInt (i) < length r)
                    then do
                      let line = (((line + " ") + (r !! i)) + " ")
                      loop ((_asInt (i) + 1))
                    else return ()
            loop i
            putStrLn (_showAny (line))
            loop ((x + 1))
          else return ()
  loop x
  putStrLn ("")
  putStrLn ("sums:")
  mapM_ (\num -> fromMaybe () ((let r = cumu num in (let _ = putStrLn (((show num ++ " ") ++ bigToString (r !! (length r - 1)))) in Nothing)))) [23, 123, 1234]
