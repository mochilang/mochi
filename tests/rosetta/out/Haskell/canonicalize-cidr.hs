-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:30Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

split :: String -> String -> [String]
split s sep =
  fromMaybe ([]) $
    (let parts = [] in (let cur = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> if (((_asInt ((((length sep > 0) && i) + length sep)) <= length s) && take ((_asInt (i) + length sep) - i) (drop i s)) == sep) then (let parts = (parts ++ [cur]) in (let cur = "" in (let i = (_asInt (i) + length sep) in Nothing))) else (let cur = (cur + take ((_asInt (i) + 1) - i) (drop i s)) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let parts = (parts ++ [cur]) in Just (parts)))))

join :: [String] -> String -> String
join xs sep =
  fromMaybe ("") $
    (let res = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length xs)) (\() -> case if (_asInt (i) > 0) then (let res = (res + sep) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let res = (res + (xs !! i)) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (res)))

repeat :: String -> Int -> String
repeat ch n =
  fromMaybe ("") $
    (let out = "" in (let i = 0 in case whileLoop (\() -> (i < n)) (\() -> (let out = (out + ch) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (out)))

parseIntStr :: String -> Int
parseIntStr str =
  fromMaybe (0) $
    (let i = 0 in (let neg = False in case if (((length str > 0) && take (1 - 0) (drop 0 str)) == "-") then (let neg = True in (let i = 1 in Nothing)) else Nothing of Just v -> Just v; Nothing -> (let n = 0 in (let digits = Map.fromList [("0", (0 :: Int)), ("1", (1 :: Int)), ("2", (2 :: Int)), ("3", (3 :: Int)), ("4", (4 :: Int)), ("5", (5 :: Int)), ("6", (6 :: Int)), ("7", (7 :: Int)), ("8", (8 :: Int)), ("9", (9 :: Int))] in case whileLoop (\() -> (_asInt (i) < length str)) (\() -> (let n = ((_asInt (n) * 10) + _asInt ((digits !! take ((_asInt (i) + 1) - i) (drop i str)))) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> case if _asBool (neg) then (let n = (-(_asInt (n))) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (n)))))

toBinary :: Int -> Int -> String
toBinary n bits =
  fromMaybe ("") $
    (let b = "" in (let val = n in (let i = 0 in case whileLoop (\() -> (i < bits)) (\() -> (let b = (show (val `mod` 2) + b) in (let val = (read ((div val 2)) :: Int) in (let i = (_asInt (i) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (b))))

binToInt :: String -> Int
binToInt bits =
  fromMaybe (0) $
    (let n = 0 in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length bits)) (\() -> (let n = ((_asInt (n) * 2) + parseIntStr take ((_asInt (i) + 1) - i) (drop i bits)) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (n)))

padRight :: String -> Int -> String
padRight s width =
  fromMaybe ("") $
    (let out = s in case whileLoop (\() -> (length out < _asInt (width))) (\() -> (let out = (out + " ") in Nothing)) of Just v -> Just v; Nothing -> Just (out))

canonicalize :: String -> String
canonicalize cidr =
  fromMaybe ("") $
    (let parts = split cidr "/" in (let dotted = (parts !! 0) in (let size = parseIntStr (parts !! 1) in (let binParts = [] in case foldr (\p acc -> case (let binParts = (binParts ++ [toBinary parseIntStr p 8]) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing split dotted "." of Just v -> Just v; Nothing -> (let binary = join binParts "" in (let binary = (take (size - 0) (drop 0 binary) + repeat "0" (32 - _asInt (size))) in (let canonParts = [] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length binary)) (\() -> (let canonParts = (canonParts ++ [show binToInt take ((_asInt (i) + 8) - i) (drop i binary)]) in (let i = (_asInt (i) + 8) in Nothing))) of Just v -> Just v; Nothing -> Just (((join canonParts "." ++ "/") + (parts !! 1)))))))))))
  where
    parts = split cidr "/"
    dotted = (parts !! 0)
    size = parseIntStr (parts !! 1)

tests = ["87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"]

main :: IO ()
main = do
  mapM_ (\t -> putStrLn (((padRight t 18 ++ " -> ") ++ canonicalize t))) tests
