-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:22Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

sinApprox :: Double -> Double
sinApprox x =
  fromMaybe (0.0) $
    (let term = x in (let sum = x in (let n = 1 in case whileLoop (\() -> (_asInt (n) <= 8)) (\() -> (let denom = (read ((((2 * _asInt (n))) * (((2 * _asInt (n)) + 1)))) :: Double) in (let term = ((((-(_asInt (term))) * x) * x) / denom) in (let sum = (sum + term) in (let n = (_asInt (n) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (sum))))

floor :: Double -> Double
floor x =
  fromMaybe (0.0) $
    (let i = (read x :: Int) in case if (((read i :: Double)) > _asDouble (x)) then (let i = (_asInt (i) - 1) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just ((read i :: Double)))

absFloat :: Double -> Double
absFloat x = fromMaybe (0.0) $
  case if (_asDouble (x) < 0.0) then Just ((-(_asInt (x)))) else Nothing of Just v -> Just v; Nothing -> Just (x)

absInt :: Int -> Int
absInt n = fromMaybe (0) $
  case if (_asInt (n) < 0) then Just ((-(_asInt (n)))) else Nothing of Just v -> Just v; Nothing -> Just (n)

parseIntStr :: String -> Int
parseIntStr str =
  fromMaybe (0) $
    (let i = 0 in (let neg = False in case if (((length str > 0) && take (1 - 0) (drop 0 str)) == "-") then (let neg = True in (let i = 1 in Nothing)) else Nothing of Just v -> Just v; Nothing -> (let n = 0 in (let digits = Map.fromList [("0", (0 :: Int)), ("1", (1 :: Int)), ("2", (2 :: Int)), ("3", (3 :: Int)), ("4", (4 :: Int)), ("5", (5 :: Int)), ("6", (6 :: Int)), ("7", (7 :: Int)), ("8", (8 :: Int)), ("9", (9 :: Int))] in case whileLoop (\() -> (_asInt (i) < length str)) (\() -> (let n = ((_asInt (n) * 10) + _asInt ((digits !! take ((_asInt (i) + 1) - i) (drop i str)))) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> case if _asBool (neg) then (let n = (-(_asInt (n))) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (n)))))

parseDate :: String -> [Int]
parseDate s =
  fromMaybe ([]) $
    (let y = parseIntStr take (4 - 0) (drop 0 s) in (let m = parseIntStr take (7 - 5) (drop 5 s) in (let d = parseIntStr take (10 - 8) (drop 8 s) in Just ([y, m, d]))))
  where
    y = parseIntStr take (4 - 0) (drop 0 s)
    m = parseIntStr take (7 - 5) (drop 5 s)
    d = parseIntStr take (10 - 8) (drop 8 s)

leap :: Int -> Bool
leap y = fromMaybe (False) $
  case if ((y `mod` 400) == 0) then Just (True) else Nothing of Just v -> Just v; Nothing -> case if ((y `mod` 100) == 0) then Just (False) else Nothing of Just v -> Just v; Nothing -> Just (((y `mod` 4) == 0))

daysInMonth :: Int -> Int -> Int
daysInMonth y m =
  fromMaybe (0) $
    (let feb = if leap y then 29 else 28 in (let lengths = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] in Just ((lengths !! (_asInt (m) - 1)))))
  where
    feb = if leap y then 29 else 28
    lengths = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

addDays :: Int -> Int -> Int -> Int -> [Int]
addDays y m d n =
  fromMaybe ([]) $
    (let yy = y in (let mm = m in (let dd = d in case if (_asInt (n) >= 0) then (let i = 0 in whileLoop (\() -> (i < n)) (\() -> (let dd = (_asInt (dd) + 1) in case if (_asInt (dd) > daysInMonth yy mm) then (let dd = 1 in (let mm = (_asInt (mm) + 1) in if (_asInt (mm) > 12) then (let mm = 1 in (let yy = (_asInt (yy) + 1) in Nothing)) else Nothing)) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)))) else (let i = 0 in whileLoop (\() -> (i > n)) (\() -> (let dd = (_asInt (dd) - 1) in case if (_asInt (dd) < 1) then (let mm = (_asInt (mm) - 1) in case if (_asInt (mm) < 1) then (let mm = 12 in (let yy = (_asInt (yy) - 1) in Nothing)) else Nothing of Just v -> Just v; Nothing -> (let dd = daysInMonth yy mm in Nothing)) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) - 1) in Nothing)))) of Just v -> Just v; Nothing -> Just ([yy, mm, dd]))))

pad2 :: Int -> String
pad2 n = fromMaybe ("") $
  case if (_asInt (n) < 10) then Just (("0" ++ show n)) else Nothing of Just v -> Just v; Nothing -> Just (show n)

dateString :: Int -> Int -> Int -> String
dateString y m d = ((((show y ++ "-") ++ pad2 m) ++ "-") ++ pad2 d)

day :: Int -> Int -> Int -> Int
day y m d =
  fromMaybe (0) $
    (let part1 = (367 * _asInt (y)) in (let part2 = (read ((div ((7 * ((read ((y + ((div ((_asInt (m) + 9)) 12)))) :: Int)))) 4)) :: Int) in (let part3 = (read ((div ((275 * _asInt (m))) 9)) :: Int) in Just ((_asInt ((((part1 - part2) + part3) + d)) - 730530)))))
  where
    part1 = (367 * _asInt (y))
    part2 = (read ((div ((7 * ((read ((y + ((div ((_asInt (m) + 9)) 12)))) :: Int)))) 4)) :: Int)
    part3 = (read ((div ((275 * _asInt (m))) 9)) :: Int)

biorhythms :: String -> String -> ()
biorhythms birth target =
  fromMaybe (()) $
    (let bparts = parseDate birth in (let by = (bparts !! 0) in (let bm = (bparts !! 1) in (let bd = (bparts !! 2) in (let tparts = parseDate target in (let ty = (tparts !! 0) in (let tm = (tparts !! 1) in (let td = (tparts !! 2) in (let diff = absInt (day ty tm td - day by bm bd) in case (let _ = putStrLn (_showAny (((("Born " + birth) + ", Target ") + target))) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("Day " ++ show diff)) in Nothing) of Just v -> Just v; Nothing -> (let cycles = ["Physical day ", "Emotional day", "Mental day   "] in (let lengths = [23, 28, 33] in (let quadrants = [["up and rising", "peak"], ["up but falling", "transition"], ["down and falling", "valley"], ["down but rising", "transition"]] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < 3)) (\() -> (let length = (lengths !! i) in (let cycle = (cycles !! i) in (let position = (diff `mod` length) in (let quadrant = (((_asInt (position) * 4)) / length) in (let percent = sinApprox (((2.0 * PI) * ((read position :: Double))) / ((read length :: Double))) in (let percent = (floor (_asDouble (percent) * 1000.0) / 10.0) in (let description = "" in case if (_asDouble (percent) > 95.0) then (let description = " peak" in Nothing) else if (_asDouble (percent) < ((-95.0))) then (let description = " valley" in Nothing) else if (absFloat percent < 5.0) then (let description = " critical transition" in Nothing) else (let daysToAdd = ((div (((_asInt (quadrant) + 1)) * length) 4) - _asInt (position)) in (let res = addDays ty tm td daysToAdd in (let ny = (res !! 0) in (let nm = (res !! 1) in (let nd = (res !! 2) in (let transition = dateString ny nm nd in (let trend = ((quadrants !! quadrant) !! 0) in (let next = ((quadrants !! quadrant) !! 1) in (let pct = show percent in case if not contains pct "." then (let pct = (pct + ".0") in Nothing) else Nothing of Just v -> Just v; Nothing -> (let description = ((((((((" " + pct) + "% (") + trend) + ", next ") + next) + " ") + transition) + ")") in Nothing)))))))))) of Just v -> Just v; Nothing -> (let posStr = show position in case if (_asInt (position) < 10) then (let posStr = (" " + posStr) in Nothing) else Nothing of Just v -> Just v; Nothing -> case (let _ = putStrLn (_showAny ((((cycle + posStr) + " : ") + description))) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)))))))))) of Just v -> Just v; Nothing -> (let _ = putStrLn ("") in Nothing))))))))))))))
  where
    bparts = parseDate birth
    by = (bparts !! 0)
    bm = (bparts !! 1)
    bd = (bparts !! 2)
    tparts = parseDate target
    ty = (tparts !! 0)
    tm = (tparts !! 1)
    td = (tparts !! 2)
    diff = absInt (day ty tm td - day by bm bd)

main :: ()
main =
  fromMaybe (()) $
    (let pairs = [["1943-03-09", "1972-07-11"], ["1809-01-12", "1863-11-19"], ["1809-02-12", "1863-11-19"]] in (let idx = 0 in whileLoop (\() -> (_asInt (idx) < length pairs)) (\() -> (let p = (pairs !! idx) in case (let _ = biorhythms (p !! 0) (p !! 1) in Nothing) of Just v -> Just v; Nothing -> (let idx = (_asInt (idx) + 1) in Nothing)))))
  where
    pairs = [["1943-03-09", "1972-07-11"], ["1809-01-12", "1863-11-19"], ["1809-02-12", "1863-11-19"]]

PI = 3.141592653589793

TWO_PI = 6.283185307179586

main :: IO ()
main = do
  main
