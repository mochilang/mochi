-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:10Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

pow10 :: Int -> Int
pow10 exp =
  fromMaybe (0) $
    (let n = 1 in (let i = 0 in case whileLoop (\() -> (i < exp)) (\() -> (let n = (_asInt (n) * 10) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (n)))

totient :: Int -> Int
totient n =
  fromMaybe (0) $
    (let tot = n in (let nn = n in (let i = 2 in case whileLoop (\() -> ((i * i) <= nn)) (\() -> case if ((nn `mod` i) == 0) then case whileLoop (\() -> ((nn `mod` i) == 0)) (\() -> (let nn = (nn / i) in Nothing)) of Just v -> Just v; Nothing -> (let tot = ((tot - tot) / i) in Nothing) else Nothing of Just v -> Just v; Nothing -> case if (_asInt (i) == 2) then (let i = 1 in Nothing) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 2) in Nothing)) of Just v -> Just v; Nothing -> case if (_asInt (nn) > 1) then (let tot = ((tot - tot) / nn) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (tot))))

getPerfectPowers :: Int -> ()
getPerfectPowers maxExp =
  fromMaybe (()) $
    (let upper = pow10 maxExp in (let i = 2 in whileLoop (\() -> ((i * i) < upper)) (\() -> (let p = (i * i) in case whileLoop (\() -> True) (\() -> (let p = (p * i) in case if (p >= upper) then Just () else Nothing of Just v -> Just v; Nothing -> (let pps = Map.insert p True pps in Nothing))) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)))))
  where
    upper = pow10 maxExp

getAchilles :: Int -> Int -> Map.Map Int Bool
getAchilles minExp maxExp =
  fromMaybe (()) $
    (let lower = pow10 minExp in (let upper = pow10 maxExp in (let achilles = Map.fromList [] in (let b = 1 in case whileLoop (\() -> (((b * b) * b) < upper)) (\() -> (let b3 = ((b * b) * b) in (let a = 1 in case whileLoop (\() -> True) (\() -> (let p = ((b3 * a) * a) in case if (p >= upper) then Just () else Nothing of Just v -> Just v; Nothing -> case if (p >= lower) then if not (Map.member p pps) then (let achilles = Map.insert p True achilles in Nothing) else Nothing else Nothing of Just v -> Just v; Nothing -> (let a = (_asInt (a) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let b = (_asInt (b) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (achilles)))))
  where
    lower = pow10 minExp
    upper = pow10 maxExp

sortInts :: [Int] -> [Int]
sortInts xs =
  fromMaybe ([]) $
    (let res = [] in (let tmp = xs in case whileLoop (\() -> (length tmp > 0)) (\() -> (let min = (tmp !! 0) in (let idx = 0 in (let i = 1 in case whileLoop (\() -> (_asInt (i) < length tmp)) (\() -> case if ((tmp !! i) < min) then (let min = (tmp !! i) in (let idx = i in Nothing)) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let res = (res + [min]) in (let out = [] in (let j = 0 in case whileLoop (\() -> (_asInt (j) < length tmp)) (\() -> case if (j /= idx) then (let out = (out + [(tmp !! j)]) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let tmp = out in Nothing)))))))) of Just v -> Just v; Nothing -> Just (res)))

pad :: Int -> Int -> String
pad n width =
  fromMaybe ("") $
    (let s = show n in case whileLoop (\() -> (length s < _asInt (width))) (\() -> (let s = (" " + s) in Nothing)) of Just v -> Just v; Nothing -> Just (s))

main :: ()
main =
  fromMaybe (()) $
    (let maxDigits = 15 in case (let _ = getPerfectPowers maxDigits in Nothing) of Just v -> Just v; Nothing -> (let achSet = getAchilles 1 5 in (let ach = [] in case foldr (\k acc -> case (let ach = (ach + [k]) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing fromMaybe (error "missing") (Map.lookup "keys" (achSet)) of Just v -> Just v; Nothing -> (let ach = sortInts ach in case (let _ = putStrLn ("First 50 Achilles numbers:") in Nothing) of Just v -> Just v; Nothing -> (let i = 0 in case whileLoop (\() -> (_asInt (i) < 50)) (\() -> (let line = "" in (let j = 0 in case whileLoop (\() -> (_asInt (j) < 10)) (\() -> (let line = (line + pad (ach !! i) 4) in case if (_asInt (j) < 9) then (let line = (line + " ") in Nothing) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in (let j = (_asInt (j) + 1) in Nothing)))) of Just v -> Just v; Nothing -> (let _ = putStrLn (_showAny (line)) in Nothing)))) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\nFirst 30 strong Achilles numbers:") in Nothing) of Just v -> Just v; Nothing -> (let strong = [] in (let count = 0 in (let idx = 0 in case whileLoop (\() -> (count < 30)) (\() -> (let tot = totient (ach !! idx) in case if _asBool (elem tot achSet) then (let strong = (strong + [(ach !! idx)]) in (let count = (count + 1) in Nothing)) else Nothing of Just v -> Just v; Nothing -> (let idx = (_asInt (idx) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let i = 0 in case whileLoop (\() -> (_asInt (i) < 30)) (\() -> (let line = "" in (let j = 0 in case whileLoop (\() -> (_asInt (j) < 10)) (\() -> (let line = (line + pad (strong !! i) 5) in case if (_asInt (j) < 9) then (let line = (line + " ") in Nothing) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in (let j = (_asInt (j) + 1) in Nothing)))) of Just v -> Just v; Nothing -> (let _ = putStrLn (_showAny (line)) in Nothing)))) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\nNumber of Achilles numbers with:") in Nothing) of Just v -> Just v; Nothing -> (let counts = [1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383] in (let d = 2 in whileLoop (\() -> (d <= maxDigits)) (\() -> (let c = (counts !! (_asInt (d) - 2)) in case (let _ = putStrLn (((pad d 2 ++ " digits: ") ++ show c)) in Nothing) of Just v -> Just v; Nothing -> (let d = (_asInt (d) + 1) in Nothing))))))))))))))
  where
    maxDigits = 15

pps = Map.fromList []

main :: IO ()
main = do
  main
