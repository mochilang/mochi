-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:24Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

_updateAt :: Int -> (a -> a) -> [a] -> [a]
_updateAt i f xs = take i xs ++ [f (xs !! i)] ++ drop (i + 1) xs

initGrid :: Int -> [[String]]
initGrid size =
  fromMaybe ([]) $
    (let g = [] in (let y = 0 in case whileLoop (\() -> (y < size)) (\() -> (let row = [] in (let x = 0 in case whileLoop (\() -> (x < size)) (\() -> (let row = (row ++ [" "]) in (let x = (_asInt (x) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let g = (g ++ [row]) in (let y = (_asInt (y) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (g)))

set :: [[String]] -> Int -> Int -> ()
set g x y =
  fromMaybe (()) $
    if (((((((_asInt (x) >= 0) && x) < length (g !! 0)) && y) >= 0) && y) < length g) then (let g = _updateAt y (\_ -> _updateAt x (const "#") (g !! y)) g in Nothing) else Nothing

circle :: Int -> [[String]]
circle r =
  fromMaybe ([]) $
    (let size = ((_asInt (r) * 2) + 1) in (let g = initGrid size in (let x = r in (let y = 0 in (let err = (1 - _asInt (r)) in case whileLoop (\() -> (y <= x)) (\() -> case (let _ = set g (r + x) (r + y) in Nothing) of Just v -> Just v; Nothing -> case (let _ = set g (r + y) (r + x) in Nothing) of Just v -> Just v; Nothing -> case (let _ = set g (r - x) (r + y) in Nothing) of Just v -> Just v; Nothing -> case (let _ = set g (r - y) (r + x) in Nothing) of Just v -> Just v; Nothing -> case (let _ = set g (r - x) (r - y) in Nothing) of Just v -> Just v; Nothing -> case (let _ = set g (r - y) (r - x) in Nothing) of Just v -> Just v; Nothing -> case (let _ = set g (r + x) (r - y) in Nothing) of Just v -> Just v; Nothing -> case (let _ = set g (r + y) (r - x) in Nothing) of Just v -> Just v; Nothing -> (let y = (_asInt (y) + 1) in if (_asInt (err) < 0) then (let err = (((_asInt (err) + 2) * _asInt (y)) + 1) in Nothing) else (let x = (_asInt (x) - 1) in (let err = (((_asInt (err) + 2) * _asInt (((y - x)))) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (g))))))
  where
    size = ((_asInt (r) * 2) + 1)

trimRight :: [String] -> String
trimRight row =
  fromMaybe ("") $
    (let end = length row in case whileLoop (\() -> (((_asInt (end) > 0) && (row !! (_asInt (end) - 1))) == " ")) (\() -> (let end = (_asInt (end) - 1) in Nothing)) of Just v -> Just v; Nothing -> (let s = "" in (let i = 0 in case whileLoop (\() -> (i < end)) (\() -> (let s = (s + (row !! i)) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (s))))

g = circle 10

main :: IO ()
main = do
  mapM_ (\row -> putStrLn (trimRight row)) g
