-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:26Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

sinApprox :: Double -> Double
sinApprox x =
  fromMaybe (0.0) $
    (let term = x in (let sum = x in (let n = 1 in case whileLoop (\() -> (_asInt (n) <= 8)) (\() -> (let denom = (read ((((2 * _asInt (n))) * (((2 * _asInt (n)) + 1)))) :: Double) in (let term = ((((-(_asInt (term))) * x) * x) / denom) in (let sum = (sum + term) in (let n = (_asInt (n) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (sum))))

cosApprox :: Double -> Double
cosApprox x =
  fromMaybe (0.0) $
    (let term = 1.0 in (let sum = 1.0 in (let n = 1 in case whileLoop (\() -> (_asInt (n) <= 8)) (\() -> (let denom = (read (((((2 * _asInt (n)) - 1)) * ((2 * _asInt (n))))) :: Double) in (let term = ((((-(_asInt (term))) * x) * x) / denom) in (let sum = (sum + term) in (let n = (_asInt (n) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (sum))))

atanApprox :: Double -> Double
atanApprox x = fromMaybe (0.0) $
  case if (_asDouble (x) > 1.0) then Just ((((PI / 2.0) - _asDouble (x)) / _asDouble (((_asDouble ((x * x)) + 0.28))))) else Nothing of Just v -> Just v; Nothing -> case if (_asDouble (x) < ((-1.0))) then Just (((((-PI) / 2.0) - _asDouble (x)) / _asDouble (((_asDouble ((x * x)) + 0.28))))) else Nothing of Just v -> Just v; Nothing -> Just ((x / ((((1.0 + 0.28) * _asDouble (x)) * _asDouble (x)))))

atan2Approx :: Double -> Double -> Double
atan2Approx y x = fromMaybe (0.0) $
  case if (_asDouble (x) > 0.0) then Just (atanApprox (y / x)) else Nothing of Just v -> Just v; Nothing -> case if (_asDouble (x) < 0.0) then case if (_asDouble (y) >= 0.0) then Just ((atanApprox (y / x) + PI)) else Nothing of Just v -> Just v; Nothing -> Just ((atanApprox (y / x) - PI)) else Nothing of Just v -> Just v; Nothing -> case if (_asDouble (y) > 0.0) then Just ((PI / 2.0)) else Nothing of Just v -> Just v; Nothing -> case if (_asDouble (y) < 0.0) then Just (((-PI) / 2.0)) else Nothing of Just v -> Just v; Nothing -> Just (0.0)

digit :: String -> Int
digit ch =
  fromMaybe (0) $
    (let digits = "0123456789" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length digits)) (\() -> case if (take ((_asInt (i) + 1) - i) (drop i digits) == ch) then Just (i) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just (0)))
  where
    digits = "0123456789"

parseTwo :: String -> Int -> Int
parseTwo s idx = ((digit take ((_asInt (idx) + 1) - idx) (drop idx s) * 10) + digit take ((_asInt (idx) + 2) - (_asInt (idx) + 1)) (drop (_asInt (idx) + 1) s))

parseSec :: String -> Double
parseSec s =
  fromMaybe (0.0) $
    (let h = parseTwo s 0 in (let m = parseTwo s 3 in (let sec = parseTwo s 6 in Just ((read (((_asInt ((((_asInt (h) * 60) + _asInt (m)))) * 60) + _asInt (sec))) :: Double)))))
  where
    h = parseTwo s 0
    m = parseTwo s 3
    sec = parseTwo s 6

pad :: Int -> String
pad n = fromMaybe ("") $
  case if (_asInt (n) < 10) then Just (("0" ++ show n)) else Nothing of Just v -> Just v; Nothing -> Just (show n)

meanTime :: [String] -> String
meanTime times =
  fromMaybe ("") $
    (let ssum = 0.0 in (let csum = 0.0 in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length times)) (\() -> (let sec = parseSec (times !! i) in (let ang = (((_asDouble (sec) * 2.0) * PI) / 86400.0) in (let ssum = (_asDouble (ssum) + sinApprox ang) in (let csum = (_asDouble (csum) + cosApprox ang) in (let i = (_asInt (i) + 1) in Nothing)))))) of Just v -> Just v; Nothing -> (let theta = atan2Approx ssum csum in (let frac = (_asDouble (theta) / ((2.0 * PI))) in case whileLoop (\() -> (_asDouble (frac) < 0.0)) (\() -> (let frac = (_asDouble (frac) + 1.0) in Nothing)) of Just v -> Just v; Nothing -> (let total = (_asDouble (frac) * 86400.0) in (let si = (read total :: Int) in (let h = (read ((div si 3600)) :: Int) in (let m = (read ((div ((si `mod` 3600)) 60)) :: Int) in (let s = (read ((si `mod` 60)) :: Int) in Just (((((pad h ++ ":") ++ pad m) ++ ":") ++ pad s))))))))))))

main :: ()
main =
  fromMaybe (()) $
    (let inputs = ["23:00:17", "23:40:20", "00:12:45", "00:17:19"] in (let _ = putStrLn (meanTime inputs) in Nothing))
  where
    inputs = ["23:00:17", "23:40:20", "00:12:45", "00:17:19"]

PI = 3.141592653589793

main :: IO ()
main = do
  main
