-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:26Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

indexOfStr :: String -> String -> Int
indexOfStr h n =
  fromMaybe (0) $
    (let hlen = length h in (let nlen = length n in case if (_asInt (nlen) == 0) then Just (0) else Nothing of Just v -> Just v; Nothing -> (let i = 0 in case whileLoop (\() -> ((i <= hlen) - nlen)) (\() -> case if (take ((i + nlen) - i) (drop i h) == n) then Just (i) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just ((-1)))))
  where
    hlen = length h
    nlen = length n

stringSearchSingle :: String -> String -> Int
stringSearchSingle h n = indexOfStr h n

stringSearch :: String -> String -> [Int]
stringSearch h n =
  fromMaybe ([]) $
    (let result = [] in (let start = 0 in (let hlen = length h in (let nlen = length n in case whileLoop (\() -> (start < hlen)) (\() -> (let idx = indexOfStr take (hlen - start) (drop start h) n in if (_asInt (idx) >= 0) then (let result = (result ++ [(start + idx)]) in (let start = ((start + idx) + nlen) in Nothing)) else Just ())) of Just v -> Just v; Nothing -> Just (result)))))

display :: [Int] -> String
display nums =
  fromMaybe ("") $
    (let s = "[" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length nums)) (\() -> case if (_asInt (i) > 0) then (let s = (s + ", ") in Nothing) else Nothing of Just v -> Just v; Nothing -> (let s = (s + show (nums !! i)) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let s = (s + "]") in Just (s))))

main :: ()
main =
  fromMaybe (()) $
    (let texts = ["GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."] in (let patterns = ["TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length texts)) (\() -> case (let _ = putStrLn (_showAny (((("text" ++ show (_asInt (i) + 1)) ++ " = ") + (texts !! i)))) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("") in Nothing) of Just v -> Just v; Nothing -> (let j = 0 in whileLoop (\() -> (_asInt (j) < length texts)) (\() -> (let idxs = stringSearch (texts !! j) (patterns !! j) in case (let _ = putStrLn (_showAny (((((("Found \"" + (patterns !! j)) + "\" in 'text") + show (_asInt (j) + 1)) + "' at indexes ") + display idxs))) in Nothing) of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing)))))))
  where
    texts = ["GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."]
    patterns = ["TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"]

main :: IO ()
main = do
  main
