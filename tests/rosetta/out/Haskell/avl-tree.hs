-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:17Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}
module Main where

import Data.Maybe (fromMaybe)
import qualified Data.Map as Map
import Data.List (intercalate, isPrefixOf, isInfixOf)
import qualified Data.List as List


forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i | i < end =
            case f i of
              Just v -> Just v
              Nothing -> go (i + 1)
         | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _ | cond () =
            case body () of
              Just v -> Just v
              Nothing -> go ()
         | otherwise = Nothing

avg :: Integral a => [a] -> a
avg xs | null xs = 0
       | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup { key :: k, items :: [a] } deriving (Show)

_group_by :: Ord k => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x:xs) m order =
        let k = keyfn x
        in case Map.lookup k m of
             Just is -> go xs (Map.insert k (is ++ [x]) m) order
             Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
  in [ MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order ]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
  in if idx < 0 || idx >= length s
       then error "index out of range"
       else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine
_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p | null p || p == "-" -> putStr text
         | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
  in h : case t of
            []      -> []
            (_:rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
  in if null ls then [] else
       let heads = if header
                      then _split delim (head ls)
                      else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
           start = if header then 1 else 0
           row line =
             let parts = _split delim line
             in Map.fromList [ (heads !! j, if j < length parts then parts !! j else "")
                             | j <- [0 .. length heads - 1] ]
      in map row (drop start ls)


data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"


Node :: Int -> Map.Map String ()
Node _data = Map.fromList [("Data", _data), ("Balance", VInt (0)), ("Link", VString ([0, 0]))]

getLink :: Map.Map String () -> Int -> ()
getLink n dir = (((n !! "Link")) !! dir)

setLink :: Map.Map String () -> Int -> () -> ()
setLink n dir v = fromMaybe (()) $
    (let links = (n !! "Link") in (let links = Map.insert dir v links in (let n = Map.insert "Link" links n in Nothing)))

opp :: Int -> Int
opp dir = (1 - _asInt (dir))

single :: Map.Map String () -> Int -> Map.Map String ()
single root dir = fromMaybe (()) $
    (let tmp = getLink root opp dir in case (let _ = setLink root opp dir getLink tmp dir in Nothing) of Just v -> Just v; Nothing -> case (let _ = setLink tmp dir root in Nothing) of Just v -> Just v; Nothing -> Just (tmp))

double :: Map.Map String () -> Int -> Map.Map String ()
double root dir = fromMaybe (()) $
    (let tmp = getLink getLink root opp dir dir in case (let _ = setLink getLink root opp dir dir getLink tmp opp dir in Nothing) of Just v -> Just v; Nothing -> case (let _ = setLink tmp opp dir getLink root opp dir in Nothing) of Just v -> Just v; Nothing -> case (let _ = setLink root opp dir tmp in Nothing) of Just v -> Just v; Nothing -> (let tmp = getLink root opp dir in case (let _ = setLink root opp dir getLink tmp dir in Nothing) of Just v -> Just v; Nothing -> case (let _ = setLink tmp dir root in Nothing) of Just v -> Just v; Nothing -> Just (tmp)))

adjustBalance :: Map.Map String () -> Int -> Int -> ()
adjustBalance root dir bal = fromMaybe (()) $
    (let n = getLink root dir in (let nn = getLink n opp dir in case if (_asInt ((nn !! "Balance")) == 0) then (let root = Map.insert "Balance" 0 root in (let n = Map.insert "Balance" 0 n in Nothing)) else if ((nn !! "Balance") == bal) then (let root = Map.insert "Balance" (- (_asInt (bal))) root in (let n = Map.insert "Balance" 0 n in Nothing)) else (let root = Map.insert "Balance" 0 root in (let n = Map.insert "Balance" bal n in Nothing)) of Just v -> Just v; Nothing -> (let nn = Map.insert "Balance" 0 nn in Nothing)))

insertBalance :: Map.Map String () -> Int -> Map.Map String ()
insertBalance root dir = fromMaybe (()) $
    (let n = getLink root dir in (let bal = ((2 * _asInt (dir)) - 1) in case if ((n !! "Balance") == bal) then (let root = Map.insert "Balance" 0 root in (let n = Map.insert "Balance" 0 n in Just (single root opp dir))) else Nothing of Just v -> Just v; Nothing -> case (let _ = adjustBalance root dir bal in Nothing) of Just v -> Just v; Nothing -> Just (double root opp dir)))

insertR :: () -> Int -> Map.Map String ()
insertR root _data = fromMaybe (()) $
    case if (root == 0) then Just (Map.fromList [("node", VString (Node _data)), ("done", VBool (False))]) else Nothing of Just v -> Just v; Nothing -> (let node = root in (let dir = 0 in case if (((read (node !! "Data") :: Int)) < _asInt (_data)) then (let dir = 1 in Nothing) else Nothing of Just v -> Just v; Nothing -> (let r = insertR getLink node dir _data in case (let _ = setLink node dir (r !! "node") in Nothing) of Just v -> Just v; Nothing -> case if _asBool ((r !! "done")) then Just (Map.fromList [("node", node), ("done", VBool (True))]) else Nothing of Just v -> Just v; Nothing -> (let node = Map.insert "Balance" (((read (node !! "Balance") :: Int)) + _asInt ((((2 * _asInt (dir)) - 1)))) node in case if (_asInt ((node !! "Balance")) == 0) then Just (Map.fromList [("node", node), ("done", VBool (True))]) else Nothing of Just v -> Just v; Nothing -> case if (((_asInt ((node !! "Balance")) == 1) || (node !! "Balance")) == ((-1))) then Just (Map.fromList [("node", node), ("done", VBool (False))]) else Nothing of Just v -> Just v; Nothing -> Just (Map.fromList [("node", VString (insertBalance node dir)), ("done", VBool (True))])))))

Insert :: () -> Int -> ()
Insert tree _data = fromMaybe (()) $
    (let r = insertR tree _data in Just ((r !! "node")))
  where
    r = insertR tree _data

removeBalance :: Map.Map String () -> Int -> Map.Map String ()
removeBalance root dir = fromMaybe (()) $
    (let n = getLink root opp dir in (let bal = ((2 * _asInt (dir)) - 1) in case if ((n !! "Balance") == ((- (_asInt (bal))))) then (let root = Map.insert "Balance" 0 root in (let n = Map.insert "Balance" 0 n in Just (Map.fromList [("node", VString (single root dir)), ("done", VBool (False))]))) else Nothing of Just v -> Just v; Nothing -> case if ((n !! "Balance") == bal) then case (let _ = adjustBalance root opp dir ((- (_asInt (bal)))) in Nothing) of Just v -> Just v; Nothing -> Just (Map.fromList [("node", VString (double root dir)), ("done", VBool (False))]) else Nothing of Just v -> Just v; Nothing -> (let root = Map.insert "Balance" (- (_asInt (bal))) root in (let n = Map.insert "Balance" bal n in Just (Map.fromList [("node", VString (single root dir)), ("done", VBool (True))])))))

removeR :: () -> Int -> Map.Map String ()
removeR root _data = fromMaybe (()) $
    case if (root == 0) then Just (Map.fromList [("node", 0), ("done", VBool (False))]) else Nothing of Just v -> Just v; Nothing -> (let node = root in case if (((read (node !! "Data") :: Int)) == _asInt (_data)) then case if (getLink node 0 == 0) then Just (Map.fromList [("node", getLink node 1), ("done", VBool (False))]) else Nothing of Just v -> Just v; Nothing -> case if (getLink node 1 == 0) then Just (Map.fromList [("node", getLink node 0), ("done", VBool (False))]) else Nothing of Just v -> Just v; Nothing -> (let heir = getLink node 0 in case whileLoop (\() -> (getLink heir 1 /= 0)) (\() -> (let heir = getLink heir 1 in Nothing)) of Just v -> Just v; Nothing -> (let node = Map.insert "Data" (heir !! "Data") node in (let _data = (read (heir !! "Data") :: Int) in Nothing))) else Nothing of Just v -> Just v; Nothing -> (let dir = 0 in case if (((read (node !! "Data") :: Int)) < _asInt (_data)) then (let dir = 1 in Nothing) else Nothing of Just v -> Just v; Nothing -> (let r = removeR getLink node dir _data in case (let _ = setLink node dir (r !! "node") in Nothing) of Just v -> Just v; Nothing -> case if _asBool ((r !! "done")) then Just (Map.fromList [("node", node), ("done", VBool (True))]) else Nothing of Just v -> Just v; Nothing -> (let node = Map.insert "Balance" (((((read (node !! "Balance") :: Int)) + 1) - 2) * _asInt (dir)) node in case if (((_asInt ((node !! "Balance")) == 1) || (node !! "Balance")) == ((-1))) then Just (Map.fromList [("node", node), ("done", VBool (True))]) else Nothing of Just v -> Just v; Nothing -> case if (_asInt ((node !! "Balance")) == 0) then Just (Map.fromList [("node", node), ("done", VBool (False))]) else Nothing of Just v -> Just v; Nothing -> Just (removeBalance node dir)))))

Remove :: () -> Int -> ()
Remove tree _data = fromMaybe (()) $
    (let r = removeR tree _data in Just ((r !! "node")))
  where
    r = removeR tree _data

indentStr :: Int -> String
indentStr n = fromMaybe ("") $
    (let s = "" in (let i = 0 in case whileLoop (\() -> (i < n)) (\() -> (let s = (s + " ") in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (s)))

dumpNode :: () -> Int -> Bool -> ()
dumpNode node indent comma = fromMaybe (()) $
    (let sp = indentStr indent in if (node == 0) then (let line = (sp + "null") in case if _asBool (comma) then (let line = (line + ",") in Nothing) else Nothing of Just v -> Just v; Nothing -> (let _ = putStrLn (_showAny (line)) in Nothing)) else case (let _ = putStrLn (_showAny ((sp + "{"))) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((((indentStr (_asInt (indent) + 3) ++ "\"Data\": ") ++ show (node !! "Data")) ++ ",")) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((((indentStr (_asInt (indent) + 3) ++ "\"Balance\": ") ++ show (node !! "Balance")) ++ ",")) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((indentStr (_asInt (indent) + 3) ++ "\"Link\": [")) in Nothing) of Just v -> Just v; Nothing -> case (let _ = dumpNode getLink node 0 (_asInt (indent) + 6) True in Nothing) of Just v -> Just v; Nothing -> case (let _ = dumpNode getLink node 1 (_asInt (indent) + 6) False in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((indentStr (_asInt (indent) + 3) ++ "]")) in Nothing) of Just v -> Just v; Nothing -> (let end = (sp + "}") in case if _asBool (comma) then (let end = (end + ",") in Nothing) else Nothing of Just v -> Just v; Nothing -> (let _ = putStrLn (_showAny (end)) in Nothing)))
  where
    sp = indentStr indent

dump :: () -> Int -> ()
dump node indent = fromMaybe (()) $
    (let _ = dumpNode node indent False in Nothing)

main :: ()
main  = fromMaybe (()) $
    (let tree = 0 in case (let _ = putStrLn ("Empty tree:") in Nothing) of Just v -> Just v; Nothing -> case (let _ = dump tree 0 in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("Insert test:") in Nothing) of Just v -> Just v; Nothing -> (let tree = Insert tree 3 in (let tree = Insert tree 1 in (let tree = Insert tree 4 in (let tree = Insert tree 1 in (let tree = Insert tree 5 in case (let _ = dump tree 0 in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("Remove test:") in Nothing) of Just v -> Just v; Nothing -> (let tree = Remove tree 3 in (let tree = Remove tree 1 in (let t = tree in (let t = Map.insert "Balance" 0 t in (let tree = t in (let _ = dump tree 0 in Nothing))))))))))))

main :: IO ()
main = do
    main 
