-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:20Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

square_to_maps :: [[String]] -> Map.Map String ()
square_to_maps square =
  fromMaybe (()) $
    (let emap = Map.fromList [] in (let dmap = Map.fromList [] in (let x = 0 in case whileLoop (\() -> (_asInt (x) < length square)) (\() -> (let row = (square !! x) in (let y = 0 in case whileLoop (\() -> (_asInt (y) < length row)) (\() -> (let ch = (row !! y) in (let emap = Map.insert ch [x, y] emap in (let dmap = Map.insert ((show x ++ ",") ++ show y) ch dmap in (let y = (_asInt (y) + 1) in Nothing))))) of Just v -> Just v; Nothing -> (let x = (_asInt (x) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (Map.fromList [("e", emap), ("d", dmap)]))))

remove_space :: String -> Map.Map String [Int] -> String
remove_space text emap =
  fromMaybe ("") $
    (let s = upper text in (let out = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> (let ch = take ((_asInt (i) + 1) - i) (drop i s) in case if _asBool (elem ((ch /= " ") && ch) emap) then (let out = (out + ch) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (out))))
  where
    s = upper text

encrypt :: String -> Map.Map String [Int] -> Map.Map String String -> String
encrypt text emap dmap =
  fromMaybe ("") $
    (let text = remove_space text emap in (let row0 = [] in (let row1 = [] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length text)) (\() -> (let ch = take ((_asInt (i) + 1) - i) (drop i text) in (let xy = (emap !! ch) in (let row0 = (row0 ++ [(xy !! 0)]) in (let row1 = (row1 ++ [(xy !! 1)]) in (let i = (_asInt (i) + 1) in Nothing)))))) of Just v -> Just v; Nothing -> case foldr (\v acc -> case (let row0 = (row0 ++ [v]) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing row1 of Just v -> Just v; Nothing -> (let res = "" in (let j = 0 in case whileLoop (\() -> (_asInt (j) < length row0)) (\() -> (let key = ((show (row0 !! j) ++ ",") ++ show (row0 !! (_asInt (j) + 1))) in (let res = (res + (dmap !! key)) in (let j = (_asInt (j) + 2) in Nothing)))) of Just v -> Just v; Nothing -> Just (res)))))))

decrypt :: String -> Map.Map String [Int] -> Map.Map String String -> String
decrypt text emap dmap =
  fromMaybe ("") $
    (let text = remove_space text emap in (let coords = [] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length text)) (\() -> (let ch = take ((_asInt (i) + 1) - i) (drop i text) in (let xy = (emap !! ch) in (let coords = (coords ++ [(xy !! 0)]) in (let coords = (coords ++ [(xy !! 1)]) in (let i = (_asInt (i) + 1) in Nothing)))))) of Just v -> Just v; Nothing -> (let half = (div length coords 2) in (let k1 = [] in (let k2 = [] in (let idx = 0 in case whileLoop (\() -> (idx < half)) (\() -> (let k1 = (k1 ++ [(coords !! idx)]) in (let idx = (_asInt (idx) + 1) in Nothing))) of Just v -> Just v; Nothing -> case whileLoop (\() -> (_asInt (idx) < length coords)) (\() -> (let k2 = (k2 ++ [(coords !! idx)]) in (let idx = (_asInt (idx) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let res = "" in (let j = 0 in case whileLoop (\() -> (j < half)) (\() -> (let key = ((show (k1 !! j) ++ ",") ++ show (k2 !! j)) in (let res = (res + (dmap !! key)) in (let j = (_asInt (j) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (res))))))))))

main :: ()
main =
  fromMaybe (()) $
    (let squareRosetta = [["A", "B", "C", "D", "E"], ["F", "G", "H", "I", "K"], ["L", "M", "N", "O", "P"], ["Q", "R", "S", "T", "U"], ["V", "W", "X", "Y", "Z"], ["J", "1", "2", "3", "4"]] in (let squareWikipedia = [["B", "G", "W", "K", "Z"], ["Q", "P", "N", "D", "S"], ["I", "O", "A", "X", "E"], ["F", "C", "L", "U", "M"], ["T", "H", "Y", "V", "R"], ["J", "1", "2", "3", "4"]] in (let textRosetta = "0ATTACKATDAWN" in (let textWikipedia = "FLEEATONCE" in (let textTest = "The invasion will start on the first of January" in (let maps = square_to_maps squareRosetta in (let emap = (maps !! "e") in (let dmap = (maps !! "d") in case (let _ = putStrLn ("from Rosettacode") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (_showAny (("original:\t " + textRosetta))) in Nothing) of Just v -> Just v; Nothing -> (let s = encrypt textRosetta emap dmap in case (let _ = putStrLn (_showAny (("codiert:\t " + s))) in Nothing) of Just v -> Just v; Nothing -> (let s = decrypt s emap dmap in case (let _ = putStrLn (_showAny (("and back:\t " + s))) in Nothing) of Just v -> Just v; Nothing -> (let maps = square_to_maps squareWikipedia in (let emap = (maps !! "e") in (let dmap = (maps !! "d") in case (let _ = putStrLn ("from Wikipedia") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (_showAny (("original:\t " + textWikipedia))) in Nothing) of Just v -> Just v; Nothing -> (let s = encrypt textWikipedia emap dmap in case (let _ = putStrLn (_showAny (("codiert:\t " + s))) in Nothing) of Just v -> Just v; Nothing -> (let s = decrypt s emap dmap in case (let _ = putStrLn (_showAny (("and back:\t " + s))) in Nothing) of Just v -> Just v; Nothing -> (let maps = square_to_maps squareWikipedia in (let emap = (maps !! "e") in (let dmap = (maps !! "d") in case (let _ = putStrLn ("from Rosettacode long part") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (_showAny (("original:\t " + textTest))) in Nothing) of Just v -> Just v; Nothing -> (let s = encrypt textTest emap dmap in case (let _ = putStrLn (_showAny (("codiert:\t " + s))) in Nothing) of Just v -> Just v; Nothing -> (let s = decrypt s emap dmap in (let _ = putStrLn (_showAny (("and back:\t " + s))) in Nothing)))))))))))))))))))))
  where
    squareRosetta = [["A", "B", "C", "D", "E"], ["F", "G", "H", "I", "K"], ["L", "M", "N", "O", "P"], ["Q", "R", "S", "T", "U"], ["V", "W", "X", "Y", "Z"], ["J", "1", "2", "3", "4"]]
    squareWikipedia = [["B", "G", "W", "K", "Z"], ["Q", "P", "N", "D", "S"], ["I", "O", "A", "X", "E"], ["F", "C", "L", "U", "M"], ["T", "H", "Y", "V", "R"], ["J", "1", "2", "3", "4"]]
    textRosetta = "0ATTACKATDAWN"
    textWikipedia = "FLEEATONCE"
    textTest = "The invasion will start on the first of January"

main :: IO ()
main = do
  main
