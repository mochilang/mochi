-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:24Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}
module Main where

import Data.Maybe (fromMaybe)
import qualified Data.Map as Map
import Data.List (intercalate, isPrefixOf, isInfixOf)
import qualified Data.List as List
import GHC.Generics (Generic)


forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i | i < end =
            case f i of
              Just v -> Just v
              Nothing -> go (i + 1)
         | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _ | cond () =
            case body () of
              Just v -> Just v
              Nothing -> go ()
         | otherwise = Nothing

avg :: Integral a => [a] -> a
avg xs | null xs = 0
       | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup { key :: k, items :: [a] } deriving (Show)

_group_by :: Ord k => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x:xs) m order =
        let k = keyfn x
        in case Map.lookup k m of
             Just is -> go xs (Map.insert k (is ++ [x]) m) order
             Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
  in [ MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order ]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
  in if idx < 0 || idx >= length s
       then error "index out of range"
       else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine
_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p | null p || p == "-" -> putStr text
         | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
  in h : case t of
            []      -> []
            (_:rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
  in if null ls then [] else
       let heads = if header
                      then _split delim (head ls)
                      else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
           start = if header then 1 else 0
           row line =
             let parts = _split delim line
             in Map.fromList [ (heads !! j, if j < length parts then parts !! j else "")
                             | j <- [0 .. length heads - 1] ]
      in map row (drop start ls)


data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"


data Pixel = Pixel {
    R :: Int,
    G :: Int,
    B :: Int
} deriving (Eq, Show, Generic)


data Bitmap = Bitmap {
    w :: Int,
    h :: Int,
    max :: Int,
    _data :: [[Pixel]]
} deriving (Eq, Show, Generic)


newBitmap :: Int -> Int -> Int -> Bitmap
newBitmap w h max = fromMaybe (()) $
    (let rows = [] in (let y = 0 in case whileLoop (\() -> (y < h)) (\() -> (let row = [] in (let x = 0 in case whileLoop (\() -> (x < w)) (\() -> (let row = (row ++ [Pixel { R = 0, G = 0, B = 0 }]) in (let x = (_asInt (x) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let rows = (rows ++ [row]) in (let y = (_asInt (y) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (Bitmap { w = w, h = h, max = max, _data = rows })))

setPx :: Bitmap -> Int -> Int -> Pixel -> ()
setPx b x y p = fromMaybe (()) $
    (let rows = fromMaybe (error "missing") (Map.lookup "data" (b)) in (let row = (rows !! y) in (let row = Map.insert x p row in (let rows = Map.insert y row rows in (let b = rows in Nothing)))))

getPx :: Bitmap -> Int -> Int -> Pixel
getPx b x y = ((fromMaybe (error "missing") (Map.lookup "data" (b)) !! y) !! x)

splitLines :: String -> [String]
splitLines s = fromMaybe ([]) $
    (let out = [] in (let cur = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> (let ch = substr s i (_asInt (i) + 1) in case if (ch == "\n") then (let out = (out ++ [cur]) in (let cur = "" in Nothing)) else (let cur = (cur + ch) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let out = (out ++ [cur]) in Just (out)))))

splitWS :: String -> [String]
splitWS s = fromMaybe ([]) $
    (let out = [] in (let cur = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> (let ch = substr s i (_asInt (i) + 1) in case if (((((((ch == " ") || ch) == "\t") || ch) == "\r") || ch) == "\n") then if (length cur > 0) then (let out = (out ++ [cur]) in (let cur = "" in Nothing)) else Nothing else (let cur = (cur + ch) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> case if (length cur > 0) then (let out = (out ++ [cur]) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (out))))

parseIntStr :: String -> Int
parseIntStr str = fromMaybe (0) $
    (let i = 0 in (let neg = False in case if (((length str > 0) && take (1 - 0) (drop 0 str)) == "-") then (let neg = True in (let i = 1 in Nothing)) else Nothing of Just v -> Just v; Nothing -> (let n = 0 in (let digits = Map.fromList [("0", (0 :: Int)), ("1", (1 :: Int)), ("2", (2 :: Int)), ("3", (3 :: Int)), ("4", (4 :: Int)), ("5", (5 :: Int)), ("6", (6 :: Int)), ("7", (7 :: Int)), ("8", (8 :: Int)), ("9", (9 :: Int))] in case whileLoop (\() -> (_asInt (i) < length str)) (\() -> (let n = ((_asInt (n) * 10) + _asInt ((digits !! take ((_asInt (i) + 1) - i) (drop i str)))) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> case if _asBool (neg) then (let n = (- (_asInt (n))) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (n)))))

tokenize :: String -> [String]
tokenize s = fromMaybe ([]) $
    (let lines = splitLines s in (let toks = [] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length lines)) (\() -> (let line = (lines !! i) in case if (((length line > 0) && substr line 0 1) == "#") then (let i = (_asInt (i) + 1) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let parts = splitWS line in (let j = 0 in case whileLoop (\() -> (_asInt (j) < length parts)) (\() -> (let toks = (toks ++ [(parts !! j)]) in (let j = (_asInt (j) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (toks))))
  where
    lines = splitLines s

readP3 :: String -> Bitmap
readP3 text = fromMaybe (()) $
    (let toks = tokenize text in case if (length toks < 4) then Just (newBitmap 0 0 0) else Nothing of Just v -> Just v; Nothing -> case if ((toks !! 0) /= "P3") then Just (newBitmap 0 0 0) else Nothing of Just v -> Just v; Nothing -> (let w = parseIntStr (toks !! 1) in (let h = parseIntStr (toks !! 2) in (let maxv = parseIntStr (toks !! 3) in (let idx = 4 in (let bm = newBitmap w h maxv in (let y = (_asInt (h) - 1) in case whileLoop (\() -> (_asInt (y) >= 0)) (\() -> (let x = 0 in case whileLoop (\() -> (x < w)) (\() -> (let r = parseIntStr (toks !! idx) in (let g = parseIntStr (toks !! (_asInt (idx) + 1)) in (let b = parseIntStr (toks !! (_asInt (idx) + 2)) in case (let _ = setPx bm x y Pixel { R = r, G = g, B = b } in Nothing) of Just v -> Just v; Nothing -> (let idx = (_asInt (idx) + 3) in (let x = (_asInt (x) + 1) in Nothing)))))) of Just v -> Just v; Nothing -> (let y = (_asInt (y) - 1) in Nothing))) of Just v -> Just v; Nothing -> Just (bm))))))))
  where
    toks = tokenize text

toGrey :: Bitmap -> ()
toGrey b = fromMaybe (()) $
    (let h = fromMaybe (error "missing") (Map.lookup "h" (b)) in (let w = fromMaybe (error "missing") (Map.lookup "w" (b)) in (let m = 0 in (let y = 0 in case whileLoop (\() -> (y < h)) (\() -> (let x = 0 in case whileLoop (\() -> (x < w)) (\() -> (let p = getPx b x y in (let l = (div ((((((_asInt (fromMaybe (error "missing") (Map.lookup "R" (p))) * 2126) + _asInt (fromMaybe (error "missing") (Map.lookup "G" (p)))) * 7152) + _asInt (fromMaybe (error "missing") (Map.lookup "B" (p)))) * 722)) 10000) in case if (l > fromMaybe (error "missing") (Map.lookup "max" (b))) then (let l = fromMaybe (error "missing") (Map.lookup "max" (b)) in Nothing) else Nothing of Just v -> Just v; Nothing -> case (let _ = setPx b x y Pixel { R = l, G = l, B = l } in Nothing) of Just v -> Just v; Nothing -> case if (l > m) then (let m = l in Nothing) else Nothing of Just v -> Just v; Nothing -> (let x = (_asInt (x) + 1) in Nothing)))) of Just v -> Just v; Nothing -> (let y = (_asInt (y) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let b = m in Nothing)))))
  where
    h = fromMaybe (error "missing") (Map.lookup "h" (b))
    w = fromMaybe (error "missing") (Map.lookup "w" (b))

pad :: Int -> Int -> String
pad n w = fromMaybe ("") $
    (let s = show n in case whileLoop (\() -> (length s < _asInt (w))) (\() -> (let s = (" " + s) in Nothing)) of Just v -> Just v; Nothing -> Just (s))

writeP3 :: Bitmap -> String
writeP3 b = fromMaybe ("") $
    (let h = fromMaybe (error "missing") (Map.lookup "h" (b)) in (let w = fromMaybe (error "missing") (Map.lookup "w" (b)) in (let max = fromMaybe (error "missing") (Map.lookup "max" (b)) in (let digits = length show max in (let out = (((((("P3\n# generated from Bitmap.writeppmp3\n" ++ show w) ++ " ") ++ show h) ++ "\n") ++ show max) ++ "\n") in (let y = (_asInt (h) - 1) in case whileLoop (\() -> (_asInt (y) >= 0)) (\() -> (let line = "" in (let x = 0 in case whileLoop (\() -> (x < w)) (\() -> (let p = getPx b x y in (let line = ((((((line + "   ") + pad fromMaybe (error "missing") (Map.lookup "R" (p)) digits) + " ") + pad fromMaybe (error "missing") (Map.lookup "G" (p)) digits) + " ") + pad fromMaybe (error "missing") (Map.lookup "B" (p)) digits) in (let x = (_asInt (x) + 1) in Nothing)))) of Just v -> Just v; Nothing -> (let out = ((out + line) + "\n") in (let y = (_asInt (y) - 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (out)))))))
  where
    h = fromMaybe (error "missing") (Map.lookup "h" (b))
    w = fromMaybe (error "missing") (Map.lookup "w" (b))

ppmtxt = ((((((("P3\n" ++ "# feep.ppm\n") ++ "4 4\n") ++ "15\n") ++ " 0  0  0    0  0  0    0  0  0   15  0 15\n") ++ " 0  0  0    0 15  7    0  0  0    0  0  0\n") ++ " 0  0  0    0  0  0    0 15  7    0  0  0\n") ++ "15  0 15    0  0  0    0  0  0    0  0  0\n")

bm = readP3 ppmtxt

out = writeP3 bm

main :: IO ()
main = do
    putStrLn ("Original Colour PPM file")
    putStrLn (ppmtxt)
    putStrLn ("Grey PPM:")
    toGrey bm
    putStrLn (out)
