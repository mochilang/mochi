-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:05Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

_updateAt :: Int -> (a -> a) -> [a] -> [a]
_updateAt i f xs = take i xs ++ [f (xs !! i)] ++ drop (i + 1) xs

fields :: String -> [String]
fields s =
  fromMaybe ([]) $
    (let words = [] in (let cur = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> (let ch = take ((_asInt (i) + 1) - i) (drop i s) in case if (((((ch == " ") || ch) == "\n") || ch) == "\t") then if (length cur > 0) then (let words = (words ++ [cur]) in (let cur = "" in Nothing)) else Nothing else (let cur = (cur + ch) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> case if (length cur > 0) then (let words = (words ++ [cur]) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (words))))

join :: [String] -> String -> String
join xs sep =
  fromMaybe ("") $
    (let res = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length xs)) (\() -> case if (_asInt (i) > 0) then (let res = (res + sep) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let res = (res + (xs !! i)) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (res)))

numberName :: Int -> String
numberName n =
  fromMaybe ("") $
    (let small = ["no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"] in (let tens = ["ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"] in case if (_asInt (n) < 0) then Just ("") else Nothing of Just v -> Just v; Nothing -> case if (_asInt (n) < 20) then Just ((small !! n)) else Nothing of Just v -> Just v; Nothing -> case if (_asInt (n) < 100) then (let t = (tens !! (read ((div n 10)) :: Int)) in (let s = (n `mod` 10) in case if (_asInt (s) > 0) then (let t = ((t + " ") + (small !! s)) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (t))) else Nothing of Just v -> Just v; Nothing -> Just ("")))
  where
    small = ["no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
    tens = ["ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]

pluralizeFirst :: String -> Int -> String
pluralizeFirst s n = fromMaybe ("") $
  case if (_asInt (n) == 1) then Just (s) else Nothing of Just v -> Just v; Nothing -> (let w = fields s in case if (length w > 0) then (let w = _updateAt 0 (const ((w !! 0) + "s")) w in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (join w " "))

randInt :: Int -> Int -> Int
randInt seed n =
  fromMaybe (0) $
    (let next = ((((_asInt (seed) * 1664525) + 1013904223)) `mod` 2147483647) in Just ((next `mod` n)))
  where
    next = ((((_asInt (seed) * 1664525) + 1013904223)) `mod` 2147483647)

slur :: String -> Int -> String
slur p d = fromMaybe ("") $
  case if (length p <= 2) then Just (p) else Nothing of Just v -> Just v; Nothing -> (let a = [] in (let i = 1 in case whileLoop (\() -> ((_asInt (i) < length p) - 1)) (\() -> (let a = (a ++ [take ((_asInt (i) + 1) - i) (drop i p)]) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let idx = (length a - 1) in (let seed = d in case whileLoop (\() -> (_asInt (idx) >= 1)) (\() -> (let seed = ((((_asInt (seed) * 1664525) + 1013904223)) `mod` 2147483647) in case if ((seed `mod` 100) >= _asInt (d)) then (let j = (seed `mod` ((_asInt (idx) + 1))) in (let tmp = (a !! idx) in (let a = Map.insert idx (a !! j) a in (let a = Map.insert j tmp a in Nothing)))) else Nothing of Just v -> Just v; Nothing -> (let idx = (_asInt (idx) - 1) in Nothing))) of Just v -> Just v; Nothing -> (let s = take (1 - 0) (drop 0 p) in (let k = 0 in case whileLoop (\() -> (_asInt (k) < length a)) (\() -> (let s = (s + (a !! k)) in (let k = (_asInt (k) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let s = (s + take (length p - (length p - 1)) (drop (length p - 1) p)) in (let w = fields s in Just (join w " ")))))))))

main :: ()
main =
  fromMaybe (()) $
    (let i = 99 in whileLoop (\() -> (_asInt (i) > 0)) (\() -> case (let _ = putStrLn (((((slur numberName i i ++ " ") ++ pluralizeFirst slur "bottle of" i i) ++ " ") ++ slur "beer on the wall" i)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (((((slur numberName i i ++ " ") ++ pluralizeFirst slur "bottle of" i i) ++ " ") ++ slur "beer" i)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (((((slur "take one" i ++ " ") ++ slur "down" i) ++ " ") ++ slur "pass it around" i)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (((((slur numberName (_asInt (i) - 1) i ++ " ") ++ pluralizeFirst slur "bottle of" i (_asInt (i) - 1)) ++ " ") ++ slur "beer on the wall" i)) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) - 1) in Nothing)))

main :: IO ()
main = do
  main
