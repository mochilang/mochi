-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:19Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

floorf :: Double -> Double
floorf x = (read ((read x :: Int)) :: Double)

indexOf :: String -> String -> Int
indexOf s ch =
  fromMaybe (0) $
    (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> case if (take ((_asInt (i) + 1) - i) (drop i s) == ch) then Just (i) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just ((-1)))

fmtF3 :: Double -> String
fmtF3 x =
  fromMaybe ("") $
    (let y = (floorf ((_asDouble (x) * 1000.0) + 0.5) / 1000.0) in (let s = show y in (let dot = indexOf s "." in case if ((_asInt (dot) == 0) - 1) then (let s = (s + ".000") in Nothing) else (let decs = ((length s - _asInt (dot)) - 1) in if (_asInt (decs) > 3) then (let s = take ((_asInt (dot) + 4) - 0) (drop 0 s) in Nothing) else whileLoop (\() -> (_asInt (decs) < 3)) (\() -> (let s = (s + "0") in (let decs = (_asInt (decs) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (s))))

padFloat3 :: Double -> Int -> String
padFloat3 x width =
  fromMaybe ("") $
    (let s = fmtF3 x in case whileLoop (\() -> (length s < _asInt (width))) (\() -> (let s = (" " + s) in Nothing)) of Just v -> Just v; Nothing -> Just (s))

fib1000 :: [Double]
fib1000 =
  fromMaybe ([]) $
    (let a = 0.0 in (let b = 1.0 in (let res = [] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < 1000)) (\() -> (let res = (res ++ [b]) in (let t = b in (let b = (b + a) in (let a = t in (let i = (_asInt (i) + 1) in Nothing)))))) of Just v -> Just v; Nothing -> Just (res)))))

leadingDigit :: Double -> Int
leadingDigit x = fromMaybe (0) $
  case if (_asDouble (x) < 0.0) then (let x = (-(_asInt (x))) in Nothing) else Nothing of Just v -> Just v; Nothing -> case whileLoop (\() -> (_asDouble (x) >= 10.0)) (\() -> (let x = (_asDouble (x) / 10.0) in Nothing)) of Just v -> Just v; Nothing -> case whileLoop (\() -> (((_asDouble (x) > 0.0) && x) < 1.0)) (\() -> (let x = (_asDouble (x) * 10.0) in Nothing)) of Just v -> Just v; Nothing -> Just ((read x :: Int))

show :: [Double] -> String -> ()
show nums title =
  fromMaybe (()) $
    (let counts = [0, 0, 0, 0, 0, 0, 0, 0, 0] in case foldr (\n acc -> case (let d = leadingDigit n in if (((_asInt (d) >= 1) && d) <= 9) then (let counts = Map.insert (_asInt (d) - 1) (_asInt ((counts !! (_asInt (d) - 1))) + 1) counts in Nothing) else Nothing) of Just v -> Just v; Nothing -> acc) Nothing nums of Just v -> Just v; Nothing -> (let preds = [0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046] in (let total = length nums in case (let _ = putStrLn (_showAny (title)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("Digit  Observed  Predicted") in Nothing) of Just v -> Just v; Nothing -> (let i = 0 in whileLoop (\() -> (_asInt (i) < 9)) (\() -> (let obs = (((read (counts !! i) :: Double)) / ((read total :: Double))) in (let line = ((((("  " ++ show (_asInt (i) + 1)) ++ "  ") ++ padFloat3 obs 9) ++ "  ") ++ padFloat3 (preds !! i) 8) in case (let _ = putStrLn (_showAny (line)) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))))))))

main :: ()
main =
  fromMaybe (()) $
    (let _ = show fib1000 "First 1000 Fibonacci numbers" in Nothing)

main :: IO ()
main = do
  main
