-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:12Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

split :: String -> String -> [String]
split s sep =
  fromMaybe ([]) $
    (let parts = [] in (let cur = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> if (((_asInt ((((length sep > 0) && i) + length sep)) <= length s) && take ((_asInt (i) + length sep) - i) (drop i s)) == sep) then (let parts = (parts ++ [cur]) in (let cur = "" in (let i = (_asInt (i) + length sep) in Nothing))) else (let cur = (cur + take ((_asInt (i) + 1) - i) (drop i s)) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let parts = (parts ++ [cur]) in Just (parts)))))

rstripEmpty :: [String] -> [String]
rstripEmpty words =
  fromMaybe ([]) $
    (let n = length words in case whileLoop (\() -> (((_asInt (n) > 0) && (words !! (_asInt (n) - 1))) == "")) (\() -> (let n = (_asInt (n) - 1) in Nothing)) of Just v -> Just v; Nothing -> Just (take (n - 0) (drop 0 words)))

spaces :: Int -> String
spaces n =
  fromMaybe ("") $
    (let out = "" in (let i = 0 in case whileLoop (\() -> (i < n)) (\() -> (let out = (out + " ") in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (out)))

pad :: String -> Int -> Int -> String
pad word width align =
  fromMaybe ("") $
    (let diff = (_asInt (width) - length word) in case if (_asInt (align) == 0) then Just ((word + spaces diff)) else Nothing of Just v -> Just v; Nothing -> case if (_asInt (align) == 2) then Just ((spaces diff + word)) else Nothing of Just v -> Just v; Nothing -> (let left = (read ((div diff 2)) :: Int) in (let right = (diff - left) in Just (((spaces left + word) + spaces right)))))
  where
    diff = (_asInt (width) - length word)

newFormatter :: String -> Map.Map String ()
newFormatter text =
  fromMaybe (()) $
    (let lines = split text "\n" in (let fmtLines = [] in (let width = [] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length lines)) (\() -> case if (length (lines !! i) == 0) then (let i = (_asInt (i) + 1) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let words = rstripEmpty split (lines !! i) "$" in (let fmtLines = (fmtLines ++ [words]) in (let j = 0 in case whileLoop (\() -> (_asInt (j) < length words)) (\() -> (let wlen = length (words !! j) in case if (_asInt (j) == length width) then (let width = (width ++ [wlen]) in Nothing) else if (wlen > (width !! j)) then (let width = Map.insert j wlen width in Nothing) else Nothing of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (Map.fromList [("text", fmtLines), ("width", width)])))))

printFmt :: Map.Map String () -> Int -> ()
printFmt f align =
  fromMaybe (()) $
    (let lines = fromMaybe (error "missing") (Map.lookup "text" f) in (let width = fromMaybe (error "missing") (Map.lookup "width" f) in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length lines)) (\() -> (let words = (lines !! i) in (let line = "" in (let j = 0 in case whileLoop (\() -> (_asInt (j) < length words)) (\() -> (let line = ((line + pad (words !! j) (width !! j) align) + " ") in (let j = (_asInt (j) + 1) in Nothing))) of Just v -> Just v; Nothing -> case (let _ = putStrLn (_showAny (line)) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))))) of Just v -> Just v; Nothing -> (let _ = putStrLn ("") in Nothing))))
  where
    lines = fromMaybe (error "missing") (Map.lookup "text" f)
    width = fromMaybe (error "missing") (Map.lookup "width" f)

text = ((((("Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" ++ "are$delineated$by$a$single$'dollar'$character,$write$a$program\n") ++ "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n") ++ "column$are$separated$by$at$least$one$space.\n") ++ "Further,$allow$for$each$word$in$a$column$to$be$either$left\n") ++ "justified,$right$justified,$or$center$justified$within$its$column.")

f = newFormatter text

main :: IO ()
main = do
  printFmt f 0
  printFmt f 1
  printFmt f 2
