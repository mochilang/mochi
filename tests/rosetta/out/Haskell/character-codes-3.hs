-- Generated by Mochi compiler v0.10.28 on 2025-07-18T09:24:20Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.Maybe (fromMaybe)

ord :: String -> Int
ord ch = fromMaybe (0) $
  case if (ch == "a") then Just (97) else Nothing of Just v -> Just v; Nothing -> case if (ch == "π") then Just (960) else Nothing of Just v -> Just v; Nothing -> case if (ch == "A") then Just (65) else Nothing of Just v -> Just v; Nothing -> Just (0)

chr :: Int -> String
chr n = fromMaybe ("") $
  case if (n == 97) then Just ("a") else Nothing of Just v -> Just v; Nothing -> case if (n == 960) then Just ("π") else Nothing of Just v -> Just v; Nothing -> case if (n == 65) then Just ("A") else Nothing of Just v -> Just v; Nothing -> Just ("?")

b = ord "a"

r = ord "π"

s = "aπ"

main :: IO ()
main = do
  putStrLn (((((show b ++ " ") ++ show r) ++ " ") ++ s))
  putStrLn ((((("string cast to []rune: [" ++ show b) ++ " ") ++ show r) ++ "]"))
  putStrLn (((("    string range loop: " ++ show b) ++ " ") ++ show r))
  putStrLn ("         string bytes: 0x61 0xcf 0x80")
