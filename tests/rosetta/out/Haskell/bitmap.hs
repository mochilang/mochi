-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:24Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}
module Main where

import Data.Maybe (fromMaybe)
import qualified Data.Map as Map
import Data.List (intercalate, isPrefixOf, isInfixOf)
import qualified Data.List as List
import GHC.Generics (Generic)


forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i | i < end =
            case f i of
              Just v -> Just v
              Nothing -> go (i + 1)
         | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _ | cond () =
            case body () of
              Just v -> Just v
              Nothing -> go ()
         | otherwise = Nothing

avg :: Integral a => [a] -> a
avg xs | null xs = 0
       | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup { key :: k, items :: [a] } deriving (Show)

_group_by :: Ord k => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x:xs) m order =
        let k = keyfn x
        in case Map.lookup k m of
             Just is -> go xs (Map.insert k (is ++ [x]) m) order
             Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
  in [ MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order ]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
  in if idx < 0 || idx >= length s
       then error "index out of range"
       else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine
_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p | null p || p == "-" -> putStr text
         | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
  in h : case t of
            []      -> []
            (_:rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
  in if null ls then [] else
       let heads = if header
                      then _split delim (head ls)
                      else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
           start = if header then 1 else 0
           row line =
             let parts = _split delim line
             in Map.fromList [ (heads !! j, if j < length parts then parts !! j else "")
                             | j <- [0 .. length heads - 1] ]
      in map row (drop start ls)


data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"


data Pixel = Pixel {
    R :: Int,
    G :: Int,
    B :: Int
} deriving (Eq, Show, Generic)


data Bitmap = Bitmap {
    cols :: Int,
    rows :: Int,
    px :: [[Pixel]]
} deriving (Eq, Show, Generic)


pixelFromRgb :: Int -> Pixel
pixelFromRgb c = fromMaybe (()) $
    (let r = (((read ((div c 65536)) :: Int)) `mod` 256) in (let g = (((read ((div c 256)) :: Int)) `mod` 256) in (let b = (c `mod` 256) in Just (Pixel { R = r, G = g, B = b }))))
  where
    r = (((read ((div c 65536)) :: Int)) `mod` 256)
    g = (((read ((div c 256)) :: Int)) `mod` 256)
    b = (c `mod` 256)

rgbFromPixel :: Pixel -> Int
rgbFromPixel p = ((((_asInt (fromMaybe (error "missing") (Map.lookup "R" (p))) * 65536) + _asInt (fromMaybe (error "missing") (Map.lookup "G" (p)))) * 256) + _asInt (fromMaybe (error "missing") (Map.lookup "B" (p))))

NewBitmap :: Int -> Int -> Bitmap
NewBitmap x y = fromMaybe (()) $
    (let _data = [] in (let row = 0 in case whileLoop (\() -> (row < y)) (\() -> (let r = [] in (let col = 0 in case whileLoop (\() -> (col < x)) (\() -> (let r = (r ++ [Pixel { R = 0, G = 0, B = 0 }]) in (let col = (_asInt (col) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let _data = (_data ++ [r]) in (let row = (_asInt (row) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (Bitmap { cols = x, rows = y, px = _data })))

Extent :: Bitmap -> Map.Map String Int
Extent b = Map.fromList [("cols", fromMaybe (error "missing") (Map.lookup "cols" (b))), ("rows", fromMaybe (error "missing") (Map.lookup "rows" (b)))]

Fill :: Bitmap -> Pixel -> ()
Fill b p = fromMaybe (()) $
    (let y = 0 in whileLoop (\() -> (y < fromMaybe (error "missing") (Map.lookup "rows" (b)))) (\() -> (let x = 0 in case whileLoop (\() -> (x < fromMaybe (error "missing") (Map.lookup "cols" (b)))) (\() -> (let px = fromMaybe (error "missing") (Map.lookup "px" (b)) in (let row = (px !! y) in (let row = Map.insert x p row in (let px = Map.insert y row px in (let b = px in (let x = (_asInt (x) + 1) in Nothing))))))) of Just v -> Just v; Nothing -> (let y = (_asInt (y) + 1) in Nothing))))

FillRgb :: Bitmap -> Int -> ()
FillRgb b c = fromMaybe (()) $
    (let _ = Fill b pixelFromRgb c in Nothing)

SetPx :: Bitmap -> Int -> Int -> Pixel -> Bool
SetPx b x y p = fromMaybe (False) $
    case if (((((((_asInt (x) < 0) || x) >= fromMaybe (error "missing") (Map.lookup "cols" (b))) || y) < 0) || y) >= fromMaybe (error "missing") (Map.lookup "rows" (b))) then Just (False) else Nothing of Just v -> Just v; Nothing -> (let px = fromMaybe (error "missing") (Map.lookup "px" (b)) in (let row = (px !! y) in (let row = Map.insert x p row in (let px = Map.insert y row px in (let b = px in Just (True))))))

SetPxRgb :: Bitmap -> Int -> Int -> Int -> Bool
SetPxRgb b x y c = SetPx b x y pixelFromRgb c

GetPx :: Bitmap -> Int -> Int -> Map.Map String ()
GetPx b x y = fromMaybe (()) $
    case if (((((((_asInt (x) < 0) || x) >= fromMaybe (error "missing") (Map.lookup "cols" (b))) || y) < 0) || y) >= fromMaybe (error "missing") (Map.lookup "rows" (b))) then Just (Map.fromList [("ok", False)]) else Nothing of Just v -> Just v; Nothing -> (let row = (fromMaybe (error "missing") (Map.lookup "px" (b)) !! y) in Just (Map.fromList [("ok", VBool (True)), ("pixel", (row !! x))]))

GetPxRgb :: Bitmap -> Int -> Int -> Map.Map String ()
GetPxRgb b x y = fromMaybe (()) $
    (let r = GetPx b x y in case if _asBool (not fromMaybe (error "missing") (Map.lookup "ok" (r))) then Just (Map.fromList [("ok", False)]) else Nothing of Just v -> Just v; Nothing -> Just (Map.fromList [("ok", VBool (True)), ("rgb", VInt (rgbFromPixel fromMaybe (error "missing") (Map.lookup "pixel" (r))))]))
  where
    r = GetPx b x y

ppmSize :: Bitmap -> Int
ppmSize b = fromMaybe (0) $
    (let header = (((("P6\n# Creator: Rosetta Code http://rosettacode.org/\n" ++ show fromMaybe (error "missing") (Map.lookup "cols" (b))) ++ " ") ++ show fromMaybe (error "missing") (Map.lookup "rows" (b))) ++ "\n255\n") in Just ((((length header + 3) * _asInt (fromMaybe (error "missing") (Map.lookup "cols" (b)))) * _asInt (fromMaybe (error "missing") (Map.lookup "rows" (b))))))
  where
    header = (((("P6\n# Creator: Rosetta Code http://rosettacode.org/\n" ++ show fromMaybe (error "missing") (Map.lookup "cols" (b))) ++ " ") ++ show fromMaybe (error "missing") (Map.lookup "rows" (b))) ++ "\n255\n")

pixelStr :: Pixel -> String
pixelStr p = (((((("{" ++ show fromMaybe (error "missing") (Map.lookup "R" (p))) ++ " ") ++ show fromMaybe (error "missing") (Map.lookup "G" (p))) ++ " ") ++ show fromMaybe (error "missing") (Map.lookup "B" (p))) ++ "}")

main :: ()
main  = fromMaybe (()) $
    (let bm = NewBitmap 300 240 in case (let _ = FillRgb bm 16711680 in Nothing) of Just v -> Just v; Nothing -> case (let _ = SetPxRgb bm 10 20 255 in Nothing) of Just v -> Just v; Nothing -> case (let _ = SetPxRgb bm 20 30 0 in Nothing) of Just v -> Just v; Nothing -> case (let _ = SetPxRgb bm 30 40 1056816 in Nothing) of Just v -> Just v; Nothing -> (let c1 = GetPx bm 0 0 in (let c2 = GetPx bm 10 20 in (let c3 = GetPx bm 30 40 in case (let _ = putStrLn (((("Image size: " ++ show fromMaybe (error "missing") (Map.lookup "cols" (bm))) ++ " Ã— ") ++ show fromMaybe (error "missing") (Map.lookup "rows" (bm)))) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((show ppmSize bm ++ " bytes when encoded as PPM.")) in Nothing) of Just v -> Just v; Nothing -> case if _asBool (fromMaybe (error "missing") (Map.lookup "ok" (c1))) then (let _ = putStrLn (("Pixel at (0,0) is " ++ pixelStr fromMaybe (error "missing") (Map.lookup "pixel" (c1)))) in Nothing) else Nothing of Just v -> Just v; Nothing -> case if _asBool (fromMaybe (error "missing") (Map.lookup "ok" (c2))) then (let _ = putStrLn (("Pixel at (10,20) is " ++ pixelStr fromMaybe (error "missing") (Map.lookup "pixel" (c2)))) in Nothing) else Nothing of Just v -> Just v; Nothing -> if _asBool (fromMaybe (error "missing") (Map.lookup "ok" (c3))) then (let p = fromMaybe (error "missing") (Map.lookup "pixel" (c3)) in (let r16 = (_asInt (fromMaybe (error "missing") (Map.lookup "R" (p))) * 257) in (let g16 = (_asInt (fromMaybe (error "missing") (Map.lookup "G" (p))) * 257) in (let b16 = (_asInt (fromMaybe (error "missing") (Map.lookup "B" (p))) * 257) in (let _ = putStrLn (((((("Pixel at (30,40) has R=" ++ show r16) ++ ", G=") ++ show g16) ++ ", B=") ++ show b16)) in Nothing))))) else Nothing))))

main :: IO ()
main = do
    main 
