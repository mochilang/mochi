-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:26Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}
module Main where

import Data.Maybe (fromMaybe)
import qualified Data.Map as Map
import GHC.Generics (Generic)



data Foobar = Foobar {
    Exported :: Int,
    unexported :: Int
} deriving (Eq, Show, Generic)


examineAndModify :: Foobar -> Foobar
examineAndModify f = fromMaybe (()) $
    case (let _ = putStrLn (((((((((" v: {" ++ show fromMaybe (error "missing") (Map.lookup "Exported" (f))) ++ " ") ++ show fromMaybe (error "missing") (Map.lookup "unexported" (f))) ++ "} = {") ++ show fromMaybe (error "missing") (Map.lookup "Exported" (f))) ++ " ") ++ show fromMaybe (error "missing") (Map.lookup "unexported" (f))) ++ "}")) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("    Idx Name       Type CanSet") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("     0: Exported   int  true") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("     1: unexported int  false") in Nothing) of Just v -> Just v; Nothing -> (let f = 16 in (let f = 44 in case (let _ = putStrLn ("  modified unexported field via unsafe") in Nothing) of Just v -> Just v; Nothing -> Just (f)))

anotherExample :: ()
anotherExample  = fromMaybe (()) $
    (let _ = putStrLn ("bufio.ReadByte returned error: unsafely injected error value into bufio inner workings") in Nothing)

obj = Foobar { Exported = 12, unexported = 42 }

main :: IO ()
main = do
    putStrLn ((((("obj: {" ++ show Exported (obj)) ++ " ") ++ show unexported (obj)) ++ "}"))
    let obj = examineAndModify obj
    putStrLn ((((("obj: {" ++ show Exported (obj)) ++ " ") ++ show unexported (obj)) ++ "}"))
    anotherExample 
