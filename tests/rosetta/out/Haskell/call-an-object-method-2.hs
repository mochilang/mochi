-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:29Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}
module Main where

import Data.Maybe (fromMaybe)
import GHC.Generics (Generic)



data Box = Box {
    Contents :: String,
    secret :: Int
} deriving (Eq, Show, Generic)


newFactory :: [(())]
newFactory  = fromMaybe ([]) $
    (let sn = 0 in (let New = (\ -> fromMaybe (()) $ (let sn = (_asInt (sn) + 1) in (let b = Box { secret = sn } in case if (_asInt (sn) == 1) then (let b = "rabbit" in Nothing) else if (_asInt (sn) == 2) then (let b = "rock" in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (b)))) in (let Count = (\ -> fromMaybe (sn) $ Nothing) in Just ([New, Count]))))

funcs = newFactory 

New = (funcs !! 0)

Count = (funcs !! 1)

main :: IO ()
main = do
    return ()
