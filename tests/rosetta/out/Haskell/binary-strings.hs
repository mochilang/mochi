-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:21Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

_updateAt :: Int -> (a -> a) -> [a] -> [a]
_updateAt i f xs = take i xs ++ [f (xs !! i)] ++ drop (i + 1) xs

char :: Int -> String
char n =
  fromMaybe ("") $
    (let letters = "abcdefghijklmnopqrstuvwxyz" in (let idx = (_asInt (n) - 97) in case if (((_asInt (idx) < 0) || idx) >= length letters) then Just ("?") else Nothing of Just v -> Just v; Nothing -> Just (take ((_asInt (idx) + 1) - idx) (drop idx letters))))
  where
    letters = "abcdefghijklmnopqrstuvwxyz"
    idx = (_asInt (n) - 97)

fromBytes :: [Int] -> String
fromBytes bs =
  fromMaybe ("") $
    (let s = "" in (let i = 0 in case whileLoop (\() -> (i < length bs)) (\() -> (let s = (s + char (bs !! i)) in (let i = (i + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (s)))

b = [98, 105, 110, 97, 114, 121]

c = b

d = []

i = 0

z = (b ++ [122])

sub = take (3 - 1) (drop 1 b)

f = []

rem = []

main :: IO ()
main = do
  putStrLn (show b)
  putStrLn (show c)
  putStrLn (show (b == c))
  let loop i = do
        if (i < length b)
          then do
            let d = (d ++ [(b !! i)])
            loop ((i + 1))
          else return ()
  loop i
  let d = _updateAt 1 (const 97) d
  let d = _updateAt 4 (const 110) d
  putStrLn (fromBytes b)
  putStrLn (fromBytes d)
  putStrLn (show (length b == 0))
  putStrLn (fromBytes z)
  putStrLn (fromBytes sub)
  let i = 0
  let loop i = do
        if (i < length d)
          then do
            let val = (d !! i)
            if (_asInt (val) == 110)
              then do
                let f = (f ++ [109])
              else do
                let f = (f ++ [val])
            loop ((i + 1))
          else return ()
  loop i
  putStrLn (((fromBytes d ++ " -> ") ++ fromBytes f))
  let rem = (rem ++ [(b !! 0)])
  let i = 3
  let loop i = do
        if (i < length b)
          then do
            let rem = (rem ++ [(b !! i)])
            loop ((i + 1))
          else return ()
  loop i
  putStrLn (fromBytes rem)
