-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:18Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

trimLeftZeros :: String -> String
trimLeftZeros s =
  fromMaybe ("") $
    (let i = 0 in case whileLoop (\() -> (((_asInt (i) < length s) && take ((_asInt (i) + 1) - i) (drop i s)) == "0")) (\() -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just (take (length s - i) (drop i s)))

btString :: String -> Map.Map String ()
btString s =
  fromMaybe (()) $
    (let s = trimLeftZeros s in (let b = [] in (let i = (length s - 1) in case whileLoop (\() -> (_asInt (i) >= 0)) (\() -> (let ch = take ((_asInt (i) + 1) - i) (drop i s) in case if (ch == "+") then (let b = (b ++ [1]) in Nothing) else if (ch == "0") then (let b = (b ++ [0]) in Nothing) else if (ch == "-") then (let b = (b ++ [(0 - 1)]) in Nothing) else Just (Map.fromList [("bt", VString ([])), ("ok", VBool (False))]) of Just v -> Just v; Nothing -> (let i = (_asInt (i) - 1) in Nothing))) of Just v -> Just v; Nothing -> Just (Map.fromList [("bt", b), ("ok", VBool (True))]))))

btToString :: [Int] -> String
btToString b = fromMaybe ("") $
  case if (length b == 0) then Just ("0") else Nothing of Just v -> Just v; Nothing -> (let r = "" in (let i = (length b - 1) in case whileLoop (\() -> (_asInt (i) >= 0)) (\() -> (let d = (b !! i) in case if ((_asInt (d) == 0) - 1) then (let r = (r + "-") in Nothing) else if (_asInt (d) == 0) then (let r = (r + "0") in Nothing) else (let r = (r + "+") in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) - 1) in Nothing))) of Just v -> Just v; Nothing -> Just (r)))

btInt :: Int -> [Int]
btInt i = fromMaybe ([]) $
  case if (_asInt (i) == 0) then Just ([]) else Nothing of Just v -> Just v; Nothing -> (let n = i in (let b = [] in case whileLoop (\() -> (_asInt (n) /= 0)) (\() -> (let m = (n `mod` 3) in (let n = (read ((div n 3)) :: Int) in case if (_asInt (m) == 2) then (let m = (0 - 1) in (let n = (_asInt (n) + 1) in Nothing)) else if ((_asInt (m) == 0) - 2) then (let m = 1 in (let n = (_asInt (n) - 1) in Nothing)) else Nothing of Just v -> Just v; Nothing -> (let b = (b ++ [m]) in Nothing)))) of Just v -> Just v; Nothing -> Just (b)))

btToInt :: [Int] -> Int
btToInt b =
  fromMaybe (0) $
    (let r = 0 in (let pt = 1 in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length b)) (\() -> (let r = ((r + (b !! i)) * pt) in (let pt = (_asInt (pt) * 3) in (let i = (_asInt (i) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (r))))

btNeg :: [Int] -> [Int]
btNeg b =
  fromMaybe ([]) $
    (let r = [] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length b)) (\() -> (let r = (r ++ [(-(_asInt ((b !! i))))]) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (r)))

btAdd :: [Int] -> [Int] -> [Int]
btAdd a b = btInt (btToInt a + btToInt b)

btMul :: [Int] -> [Int] -> [Int]
btMul a b = btInt (btToInt a * btToInt b)

padLeft :: String -> Int -> String
padLeft s w =
  fromMaybe ("") $
    (let r = s in case whileLoop (\() -> (length r < _asInt (w))) (\() -> (let r = (" " + r) in Nothing)) of Just v -> Just v; Nothing -> Just (r))

show :: String -> [Int] -> ()
show label b =
  fromMaybe (()) $
    (let l = padLeft label 7 in (let bs = padLeft btToString b 12 in (let is = padLeft show btToInt b 7 in (let _ = putStrLn (_showAny (((((l + " ") + bs) + " ") + is))) in Nothing))))
  where
    l = padLeft label 7
    bs = padLeft btToString b 12
    is = padLeft show btToInt b 7

main :: ()
main =
  fromMaybe (()) $
    (let ares = btString "+-0++0+" in (let a = (ares !! "bt") in (let b = btInt (-436) in (let cres = btString "+-++-" in (let c = (cres !! "bt") in case (let _ = show "a:" a in Nothing) of Just v -> Just v; Nothing -> case (let _ = show "b:" b in Nothing) of Just v -> Just v; Nothing -> case (let _ = show "c:" c in Nothing) of Just v -> Just v; Nothing -> (let _ = show "a(b-c):" btMul a btAdd b btNeg c in Nothing))))))
  where
    ares = btString "+-0++0+"
    a = (ares !! "bt")
    b = btInt (-436)
    cres = btString "+-++-"
    c = (cres !! "bt")

main :: IO ()
main = do
  main
