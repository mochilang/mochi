-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:20Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

getBins :: [Int] -> [Int] -> [Int]
getBins limits _data =
  fromMaybe ([]) $
    (let n = length limits in (let bins = [] in (let i = 0 in case whileLoop (\() -> ((i < n) + 1)) (\() -> (let bins = (bins ++ [0]) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let j = 0 in case whileLoop (\() -> (_asInt (j) < length _data)) (\() -> (let d = (_data !! j) in (let index = 0 in case whileLoop (\() -> (_asInt (index) < length limits)) (\() -> case if (d < (limits !! index)) then Just () else Nothing of Just v -> Just v; Nothing -> case if (d == (limits !! index)) then (let index = (_asInt (index) + 1) in Just ()) else Nothing of Just v -> Just v; Nothing -> (let index = (_asInt (index) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let bins = Map.insert index (_asInt ((bins !! index)) + 1) bins in (let j = (_asInt (j) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (bins)))))

padLeft :: Int -> Int -> String
padLeft n width =
  fromMaybe ("") $
    (let s = show n in (let pad = (_asInt (width) - length s) in (let out = "" in (let i = 0 in case whileLoop (\() -> (i < pad)) (\() -> (let out = (out + " ") in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just ((out + s))))))

printBins :: [Int] -> [Int] -> ()
printBins limits bins =
  fromMaybe (()) $
    (let n = length limits in case (let _ = putStrLn (((("           < " ++ padLeft (limits !! 0) 3) ++ " = ") ++ padLeft (bins !! 0) 2)) in Nothing) of Just v -> Just v; Nothing -> (let i = 1 in case whileLoop (\() -> (i < n)) (\() -> case (let _ = putStrLn ((((((">= " ++ padLeft (limits !! (_asInt (i) - 1)) 3) ++ " and < ") ++ padLeft (limits !! i) 3) ++ " = ") ++ padLeft (bins !! i) 2)) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((((">= " ++ padLeft (limits !! (_asInt (n) - 1)) 3) ++ "           = ") ++ padLeft (bins !! n) 2)) in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn ("") in Nothing)))

main :: ()
main =
  fromMaybe (()) $
    (let limitsList = [[23, 37, 43, 53, 67, 83], [14, 18, 249, 312, 389, 392, 513, 591, 634, 720]] in (let dataList = [[95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55], [445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749]] in (let i = 0 in whileLoop (\() -> (_asInt (i) < length limitsList)) (\() -> case (let _ = putStrLn ((("Example " ++ show (_asInt (i) + 1)) ++ "\n")) in Nothing) of Just v -> Just v; Nothing -> (let bins = getBins (limitsList !! i) (dataList !! i) in case (let _ = printBins (limitsList !! i) bins in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))))))
  where
    limitsList = [[23, 37, 43, 53, 67, 83], [14, 18, 249, 312, 389, 392, 513, 591, 634, 720]]
    dataList = [[95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55], [445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749]]

main :: IO ()
main = do
  main
