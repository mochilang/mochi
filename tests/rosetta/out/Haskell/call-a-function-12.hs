-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:28Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.Maybe (fromMaybe)

mkAdd :: Int -> (Int -> Int)
mkAdd a = (\b -> (a + b))

mysum :: Int -> Int -> Int
mysum x y = (x + y)

partialSum :: Int -> (Int -> Int)
partialSum x = (\y -> mysum x y)

main :: ()
main =
  fromMaybe (()) $
    (let add2 = mkAdd 2 in (let add3 = mkAdd 3 in case (let _ = putStrLn (((show add2 5 ++ " ") ++ show add3 6)) in Nothing) of Just v -> Just v; Nothing -> (let partial = partialSum 13 in (let _ = putStrLn (show partial 5) in Nothing))))
  where
    add2 = mkAdd 2
    add3 = mkAdd 3

main :: IO ()
main = do
  main
