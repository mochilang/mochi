runhaskell: exit status 1

/workspace/mochi/tests/rosetta/out/Haskell/100-doors-2.hs:133:32: error:
    • Couldn't match expected type ‘IO b0’ with actual type ‘()’
    • In the first argument of ‘fromMaybe’, namely ‘()’
      In the expression:
        fromMaybe
          ()
          ((let line = (("Door " ++ show current) ++ " ")
            in
              case
                  if (current == door) then
                      (let line = (line + "Open")
                       in
                         (let incrementer = (incrementer + 1)
                          in (let door = (((door + 2) * incrementer) + 1) in Nothing)))
                  else
                      (let line = (line + "Closed") in Nothing)
              of
                Just v -> Just v
                Nothing -> (let _ = putStrLn (_showAny (line)) in Nothing)))
      In the first argument of ‘mapM_’, namely
        ‘(\ current
            -> fromMaybe
                 ()
                 ((let line = (("Door " ++ show current) ++ " ")
                   in
                     case
                         if (current == door) then
                             (let line = ...
                              in (let incrementer = ... in (let door = ... in Nothing)))
                         else
                             (let line = ... in Nothing)
                     of
                       Just v -> Just v
                       Nothing -> (let _ = ... in Nothing))))’
    |
133 |   mapM_ (\current -> fromMaybe () ((let line = (("Door " ++ show current) ++ " ") in case if (current == door) then (let line = (line + "Open") in (let incrementer = (incrementer + 1) in (let door = (((door + 2) * incrementer) + 1) in Nothing))) else (let line = (line + "Closed") in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn (_showAny (line)) in Nothing)))) [1 .. 101 - 1]
    |                                ^^

/workspace/mochi/tests/rosetta/out/Haskell/100-doors-2.hs:133:355: error:
    • Couldn't match expected type ‘AnyValue’ with actual type ‘[Char]’
    • In the first argument of ‘_showAny’, namely ‘(line)’
      In the first argument of ‘putStrLn’, namely ‘(_showAny (line))’
      In the expression: putStrLn (_showAny (line))
    |
133 |   mapM_ (\current -> fromMaybe () ((let line = (("Door " ++ show current) ++ " ") in case if (current == door) then (let line = (line + "Open") in (let incrementer = (incrementer + 1) in (let door = (((door + 2) * incrementer) + 1) in Nothing))) else (let line = (line + "Closed") in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn (_showAny (line)) in Nothing)))) [1 .. 101 - 1]
    |                                                                                                                                                                                                                                                                                                                                                                   ^^^^
