-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:25Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

toUnsigned16 :: Int -> Int
toUnsigned16 n =
  fromMaybe (0) $
    (let u = n in case if (_asInt (u) < 0) then (let u = (_asInt (u) + 65536) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just ((u `mod` 65536)))

bin16 :: Int -> String
bin16 n =
  fromMaybe ("") $
    (let u = toUnsigned16 n in (let bits = "" in (let mask = 32768 in case forLoop 0 16 (\i -> case if (u >= mask) then (let bits = (bits + "1") in (let u = (u - mask) in Nothing)) else (let bits = (bits + "0") in Nothing) of Just v -> Just v; Nothing -> (let mask = (read ((div mask 2)) :: Int) in Nothing)) of Just v -> Just v; Nothing -> Just (bits))))

bit_and :: Int -> Int -> Int
bit_and a b =
  fromMaybe (0) $
    (let ua = toUnsigned16 a in (let ub = toUnsigned16 b in (let res = 0 in (let bit = 1 in case forLoop 0 16 (\i -> case if (((((ua `mod` 2) == 1) && ub) `mod` 2) == 1) then (let res = (res + bit) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let ua = (read ((div ua 2)) :: Int) in (let ub = (read ((div ub 2)) :: Int) in (let bit = (_asInt (bit) * 2) in Nothing)))) of Just v -> Just v; Nothing -> Just (res)))))

bit_or :: Int -> Int -> Int
bit_or a b =
  fromMaybe (0) $
    (let ua = toUnsigned16 a in (let ub = toUnsigned16 b in (let res = 0 in (let bit = 1 in case forLoop 0 16 (\i -> case if (((((ua `mod` 2) == 1) || ub) `mod` 2) == 1) then (let res = (res + bit) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let ua = (read ((div ua 2)) :: Int) in (let ub = (read ((div ub 2)) :: Int) in (let bit = (_asInt (bit) * 2) in Nothing)))) of Just v -> Just v; Nothing -> Just (res)))))

bit_xor :: Int -> Int -> Int
bit_xor a b =
  fromMaybe (0) $
    (let ua = toUnsigned16 a in (let ub = toUnsigned16 b in (let res = 0 in (let bit = 1 in case forLoop 0 16 (\i -> (let abit = (ua `mod` 2) in (let bbit = (ub `mod` 2) in case if (((((_asInt (abit) == 1) && bbit) == 0)) || ((((_asInt (abit) == 0) && bbit) == 1))) then (let res = (res + bit) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let ua = (read ((div ua 2)) :: Int) in (let ub = (read ((div ub 2)) :: Int) in (let bit = (_asInt (bit) * 2) in Nothing)))))) of Just v -> Just v; Nothing -> Just (res)))))

bit_not :: Int -> Int
bit_not a =
  fromMaybe (0) $
    (let ua = toUnsigned16 a in Just ((65535 - _asInt (ua))))

shl :: Int -> Int -> Int
shl a b =
  fromMaybe (0) $
    (let ua = toUnsigned16 a in (let i = 0 in case whileLoop (\() -> (i < b)) (\() -> (let ua = (((_asInt (ua) * 2)) `mod` 65536) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (ua)))

shr :: Int -> Int -> Int
shr a b =
  fromMaybe (0) $
    (let ua = toUnsigned16 a in (let i = 0 in case whileLoop (\() -> (i < b)) (\() -> (let ua = (read ((div ua 2)) :: Int) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (ua)))

las :: Int -> Int -> Int
las a b = shl a b

ras :: Int -> Int -> Int
ras a b =
  fromMaybe (0) $
    (let val = a in (let i = 0 in case whileLoop (\() -> (i < b)) (\() -> case if (_asInt (val) >= 0) then (let val = (read ((div val 2)) :: Int) in Nothing) else (let val = (read ((div ((_asInt (val) - 1)) 2)) :: Int) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just (toUnsigned16 val)))

rol :: Int -> Int -> Int
rol a b =
  fromMaybe (0) $
    (let ua = toUnsigned16 a in (let left = shl ua b in (let right = shr ua (16 - _asInt (b)) in Just (toUnsigned16 (left + right)))))

ror :: Int -> Int -> Int
ror a b =
  fromMaybe (0) $
    (let ua = toUnsigned16 a in (let right = shr ua b in (let left = shl ua (16 - _asInt (b)) in Just (toUnsigned16 (left + right)))))

bitwise :: Int -> Int -> ()
bitwise a b = fromMaybe (()) $
  case (let _ = putStrLn (("a:   " ++ bin16 a)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("b:   " ++ bin16 b)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("and: " ++ bin16 bit_and a b)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("or:  " ++ bin16 bit_or a b)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("xor: " ++ bin16 bit_xor a b)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("not: " ++ bin16 bit_not a)) in Nothing) of Just v -> Just v; Nothing -> case if (_asInt (b) < 0) then case (let _ = putStrLn ("Right operand is negative, but all shifts require an unsigned right operand (shift distance).") in Nothing) of Just v -> Just v; Nothing -> Just (0) else Nothing of Just v -> Just v; Nothing -> case (let _ = putStrLn (("shl: " ++ bin16 shl a b)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("shr: " ++ bin16 shr a b)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("las: " ++ bin16 las a b)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("ras: " ++ bin16 ras a b)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("rol: " ++ bin16 rol a b)) in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn (("ror: " ++ bin16 ror a b)) in Nothing)

main :: IO ()
main = do
  bitwise (-460) 6
