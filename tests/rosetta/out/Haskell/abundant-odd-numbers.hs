-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:09Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

divisors :: Int -> [Int]
divisors n =
  fromMaybe ([]) $
    (let divs = [1] in (let divs2 = [] in (let i = 2 in case whileLoop (\() -> ((i * i) <= n)) (\() -> case if ((n `mod` i) == 0) then (let j = (read ((n / i)) :: Int) in (let divs = (divs ++ [i]) in if (i /= j) then (let divs2 = (divs2 ++ [j]) in Nothing) else Nothing)) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let j = (length divs2 - 1) in case whileLoop (\() -> (_asInt (j) >= 0)) (\() -> (let divs = (divs ++ [(divs2 !! j)]) in (let j = (_asInt (j) - 1) in Nothing))) of Just v -> Just v; Nothing -> Just (divs)))))

sum :: [Int] -> Int
sum xs =
  fromMaybe (0) $
    (let tot = 0 in case foldr (\v acc -> case (let tot = (tot + v) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing xs of Just v -> Just v; Nothing -> Just (tot))

sumStr :: [Int] -> String
sumStr xs =
  fromMaybe ("") $
    (let s = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length xs)) (\() -> (let s = ((s + show (xs !! i)) + " + ") in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (take ((length s - 3) - 0) (drop 0 s))))

pad2 :: Int -> String
pad2 n =
  fromMaybe ("") $
    (let s = show n in case if (length s < 2) then Just ((" " + s)) else Nothing of Just v -> Just v; Nothing -> Just (s))
  where
    s = show n

pad5 :: Int -> String
pad5 n =
  fromMaybe ("") $
    (let s = show n in case whileLoop (\() -> (length s < 5)) (\() -> (let s = (" " + s) in Nothing)) of Just v -> Just v; Nothing -> Just (s))

abundantOdd :: Int -> Int -> Int -> Bool -> Int
abundantOdd searchFrom countFrom countTo printOne =
  fromMaybe (0) $
    (let count = countFrom in (let n = searchFrom in case whileLoop (\() -> (count < countTo)) (\() -> (let divs = divisors n in (let tot = sum divs in case if (tot > n) then (let count = (count + 1) in case if _asBool (((printOne && count) < countTo)) then (let n = (_asInt (n) + 2) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let s = sumStr divs in if _asBool (not printOne) then (let _ = putStrLn (_showAny (((((((pad2 count ++ ". ") ++ pad5 n) ++ " < ") + s) + " = ") + show tot))) in Nothing) else (let _ = putStrLn (_showAny (((((show n ++ " < ") + s) + " = ") + show tot))) in Nothing))) else Nothing of Just v -> Just v; Nothing -> (let n = (_asInt (n) + 2) in Nothing)))) of Just v -> Just v; Nothing -> Just (n)))

main :: ()
main =
  fromMaybe (()) $
    (let max = 25 in case (let _ = putStrLn ((("The first " ++ show max) ++ " abundant odd numbers are:")) in Nothing) of Just v -> Just v; Nothing -> (let n = abundantOdd 1 0 max False in case (let _ = putStrLn ("\nThe one thousandth abundant odd number is:") in Nothing) of Just v -> Just v; Nothing -> case (let _ = abundantOdd n max 1000 True in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\nThe first abundant odd number above one billion is:") in Nothing) of Just v -> Just v; Nothing -> (let _ = abundantOdd 1000000001 0 1 True in Nothing)))
  where
    max = 25

main :: IO ()
main = do
  main
