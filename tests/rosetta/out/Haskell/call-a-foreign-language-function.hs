-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:28Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.Maybe (fromMaybe)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

strdup :: String -> String
strdup s = (s + "")

main :: ()
main =
  fromMaybe (()) $
    (let go1 = "hello C" in (let c2 = strdup go1 in (let _ = putStrLn (_showAny (c2)) in Nothing)))
  where
    go1 = "hello C"
    c2 = strdup go1

main :: IO ()
main = do
  main
