-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:30Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

conv2d :: [[Double]] -> [[Double]] -> [[Double]]
conv2d img k =
  fromMaybe ([]) $
    (let h = length img in (let w = length (img !! 0) in (let n = length k in (let half = (div n 2) in (let out = [] in (let y = 0 in case whileLoop (\() -> (y < h)) (\() -> (let row = [] in (let x = 0 in case whileLoop (\() -> (x < w)) (\() -> (let sum = 0.0 in (let j = 0 in case whileLoop (\() -> (j < n)) (\() -> (let i = 0 in case whileLoop (\() -> (i < n)) (\() -> (let yy = ((y + j) - half) in case if (_asInt (yy) < 0) then (let yy = 0 in Nothing) else Nothing of Just v -> Just v; Nothing -> case if (yy >= h) then (let yy = (_asInt (h) - 1) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let xx = ((x + i) - half) in case if (_asInt (xx) < 0) then (let xx = 0 in Nothing) else Nothing of Just v -> Just v; Nothing -> case if (xx >= w) then (let xx = (_asInt (w) - 1) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let sum = ((sum + ((img !! yy) !! xx)) * ((k !! j) !! i)) in (let i = (_asInt (i) + 1) in Nothing))))) of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let row = (row ++ [sum]) in (let x = (_asInt (x) + 1) in Nothing))))) of Just v -> Just v; Nothing -> (let out = (out ++ [row]) in (let y = (_asInt (y) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (out)))))))
  where
    h = length img
    w = length (img !! 0)
    n = length k
    half = (div n 2)

gradient :: [[Double]] -> [[Double]]
gradient img =
  fromMaybe ([]) $
    (let hx = [[(-1.0), 0.0, 1.0], [(-2.0), 0.0, 2.0], [(-1.0), 0.0, 1.0]] in (let hy = [[1.0, 2.0, 1.0], [0.0, 0.0, 0.0], [(-1.0), (-2.0), (-1.0)]] in (let gx = conv2d img hx in (let gy = conv2d img hy in (let h = length img in (let w = length (img !! 0) in (let out = [] in (let y = 0 in case whileLoop (\() -> (y < h)) (\() -> (let row = [] in (let x = 0 in case whileLoop (\() -> (x < w)) (\() -> (let g = (((((gx !! y) !! x) * ((gx !! y) !! x)) + ((gy !! y) !! x)) * ((gy !! y) !! x)) in (let row = (row ++ [g]) in (let x = (_asInt (x) + 1) in Nothing)))) of Just v -> Just v; Nothing -> (let out = (out ++ [row]) in (let y = (_asInt (y) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (out)))))))))
  where
    hx = [[(-1.0), 0.0, 1.0], [(-2.0), 0.0, 2.0], [(-1.0), 0.0, 1.0]]
    hy = [[1.0, 2.0, 1.0], [0.0, 0.0, 0.0], [(-1.0), (-2.0), (-1.0)]]

threshold :: [[Double]] -> Double -> [[Int]]
threshold g t =
  fromMaybe ([]) $
    (let h = length g in (let w = length (g !! 0) in (let out = [] in (let y = 0 in case whileLoop (\() -> (y < h)) (\() -> (let row = [] in (let x = 0 in case whileLoop (\() -> (x < w)) (\() -> case if (((g !! y) !! x) >= t) then (let row = (row ++ [1]) in Nothing) else (let row = (row ++ [0]) in Nothing) of Just v -> Just v; Nothing -> (let x = (_asInt (x) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let out = (out ++ [row]) in (let y = (_asInt (y) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (out)))))

printMatrix :: [[Int]] -> ()
printMatrix m =
  fromMaybe (()) $
    (let y = 0 in whileLoop (\() -> (_asInt (y) < length m)) (\() -> (let line = "" in (let x = 0 in case whileLoop (\() -> (_asInt (x) < length (m !! 0))) (\() -> (let line = (line + show ((m !! y) !! x)) in case if ((_asInt (x) < length (m !! 0)) - 1) then (let line = (line + " ") in Nothing) else Nothing of Just v -> Just v; Nothing -> (let x = (_asInt (x) + 1) in Nothing))) of Just v -> Just v; Nothing -> case (let _ = putStrLn (_showAny (line)) in Nothing) of Just v -> Just v; Nothing -> (let y = (_asInt (y) + 1) in Nothing)))))

main :: ()
main =
  fromMaybe (()) $
    (let img = [[0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]] in (let g = gradient img in (let edges = threshold g (1020.0 * 1020.0) in (let _ = printMatrix edges in Nothing))))
  where
    img = [[0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]]
    g = gradient img
    edges = threshold g (1020.0 * 1020.0)

PI = 3.141592653589793

main :: IO ()
main = do
  main
