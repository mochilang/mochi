-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:26Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

primesUpTo :: Int -> [Int]
primesUpTo n =
  fromMaybe ([]) $
    (let sieve = [] in (let i = 0 in case whileLoop (\() -> (i <= n)) (\() -> (let sieve = (sieve ++ [True]) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let p = 2 in case whileLoop (\() -> ((p * p) <= n)) (\() -> case if _asBool ((sieve !! p)) then (let m = (p * p) in whileLoop (\() -> (m <= n)) (\() -> (let sieve = Map.insert m False sieve in (let m = (m + p) in Nothing)))) else Nothing of Just v -> Just v; Nothing -> (let p = (_asInt (p) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let res = [] in (let x = 2 in case whileLoop (\() -> (x <= n)) (\() -> case if _asBool ((sieve !! x)) then (let res = (res ++ [x]) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let x = (_asInt (x) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just (res))))))

sortInts :: [Int] -> [Int]
sortInts xs =
  fromMaybe ([]) $
    (let res = [] in (let tmp = xs in case whileLoop (\() -> (length tmp > 0)) (\() -> (let min = (tmp !! 0) in (let idx = 0 in (let i = 1 in case whileLoop (\() -> (_asInt (i) < length tmp)) (\() -> case if ((tmp !! i) < min) then (let min = (tmp !! i) in (let idx = i in Nothing)) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let res = (res ++ [min]) in (let out = [] in (let j = 0 in case whileLoop (\() -> (_asInt (j) < length tmp)) (\() -> case if (j /= idx) then (let out = (out ++ [(tmp !! j)]) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let tmp = out in Nothing)))))))) of Just v -> Just v; Nothing -> Just (res)))

commatize :: Int -> String
commatize n =
  fromMaybe ("") $
    (let s = show n in (let i = (length s - 3) in case whileLoop (\() -> (_asInt (i) >= 1)) (\() -> (let s = ((take (i - 0) (drop 0 s) + ",") + take (length s - i) (drop i s)) in (let i = (_asInt (i) - 3) in Nothing))) of Just v -> Just v; Nothing -> Just (s)))

getBrilliant :: Int -> Int -> Bool -> Map.Map String ()
getBrilliant digits limit countOnly =
  fromMaybe (()) $
    (let brilliant = [] in (let count = 0 in (let pow = 1 in (let next = 999999999999999 in (let k = 1 in case whileLoop (\() -> (k <= digits)) (\() -> (let s = [] in case foldr (\p acc -> case case if ((p >= pow) * 10) then Just () else Nothing of Just v -> Just v; Nothing -> if (p > pow) then (let s = (s ++ [p]) in Nothing) else Nothing of Just v -> Just v; Nothing -> acc) Nothing primes of Just v -> Just v; Nothing -> (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> (let j = i in case whileLoop (\() -> (_asInt (j) < length s)) (\() -> (let prod = ((s !! i) * (s !! j)) in case if (prod < limit) then if _asBool (countOnly) then (let count = (count + 1) in Nothing) else (let brilliant = (brilliant ++ [prod]) in Nothing) else case if (prod < next) then (let next = prod in Nothing) else Nothing of Just v -> Just v; Nothing -> Just () of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let pow = (_asInt (pow) * 10) in (let k = (_asInt (k) + 1) in Nothing))))) of Just v -> Just v; Nothing -> case if _asBool (countOnly) then Just (Map.fromList [("bc", VString (count)), ("next", next)]) else Nothing of Just v -> Just v; Nothing -> Just (Map.fromList [("bc", brilliant), ("next", next)]))))))

main :: ()
main = fromMaybe (()) $
  case (let _ = putStrLn ("First 100 brilliant numbers:") in Nothing) of Just v -> Just v; Nothing -> (let r = getBrilliant 2 10000 False in (let br = sortInts (r !! "bc") in (let br = take (100 - 0) (drop 0 br) in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length br)) (\() -> case (let _ = putStrLn (unwords [_showAny ((show (br !! i) 4 " " + " ")), show (False)]) in Nothing) of Just v -> Just v; Nothing -> case if ((((_asInt (i) + 1)) `mod` 10) == 0) then (let _ = putStrLn (unwords ["", show (True)]) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> case (let _ = putStrLn (unwords ["", show (True)]) in Nothing) of Just v -> Just v; Nothing -> (let k = 1 in whileLoop (\() -> (_asInt (k) <= 13)) (\() -> (let limit = pow 10 k in (let r2 = getBrilliant k limit True in (let total = (r2 !! "bc") in (let next = (r2 !! "next") in (let climit = commatize limit in (let ctotal = commatize (_asInt (total) + 1) in (let cnext = commatize next in case (let _ = putStrLn (_showAny (((((("First >= " + fromMaybe (error "missing") (Map.lookup "padStart" (climit)) 18 " ") + " is ") + fromMaybe (error "missing") (Map.lookup "padStart" (ctotal)) 14 " ") + " in the series: ") + fromMaybe (error "missing") (Map.lookup "padStart" (cnext)) 18 " "))) in Nothing) of Just v -> Just v; Nothing -> (let k = (_asInt (k) + 1) in Nothing))))))))))))))

primes = primesUpTo 3200000

main :: IO ()
main = do
  return ()
