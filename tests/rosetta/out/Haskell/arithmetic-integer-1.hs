-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:22Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.Maybe (fromMaybe)

main :: ()
main =
  fromMaybe (()) $
    (let a = 12 in (let b = 8 in case (let _ = putStrLn (((((show a ++ " + ") ++ show b) ++ " = ") ++ show (a + b))) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (((((show a ++ " - ") ++ show b) ++ " = ") ++ show (a - b))) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (((((show a ++ " * ") ++ show b) ++ " = ") ++ show (a * b))) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (((((show a ++ " / ") ++ show b) ++ " = ") ++ show (read ((a / b)) :: Int))) in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn (((((show a ++ " % ") ++ show b) ++ " = ") ++ show (a `mod` b))) in Nothing)))
  where
    a = 12
    b = 8

main :: IO ()
main = do
  main
