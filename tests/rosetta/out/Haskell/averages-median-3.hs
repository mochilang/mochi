-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:28Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)
import Data.Time.Clock.POSIX (getPOSIXTime)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

_now :: IO Int
_now = fmap round getPOSIXTime

qsel :: [Double] -> Int -> Double
qsel a k =
  fromMaybe (0.0) $
    (let arr = a in case whileLoop (\() -> (length arr > 1)) (\() -> (let px = (_now `mod` length arr) in (let pv = (arr !! px) in (let last = (length arr - 1) in (let tmp = (arr !! px) in (let arr = Map.insert px (arr !! last) arr in (let arr = Map.insert last tmp arr in (let px = 0 in (let i = 0 in case whileLoop (\() -> (i < last)) (\() -> (let v = (arr !! i) in case if (v < pv) then (let tmp2 = (arr !! px) in (let arr = Map.insert px (arr !! i) arr in (let arr = Map.insert i tmp2 arr in (let px = (_asInt (px) + 1) in Nothing)))) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> case if (px == k) then Just (pv) else Nothing of Just v -> Just v; Nothing -> if (k < px) then (let arr = take (px - 0) (drop 0 arr) in Nothing) else (let tmp2 = (arr !! px) in (let arr = Map.insert px pv arr in (let arr = Map.insert last tmp2 arr in (let arr = take (length arr - ((_asInt (px) + 1))) (drop ((_asInt (px) + 1)) arr) in (let k = (k - ((_asInt (px) + 1))) in Nothing)))))))))))))) of Just v -> Just v; Nothing -> Just ((arr !! 0)))

median :: [Double] -> Double
median list =
  fromMaybe (0.0) $
    (let arr = list in (let half = (read ((div length arr 2)) :: Int) in (let med = qsel arr half in case if ((length arr `mod` 2) == 0) then Just ((_asDouble (((_asDouble (med) + qsel arr (_asInt (half) - 1)))) / 2.0)) else Nothing of Just v -> Just v; Nothing -> Just (med))))

main :: IO ()
main = do
  putStrLn (show median [3.0, 1.0, 4.0, 1.0])
  putStrLn (show median [3.0, 1.0, 4.0, 1.0, 5.0])
