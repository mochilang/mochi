-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:07Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

neighborsList :: [[Int]]
neighborsList = [[1, 3], [0, 2, 4], [1, 5], [0, 4, 6], [1, 3, 5, 7], [2, 4, 8], [3, 7], [4, 6, 8], [5, 7]]

plus :: [Int] -> [Int] -> [Int]
plus a b =
  fromMaybe ([]) $
    (let res = [] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length a)) (\() -> (let res = (res ++ [((a !! i) + (b !! i))]) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (res)))

isStable :: [Int] -> Bool
isStable p = fromMaybe (False) $
  case foldr (\v acc -> case if (_asInt (v) > 3) then Just (False) else Nothing of Just v -> Just v; Nothing -> acc) Nothing p of Just v -> Just v; Nothing -> Just (True)

topple :: [Int] -> Int
topple p =
  fromMaybe (0) $
    (let neighbors = neighborsList in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length p)) (\() -> case if (_asInt ((p !! i)) > 3) then (let p = Map.insert i (_asInt ((p !! i)) - 4) p in (let nbs = (neighbors !! i) in case foldr (\j acc -> case (let p = Map.insert j (_asInt ((p !! j)) + 1) p in Nothing) of Just v -> Just v; Nothing -> acc) Nothing nbs of Just v -> Just v; Nothing -> Just (0))) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just (0)))
  where
    neighbors = neighborsList

pileString :: [Int] -> String
pileString p =
  fromMaybe ("") $
    (let s = "" in (let r = 0 in case whileLoop (\() -> (_asInt (r) < 3)) (\() -> (let c = 0 in case whileLoop (\() -> (_asInt (c) < 3)) (\() -> (let s = ((s + show (p !! ((3 * _asInt (r)) + _asInt (c)))) + " ") in (let c = (_asInt (c) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let s = (s + "\n") in (let r = (_asInt (r) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (s)))

s4 = [4, 3, 3, 3, 1, 2, 0, 2, 3]

s1 = [1, 2, 0, 2, 1, 1, 0, 1, 3]

s2 = [2, 1, 3, 1, 0, 1, 0, 1, 0]

s3_a = plus s1 s2

s3_b = plus s2 s1

s3 = [3, 3, 3, 3, 3, 3, 3, 3, 3]

s3_id = [2, 1, 2, 1, 0, 1, 2, 1, 2]

s4b = plus s3 s3_id

s5 = plus s3_id s3_id

main :: IO ()
main = do
  putStrLn ("Avalanche of topplings:\n")
  putStrLn (pileString s4)
  let _ = whileLoop (\() -> not isStable s4) (\() -> Nothing <$ (fromMaybe () (case (let _ = topple s4 in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn (pileString s4) in Nothing)))) in return ()
  putStrLn ("Commutative additions:\n")
  let _ = whileLoop (\() -> not isStable s3_a) (\() -> Nothing <$ (topple s3_a)) in return ()
  let _ = whileLoop (\() -> not isStable s3_b) (\() -> Nothing <$ (topple s3_b)) in return ()
  putStrLn (((((pileString s1 ++ "\nplus\n\n") ++ pileString s2) ++ "\nequals\n\n") ++ pileString s3_a))
  putStrLn (((((("and\n\n" ++ pileString s2) ++ "\nplus\n\n") ++ pileString s1) ++ "\nalso equals\n\n") ++ pileString s3_b))
  putStrLn ("Addition of identity sandpile:\n")
  let _ = whileLoop (\() -> not isStable s4b) (\() -> Nothing <$ (topple s4b)) in return ()
  putStrLn (((((pileString s3 ++ "\nplus\n\n") ++ pileString s3_id) ++ "\nequals\n\n") ++ pileString s4b))
  putStrLn ("Addition of identities:\n")
  let _ = whileLoop (\() -> not isStable s5) (\() -> Nothing <$ (topple s5)) in return ()
  putStrLn (((((pileString s3_id ++ "\nplus\n\n") ++ pileString s3_id) ++ "\nequals\n\n") ++ pileString s5))
