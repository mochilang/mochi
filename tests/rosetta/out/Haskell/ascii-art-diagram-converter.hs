-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:24Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.Maybe (fromMaybe)

main :: ()
main = fromMaybe (()) $
  case (let _ = putStrLn ("Diagram after trimming whitespace and removal of blank lines:\n") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("|                      ID                       |") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("|                    QDCOUNT                    |") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("|                    ANCOUNT                    |") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("|                    NSCOUNT                    |") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("|                    ARCOUNT                    |") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\nDecoded:\n") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("Name     Bits  Start  End") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("=======  ====  =====  ===") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("ID        16      0    15") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("QR         1     16    16") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("Opcode     4     17    20") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("AA         1     21    21") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("TC         1     22    22") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("RD         1     23    23") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("RA         1     24    24") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("Z          3     25    27") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("RCODE      4     28    31") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("QDCOUNT   16     32    47") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("ANCOUNT   16     48    63") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("NSCOUNT   16     64    79") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("ARCOUNT   16     80    95") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\nTest string in hex:") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("78477bbf5496e12e1bf169a4") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\nTest string in binary:") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("\nUnpacked:\n") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("Name     Size  Bit pattern") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("=======  ====  ================") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("ID        16   0111100001000111") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("QR         1   0") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("Opcode     4   1111") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("AA         1   0") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("TC         1   1") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("RD         1   1") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("RA         1   1") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("Z          3   011") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("RCODE      4   1111") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("QDCOUNT   16   0101010010010110") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("ANCOUNT   16   1110000100101110") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("NSCOUNT   16   0001101111110001") in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn ("ARCOUNT   16   0110100110100100") in Nothing)

main :: IO ()
main = do
  main
