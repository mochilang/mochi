-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:18Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

push :: [Map.Map String Int] -> Map.Map String Int -> [Map.Map String Int]
push h it =
  fromMaybe ([]) $
    (let h = (h ++ [it]) in (let i = (length h - 1) in case whileLoop (\() -> (((_asInt (i) > 0) && ((h !! (_asInt (i) - 1)) !! "s")) > ((h !! i) !! "s"))) (\() -> (let tmp = (h !! (_asInt (i) - 1)) in (let h = Map.insert (_asInt (i) - 1) (h !! i) h in (let h = Map.insert i tmp h in (let i = (_asInt (i) - 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (h)))

step :: [Map.Map String Int] -> Int -> [Int] -> Map.Map String ()
step h nv dir = fromMaybe (()) $
  case whileLoop (\() -> ((((length h == 0) || nv) * nv) <= ((h !! 0) !! "s"))) (\() -> (let h = (h ++ [Map.fromList [("s", (nv * nv)), ("a", nv), ("b", VInt (0))]]) in (let nv = (_asInt (nv) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let s = ((h !! 0) !! "s") in (let v = [] in case whileLoop (\() -> (((length h > 0) && ((h !! 0) !! "s")) == s)) (\() -> (let it = (h !! 0) in (let h = take (length h - 1) (drop 1 h) in (let v = (v ++ [[(it !! "a"), (it !! "b")]]) in if ((it !! "a") > (it !! "b")) then (let h = (h ++ [Map.fromList [("s", ((((it !! "a") * (it !! "a")) + ((_asInt ((it !! "b")) + 1))) * ((_asInt ((it !! "b")) + 1)))), ("a", (it !! "a")), ("b", (_asInt ((it !! "b")) + 1))]]) in Nothing) else Nothing)))) of Just v -> Just v; Nothing -> (let list = [] in case foldr (\p acc -> case (let list = (list ++ [p]) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing v of Just v -> Just v; Nothing -> (let temp = list in case foldr (\p acc -> case if ((p !! 0) /= (p !! 1)) then (let list = (list ++ [[(p !! 1), (p !! 0)]]) in Nothing) else Nothing of Just v -> Just v; Nothing -> acc) Nothing temp of Just v -> Just v; Nothing -> (let temp = list in case foldr (\p acc -> case if (_asInt ((p !! 1)) /= 0) then (let list = (list ++ [[(p !! 0), (-(_asInt ((p !! 1))))]]) in Nothing) else Nothing of Just v -> Just v; Nothing -> acc) Nothing temp of Just v -> Just v; Nothing -> (let temp = list in case foldr (\p acc -> case if (_asInt ((p !! 0)) /= 0) then (let list = (list ++ [[(-(_asInt ((p !! 0)))), (p !! 1)]]) in Nothing) else Nothing of Just v -> Just v; Nothing -> acc) Nothing temp of Just v -> Just v; Nothing -> (let bestDot = (-999999999) in (let best = dir in case foldr (\p acc -> case (let cross = ((((p !! 0) * (dir !! 1)) - (p !! 1)) * (dir !! 0)) in if (_asInt (cross) >= 0) then (let dot = ((((p !! 0) * (dir !! 0)) + (p !! 1)) * (dir !! 1)) in if (dot > bestDot) then (let bestDot = dot in (let best = p in Nothing)) else Nothing) else Nothing) of Just v -> Just v; Nothing -> acc) Nothing list of Just v -> Just v; Nothing -> Just (Map.fromList [("d", best), ("heap", h), ("n", nv)])))))))))

positions :: Int -> [[Int]]
positions n =
  fromMaybe ([]) $
    (let pos = [] in (let x = 0 in (let y = 0 in (let dir = [0, 1] in (let heap = [] in (let nv = 1 in (let i = 0 in case whileLoop (\() -> (i < n)) (\() -> (let pos = (pos ++ [[x, y]]) in (let st = step heap nv dir in (let dir = (st !! "d") in (let heap = (st !! "heap") in (let nv = (read (st !! "n") :: Int) in (let x = (x + (dir !! 0)) in (let y = (y + (dir !! 1)) in (let i = (_asInt (i) + 1) in Nothing))))))))) of Just v -> Just v; Nothing -> Just (pos))))))))

pad :: String -> Int -> String
pad s w =
  fromMaybe ("") $
    (let r = s in case whileLoop (\() -> (length r < _asInt (w))) (\() -> (let r = (r + " ") in Nothing)) of Just v -> Just v; Nothing -> Just (r))

main :: ()
main =
  fromMaybe (()) $
    (let pts = positions 40 in case (let _ = putStrLn ("The first 40 Babylonian spiral points are:") in Nothing) of Just v -> Just v; Nothing -> (let line = "" in (let i = 0 in whileLoop (\() -> (_asInt (i) < length pts)) (\() -> (let p = (pts !! i) in (let s = pad (((("(" ++ show (p !! 0)) ++ ", ") ++ show (p !! 1)) ++ ")") 10 in (let line = (line + s) in case if ((((_asInt (i) + 1)) `mod` 10) == 0) then case (let _ = putStrLn (_showAny (line)) in Nothing) of Just v -> Just v; Nothing -> (let line = "" in Nothing) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))))))))
  where
    pts = positions 40

main :: IO ()
main = do
  main
