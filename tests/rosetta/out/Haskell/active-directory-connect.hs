-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:10Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}
module Main where

import Data.Maybe (fromMaybe)
import qualified Data.Map as Map
import GHC.Generics (Generic)


data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"


data LDAPClient = LDAPClient {
    Base :: String,
    Host :: String,
    Port :: Int,
    UseSSL :: Bool,
    BindDN :: String,
    BindPassword :: String,
    UserFilter :: String,
    GroupFilter :: String,
    Attributes :: [String]
} deriving (Eq, Show, Generic)


connect :: LDAPClient -> Bool
connect client = (_asInt (((fromMaybe (error "missing") (Map.lookup "Host" (client)) /= "") && fromMaybe (error "missing") (Map.lookup "Port" (client)))) > 0)

main :: ()
main  = fromMaybe (()) $
    (let client = LDAPClient { Base = "dc=example,dc=com", Host = "ldap.example.com", Port = 389, UseSSL = False, BindDN = "uid=readonlyuser,ou=People,dc=example,dc=com", BindPassword = "readonlypassword", UserFilter = "(uid=%s)", GroupFilter = "(memberUid=%s)", Attributes = ["givenName", "sn", "mail", "uid"] } in if connect client then (let _ = putStrLn (_showAny (("Connected to " + fromMaybe (error "missing") (Map.lookup "Host" (client))))) in Nothing) else (let _ = putStrLn ("Failed to connect") in Nothing))
  where
    client = LDAPClient { Base = "dc=example,dc=com", Host = "ldap.example.com", Port = 389, UseSSL = False, BindDN = "uid=readonlyuser,ou=People,dc=example,dc=com", BindPassword = "readonlypassword", UserFilter = "(uid=%s)", GroupFilter = "(memberUid=%s)", Attributes = ["givenName", "sn", "mail", "uid"] }

main :: IO ()
main = do
    main 
