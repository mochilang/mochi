-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:26Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

contains :: String -> String -> Bool
contains s ch =
  fromMaybe (False) $
    (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> case if (take ((_asInt (i) + 1) - i) (drop i s) == ch) then Just (True) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just (False))

sortStrings :: [String] -> [String]
sortStrings xs =
  fromMaybe ([]) $
    (let arr = xs in (let n = length arr in (let i = 0 in case whileLoop (\() -> (i < n)) (\() -> (let j = 0 in case whileLoop (\() -> ((j < n) - 1)) (\() -> case if ((arr !! j) > (arr !! (_asInt (j) + 1))) then (let tmp = (arr !! j) in (let arr = Map.insert j (arr !! (_asInt (j) + 1)) arr in (let arr = Map.insert (_asInt (j) + 1) tmp arr in Nothing))) else Nothing of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (arr))))

bwt :: String -> Map.Map String ()
bwt s = fromMaybe (()) $
  case if (contains s stx || contains s etx) then Just (Map.fromList [("err", VBool (True)), ("res", VString (""))]) else Nothing of Just v -> Just v; Nothing -> (let s = ((stx + s) + etx) in (let le = length s in (let table = [] in (let i = 0 in case whileLoop (\() -> (i < le)) (\() -> (let rot = (take (le - i) (drop i s) ++ take (i - 0) (drop 0 s)) in (let table = (table ++ [rot]) in (let i = (_asInt (i) + 1) in Nothing)))) of Just v -> Just v; Nothing -> (let table = sortStrings table in (let last = "" in (let i = 0 in case whileLoop (\() -> (i < le)) (\() -> (let last = (last + take (le - (_asInt (le) - 1)) (drop (_asInt (le) - 1) (table !! i))) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (Map.fromList [("err", VBool (False)), ("res", last)]))))))))

ibwt :: String -> String
ibwt r =
  fromMaybe ("") $
    (let le = length r in (let table = [] in (let i = 0 in case whileLoop (\() -> (i < le)) (\() -> (let table = (table ++ [""]) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let n = 0 in case whileLoop (\() -> (n < le)) (\() -> (let i = 0 in case whileLoop (\() -> (i < le)) (\() -> (let table = Map.insert i (take ((_asInt (i) + 1) - i) (drop i r) + (table !! i)) table in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let table = sortStrings table in (let n = (_asInt (n) + 1) in Nothing)))) of Just v -> Just v; Nothing -> (let i = 0 in case whileLoop (\() -> (i < le)) (\() -> case if (take (le - (_asInt (le) - 1)) (drop (_asInt (le) - 1) (table !! i)) == etx) then Just (take ((_asInt (le) - 1) - 1) (drop 1 (table !! i))) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just (""))))))
  where
    le = length r

makePrintable :: String -> String
makePrintable s =
  fromMaybe ("") $
    (let out = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> (let ch = take ((_asInt (i) + 1) - i) (drop i s) in case if (ch == stx) then (let out = (out + "^") in Nothing) else if (ch == etx) then (let out = (out + "|") in Nothing) else (let out = (out + ch) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (out)))

main :: ()
main =
  fromMaybe (()) $
    (let examples = ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"] in foldr (\t acc -> case case (let _ = putStrLn (makePrintable t) in Nothing) of Just v -> Just v; Nothing -> (let res = bwt t in case if _asBool ((res !! "err")) then case (let _ = putStrLn (" --> ERROR: String can't contain STX or ETX") in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn (" -->") in Nothing) else (let enc = show (res !! "res") in case (let _ = putStrLn ((" --> " ++ makePrintable enc)) in Nothing) of Just v -> Just v; Nothing -> (let r = ibwt enc in (let _ = putStrLn (_showAny ((" --> " + r))) in Nothing))) of Just v -> Just v; Nothing -> (let _ = putStrLn ("") in Nothing)) of Just v -> Just v; Nothing -> acc) Nothing examples)
  where
    examples = ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"]

stx = "\x02"

etx = "\x03"

main :: IO ()
main = do
  main
