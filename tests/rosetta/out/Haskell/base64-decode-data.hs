-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:19Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

indexOf :: String -> String -> Int
indexOf s ch =
  fromMaybe (0) $
    (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> case if ((s !! i) == ch) then Just (i) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just ((-1)))

parseIntStr :: String -> Int
parseIntStr str =
  fromMaybe (0) $
    (let i = 0 in (let neg = False in case if (((length str > 0) && (str !! 0)) == "-") then (let neg = True in (let i = 1 in Nothing)) else Nothing of Just v -> Just v; Nothing -> (let n = 0 in (let digits = Map.fromList [("0", (0 :: Int)), ("1", (1 :: Int)), ("2", (2 :: Int)), ("3", (3 :: Int)), ("4", (4 :: Int)), ("5", (5 :: Int)), ("6", (6 :: Int)), ("7", (7 :: Int)), ("8", (8 :: Int)), ("9", (9 :: Int))] in case whileLoop (\() -> (_asInt (i) < length str)) (\() -> (let n = ((_asInt (n) * 10) + _asInt ((digits !! (str !! i)))) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> case if _asBool (neg) then (let n = (-(_asInt (n))) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (n)))))

ord :: String -> Int
ord ch =
  fromMaybe (0) $
    (let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in (let lower = "abcdefghijklmnopqrstuvwxyz" in (let idx = indexOf upper ch in case if (_asInt (idx) >= 0) then Just ((65 + _asInt (idx))) else Nothing of Just v -> Just v; Nothing -> (let idx = indexOf lower ch in case if (_asInt (idx) >= 0) then Just ((97 + _asInt (idx))) else Nothing of Just v -> Just v; Nothing -> case if (((ch >= "0") && ch) <= "9") then Just ((48 + parseIntStr ch)) else Nothing of Just v -> Just v; Nothing -> case if (ch == "+") then Just (43) else Nothing of Just v -> Just v; Nothing -> case if (ch == "/") then Just (47) else Nothing of Just v -> Just v; Nothing -> case if (ch == " ") then Just (32) else Nothing of Just v -> Just v; Nothing -> case if (ch == "=") then Just (61) else Nothing of Just v -> Just v; Nothing -> Just (0)))))
  where
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"

chr :: Int -> String
chr n =
  fromMaybe ("") $
    (let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in (let lower = "abcdefghijklmnopqrstuvwxyz" in case if (((_asInt (n) >= 65) && n) < 91) then Just (take ((_asInt (n) - 64) - (_asInt (n) - 65)) (drop (_asInt (n) - 65) upper)) else Nothing of Just v -> Just v; Nothing -> case if (((_asInt (n) >= 97) && n) < 123) then Just (take ((_asInt (n) - 96) - (_asInt (n) - 97)) (drop (_asInt (n) - 97) lower)) else Nothing of Just v -> Just v; Nothing -> case if (((_asInt (n) >= 48) && n) < 58) then (let digits = "0123456789" in Just (take ((_asInt (n) - 47) - (_asInt (n) - 48)) (drop (_asInt (n) - 48) digits))) else Nothing of Just v -> Just v; Nothing -> case if (_asInt (n) == 43) then Just ("+") else Nothing of Just v -> Just v; Nothing -> case if (_asInt (n) == 47) then Just ("/") else Nothing of Just v -> Just v; Nothing -> case if (_asInt (n) == 32) then Just (" ") else Nothing of Just v -> Just v; Nothing -> case if (_asInt (n) == 61) then Just ("=") else Nothing of Just v -> Just v; Nothing -> Just ("?")))
  where
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"

toBinary :: Int -> Int -> String
toBinary n bits =
  fromMaybe ("") $
    (let b = "" in (let val = n in (let i = 0 in case whileLoop (\() -> (i < bits)) (\() -> (let b = (show (val `mod` 2) + b) in (let val = (read ((div val 2)) :: Int) in (let i = (_asInt (i) + 1) in Nothing)))) of Just v -> Just v; Nothing -> Just (b))))

binToInt :: String -> Int
binToInt bits =
  fromMaybe (0) $
    (let n = 0 in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length bits)) (\() -> (let n = ((_asInt (n) * 2) + parseIntStr take ((_asInt (i) + 1) - i) (drop i bits)) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (n)))

base64Encode :: String -> String
base64Encode text =
  fromMaybe ("") $
    (let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" in (let bin = "" in case foldr (\ch acc -> case (let bin = (bin + toBinary ord ch 8) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing text of Just v -> Just v; Nothing -> case whileLoop (\() -> ((length bin `mod` 6) /= 0)) (\() -> (let bin = (bin + "0") in Nothing)) of Just v -> Just v; Nothing -> (let out = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length bin)) (\() -> (let chunk = take ((_asInt (i) + 6) - i) (drop i bin) in (let val = binToInt chunk in (let out = (out + take ((_asInt (val) + 1) - val) (drop val alphabet)) in (let i = (_asInt (i) + 6) in Nothing))))) of Just v -> Just v; Nothing -> (let pad = (((3 - ((length text `mod` 3)))) `mod` 3) in case if (_asInt (pad) == 1) then (let out = (take ((length out - 1) - 0) (drop 0 out) + "=") in Nothing) else Nothing of Just v -> Just v; Nothing -> case if (_asInt (pad) == 2) then (let out = (take ((length out - 2) - 0) (drop 0 out) + "==") in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (out))))))
  where
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

base64Decode :: String -> String
base64Decode enc =
  fromMaybe ("") $
    (let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" in (let bin = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length enc)) (\() -> (let ch = [enc !! i] in case if (ch == "=") then Just () else Nothing of Just v -> Just v; Nothing -> (let idx = indexOf alphabet ch in (let bin = (bin + toBinary idx 6) in (let i = (_asInt (i) + 1) in Nothing))))) of Just v -> Just v; Nothing -> (let out = "" in (let i = 0 in case whileLoop (\() -> ((_asInt (i) + 8) <= length bin)) (\() -> (let chunk = take ((_asInt (i) + 8) - i) (drop i bin) in (let val = binToInt chunk in (let out = (out + chr val) in (let i = (_asInt (i) + 8) in Nothing))))) of Just v -> Just v; Nothing -> Just (out))))))
  where
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

msg = "Rosetta Code Base64 decode data task"

enc = base64Encode msg

dec = base64Decode enc

main :: IO ()
main = do
  putStrLn (("Original : " ++ msg))
  putStrLn (("\nEncoded  : " ++ enc))
  putStrLn (("\nDecoded  : " ++ dec))
