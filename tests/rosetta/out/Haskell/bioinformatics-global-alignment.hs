-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:21Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

padLeft :: String -> Int -> String
padLeft s w =
  fromMaybe ("") $
    (let res = "" in (let n = (_asInt (w) - length s) in case whileLoop (\() -> (_asInt (n) > 0)) (\() -> (let res = (res + " ") in (let n = (_asInt (n) - 1) in Nothing))) of Just v -> Just v; Nothing -> Just ((res + s))))

indexOfFrom :: String -> String -> Int -> Int
indexOfFrom s ch start =
  fromMaybe (0) $
    (let i = start in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> case if (take ((_asInt (i) + 1) - i) (drop i s) == ch) then Just (i) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just ((-1)))

containsStr :: String -> String -> Bool
containsStr s sub =
  fromMaybe (False) $
    (let i = 0 in (let sl = length s in (let subl = length sub in case whileLoop (\() -> ((i <= sl) - subl)) (\() -> case if (take ((i + subl) - i) (drop i s) == sub) then Just (True) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just (False))))

distinct :: [String] -> [String]
distinct slist =
  fromMaybe ([]) $
    (let res = [] in case foldr (\s acc -> case (let found = False in case foldr (\r acc -> case if (r == s) then (let found = True in Just ()) else Nothing of Just v -> Just v; Nothing -> acc) Nothing res of Just v -> Just v; Nothing -> if _asBool (not found) then (let res = (res ++ [s]) in Nothing) else Nothing) of Just v -> Just v; Nothing -> acc) Nothing slist of Just v -> Just v; Nothing -> Just (res))

permutations :: [String] -> [[String]]
permutations xs = fromMaybe ([]) $
  case if (length xs <= 1) then Just ([xs]) else Nothing of Just v -> Just v; Nothing -> (let res = [] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length xs)) (\() -> (let rest = [] in (let j = 0 in case whileLoop (\() -> (_asInt (j) < length xs)) (\() -> case if (j /= i) then (let rest = (rest ++ [(xs !! j)]) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let subs = permutations rest in case foldr (\p acc -> case (let perm = [(xs !! i)] in (let k = 0 in case whileLoop (\() -> (_asInt (k) < length p)) (\() -> (let perm = (perm ++ [(p !! k)]) in (let k = (_asInt (k) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let res = (res ++ [perm]) in Nothing))) of Just v -> Just v; Nothing -> acc) Nothing subs of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (res)))

headTailOverlap :: String -> String -> Int
headTailOverlap s1 s2 =
  fromMaybe (0) $
    (let start = 0 in whileLoop (\() -> True) (\() -> (let ix = indexOfFrom s1 take (1 - 0) (drop 0 s2) start in case if ((_asInt (ix) == 0) - 1) then Just (0) else Nothing of Just v -> Just v; Nothing -> (let start = ix in case if (take ((length s1 - _asInt (start)) - 0) (drop 0 s2) == take (length s1 - start) (drop start s1)) then Just ((length s1 - _asInt (start))) else Nothing of Just v -> Just v; Nothing -> (let start = (_asInt (start) + 1) in Nothing)))))

deduplicate :: [String] -> [String]
deduplicate slist =
  fromMaybe ([]) $
    (let arr = distinct slist in (let filtered = [] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length arr)) (\() -> (let s1 = (arr !! i) in (let within = False in (let j = 0 in case whileLoop (\() -> (_asInt (j) < length arr)) (\() -> case if ((j /= i) && containsStr (arr !! j) s1) then (let within = True in Just ()) else Nothing of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing)) of Just v -> Just v; Nothing -> case if _asBool (not within) then (let filtered = (filtered ++ [s1]) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (filtered))))
  where
    arr = distinct slist

joinAll :: [String] -> String
joinAll ss =
  fromMaybe ("") $
    (let out = "" in case foldr (\s acc -> case (let out = (out + s) in Nothing) of Just v -> Just v; Nothing -> acc) Nothing ss of Just v -> Just v; Nothing -> Just (out))

shortestCommonSuperstring :: [String] -> String
shortestCommonSuperstring slist =
  fromMaybe ("") $
    (let ss = deduplicate slist in (let shortest = joinAll ss in (let perms = permutations ss in (let idx = 0 in case whileLoop (\() -> (_asInt (idx) < length perms)) (\() -> (let perm = (perms !! idx) in (let sup = (perm !! 0) in (let i = 0 in case whileLoop (\() -> ((_asInt (i) < length ss) - 1)) (\() -> (let ov = headTailOverlap (perm !! i) (perm !! (_asInt (i) + 1)) in (let sup = (sup + take (length (perm !! (_asInt (i) + 1)) - ov) (drop ov (perm !! (_asInt (i) + 1)))) in (let i = (_asInt (i) + 1) in Nothing)))) of Just v -> Just v; Nothing -> case if (length sup < length shortest) then (let shortest = sup in Nothing) else Nothing of Just v -> Just v; Nothing -> (let idx = (_asInt (idx) + 1) in Nothing))))) of Just v -> Just v; Nothing -> Just (shortest)))))
  where
    ss = deduplicate slist

printCounts :: String -> ()
printCounts seq =
  fromMaybe (()) $
    (let a = 0 in (let c = 0 in (let g = 0 in (let t = 0 in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length seq)) (\() -> (let ch = take ((_asInt (i) + 1) - i) (drop i seq) in case if (ch == "A") then (let a = (_asInt (a) + 1) in Nothing) else if (ch == "C") then (let c = (_asInt (c) + 1) in Nothing) else if (ch == "G") then (let g = (_asInt (g) + 1) in Nothing) else if (ch == "T") then (let t = (_asInt (t) + 1) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let total = length seq in case (let _ = putStrLn (_showAny ((("\nNucleotide counts for " + seq) + ":\n"))) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((padLeft "A" 10 ++ padLeft show a 12)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((padLeft "C" 10 ++ padLeft show c 12)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((padLeft "G" 10 ++ padLeft show g 12)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((padLeft "T" 10 ++ padLeft show t 12)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((padLeft "Other" 10 ++ padLeft show (total - ((((a + c) + g) + t))) 12)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("  ____________________") in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn ((padLeft "Total length" 14 ++ padLeft show total 8)) in Nothing)))))))

main :: ()
main =
  fromMaybe (()) $
    (let tests = [["TA", "AAG", "TA", "GAA", "TA"], ["CATTAGGG", "ATTAG", "GGG", "TA"], ["AAGAUGGA", "GGAGCGCAUC", "AUCGCAAUAAGGA"], ["ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT", "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT", "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC", "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC", "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT", "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA"]] in foldr (\seqs acc -> case (let scs = shortestCommonSuperstring seqs in (let _ = printCounts scs in Nothing)) of Just v -> Just v; Nothing -> acc) Nothing tests)
  where
    tests = [["TA", "AAG", "TA", "GAA", "TA"], ["CATTAGGG", "ATTAG", "GGG", "TA"], ["AAGAUGGA", "GGAGCGCAUC", "AUCGCAAUAAGGA"], ["ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT", "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT", "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC", "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC", "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT", "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA"]]

main :: IO ()
main = do
  main
