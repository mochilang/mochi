-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:13Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

indexOf :: [Int] -> Int -> Int
indexOf xs value =
  fromMaybe (0) $
    (let i = 0 in case whileLoop (\() -> (_asInt (i) < length xs)) (\() -> case if ((xs !! i) == value) then Just (i) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just ((0 - 1)))

contains :: [Int] -> Int -> Bool
contains xs value = ((indexOf xs value /= 0) - 1)

maxOf :: Int -> Int -> Int
maxOf a b =
  fromMaybe (0) $
    if (a > b) then Just (a) else Just (b)

intSqrt :: Int -> Int
intSqrt n = fromMaybe (0) $
  case if (_asInt (n) == 0) then Just (0) else Nothing of Just v -> Just v; Nothing -> (let x = n in (let y = (div ((_asInt (x) + 1)) 2) in case whileLoop (\() -> (y < x)) (\() -> (let x = y in (let y = (div (((x + n) / x)) 2) in Nothing))) of Just v -> Just v; Nothing -> Just (x)))

sumProperDivisors :: Int -> Int
sumProperDivisors n = fromMaybe (0) $
  case if (_asInt (n) < 2) then Just (0) else Nothing of Just v -> Just v; Nothing -> (let sqrt = intSqrt n in (let sum = 1 in (let i = 2 in case whileLoop (\() -> (i <= sqrt)) (\() -> case if ((n `mod` i) == 0) then (let sum = (((sum + i) + n) / i) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> case if ((sqrt * sqrt) == n) then (let sum = (sum - sqrt) in Nothing) else Nothing of Just v -> Just v; Nothing -> Just (sum))))

classifySequence :: Int -> Map.Map String ()
classifySequence k =
  fromMaybe (()) $
    (let last = k in (let seq = [k] in case whileLoop (\() -> True) (\() -> (let last = sumProperDivisors last in (let seq = (seq ++ [last]) in (let n = length seq in (let aliquot = "" in case if (_asInt (last) == 0) then (let aliquot = "Terminating" in Nothing) else if (((_asInt (n) == 2) && last) == k) then (let aliquot = "Perfect" in Nothing) else if (((_asInt (n) == 3) && last) == k) then (let aliquot = "Amicable" in Nothing) else if (((_asInt (n) >= 4) && last) == k) then (let aliquot = (("Sociable[" ++ show (_asInt (n) - 1)) ++ "]") in Nothing) else if (last == (seq !! (_asInt (n) - 2))) then (let aliquot = "Aspiring" in Nothing) else if contains take (maxOf 1 (_asInt (n) - 2) - 1) (drop 1 seq) last then (let idx = indexOf seq last in (let aliquot = (("Cyclic[" ++ show ((_asInt (n) - 1) - _asInt (idx))) ++ "]") in Nothing)) else if (((_asInt (n) == 16) || last) > THRESHOLD) then (let aliquot = "Non-Terminating" in Nothing) else Nothing of Just v -> Just v; Nothing -> if (aliquot /= "") then Just (Map.fromList [("seq", seq), ("aliquot", aliquot)]) else Nothing))))) of Just v -> Just v; Nothing -> Just (Map.fromList [("seq", seq), ("aliquot", VString (""))])))

padLeft :: Int -> Int -> String
padLeft n w =
  fromMaybe ("") $
    (let s = show n in case whileLoop (\() -> (length s < _asInt (w))) (\() -> (let s = (" " + s) in Nothing)) of Just v -> Just v; Nothing -> Just (s))

padRight :: String -> Int -> String
padRight s w =
  fromMaybe ("") $
    (let r = s in case whileLoop (\() -> (length r < _asInt (w))) (\() -> (let r = (r + " ") in Nothing)) of Just v -> Just v; Nothing -> Just (r))

joinWithCommas :: [Int] -> String
joinWithCommas seq =
  fromMaybe ("") $
    (let s = "[" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length seq)) (\() -> (let s = (s + show (seq !! i)) in case if ((_asInt (i) < length seq) - 1) then (let s = (s + ", ") in Nothing) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let s = (s + "]") in Just (s))))

main :: ()
main = fromMaybe (()) $
  case (let _ = putStrLn ("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n") in Nothing) of Just v -> Just v; Nothing -> (let k = 1 in case whileLoop (\() -> (_asInt (k) <= 10)) (\() -> (let res = classifySequence k in case (let _ = putStrLn (((((padLeft k 2 ++ ": ") ++ padRight show (res !! "aliquot") 15) ++ " ") ++ joinWithCommas (res !! "seq"))) in Nothing) of Just v -> Just v; Nothing -> (let k = (_asInt (k) + 1) in Nothing))) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("") in Nothing) of Just v -> Just v; Nothing -> (let s = [11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> (let val = (s !! i) in (let res = classifySequence val in case (let _ = putStrLn (((((padLeft val 7 ++ ": ") ++ padRight show (res !! "aliquot") 15) ++ " ") ++ joinWithCommas (res !! "seq"))) in Nothing) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)))) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("") in Nothing) of Just v -> Just v; Nothing -> (let big = 15355717786080 in (let r = classifySequence big in (let _ = putStrLn (((((show big ++ ": ") ++ padRight show (r !! "aliquot") 15) ++ " ") ++ joinWithCommas (r !! "seq"))) in Nothing))))))

THRESHOLD = 140737488355328

main :: IO ()
main = do
  main
