-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:04Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

validComb :: Int -> Int -> Int -> Int -> Int -> Int -> Int -> Bool
validComb a b c d e f g =
  fromMaybe (False) $
    (let square1 = (a + b) in (let square2 = ((b + c) + d) in (let square3 = ((d + e) + f) in (let square4 = (f + g) in Just ((((((square1 == square2) && square2) == square3) && square3) == square4))))))
  where
    square1 = (a + b)
    square2 = ((b + c) + d)
    square3 = ((d + e) + f)
    square4 = (f + g)

isUnique :: Int -> Int -> Int -> Int -> Int -> Int -> Int -> Bool
isUnique a b c d e f g =
  fromMaybe (False) $
    (let nums = [a, b, c, d, e, f, g] in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length nums)) (\() -> (let j = (_asInt (i) + 1) in case whileLoop (\() -> (_asInt (j) < length nums)) (\() -> case if ((nums !! i) == (nums !! j)) then Just (False) else Nothing of Just v -> Just v; Nothing -> (let j = (_asInt (j) + 1) in Nothing)) of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (True)))

getCombs :: Int -> Int -> Bool -> Map.Map String ()
getCombs low high unique =
  fromMaybe (()) $
    (let valid = [] in (let count = 0 in case forLoop low ((_asInt (high) + 1)) (\b -> forLoop low ((_asInt (high) + 1)) (\c -> forLoop low ((_asInt (high) + 1)) (\d -> (let s = ((b + c) + d) in forLoop low ((_asInt (high) + 1)) (\e -> forLoop low ((_asInt (high) + 1)) (\f -> (let a = (s - b) in (let g = (s - f) in case if (((a < low) || a) > high) then Nothing else Nothing of Just v -> Just v; Nothing -> case if (((g < low) || g) > high) then Nothing else Nothing of Just v -> Just v; Nothing -> case if (((d + e) + f) /= s) then Nothing else Nothing of Just v -> Just v; Nothing -> case if ((f + g) /= s) then Nothing else Nothing of Just v -> Just v; Nothing -> if _asBool ((not unique || isUnique a b c d e f g)) then (let valid = (valid ++ [[a, b, c, d, e, f, g]]) in (let count = (count + 1) in Nothing)) else Nothing)))))))) of Just v -> Just v; Nothing -> Just (Map.fromList [("count", VString (count)), ("list", valid)])))

r1 = getCombs 1 7 True

r2 = getCombs 3 9 True

r3 = getCombs 0 9 False

main :: IO ()
main = do
  putStrLn ((show fromMaybe (error "missing") (Map.lookup "count" r1) ++ " unique solutions in 1 to 7"))
  putStrLn (_showAny (fromMaybe (error "missing") (Map.lookup "list" r1)))
  putStrLn ((show fromMaybe (error "missing") (Map.lookup "count" r2) ++ " unique solutions in 3 to 9"))
  putStrLn (_showAny (fromMaybe (error "missing") (Map.lookup "list" r2)))
  putStrLn ((show fromMaybe (error "missing") (Map.lookup "count" r3) ++ " non-unique solutions in 0 to 9"))
