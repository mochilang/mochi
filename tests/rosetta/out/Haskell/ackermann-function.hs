-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:10Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.Maybe (fromMaybe)

ackermann :: Int -> Int -> Int
ackermann m n = fromMaybe (0) $
  case if (_asInt (m) == 0) then Just ((_asInt (n) + 1)) else Nothing of Just v -> Just v; Nothing -> case if (_asInt (n) == 0) then Just (ackermann (_asInt (m) - 1) 1) else Nothing of Just v -> Just v; Nothing -> Just (ackermann (_asInt (m) - 1) ackermann m (_asInt (n) - 1))

main :: ()
main = fromMaybe (()) $
  case (let _ = putStrLn (("A(0, 0) = " ++ show ackermann 0 0)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("A(1, 2) = " ++ show ackermann 1 2)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("A(2, 4) = " ++ show ackermann 2 4)) in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn (("A(3, 4) = " ++ show ackermann 3 4)) in Nothing)

main :: IO ()
main = do
  main
