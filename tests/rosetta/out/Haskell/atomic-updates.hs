-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:25Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

randOrder :: Int -> Int -> [Int]
randOrder seed n =
  fromMaybe ([]) $
    (let next = ((((_asInt (seed) * 1664525) + 1013904223)) `mod` 2147483647) in Just ([next, (next `mod` n)]))
  where
    next = ((((_asInt (seed) * 1664525) + 1013904223)) `mod` 2147483647)

randChaos :: Int -> Int -> [Int]
randChaos seed n =
  fromMaybe ([]) $
    (let next = ((((_asInt (seed) * 1103515245) + 12345)) `mod` 2147483647) in Just ([next, (next `mod` n)]))
  where
    next = ((((_asInt (seed) * 1103515245) + 12345)) `mod` 2147483647)

main :: ()
main =
  fromMaybe (()) $
    (let nBuckets = 10 in (let initialSum = 1000 in (let buckets = [] in case forLoop 0 nBuckets (\i -> (let buckets = (buckets ++ [0]) in Nothing)) of Just v -> Just v; Nothing -> (let i = nBuckets in (let dist = initialSum in case whileLoop (\() -> (_asInt (i) > 0)) (\() -> (let v = (dist / i) in (let i = (_asInt (i) - 1) in (let buckets = Map.insert i v buckets in (let dist = (dist - v) in Nothing))))) of Just v -> Just v; Nothing -> (let tc0 = 0 in (let tc1 = 0 in (let total = 0 in (let nTicks = 0 in (let seedOrder = 1 in (let seedChaos = 2 in case (let _ = putStrLn ("sum  ---updates---    mean  buckets") in Nothing) of Just v -> Just v; Nothing -> (let t = 0 in whileLoop (\() -> (_asInt (t) < 5)) (\() -> (let r = randOrder seedOrder nBuckets in (let seedOrder = (r !! 0) in (let b1 = (r !! 1) in (let b2 = (((_asInt (b1) + 1)) `mod` nBuckets) in (let v1 = (buckets !! b1) in (let v2 = (buckets !! b2) in case if (v1 > v2) then (let a = (read ((div ((v1 - v2)) 2)) :: Int) in case if (a > (buckets !! b1)) then (let a = (buckets !! b1) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let buckets = Map.insert b1 ((buckets !! b1) - a) buckets in (let buckets = Map.insert b2 ((buckets !! b2) + a) buckets in Nothing))) else (let a = (read ((div ((v2 - v1)) 2)) :: Int) in case if (a > (buckets !! b2)) then (let a = (buckets !! b2) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let buckets = Map.insert b2 ((buckets !! b2) - a) buckets in (let buckets = Map.insert b1 ((buckets !! b1) + a) buckets in Nothing))) of Just v -> Just v; Nothing -> (let tc0 = (_asInt (tc0) + 1) in (let r = randChaos seedChaos nBuckets in (let seedChaos = (r !! 0) in (let b1 = (r !! 1) in (let b2 = (((_asInt (b1) + 1)) `mod` nBuckets) in (let r = randChaos seedChaos (_asInt ((buckets !! b1)) + 1) in (let seedChaos = (r !! 0) in (let amt = (r !! 1) in case if (amt > (buckets !! b1)) then (let amt = (buckets !! b1) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let buckets = Map.insert b1 ((buckets !! b1) - amt) buckets in (let buckets = Map.insert b2 ((buckets !! b2) + amt) buckets in (let tc1 = (_asInt (tc1) + 1) in (let sum = 0 in (let idx = 0 in case whileLoop (\() -> (idx < nBuckets)) (\() -> (let sum = (sum + (buckets !! idx)) in (let idx = (_asInt (idx) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let total = ((total + tc0) + tc1) in (let nTicks = (_asInt (nTicks) + 1) in case (let _ = putStrLn (((((((((show sum ++ " ") ++ show tc0) ++ " ") ++ show tc1) ++ " ") ++ show (total / nTicks)) ++ "  ") ++ show buckets)) in Nothing) of Just v -> Just v; Nothing -> (let tc0 = 0 in (let tc1 = 0 in (let t = (_asInt (t) + 1) in Nothing)))))))))))))))))))))))))))))))))))))
  where
    nBuckets = 10
    initialSum = 1000

main :: IO ()
main = do
  main
