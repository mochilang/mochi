-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:27Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

indexOf :: String -> String -> Int
indexOf s ch =
  fromMaybe (0) $
    (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> case if (take ((_asInt (i) + 1) - i) (drop i s) == ch) then Just (i) else Nothing of Just v -> Just v; Nothing -> (let i = (_asInt (i) + 1) in Nothing)) of Just v -> Just v; Nothing -> Just ((-1)))

ord :: String -> Int
ord ch =
  fromMaybe (0) $
    (let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in (let lower = "abcdefghijklmnopqrstuvwxyz" in (let idx = indexOf upper ch in case if (_asInt (idx) >= 0) then Just ((65 + _asInt (idx))) else Nothing of Just v -> Just v; Nothing -> (let idx = indexOf lower ch in case if (_asInt (idx) >= 0) then Just ((97 + _asInt (idx))) else Nothing of Just v -> Just v; Nothing -> Just (0)))))
  where
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"

chr :: Int -> String
chr n =
  fromMaybe ("") $
    (let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in (let lower = "abcdefghijklmnopqrstuvwxyz" in case if (((_asInt (n) >= 65) && n) < 91) then Just (take ((_asInt (n) - 64) - (_asInt (n) - 65)) (drop (_asInt (n) - 65) upper)) else Nothing of Just v -> Just v; Nothing -> case if (((_asInt (n) >= 97) && n) < 123) then Just (take ((_asInt (n) - 96) - (_asInt (n) - 97)) (drop (_asInt (n) - 97) lower)) else Nothing of Just v -> Just v; Nothing -> Just ("?")))
  where
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"

shiftRune :: String -> Int -> String
shiftRune r k = fromMaybe ("") $
  case if (((r >= "a") && r) <= "z") then Just (chr (_asInt ((((((ord r - 97) + _asInt (k))) `mod` 26))) + 97)) else Nothing of Just v -> Just v; Nothing -> case if (((r >= "A") && r) <= "Z") then Just (chr (_asInt ((((((ord r - 65) + _asInt (k))) `mod` 26))) + 65)) else Nothing of Just v -> Just v; Nothing -> Just (r)

encipher :: String -> Int -> String
encipher s k =
  fromMaybe ("") $
    (let out = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length s)) (\() -> (let out = (out + shiftRune take ((_asInt (i) + 1) - i) (drop i s) k) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just (out)))

decipher :: String -> Int -> String
decipher s k = encipher s ((((26 - _asInt (k)) `mod` 26)) `mod` 26)

main :: ()
main =
  fromMaybe (()) $
    (let pt = "The five boxing wizards jump quickly" in case (let _ = putStrLn (_showAny (("Plaintext: " + pt))) in Nothing) of Just v -> Just v; Nothing -> foldr (\key acc -> case case if (((_asInt (key) < 1) || key) > 25) then (let _ = putStrLn ((("Key " ++ show key) ++ " invalid")) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let ct = encipher pt key in case (let _ = putStrLn (("Key " ++ show key)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (_showAny (("  Enciphered: " + ct))) in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn (("  Deciphered: " ++ decipher ct key)) in Nothing)) of Just v -> Just v; Nothing -> acc) Nothing [0, 1, 7, 25, 26])
  where
    pt = "The five boxing wizards jump quickly"

main :: IO ()
main = do
  main
