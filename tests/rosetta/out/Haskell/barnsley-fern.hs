-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:18Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

_updateAt :: Int -> (a -> a) -> [a] -> [a]
_updateAt i f xs = take i xs ++ [f (xs !! i)] ++ drop (i + 1) xs

randInt :: Int -> Int -> [Int]
randInt s n =
  fromMaybe ([]) $
    (let next = ((((_asInt (s) * 1664525) + 1013904223)) `mod` 2147483647) in Just ([next, (next `mod` n)]))
  where
    next = ((((_asInt (s) * 1664525) + 1013904223)) `mod` 2147483647)

xMin = (-2.182)

xMax = 2.6558

yMin = 0.0

yMax = 9.9983

width = 60

nIter = 10000

dx = (xMax - xMin)

dy = (yMax - yMin)

height = (read ((_asDouble ((width * dy)) / dx)) :: Int)

grid = []

row = 0

seed = 1

x = 0.0

y = 0.0

ix = (read (((((read width :: Double)) * ((x - xMin))) / dx)) :: Int)

iy = (read (((((read height :: Double)) * ((yMax - y))) / dy)) :: Int)

i = 0

main :: IO ()
main = do
  let loop row = do
        if (row < height)
          then do
            let line = []
            let col = 0
            let loop col = do
                  if (_asInt (col) < width)
                    then do
                      let line = (line ++ [" "])
                      loop ((_asInt (col) + 1))
                    else return ()
            loop col
            let grid = (grid ++ [line])
            loop ((row + 1))
          else return ()
  loop row
  if (((((((ix >= 0) && ix) < width) && iy) >= 0) && iy) < height)
    then do
      let grid = _updateAt iy (\_ -> _updateAt ix (const "*") (grid !! iy)) grid
    else return ()
  let loop i = do
        if (i < nIter)
          then do
            let res = randInt seed 100
            let seed = (res !! 0)
            let r = (res !! 1)
            if (_asInt (r) < 85)
              then do
                let nx = (((0.85 * x) + 0.04) * y)
                let ny = (((((-0.04) * x) + 0.85) * y) + 1.6)
                let x = nx
                let y = ny
              else
                if (_asInt (r) < 92)
                  then do
                    let nx = (((0.2 * x) - 0.26) * y)
                    let ny = ((((0.23 * x) + 0.22) * y) + 1.6)
                    let x = nx
                    let y = ny
                  else
                    if (_asInt (r) < 99)
                      then do
                        let nx = ((((-0.15) * x) + 0.28) * y)
                        let ny = ((((0.26 * x) + 0.24) * y) + 0.44)
                        let x = nx
                        let y = ny
                      else do
                        let x = 0.0
                        let y = (0.16 * y)
            let ix = (read (((((read width :: Double)) * ((x - xMin))) / dx)) :: Int)
            let iy = (read (((((read height :: Double)) * ((yMax - y))) / dy)) :: Int)
            if (((((((ix >= 0) && ix) < width) && iy) >= 0) && iy) < height)
              then do
                let grid = _updateAt iy (\_ -> _updateAt ix (const "*") (grid !! iy)) grid
              else return ()
            loop ((i + 1))
          else return ()
  loop i
  let row = 0
  let loop row = do
        if (row < height)
          then do
            let line = ""
            let col = 0
            let loop col = do
                  if (_asInt (col) < width)
                    then do
                      let line = (line + ((grid !! row) !! col))
                      loop ((_asInt (col) + 1))
                    else return ()
            loop col
            putStrLn (_showAny (line))
            loop ((row + 1))
          else return ()
  loop row
