-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:22Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_showAny :: AnyValue -> String
_showAny (VInt n) = show n
_showAny (VDouble d) = show d
_showAny (VString s) = s
_showAny (VBool b) = if b then "true" else "false"

randInt :: Int -> Int -> [Int]
randInt s n =
  fromMaybe ([]) $
    (let next = ((((_asInt (s) * 1664525) + 1013904223)) `mod` 2147483647) in Just ([next, (next `mod` n)]))
  where
    next = ((((_asInt (s) * 1664525) + 1013904223)) `mod` 2147483647)

padLeft :: String -> Int -> String
padLeft s w =
  fromMaybe ("") $
    (let res = "" in (let n = (_asInt (w) - length s) in case whileLoop (\() -> (_asInt (n) > 0)) (\() -> (let res = (res + " ") in (let n = (_asInt (n) - 1) in Nothing))) of Just v -> Just v; Nothing -> Just ((res + s))))

makeSeq :: Int -> Int -> [()]
makeSeq s le =
  fromMaybe ([]) $
    (let bases = "ACGT" in (let out = "" in (let i = 0 in case whileLoop (\() -> (i < le)) (\() -> (let r = randInt s 4 in (let s = (r !! 0) in (let idx = (read (r !! 1) :: Int) in (let out = (out + take ((_asInt (idx) + 1) - idx) (drop idx bases)) in (let i = (_asInt (i) + 1) in Nothing)))))) of Just v -> Just v; Nothing -> Just ([s, out]))))
  where
    bases = "ACGT"

mutate :: Int -> String -> [Int] -> [()]
mutate s dna w =
  fromMaybe ([]) $
    (let bases = "ACGT" in (let le = length dna in (let r = randInt s le in (let s = (r !! 0) in (let p = (read (r !! 1) :: Int) in (let r = randInt s 300 in (let s = (r !! 0) in (let x = (read (r !! 1) :: Int) in (let arr = [] in (let i = 0 in case whileLoop (\() -> (i < le)) (\() -> (let arr = (arr ++ [take ((_asInt (i) + 1) - i) (drop i dna)]) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> case if (x < (w !! 0)) then (let r = randInt s 4 in (let s = (r !! 0) in (let idx = (read (r !! 1) :: Int) in (let b = take ((_asInt (idx) + 1) - idx) (drop idx bases) in case (let _ = putStrLn (_showAny ((((((("  Change @" ++ padLeft show p 3) ++ " '") + (arr !! p)) + "' to '") + b) + "'"))) in Nothing) of Just v -> Just v; Nothing -> (let arr = Map.insert p b arr in Nothing))))) else if ((x < (w !! 0)) + (w !! 1)) then case (let _ = putStrLn (_showAny ((((("  Delete @" ++ padLeft show p 3) ++ " '") + (arr !! p)) + "'"))) in Nothing) of Just v -> Just v; Nothing -> (let j = p in case whileLoop (\() -> ((_asInt (j) < length arr) - 1)) (\() -> (let arr = Map.insert j (arr !! (_asInt (j) + 1)) arr in (let j = (_asInt (j) + 1) in Nothing))) of Just v -> Just v; Nothing -> (let arr = take ((length arr - 1) - 0) (drop 0 arr) in Nothing)) else (let r = randInt s 4 in (let s = (r !! 0) in (let idx2 = (read (r !! 1) :: Int) in (let b = take ((_asInt (idx2) + 1) - idx2) (drop idx2 bases) in (let arr = (arr ++ [""]) in (let j = (length arr - 1) in case whileLoop (\() -> (j > p)) (\() -> (let arr = Map.insert j (arr !! (_asInt (j) - 1)) arr in (let j = (_asInt (j) - 1) in Nothing))) of Just v -> Just v; Nothing -> case (let _ = putStrLn (_showAny ((((("  Insert @" ++ padLeft show p 3) ++ " '") + b) + "'"))) in Nothing) of Just v -> Just v; Nothing -> (let arr = Map.insert p b arr in Nothing))))))) of Just v -> Just v; Nothing -> (let out = "" in (let i = 0 in case whileLoop (\() -> (_asInt (i) < length arr)) (\() -> (let out = (out + (arr !! i)) in (let i = (_asInt (i) + 1) in Nothing))) of Just v -> Just v; Nothing -> Just ([s, out])))))))))))))
  where
    bases = "ACGT"
    le = length dna

prettyPrint :: String -> Int -> ()
prettyPrint dna rowLen = fromMaybe (()) $
  case (let _ = putStrLn ("SEQUENCE:") in Nothing) of Just v -> Just v; Nothing -> (let le = length dna in (let i = 0 in case whileLoop (\() -> (i < le)) (\() -> (let k = (i + rowLen) in case if (k > le) then (let k = le in Nothing) else Nothing of Just v -> Just v; Nothing -> case (let _ = putStrLn (_showAny (((padLeft show i 5 ++ ": ") + take (k - i) (drop i dna)))) in Nothing) of Just v -> Just v; Nothing -> (let i = (i + rowLen) in Nothing))) of Just v -> Just v; Nothing -> (let a = 0 in (let c = 0 in (let g = 0 in (let t = 0 in (let idx = 0 in case whileLoop (\() -> (idx < le)) (\() -> (let ch = take ((_asInt (idx) + 1) - idx) (drop idx dna) in case if (ch == "A") then (let a = (_asInt (a) + 1) in Nothing) else if (ch == "C") then (let c = (_asInt (c) + 1) in Nothing) else if (ch == "G") then (let g = (_asInt (g) + 1) in Nothing) else if (ch == "T") then (let t = (_asInt (t) + 1) in Nothing) else Nothing of Just v -> Just v; Nothing -> (let idx = (_asInt (idx) + 1) in Nothing))) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("BASE COUNT:") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("    A: " ++ padLeft show a 3)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("    C: " ++ padLeft show c 3)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("    G: " ++ padLeft show g 3)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("    T: " ++ padLeft show t 3)) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("    ------") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (("    Î£: " ++ show le)) in Nothing) of Just v -> Just v; Nothing -> (let _ = putStrLn ("    ======") in Nothing))))))))

wstring :: [Int] -> String
wstring w = (((((("  Change: " ++ show (w !! 0)) ++ "\n  Delete: ") ++ show (w !! 1)) ++ "\n  Insert: ") ++ show (w !! 2)) ++ "\n")

main :: ()
main =
  fromMaybe (()) $
    (let seed = 1 in (let res = makeSeq seed 250 in (let seed = (res !! 0) in (let dna = show (res !! 1) in case (let _ = prettyPrint dna 50 in Nothing) of Just v -> Just v; Nothing -> (let muts = 10 in (let w = [100, 100, 100] in case (let _ = putStrLn ("\nWEIGHTS (ex 300):") in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn (wstring w) in Nothing) of Just v -> Just v; Nothing -> case (let _ = putStrLn ((("MUTATIONS (" ++ show muts) ++ "):")) in Nothing) of Just v -> Just v; Nothing -> (let i = 0 in case whileLoop (\() -> (i < muts)) (\() -> (let res = mutate seed dna w in (let seed = (res !! 0) in (let dna = show (res !! 1) in (let i = (_asInt (i) + 1) in Nothing))))) of Just v -> Just v; Nothing -> case (let _ = putStrLn ("") in Nothing) of Just v -> Just v; Nothing -> (let _ = prettyPrint dna 50 in Nothing))))))))

main :: IO ()
main = do
  main
