-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:31Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

mod :: Int -> Int -> Int
mod n m = (((((n `mod` m)) + m)) `mod` m)

isPrime :: Int -> Bool
isPrime n = fromMaybe (False) $
  case if (_asInt (n) < 2) then Just (False) else Nothing of Just v -> Just v; Nothing -> case if ((n `mod` 2) == 0) then Just ((_asInt (n) == 2)) else Nothing of Just v -> Just v; Nothing -> case if ((n `mod` 3) == 0) then Just ((_asInt (n) == 3)) else Nothing of Just v -> Just v; Nothing -> (let d = 5 in case whileLoop (\() -> ((d * d) <= n)) (\() -> case if ((n `mod` d) == 0) then Just (False) else Nothing of Just v -> Just v; Nothing -> (let d = (_asInt (d) + 2) in case if ((n `mod` d) == 0) then Just (False) else Nothing of Just v -> Just v; Nothing -> (let d = (_asInt (d) + 4) in Nothing))) of Just v -> Just v; Nothing -> Just (True))

pad :: Int -> Int -> String
pad n width =
  fromMaybe ("") $
    (let s = show n in case whileLoop (\() -> (length s < _asInt (width))) (\() -> (let s = (" " + s) in Nothing)) of Just v -> Just v; Nothing -> Just (s))

carmichael :: Int -> ()
carmichael p1 =
  fromMaybe (()) $
    forLoop 2 p1 (\h3 -> forLoop 1 ((h3 + p1)) (\d -> if (((((((((h3 + p1)) * ((_asInt (p1) - 1)))) `mod` d) == 0) && mod ((-(_asInt (p1))) * p1) h3) == d) `mod` h3) then (let p2 = (1 + _asInt ((((((_asInt (p1) - 1)) * ((h3 + p1))) / d)))) in case if not isPrime p2 then Nothing else Nothing of Just v -> Just v; Nothing -> (let p3 = (1 + _asInt ((((p1 * p2) / h3)))) in case if not isPrime p3 then Nothing else Nothing of Just v -> Just v; Nothing -> case if ((((p2 * p3)) `mod` ((_asInt (p1) - 1))) /= 1) then Nothing else Nothing of Just v -> Just v; Nothing -> (let c = ((p1 * p2) * p3) in (let _ = putStrLn (((((((pad p1 2 ++ "   ") ++ pad p2 4) ++ "   ") ++ pad p3 5) ++ "     ") ++ show c)) in Nothing)))) else Nothing))

main :: IO ()
main = do
  putStrLn ("The following are Carmichael munbers for p1 <= 61:\n")
  putStrLn ("p1     p2      p3     product")
  putStrLn ("==     ==      ==     =======")
  mapM_ (\p1 -> fromMaybe () (if isPrime p1 then (let _ = carmichael p1 in Nothing) else Nothing)) [2 .. 62 - 1]
