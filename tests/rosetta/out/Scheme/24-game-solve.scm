; Generated by Mochi compiler v0.10.26 on 2025-07-16T12:17:02Z
(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (srfi 1) (srfi 95) (chibi json) (chibi io) (chibi process) (chibi) (chibi string))

(define (_fmt . parts)
  (apply string-append (map _to_string parts)))

(define (_to_string v)
  (call-with-output-string (lambda (p) (write v p))))

(define (_yaml_value v)
  (let ((n (string->number v)))
    (if n n v)))

(define (_parse_yaml text)
  (let ((rows '()) (cur '()))
    (for-each (lambda (ln)
                (when (and (>= (string-length ln) 2) (string-prefix? "- " ln))
                  (when (not (null? cur))
                    (set! rows (append rows (list cur))))
                  (set! cur '())
                  (set! ln (substring ln 2 (string-length ln))))
                (when (string-contains ln ":")
                  (let* ((p (string-split ln #\:))
                         (k (string-trim (car p)))
                         (val (string-trim (string-join (cdr p) ":"))))
                    (set! cur (append cur (list (cons k (_yaml_value val))))))))
              (string-split text #\newline))
    (when (not (null? cur))
      (set! rows (append rows (list cur))))
    rows))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (_fmt (car p) ": " (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (_fmt (car p) "=" (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (_to_string (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          ((string=? fmt "yaml")
           (_parse_yaml text))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
  (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_date_number s)
  (let ((parts (string-split s #\-)))
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b))
      (let ((da (_date_number a))
            (db (_date_number b)))
        (if (and da db)
            (< da db)
            (string<? a b))))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (_to_string a) (_to_string b)))))

(define (_le a b)
  (or (_lt a b) (equal? a b)))

(define (_gt a b)
  (_lt b a))

(define (_ge a b)
  (or (_gt a b) (equal? a b)))

(define (_sort pairs)
  (letrec ((cmp (lambda (a b) (_lt (cdr a) (cdr b))))
           (insert (lambda (x lst)
                     (cond ((null? lst) (list x))
                           ((cmp x (car lst)) (cons x lst))
                           (else (cons (car lst) (insert x (cdr lst)))))))
           (loop (lambda (xs out)
                   (if (null? xs)
                       out
                       (loop (cdr xs) (insert (car xs) out))))) )
    (loop pairs '())))

(define (newNum n)
  (call/cc (lambda (return)
    (return (list (cons "op" OP_NUM) (cons "value" (list (cons "num" n) (cons "denom" 1)))))
  ))
)

(define (exprEval x)
  (call/cc (lambda (return)
    (define l '())
    (define r '())
    (when (equal? (map-get x "op") OP_NUM)
      (return (map-get x "value"))
    )
    (set! l (exprEval (map-get x "left")))
    (set! r (exprEval (map-get x "right")))
    (when (equal? (map-get x "op") OP_ADD)
      (return (list (cons "num" (+ (* (list-ref l "num") (list-ref r "denom")) (* (list-ref l "denom") (list-ref r "num")))) (cons "denom" (* (list-ref l "denom") (list-ref r "denom")))))
    )
    (when (equal? (map-get x "op") OP_SUB)
      (return (list (cons "num" (- (* (list-ref l "num") (list-ref r "denom")) (* (list-ref l "denom") (list-ref r "num")))) (cons "denom" (* (list-ref l "denom") (list-ref r "denom")))))
    )
    (when (equal? (map-get x "op") OP_MUL)
      (return (list (cons "num" (* (list-ref l "num") (list-ref r "num"))) (cons "denom" (* (list-ref l "denom") (list-ref r "denom")))))
    )
    (return (list (cons "num" (* (list-ref l "num") (list-ref r "denom"))) (cons "denom" (* (list-ref l "denom") (list-ref r "num")))))
  ))
)

(define (exprString x)
  (call/cc (lambda (return)
    (define ls '())
    (define opstr '())
    (define rs '())
    (when (equal? (map-get x "op") OP_NUM)
      (return (let ((s (open-output-string))) (write (map-get (map-get x "value") "num") s) (get-output-string s)))
    )
    (set! ls (exprString (map-get x "left")))
    (set! rs (exprString (map-get x "right")))
    (set! opstr "")
    (if (equal? (map-get x "op") OP_ADD)
      (begin
        (set! opstr " + ")
      )
      (if (equal? (map-get x "op") OP_SUB)
        (begin
          (set! opstr " - ")
        )
        (if (equal? (map-get x "op") OP_MUL)
          (begin
            (set! opstr " * ")
          )
          (begin
            (set! opstr " / ")
          )
        )
      )
    )
    (return (string-append (string-append (string-append (string-append "(" ls) opstr) rs) ")"))
  ))
)

(define (solve xs)
  (call/cc (lambda (return)
    (define a '())
    (define b '())
    (define f '())
    (define i '())
    (define j '())
    (define k '())
    (define node '())
    (define rest '())
    (when (equal? (length xs) 1)
      (set! f (exprEval (list-ref xs 0)))
      (when (and (not (equal? (list-ref f "denom") 0)) (equal? (list-ref f "num") (* (list-ref f "denom") goal)))
        (begin (display (exprString (list-ref xs 0))) (newline))
        (return #t)
      )
      (return #f)
    )
    (set! i 0)
    (let loop ()
      (if (_lt i (length xs))
        (begin
          (set! j (+ i 1))
          (let loop ()
            (if (_lt j (length xs))
              (begin
                (set! rest (list ))
                (set! k 0)
                (let loop ()
                  (if (_lt k (length xs))
                    (begin
                      (when (and (not (equal? k i)) (not (equal? k j)))
                        (set! rest (append rest (list (list-ref xs k))))
                      )
                      (set! k (+ k 1))
                      (loop)
                    )
                  '()
                )
              )
              (set! a (list-ref xs i))
              (set! b (list-ref xs j))
              (let loop ((op_idx 0))
                (if (< op_idx (length (list OP_ADD OP_SUB OP_MUL OP_DIV)))
                  (begin
                    (let ((op (list-ref (list OP_ADD OP_SUB OP_MUL OP_DIV) op_idx)))
                      (set! node (list (cons "op" op) (cons "left" a) (cons "right" b)))
                      (when (solve (append rest (list node)))
                        (return #t)
                      )
                    )
                    (loop (+ op_idx 1))
                  )
                '()
                )
              )
              (set! node (list (cons "op" OP_SUB) (cons "left" b) (cons "right" a)))
              (when (solve (append rest (list node)))
                (return #t)
              )
              (set! node (list (cons "op" OP_DIV) (cons "left" b) (cons "right" a)))
              (when (solve (append rest (list node)))
                (return #t)
              )
              (set! j (+ j 1))
              (loop)
            )
          '()
        )
      )
      (set! i (+ i 1))
      (loop)
    )
  '()
)
)
(return #f)
))
)

(define (main )
(call/cc (lambda (return)
(define cards '())
(define i '())
(define iter '())
(define n '())
(set! iter 0)
(let loop ()
(if (_lt iter 10)
  (begin
    (set! cards (list ))
    (set! i 0)
    (let loop ()
      (if (_lt i n_cards)
        (begin
          (set! n (+ (modulo (now ) (- digit_range 1)) 1))
          (set! cards (append cards (list (newNum n))))
          (begin (display (string-append " " (let ((s (open-output-string))) (write n s) (get-output-string s)))) (newline))
          (set! i (+ i 1))
          (loop)
        )
      '()
    )
  )
  (begin (display ":  ") (newline))
  (when (not (solve cards))
    (begin (display "No solution") (newline))
  )
  (set! iter (+ iter 1))
  (loop)
)
'()
)
)
))
)

(define OP_ADD '())
(define OP_DIV '())
(define OP_MUL '())
(define OP_NUM '())
(define OP_SUB '())
(define digit_range '())
(define goal '())
(define n_cards '())
(set! OP_NUM 0)
(set! OP_ADD 1)
(set! OP_SUB 2)
(set! OP_MUL 3)
(set! OP_DIV 4)
(set! n_cards 4)
(set! goal 24)
(set! digit_range 9)
(main )
