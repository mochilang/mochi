; Generated by Mochi compiler v0.10.30 on 2025-07-18T18:26:28Z
(define (list-set lst idx val)
    (let loop ((i idx) (l lst))
        (if (null? l)
            '()
            (if (= i 0)
                (cons val (cdr l))
                (cons (car l) (loop (- i 1) (cdr l))))))
)

(define doors '())
(define idx '())
(define line '())
(set! doors (list ))
(let loop ((i 0))
  (if (< i 100)
    (begin
      (set! doors (append doors (list #f)))
      (loop (+ i 1))
    )
  '()
)
)
(let loop ((pass 1))
(if (< pass 101)
  (begin
    (set! idx (- pass 1))
    (let loop ()
      (if (< idx 100)
        (begin
          (set! doors (list-set doors idx (not (list-ref doors idx))))
          (set! idx (+ idx pass))
          (loop)
        )
      '()
    )
  )
  (loop (+ pass 1))
)
'()
)
)
(let loop ((row 0))
(if (< row 10)
(begin
(set! line "")
(let loop ((col 0))
  (if (< col 10)
    (begin
      (set! idx (+ (* row 10) col))
      (if (list-ref doors idx)
        (begin
          (set! line (string-append line "1"))
        )
        (begin
          (set! line (string-append line "0"))
        )
      )
      (when (< col 9)
        (set! line (string-append line " "))
      )
      (loop (+ col 1))
    )
  '()
)
)
(begin (display line) (newline))
(loop (+ row 1))
)
'()
)
)
