; Generated by Mochi compiler v0.10.28 on 2025-07-18T11:21:10Z
(define (list-set lst idx val)
    (let loop ((i idx) (l lst))
        (if (null? l)
            '()
            (if (= i 0)
                (cons val (cdr l))
                (cons (car l) (loop (- i 1) (cdr l))))))
)
(import (chibi time))

(define (indexOf s ch)
  (call/cc (lambda (return)
    (define i '())
    (set! i 0)
    (let loop ()
      (if (< i (string-length s))
        (begin
          (when (equal? (substring s i (+ i 1)) ch)
            (return i)
          )
          (set! i (+ i 1))
          (loop)
        )
      '()
    )
  )
  (return (- 1))
))
)

(define (shuffle xs)
(call/cc (lambda (return)
  (define arr '())
  (define i '())
  (define j '())
  (define tmp '())
  (set! arr xs)
  (set! i (- (length arr) 1))
  (let loop ()
    (if (> i 0)
      (begin
        (set! j (modulo (* (current-seconds) 1000000000) (+ i 1)))
        (set! tmp (list-ref arr i))
        (set! arr (list-set arr i (list-ref arr j)))
        (set! arr (list-set arr j tmp))
        (set! i (- i 1))
        (loop)
      )
    '()
  )
)
(return arr)
))
)

(define (main )
(call/cc (lambda (return)
(define bulls '())
(define cg '())
(define cows '())
(define digits '())
(define guess '())
(define i '())
(define malformed '())
(define pat '())
(define pos '())
(define seen '())
(define valid '())
(begin (display "Cows and Bulls") (newline))
(begin (display "Guess four digit number of unique digits in the range 1 to 9.") (newline))
(begin (display "A correct digit but not in the correct place is a cow.") (newline))
(begin (display "A correct digit in the correct place is a bull.") (newline))
(set! digits (list "1" "2" "3" "4" "5" "6" "7" "8" "9"))
(set! digits (shuffle digits))
(set! pat (+ (+ (+ (list-ref digits 0) (list-ref digits 1)) (list-ref digits 2)) (list-ref digits 3)))
(set! valid "123456789")
(call/cc (lambda (brk0)
  (let loop0 ()
    (when #t
      (begin (display "Guess: ") (newline))
      (set! guess (read-line))
      (when (not (equal? (length guess) 4))
        (begin (display "Please guess a four digit number.") (newline))
        (loop0)
      )
      (set! cows 0)
      (set! bulls 0)
      (set! seen "")
      (set! i 0)
      (set! malformed #f)
      (call/cc (lambda (brk1)
        (let loop1 ()
          (when (< i 4)
            (set! cg (substring guess i (+ i 1)))
            (when (not (equal? (indexOf seen cg) (- 1)))
              (begin (display (string-append "Repeated digit: " cg)) (newline))
              (set! malformed #t)
              (brk1 '())
            )
            (set! seen (string-append seen cg))
            (set! pos (indexOf pat cg))
            (if (equal? pos (- 1))
              (begin
                (when (equal? (indexOf valid cg) (- 1))
                  (begin (display (string-append "Invalid digit: " cg)) (newline))
                  (set! malformed #t)
                  (brk1 '())
                )
              )
              (begin
                (if (equal? pos i)
                  (begin
                    (set! bulls (+ bulls 1))
                  )
                  (begin
                    (set! cows (+ cows 1))
                  )
                )
              )
            )
            (set! i (+ i 1))
            (loop1))
          )
        )
      )
      (when malformed
        (loop0)
      )
      (begin (display (string-append (string-append (string-append "Cows: " (let ((s (open-output-string))) (write cows s) (get-output-string s))) ", bulls: ") (let ((s (open-output-string))) (write bulls s) (get-output-string s)))) (newline))
      (when (equal? bulls 4)
        (begin (display "You got it.") (newline))
        (brk0 '())
      )
      (loop0))
    )
  )
)
))
)

(main )
