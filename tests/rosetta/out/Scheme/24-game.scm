; Generated by Mochi compiler v0.10.26 on 2025-07-16T12:17:07Z
(define (list-set lst idx val)
    (let loop ((i idx) (l lst))
        (if (null? l)
            '()
            (if (= i 0)
                (cons val (cdr l))
                (cons (car l) (loop (- i 1) (cdr l))))))
)
(import (srfi 1) (srfi 95) (chibi json) (chibi io) (chibi process) (chibi) (chibi string))

(define (_fmt . parts)
  (apply string-append (map _to_string parts)))

(define (_to_string v)
  (call-with-output-string (lambda (p) (write v p))))

(define (_yaml_value v)
  (let ((n (string->number v)))
    (if n n v)))

(define (_parse_yaml text)
  (let ((rows '()) (cur '()))
    (for-each (lambda (ln)
                (when (and (>= (string-length ln) 2) (string-prefix? "- " ln))
                  (when (not (null? cur))
                    (set! rows (append rows (list cur))))
                  (set! cur '())
                  (set! ln (substring ln 2 (string-length ln))))
                (when (string-contains ln ":")
                  (let* ((p (string-split ln #\:))
                         (k (string-trim (car p)))
                         (val (string-trim (string-join (cdr p) ":"))))
                    (set! cur (append cur (list (cons k (_yaml_value val))))))))
              (string-split text #\newline))
    (when (not (null? cur))
      (set! rows (append rows (list cur))))
    rows))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (_fmt (car p) ": " (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (_fmt (car p) "=" (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (_to_string (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          ((string=? fmt "yaml")
           (_parse_yaml text))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
  (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_date_number s)
  (let ((parts (string-split s #\-)))
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b))
      (let ((da (_date_number a))
            (db (_date_number b)))
        (if (and da db)
            (< da db)
            (string<? a b))))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (_to_string a) (_to_string b)))))

(define (_le a b)
  (or (_lt a b) (equal? a b)))

(define (_gt a b)
  (_lt b a))

(define (_ge a b)
  (or (_gt a b) (equal? a b)))

(define (_sort pairs)
  (letrec ((cmp (lambda (a b) (_lt (cdr a) (cdr b))))
           (insert (lambda (x lst)
                     (cond ((null? lst) (list x))
                           ((cmp x (car lst)) (cons x lst))
                           (else (cons (car lst) (insert x (cdr lst)))))))
           (loop (lambda (xs out)
                   (if (null? xs)
                       out
                       (loop (cdr xs) (insert (car xs) out))))) )
    (loop pairs '())))
(define (_slice obj i j)
  (let* ((n (if (string? obj) (string-length obj) (length obj)))
         (start i)
         (end j))
    (when (< start 0) (set! start (+ n start)))
    (when (< end 0) (set! end (+ n end)))
    (when (< start 0) (set! start 0))
    (when (> end n) (set! end n))
    (when (< end start) (set! end start))
        (if (string? obj)
        (substring obj start end)
        (let loop ((idx 0) (xs obj) (out '()))
          (if (or (null? xs) (>= idx end))
              (reverse out)
              (loop (+ idx 1) (cdr xs)
                    (if (>= idx start)
                        (cons (car xs) out)
                        out)))))))

(define (randDigit )
  (call/cc (lambda (return)
    (return (+ (modulo (now ) 9) 1))
  ))
)

(define (main )
  (call/cc (lambda (return)
    (define a '())
    (define b '())
    (define ch '())
    (define digits '())
    (define expr '())
    (define i '())
    (define j '())
    (define numstr '())
    (define stack '())
    (define valid '())
    (set! digits (list ))
    (let loop ((i 0))
      (if (< i 4)
        (begin
          (set! digits (append digits (list (randDigit ))))
          (loop (+ i 1))
        )
      '()
    )
  )
  (set! numstr "")
  (let loop ((i 0))
    (if (< i 4)
      (begin
        (set! numstr (string-append numstr (let ((s (open-output-string))) (write (list-ref digits i) s) (get-output-string s))))
        (loop (+ i 1))
      )
    '()
  )
)
(begin (display (string-append (string-append "Your numbers: " numstr) "\n")) (newline))
(begin (display "Enter RPN: ") (newline))
(set! expr (read-line))
(when (not (equal? (length expr) 7))
  (begin (display "invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)") (newline))
  (return '())
)
(set! stack (list ))
(set! i 0)
(set! valid #t)
(call/cc (lambda (brk0)
  (let loop0 ()
    (when (_lt i (length expr))
      (set! ch (substring expr i (+ i 1)))
      (if (and (_ge ch "0") (_le ch "9"))
        (begin
          (when (equal? (length digits) 0)
            (begin (display "too many numbers.") (newline))
            (return '())
          )
          (set! j 0)
          (let loop ()
            (if (not (equal? (list-ref digits j) (- (int ch) (int "0"))))
              (begin
                (set! j (+ j 1))
                (when (equal? j (length digits))
                  (begin (display "wrong numbers.") (newline))
                  (return '())
                )
                (loop)
              )
            '()
          )
        )
        (set! digits (+ (_slice digits 0 j) (_slice digits (+ j 1) (length digits))))
        (set! stack (append stack (list (float (- (int ch) (int "0"))))))
      )
      (begin
        (when (_lt (length stack) 2)
          (begin (display "invalid expression syntax.") (newline))
          (set! valid #f)
          (brk0 '())
        )
        (set! b (list-ref stack (- (length stack) 1)))
        (set! a (list-ref stack (- (length stack) 2)))
        (if (equal? ch "+")
          (begin
            (set! stack (list-set stack (- (length stack) 2) (+ a b)))
          )
          (if (equal? ch "-")
            (begin
              (set! stack (list-set stack (- (length stack) 2) (- a b)))
            )
            (if (equal? ch "*")
              (begin
                (set! stack (list-set stack (- (length stack) 2) (* a b)))
              )
              (if (equal? ch "/")
                (begin
                  (set! stack (list-set stack (- (length stack) 2) (/ a b)))
                )
                (begin
                  (begin (display (string-append ch " invalid.")) (newline))
                  (set! valid #f)
                  (brk0 '())
                )
              )
            )
          )
        )
        (set! stack (_slice stack 0 (- (length stack) 1)))
      )
    )
    (set! i (+ i 1))
    (loop0))
  )
)
)
(when valid
(if (_gt (abs (- (list-ref stack 0) 24.0)) 0.000001)
  (begin
    (begin (display (string-append (string-append "incorrect. " (let ((s (open-output-string))) (write (list-ref stack 0) s) (get-output-string s))) " != 24")) (newline))
  )
  (begin
    (begin (display "correct.") (newline))
  )
)
)
))
)

(main )
