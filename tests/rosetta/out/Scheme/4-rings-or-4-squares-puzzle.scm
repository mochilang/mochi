; Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:03Z
(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (srfi 1) (srfi 95) (chibi json) (chibi io) (chibi process) (chibi) (chibi string))

(define (_fmt . parts)
  (apply string-append (map _to_string parts)))

(define (_to_string v)
  (call-with-output-string (lambda (p) (write v p))))

(define (_yaml_value v)
  (let ((n (string->number v)))
    (if n n v)))

(define (_parse_yaml text)
  (let ((rows '()) (cur '()))
    (for-each (lambda (ln)
                (when (and (>= (string-length ln) 2) (string-prefix? "- " ln))
                  (when (not (null? cur))
                    (set! rows (append rows (list cur))))
                  (set! cur '())
                  (set! ln (substring ln 2 (string-length ln))))
                (when (string-contains ln ":")
                  (let* ((p (string-split ln #\:))
                         (k (string-trim (car p)))
                         (val (string-trim (string-join (cdr p) ":"))))
                    (set! cur (append cur (list (cons k (_yaml_value val))))))))
              (string-split text #\newline))
    (when (not (null? cur))
      (set! rows (append rows (list cur))))
    rows))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (_fmt (car p) ": " (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (_fmt (car p) "=" (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (_to_string (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          ((string=? fmt "yaml")
           (_parse_yaml text))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
  (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_date_number s)
  (let ((parts (string-split s #\-)))
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b))
      (let ((da (_date_number a))
            (db (_date_number b)))
        (if (and da db)
            (< da db)
            (string<? a b))))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (_to_string a) (_to_string b)))))

(define (_le a b)
  (or (_lt a b) (equal? a b)))

(define (_gt a b)
  (_lt b a))

(define (_ge a b)
  (or (_gt a b) (equal? a b)))

(define (_sort pairs)
  (letrec ((cmp (lambda (a b) (_lt (cdr a) (cdr b))))
           (insert (lambda (x lst)
                     (cond ((null? lst) (list x))
                           ((cmp x (car lst)) (cons x lst))
                           (else (cons (car lst) (insert x (cdr lst)))))))
           (loop (lambda (xs out)
                   (if (null? xs)
                       out
                       (loop (cdr xs) (insert (car xs) out))))) )
    (loop pairs '())))

(define (validComb a b c d e f g)
  (call/cc (lambda (return)
    (define square1 '())
    (define square2 '())
    (define square3 '())
    (define square4 '())
    (set! square1 (+ a b))
    (set! square2 (+ (+ b c) d))
    (set! square3 (+ (+ d e) f))
    (set! square4 (+ f g))
    (return (and (and (equal? square1 square2) (equal? square2 square3)) (equal? square3 square4)))
  ))
)

(define (isUnique a b c d e f g)
  (call/cc (lambda (return)
    (define i '())
    (define j '())
    (define nums '())
    (set! nums (list a b c d e f g))
    (set! i 0)
    (let loop ()
      (if (_lt i (length nums))
        (begin
          (set! j (+ i 1))
          (let loop ()
            (if (_lt j (length nums))
              (begin
                (when (equal? (list-ref nums i) (list-ref nums j))
                  (return #f)
                )
                (set! j (+ j 1))
                (loop)
              )
            '()
          )
        )
        (set! i (+ i 1))
        (loop)
      )
    '()
  )
)
(return #t)
))
)

(define (getCombs low high unique)
(call/cc (lambda (return)
(define a '())
(define count '())
(define g '())
(define s '())
(define valid '())
(set! valid (list ))
(set! count 0)
(call/cc (lambda (brk0)
  (let loop0 ((b low))
    (when (< b (+ high 1))
      (call/cc (lambda (brk1)
        (let loop1 ((c low))
          (when (< c (+ high 1))
            (call/cc (lambda (brk2)
              (let loop2 ((d low))
                (when (< d (+ high 1))
                  (set! s (+ (+ b c) d))
                  (call/cc (lambda (brk3)
                    (let loop3 ((e low))
                      (when (< e (+ high 1))
                        (call/cc (lambda (brk4)
                          (let loop4 ((f low))
                            (when (< f (+ high 1))
                              (set! a (- s b))
                              (set! g (- s f))
                              (when (or (_lt a low) (_gt a high))
                                (loop4 (+ f 1))
                              )
                              (when (or (_lt g low) (_gt g high))
                                (loop4 (+ f 1))
                              )
                              (when (not (equal? (+ (+ d e) f) s))
                                (loop4 (+ f 1))
                              )
                              (when (not (equal? (+ f g) s))
                                (loop4 (+ f 1))
                              )
                              (when (or (not unique) (isUnique a b c d e f g))
                                (set! valid (append valid (list (list a b c d e f g))))
                                (set! count (+ count 1))
                              )
                              (loop4 (+ f 1)))
                            )
                          )
                        )
                        (loop3 (+ e 1)))
                      )
                    )
                  )
                  (loop2 (+ d 1)))
                )
              )
            )
            (loop1 (+ c 1)))
          )
        )
      )
      (loop0 (+ b 1)))
    )
  )
)
(return (list (cons "count" count) (cons "list" valid)))
))
)

(define r1 (getCombs 1 7 #t))
(begin (display (string-append (let ((s (open-output-string))) (write (map-get r1 "count") s) (get-output-string s)) " unique solutions in 1 to 7")) (newline))
(begin (display (map-get r1 "list")) (newline))
(define r2 (getCombs 3 9 #t))
(begin (display (string-append (let ((s (open-output-string))) (write (map-get r2 "count") s) (get-output-string s)) " unique solutions in 3 to 9")) (newline))
(begin (display (map-get r2 "list")) (newline))
(define r3 (getCombs 0 9 #f))
(begin (display (string-append (let ((s (open-output-string))) (write (map-get r3 "count") s) (get-output-string s)) " non-unique solutions in 0 to 9")) (newline))
