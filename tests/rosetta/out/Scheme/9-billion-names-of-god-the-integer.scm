; Generated by Mochi compiler v0.10.26 on 2025-07-16T12:25:26Z
(import (srfi 1) (srfi 95) (chibi json) (chibi io) (chibi process) (chibi) (chibi string))

(define (_fmt . parts)
  (apply string-append (map _to_string parts)))

(define (_to_string v)
  (call-with-output-string (lambda (p) (write v p))))

(define (_yaml_value v)
  (let ((n (string->number v)))
    (if n n v)))

(define (_parse_yaml text)
  (let ((rows '()) (cur '()))
    (for-each (lambda (ln)
                (when (and (>= (string-length ln) 2) (string-prefix? "- " ln))
                  (when (not (null? cur))
                    (set! rows (append rows (list cur))))
                  (set! cur '())
                  (set! ln (substring ln 2 (string-length ln))))
                (when (string-contains ln ":")
                  (let* ((p (string-split ln #\:))
                         (k (string-trim (car p)))
                         (val (string-trim (string-join (cdr p) ":"))))
                    (set! cur (append cur (list (cons k (_yaml_value val))))))))
              (string-split text #\newline))
    (when (not (null? cur))
      (set! rows (append rows (list cur))))
    rows))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (_fmt (car p) ": " (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (_fmt (car p) "=" (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (_to_string (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          ((string=? fmt "yaml")
           (_parse_yaml text))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
  (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_date_number s)
  (let ((parts (string-split s #\-)))
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b))
      (let ((da (_date_number a))
            (db (_date_number b)))
        (if (and da db)
            (< da db)
            (string<? a b))))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (_to_string a) (_to_string b)))))

(define (_le a b)
  (or (_lt a b) (equal? a b)))

(define (_gt a b)
  (_lt b a))

(define (_ge a b)
  (or (_gt a b) (equal? a b)))

(define (_sort pairs)
  (letrec ((cmp (lambda (a b) (_lt (cdr a) (cdr b))))
           (insert (lambda (x lst)
                     (cond ((null? lst) (list x))
                           ((cmp x (car lst)) (cons x lst))
                           (else (cons (car lst) (insert x (cdr lst)))))))
           (loop (lambda (xs out)
                   (if (null? xs)
                       out
                       (loop (cdr xs) (insert (car xs) out))))) )
    (loop pairs '())))
(define (_slice obj i j)
  (let* ((n (if (string? obj) (string-length obj) (length obj)))
         (start i)
         (end j))
    (when (< start 0) (set! start (+ n start)))
    (when (< end 0) (set! end (+ n end)))
    (when (< start 0) (set! start 0))
    (when (> end n) (set! end n))
    (when (< end start) (set! end start))
        (if (string? obj)
        (substring obj start end)
        (let loop ((idx 0) (xs obj) (out '()))
          (if (or (null? xs) (>= idx end))
              (reverse out)
              (loop (+ idx 1) (cdr xs)
                    (if (>= idx start)
                        (cons (car xs) out)
                        out)))))))
(import (scheme base))

(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((number? v) (list v))
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))
)

(define (_exists v)
  (cond
    ((and (pair? v) (assq 'Items v)) (not (null? (cdr (assq 'Items v)))))
    ((string? v) (> (string-length v) 0))
    ((list? v) (not (null? v)))
    (else #f)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (_gt n m) (set! m n)))
                (cdr lst)))
    m))

(define (_min v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (_lt n m) (set! m n)))
                (cdr lst)))
    m))
(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (_to_string key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))

(define (bigTrim a)
  (call/cc (lambda (return)
    (define n '())
    (set! n (_count a))
    (let loop ()
      (if (and (_gt n 1) (equal? (list-ref a (- n 1)) 0))
        (begin
          (set! a (_slice a 0 (- n 1)))
          (set! n (- n 1))
          (loop)
        )
      '()
    )
  )
  (return a)
))
)

(define (bigFromInt x)
(call/cc (lambda (return)
  (define digits '())
  (define n '())
  (when (equal? x 0)
    (return (list 0))
  )
  (set! digits (list ))
  (set! n x)
  (let loop ()
    (if (_gt n 0)
      (begin
        (set! digits (append digits (list (modulo n 10))))
        (set! n (/ n 10))
        (loop)
      )
    '()
  )
)
(return digits)
))
)

(define (bigAdd a b)
(call/cc (lambda (return)
(define av '())
(define bv '())
(define carry '())
(define i '())
(define res '())
(define s '())
(set! res (list ))
(set! carry 0)
(set! i 0)
(let loop ()
  (if (or (or (_lt i (_count a)) (_lt i (_count b))) (_gt carry 0))
    (begin
      (set! av 0)
      (when (_lt i (_count a))
        (set! av (list-ref a i))
      )
      (set! bv 0)
      (when (_lt i (_count b))
        (set! bv (list-ref b i))
      )
      (set! s (+ (+ av bv) carry))
      (set! res (append res (list (modulo s 10))))
      (set! carry (/ s 10))
      (set! i (+ i 1))
      (loop)
    )
  '()
)
)
(return (bigTrim res))
))
)

(define (bigSub a b)
(call/cc (lambda (return)
(define av '())
(define borrow '())
(define bv '())
(define diff '())
(define i '())
(define res '())
(set! res (list ))
(set! borrow 0)
(set! i 0)
(let loop ()
(if (_lt i (_count a))
  (begin
    (set! av (list-ref a i))
    (set! bv 0)
    (when (_lt i (_count b))
      (set! bv (list-ref b i))
    )
    (set! diff (- (- av bv) borrow))
    (if (_lt diff 0)
      (begin
        (set! diff (+ diff 10))
        (set! borrow 1)
      )
      (begin
        (set! borrow 0)
      )
    )
    (set! res (append res (list diff)))
    (set! i (+ i 1))
    (loop)
  )
'()
)
)
(return (bigTrim res))
))
)

(define (bigToString a)
(call/cc (lambda (return)
(define i '())
(define s '())
(set! s "")
(set! i (- (_count a) 1))
(let loop ()
(if (_ge i 0)
(begin
  (set! s (string-append s (let ((s (open-output-string))) (write (list-ref a i) s) (get-output-string s))))
  (set! i (- i 1))
  (loop)
)
'()
)
)
(return s)
))
)

(define (minInt a b)
(call/cc (lambda (return)
(if (_lt a b)
(begin
(return a)
)
(begin
(return b)
)
)
))
)

(define (cumu n)
(call/cc (lambda (return)
(define cache '())
(define row '())
(define val '())
(define x '())
(define y '())
(set! cache (list (list (bigFromInt 1))))
(set! y 1)
(let loop ()
(if (_le y n)
(begin
(set! row (list (bigFromInt 0)))
(set! x 1)
(let loop ()
  (if (_le x y)
    (begin
      (set! val (list-ref (list-ref cache (- y x)) (minInt x (- y x))))
      (set! row (append row (list (bigAdd (list-ref row (- (_count row) 1)) val))))
      (set! x (+ x 1))
      (loop)
    )
  '()
)
)
(set! cache (append cache (list row)))
(set! y (+ y 1))
(loop)
)
'()
)
)
(return (list-ref cache n))
))
)

(define (row n)
(call/cc (lambda (return)
(define diff '())
(define e '())
(define i '())
(define out '())
(set! e (cumu n))
(set! out (list ))
(set! i 0)
(let loop ()
(if (_lt i n)
(begin
(set! diff (bigSub (list-ref e (+ i 1)) (list-ref e i)))
(set! out (append out (list (bigToString diff))))
(set! i (+ i 1))
(loop)
)
'()
)
)
(return out)
))
)

(define i '())
(define line '())
(define r '())
(define x '())
(begin (display "rows:") (newline))
(set! x 1)
(let loop ()
(if (_lt x 11)
(begin
(set! r (row x))
(set! line "")
(set! i 0)
(let loop ()
(if (_lt i (_count r))
(begin
(set! line (string-append (string-append (string-append line " ") (list-ref r i)) " "))
(set! i (+ i 1))
(loop)
)
'()
)
)
(begin (display line) (newline))
(set! x (+ x 1))
(loop)
)
'()
)
)
(begin (display "") (newline))
(begin (display "sums:") (newline))
(let loop ((num_idx 0))
(if (< num_idx (length (list 23 123 1234)))
(begin
(let ((num (list-ref (list 23 123 1234) num_idx)))
(set! r (cumu num))
(begin (display (string-append (string-append (let ((s (open-output-string))) (write num s) (get-output-string s)) " ") (bigToString (list-ref r (- (_count r) 1))))) (newline))
)
(loop (+ num_idx 1))
)
'()
)
)
