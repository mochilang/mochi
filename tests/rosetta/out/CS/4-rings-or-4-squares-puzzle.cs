// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:27Z
using System;
using System.Collections.Generic;

class Program
{
    static bool validComb(int a, int b, int c, int d, int e, int f, int g)
    {
        var square1 = (a + b);
        var square2 = ((b + c) + d);
        var square3 = ((d + e) + f);
        var square4 = (f + g);
        return (((square1 == square2) && (square2 == square3)) && (square3 == square4));
    }

    static bool isUnique(int a, int b, int c, int d, int e, int f, int g)
    {
        var nums = new List<dynamic> { a, b, c, d, e, f, g };
        int i = 0;
        while (i < nums.Length)
        {
            int j = (i + 1);
            while (j < nums.Length)
            {
                if (_indexList(nums, i) == _indexList(nums, j))
                {
                    return false;
                }
                j = (j + 1);
            }
            i = (i + 1);
        }
        return true;
    }

    static Dictionary<string, dynamic> getCombs(int low, int high, bool unique)
    {
        var valid = new List<dynamic>();
        int count = 0;
        for (var b = low; b < ((high + 1)); b++)
        {
            for (var c = low; c < ((high + 1)); c++)
            {
                for (var d = low; d < ((high + 1)); d++)
                {
                    var s = ((b + c) + d);
                    for (var e = low; e < ((high + 1)); e++)
                    {
                        for (var f = low; f < ((high + 1)); f++)
                        {
                            var a = (s - b);
                            var g = (s - f);
                            if (a < low) || (a > high) {
                                continue;
                            }
                            if (g < low) || (g > high) {
                                continue;
                            }
                            if (((d + e) + f) != s)
                            {
                                continue;
                            }
                            if ((f + g) != s)
                            {
                                continue;
                            }
                            if (!unique) || isUnique(a, b, c, d, e, f, g) {
                                valid = new List<dynamic>(valid) { new List<dynamic> { a, b, c, d, e, f, g } };
                                count = (count + 1);
                            }
                        }
                    }
                }
            }
        }
        return new Dictionary<string, dynamic> { { "count", count }, { "list", valid } };
    }

    static void Main()
    {
        var r1 = getCombs(1, 7, true);
        Console.WriteLine((Convert.ToString(r1["count"]) + " unique solutions in 1 to 7"));
        Console.WriteLine(r1["list"]);
        var r2 = getCombs(3, 9, true);
        Console.WriteLine((Convert.ToString(r2["count"]) + " unique solutions in 3 to 9"));
        Console.WriteLine(r2["list"]);
        var r3 = getCombs(0, 9, false);
        Console.WriteLine((Convert.ToString(r3["count"]) + " non-unique solutions in 0 to 9"));
    }
    static dynamic _indexList(dynamic l, long i)
    {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }

}
