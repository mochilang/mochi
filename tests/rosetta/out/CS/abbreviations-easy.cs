// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:28:41Z
using System;
using System.Collections.Generic;

class Program
{
    static List<string> fields(string s)
    {
        List<string> words = new List<string>();
        string cur = "";
        int i = 0;
        while (i < s.Length)
        {
            string ch = _sliceString(s, i, (i + 1));
            if ((ch == " ") || (ch == "\n")) || (ch == "\t") {
                if (cur.Length > 0)
                {
                    words = new List<string>(words) { cur };
                    cur = "";
                }
            } else
            {
                cur = string.Concat(cur, ch);
            }
            i = (i + 1);
        }
        if (cur.Length > 0)
        {
            words = new List<string>(words) { cur };
        }
        return words;
    }

    static string padRight(string s, int width)
    {
        var out = s;
        int i = s.Length;
        while (i < width)
        {
            out = (out +" ");
            i = (i + 1);
        }
        return out;
    }

    static string join(List<string> xs, string sep)
    {
        string res = "";
        int i = 0;
        while (i < xs.Length)
        {
            if (i > 0)
            {
                res = string.Concat(res, sep);
            }
            res = (res + _indexList(xs, i));
            i = (i + 1);
        }
        return res;
    }

    static List<string> validate(List<string> commands, List<string> words, List<int> mins)
    {
        List<string> results = new List<string>();
        if (words.Length == 0)
        {
            return results;
        }
        int wi = 0;
        while (wi < words.Length)
        {
            string w = _indexList(words, wi);
            bool found = false;
            int wlen = w.Length;
            int ci = 0;
            while (ci < commands.Length)
            {
                var cmd = _indexList(commands, ci);
                if ((_indexList(mins, ci) != 0) && (wlen >= _indexList(mins, ci))) && (wlen <= cmd.Length) {
                    string c = Convert.ToString(cmd).ToUpper();
                    string ww = Convert.ToString(w).ToUpper();
                    if (_sliceString(c, 0, wlen) == ww)
                    {
                        results = new List<string>(results) { c };
                        found = true;
                        break;
                    }
                }
                ci = (ci + 1);
            }
            if (!found)
            {
                results = new List<string>(results) { "*error*" };
            }
            wi = (wi + 1);
        }
        return results;
    }

    static void main()
    {
        string table = string.Concat(string.Concat(string.Concat(string.Concat(string.Concat(string.Concat("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy ", "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find "), "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput "), " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO "), "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT "), "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT "), "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ");
        List<string> commands = fields(table);
        List<int> mins = new List<int>();
        int i = 0;
        while (i < commands.Length)
        {
            int count = 0;
            int j = 0;
            var cmd = _indexList(commands, i);
            while (j < cmd.Length)
            {
                string ch = _sliceString(cmd, j, (j + 1));
                if (string.Compare(Convert.ToString(ch), Convert.ToString("A")) >= 0 && string.Compare(Convert.ToString(ch), Convert.ToString("Z")) <= 0)
                {
                    count = (count + 1);
                }
                j = (j + 1);
            }
            mins = new List<int>(mins) { count };
            i = (i + 1);
        }
        string sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin";
        List<string> words = fields(sentence);
        List<string> results = validate(commands, words, mins);
        string out1 = "user words:  ";
        int k = 0;
        while (k < words.Length)
        {
            out1 = ((out1 + padRight(_indexList(words, k), _indexList(results, k).Length)) + " ");
            k = (k + 1);
        }
        Console.WriteLine(out1);
        Console.WriteLine(("full words:  " + join(results, " ")));
    }

    static void Main()
    {
        main();
    }
    static string _sliceString(string s, long i, long j)
    {
        var start = i;
        var end = j;
        var n = s.Length;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        return s.Substring((int)start, (int)(end - start));
    }

    static dynamic _indexList(dynamic l, long i)
    {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }

}
