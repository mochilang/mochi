// Generated by Mochi compiler v0.10.30 on 2025-07-18T17:22:20Z
using System;
using System.Collections.Generic;

class Program
{
    static List<List<int>> neighborsList()
    {
        return new List<List<int>> { new List<int> { 1, 3 }, new List<int> { 0, 2, 4 }, new List<int> { 1, 5 }, new List<int> { 0, 4, 6 }, new List<int> { 1, 3, 5, 7 }, new List<int> { 2, 4, 8 }, new List<int> { 3, 7 }, new List<int> { 4, 6, 8 }, new List<int> { 5, 7 } };
    }

    static List<int> plus(List<int> a, List<int> b)
    {
        List<int> res = new List<int>();
        int i = 0;
        while (i < a.Count)
        {
            res = new List<int>(res) { (a[(int)i] + b[(int)i]) };
            i = (i + 1);
        }
        return res;
    }

    static bool isStable(List<int> p)
    {
        foreach (var v in p)
        {
            if (v > 3)
            {
                return false;
            }
        }
        return true;
    }

    static int topple(List<int> p)
    {
        List<List<int>> neighbors = neighborsList();
        int i = 0;
        while (i < p.Count)
        {
            if (p[(int)i] > 3)
            {
                p[(int)i] = (p[(int)i] - 4);
                List<int> nbs = neighbors[(int)i];
                foreach (var j in nbs)
                {
                    p[(int)j] = (p[(int)j] + 1);
                }
                return 0;
            }
            i = (i + 1);
        }
        return 0;
    }

    static string pileString(List<int> p)
    {
        string s = "";
        int r = 0;
        while (r < 3)
        {
            int c = 0;
            while (c < 3)
            {
                s = ((s + Convert.ToString(p[(int)((3 * r) + c)])) + " ");
                c = (c + 1);
            }
            s = string.Concat(s, "\n");
            r = (r + 1);
        }
        return s;
    }

    static void Main()
    {
        Console.WriteLine("Avalanche of topplings:\n");
        List<int> s4 = new List<int> { 4, 3, 3, 3, 1, 2, 0, 2, 3 };
        Console.WriteLine(pileString(s4));
        while (!isStable(s4))
        {
            topple(s4);
            Console.WriteLine(pileString(s4));
        }
        Console.WriteLine("Commutative additions:\n");
        List<int> s1 = new List<int> { 1, 2, 0, 2, 1, 1, 0, 1, 3 };
        List<int> s2 = new List<int> { 2, 1, 3, 1, 0, 1, 0, 1, 0 };
        List<int> s3_a = plus(s1, s2);
        while (!isStable(s3_a))
        {
            topple(s3_a);
        }
        List<int> s3_b = plus(s2, s1);
        while (!isStable(s3_b))
        {
            topple(s3_b);
        }
        Console.WriteLine(((((pileString(s1) + "\nplus\n\n") + pileString(s2)) + "\nequals\n\n") + pileString(s3_a)));
        Console.WriteLine(((((("and\n\n" + pileString(s2)) + "\nplus\n\n") + pileString(s1)) + "\nalso equals\n\n") + pileString(s3_b)));
        Console.WriteLine("Addition of identity sandpile:\n");
        List<int> s3 = new List<int> { 3, 3, 3, 3, 3, 3, 3, 3, 3 };
        List<int> s3_id = new List<int> { 2, 1, 2, 1, 0, 1, 2, 1, 2 };
        List<int> s4b = plus(s3, s3_id);
        while (!isStable(s4b))
        {
            topple(s4b);
        }
        Console.WriteLine(((((pileString(s3) + "\nplus\n\n") + pileString(s3_id)) + "\nequals\n\n") + pileString(s4b)));
        Console.WriteLine("Addition of identities:\n");
        List<int> s5 = plus(s3_id, s3_id);
        while (!isStable(s5))
        {
            topple(s5);
        }
        Console.WriteLine(((((pileString(s3_id) + "\nplus\n\n") + pileString(s3_id)) + "\nequals\n\n") + pileString(s5)));
    }
}
