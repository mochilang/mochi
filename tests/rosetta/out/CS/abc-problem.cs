// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:32:22Z
using System;
using System.Collections.Generic;

class Program
{
    static List<string> fields(string s)
    {
        List<string> res = new List<string>();
        string cur = "";
        int i = 0;
        while (i < s.Length)
        {
            var c = _sliceString(s, i, (i + 1));
            if (c == " ")
            {
                if (cur.Length > 0)
                {
                    res = new List<string>(res) { cur };
                    cur = "";
                }
            }
            else
            {
                cur = (cur + c);
            }
            i = (i + 1);
        }
        if (cur.Length > 0)
        {
            res = new List<string>(res) { cur };
        }
        return res;
    }

    static bool canSpell(string word, List<string> blks)
    {
        if (word.Length == 0)
        {
            return true;
        }
        var c = Convert.ToString(_sliceString(word, 0, 1)).ToLower();
        int i = 0;
        while (i < blks.Length)
        {
            var b = _indexList(blks, i);
            if ((c == Convert.ToString(_sliceList(b, 0, 1)).ToLower()) || (c == Convert.ToString(_sliceList(b, 1, 2)).ToLower()))
            {
                List<string> rest = new List<string>();
                int j = 0;
                while (j < blks.Length)
                {
                    if (j != i)
                    {
                        rest = new List<string>(rest) { _indexList(blks, j) };
                    }
                    j = (j + 1);
                }
                if (canSpell(_sliceString(word, 1, word.Length), rest))
                {
                    return true;
                }
            }
            i = (i + 1);
        }
        return false;
    }

    static Func<string, bool> newSpeller(string blocks)
    {
        List<string> bl = fields(blocks);
        return new Func<string, bool>((string w) =>
        {
            return canSpell(w, bl);
        });
    }

    static void main()
    {
        Func<string, bool> sp = newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM");
        foreach (var word in new List<string> { "A", "BARK", "BOOK", "TREAT", "COMMON", "SQUAD", "CONFUSE" })
        {
            Console.WriteLine((string.Concat(word, " ") + Convert.ToString(sp(word))));
        }
    }

    static void Main()
    {
        main();
    }
    static string _sliceString(string s, long i, long j)
    {
        var start = i;
        var end = j;
        var n = s.Length;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        return s.Substring((int)start, (int)(end - start));
    }

    static dynamic _indexList(dynamic l, long i)
    {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }

    static List<dynamic> _sliceList(dynamic l, long i, long j)
    {
        var list = l as System.Collections.IList;
        if (list == null) return new List<dynamic>();
        var start = i;
        var end = j;
        var n = list.Count;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        var res = new List<dynamic>();
        for (int k = (int)start; k < (int)end; k++) res.Add(list[k]);
        return res;
    }

}
