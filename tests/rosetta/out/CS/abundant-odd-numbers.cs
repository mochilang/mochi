// Generated by Mochi compiler v0.10.30 on 2025-07-18T17:22:44Z
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static List<int> divisors(int n)
    {
        List<int> divs = new List<int> { 1 };
        List<int> divs2 = new List<int>();
        int i = 2;
        while ((i * i) <= n)
        {
            if ((n % i) == 0)
            {
                int j = (int)((n / i));
                divs = new List<int>(divs) { i };
                if (i != j)
                {
                    divs2 = new List<int>(divs2) { j };
                }
            }
            i = (i + 1);
        }
        int j = (divs2.Count - 1);
        while (j >= 0)
        {
            divs = new List<int>(divs) { divs2[(int)j] };
            j = (j - 1);
        }
        return divs;
    }

    static int sum(List<int> xs)
    {
        int tot = 0;
        foreach (var v in xs)
        {
            tot = (tot + v);
        }
        return tot;
    }

    static string sumStr(List<int> xs)
    {
        string s = "";
        int i = 0;
        while (i < xs.Count)
        {
            s = ((s + Convert.ToString(xs[(int)i])) + " + ");
            i = (i + 1);
        }
        return s.Substring((int)0, ((int)((s.Length - 3)) - (int)(0)));
    }

    static string pad2(int n)
    {
        string s = Convert.ToString(n);
        if (s.Length < 2)
        {
            return string.Concat(" ", s);
        }
        return s;
    }

    static string pad5(int n)
    {
        string s = Convert.ToString(n);
        while (s.Length < 5)
        {
            s = string.Concat(" ", s);
        }
        return s;
    }

    static int abundantOdd(int searchFrom, int countFrom, int countTo, bool printOne)
    {
        int count = countFrom;
        int n = searchFrom;
        while (count < countTo)
        {
            List<int> divs = divisors(n);
            double tot = Enumerable.Sum(divs);
            if (tot > n)
            {
                count = (count + 1);
                if (printOne && (count < countTo))
                {
                    n = (n + 2);
                    continue;
                }
                string s = sumStr(divs);
                if (!printOne)
                {
                    Console.WriteLine(((((((pad2(count) + ". ") + pad5(n)) + " < ") + s) + " = ") + Convert.ToString(tot)));
                }
                else
                {
                    Console.WriteLine(((((Convert.ToString(n) + " < ") + s) + " = ") + Convert.ToString(tot)));
                }
            }
            n = (n + 2);
        }
        return n;
    }

    static void main()
    {
        var max = 25;
        Console.WriteLine((("The first " + Convert.ToString(max)) + " abundant odd numbers are:"));
        int n = abundantOdd(1, 0, max, false);
        Console.WriteLine("\nThe one thousandth abundant odd number is:");
        abundantOdd(n, max, 1000, true);
        Console.WriteLine("\nThe first abundant odd number above one billion is:");
        abundantOdd(1000000001, 0, 1, true);
    }

    static void Main()
    {
        main();
    }
}
