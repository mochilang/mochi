// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:31:39Z
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static List<int> bigTrim(List<int> a)
    {
        int n = Enumerable.Count(a);
        while ((n > 1) && (_indexList(a, (n - 1)) == 0))
        {
            a = _sliceList(a, 0, (n - 1));
            n = (n - 1);
        }
        return a;
    }

    static List<int> bigFromInt(int x)
    {
        if (x == 0)
        {
            return new List<int> { 0 };
        }
        List<int> digits = new List<int>();
        int n = x;
        while (n > 0)
        {
            digits = new List<int>(digits) { (n % 10) };
            n = (n / 10);
        }
        return digits;
    }

    static List<int> bigAdd(List<int> a, List<int> b)
    {
        List<int> res = new List<int>();
        int carry = 0;
        int i = 0;
        while (((i < Enumerable.Count(a)) || (i < Enumerable.Count(b))) || (carry > 0))
        {
            int av = 0;
            if (i < Enumerable.Count(a))
            {
                av = _indexList(a, i);
            }
            int bv = 0;
            if (i < Enumerable.Count(b))
            {
                bv = _indexList(b, i);
            }
            int s = ((av + bv) + carry);
            res = new List<int>(res) { (s % 10) };
            carry = (s / 10);
            i = (i + 1);
        }
        return bigTrim(res);
    }

    static List<int> bigSub(List<int> a, List<int> b)
    {
        List<int> res = new List<int>();
        int borrow = 0;
        int i = 0;
        while (i < Enumerable.Count(a))
        {
            var av = _indexList(a, i);
            int bv = 0;
            if (i < Enumerable.Count(b))
            {
                bv = _indexList(b, i);
            }
            var diff = ((av - bv) - borrow);
            if (diff < 0)
            {
                diff = (diff + 10);
                borrow = 1;
            }
            else
            {
                borrow = 0;
            }
            res = new List<int>(res) { diff };
            i = (i + 1);
        }
        return bigTrim(res);
    }

    static string bigToString(List<int> a)
    {
        string s = "";
        int i = (Enumerable.Count(a) - 1);
        while (i >= 0)
        {
            s = (s + Convert.ToString(_indexList(a, i)));
            i = (i - 1);
        }
        return s;
    }

    static int minInt(int a, int b)
    {
        if (a < b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }

    static List<List<int>> cumu(int n)
    {
        List<List<List<int>>> cache = new List<List<List<int>>> { new List<List<int>> { bigFromInt(1) } };
        int y = 1;
        while (y <= n)
        {
            List<List<int>> row = new List<List<int>> { bigFromInt(0) };
            int x = 1;
            while (x <= y)
            {
                List<int> val = _indexList(_indexList(cache, (y - x)), minInt(x, (y - x)));
                row = new List<List<int>>(row) { bigAdd(_indexList(row, (row.Count() - 1)), val) };
                x = (x + 1);
            }
            cache = new List<List<List<int>>>(cache) { row };
            y = (y + 1);
        }
        return _indexList(cache, n);
    }

    static List<string> row(int n)
    {
        List<List<int>> e = cumu(n);
        List<string> out = new List<string>();
        int i = 0;
        while (i < n)
        {
            var diff = bigSub(_indexList(e, (i + 1)), _indexList(e, i));
            out = new List<string>(out) { bigToString(diff) };
            i = (i + 1);
        }
        return out;
    }

    static void Main()
    {
        Console.WriteLine("rows:");
        int x = 1;
        while (x < 11)
        {
            var r = row(x);
            string line = "";
            int i = 0;
            while (i < Enumerable.Count(r))
            {
                line = ((string.Concat(line, " ") + _indexList(r, i)) + " ");
                i = (i + 1);
            }
            Console.WriteLine(line);
            x = (x + 1);
        }
        Console.WriteLine("");
        Console.WriteLine("sums:");
        foreach (var num in new List<int> { 23, 123, 1234 })
        {
            var r = cumu(num);
            Console.WriteLine(((Convert.ToString(num) + " ") + bigToString(_indexList(r, (Enumerable.Count(r) - 1)))));
        }
    }
    static dynamic _indexList(dynamic l, long i)
    {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }

    static List<dynamic> _sliceList(dynamic l, long i, long j)
    {
        var list = l as System.Collections.IList;
        if (list == null) return new List<dynamic>();
        var start = i;
        var end = j;
        var n = list.Count;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        var res = new List<dynamic>();
        for (int k = (int)start; k < (int)end; k++) res.Add(list[k]);
        return res;
    }

}
