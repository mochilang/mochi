// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:28:48Z
using System;
using System.Collections.Generic;
using System.Text.Json;

class Program
{
    static List<string> fields(string s)
    {
        List<string> words = new List<string>();
        string cur = "";
        int i = 0;
        while (i < s.Length)
        {
            string ch = _sliceString(s, i, (i + 1));
            if ((ch == " ") || (ch == "\n")) || (ch == "\t") {
                if (cur.Length > 0)
                {
                    words = new List<string>(words) { cur };
                    cur = "";
                }
            } else
            {
                cur = string.Concat(cur, ch);
            }
            i = (i + 1);
        }
        if (cur.Length > 0)
        {
            words = new List<string>(words) { cur };
        }
        return words;
    }

    static string padRight(string s, int width)
    {
        var out = s;
        int i = s.Length;
        while (i < width)
        {
            out = (out +" ");
            i = (i + 1);
        }
        return out;
    }

    static string join(List<string> xs, string sep)
    {
        string res = "";
        int i = 0;
        while (i < xs.Length)
        {
            if (i > 0)
            {
                res = string.Concat(res, sep);
            }
            res = (res + _indexList(xs, i));
            i = (i + 1);
        }
        return res;
    }

    static int parseIntStr(string str)
    {
        int i = 0;
        bool neg = false;
        if (str.Length > 0) && (_sliceString(str, 0, 1) == "-") {
            neg = true;
            i = 1;
        }
        int n = 0;
        Dictionary<string, int> digits = new Dictionary<string, int> { { "0", 0 }, { "1", 1 }, { "2", 2 }, { "3", 3 }, { "4", 4 }, { "5", 5 }, { "6", 6 }, { "7", 7 }, { "8", 8 }, { "9", 9 } };
        while (i < str.Length)
        {
            n = ((n * 10) + digits[_sliceString(str, i, (i + 1))]);
            i = (i + 1);
        }
        if (neg)
        {
            n = (-n);
        }
        return n;
    }

    static bool isDigits(string s)
    {
        if (s.Length == 0)
        {
            return false;
        }
        int i = 0;
        while (i < s.Length)
        {
            string ch = _sliceString(s, i, (i + 1));
            if (string.Compare(Convert.ToString(ch), Convert.ToString("0")) < 0 || string.Compare(Convert.ToString(ch), Convert.ToString("9")) > 0)
            {
                return false;
            }
            i = (i + 1);
        }
        return true;
    }

    static Dictionary<string, dynamic> readTable(string table)
    {
        List<string> toks = fields(table);
        List<string> cmds = new List<string>();
        List<int> mins = new List<int>();
        int i = 0;
        while (i < toks.Length)
        {
            string cmd = _indexList(toks, i);
            int minlen = cmd.Length;
            i = (i + 1);
            if (i < toks.Length) && isDigits(_indexList(toks, i)) {
                var num = parseIntStr(_indexList(toks, i));
                if (num >= 1) && (num < cmd.Length) {
                    minlen = num;
                    i = (i + 1);
                }
            }
            cmds = new List<string>(cmds) { cmd };
            mins = new List<int>(mins) { minlen };
        }
        return new Dictionary<string, dynamic> { { "commands", cmds }, { "mins", mins } };
    }

    static List<string> validate(List<string> commands, List<int> mins, List<string> words)
    {
        List<string> results = new List<string>();
        int wi = 0;
        while (wi < words.Length)
        {
            string w = _indexList(words, wi);
            bool found = false;
            int wlen = w.Length;
            int ci = 0;
            while (ci < commands.Length)
            {
                string cmd = _indexList(commands, ci);
                if ((_indexList(mins, ci) != 0) && (wlen >= _indexList(mins, ci))) && (wlen <= cmd.Length) {
                    string c = Convert.ToString(cmd).ToUpper();
                    string ww = Convert.ToString(w).ToUpper();
                    if (_sliceString(c, 0, wlen) == ww)
                    {
                        results = new List<string>(results) { c };
                        found = true;
                        break;
                    }
                }
                ci = (ci + 1);
            }
            if (!found)
            {
                results = new List<string>(results) { "*error*" };
            }
            wi = (wi + 1);
        }
        return results;
    }

    static void main()
    {
        string table = string.Concat(string.Concat(string.Concat(string.Concat(string.Concat(string.Concat(string.Concat(string.Concat("", "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 "), "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate "), "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 "), "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load "), "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 "), "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 "), "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left "), "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ");
        string sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin";
        var tbl = readTable(table);
        List<string> commands = _cast<List<string>>(tbl["commands"]);
        List<int> mins = _cast<List<int>>(tbl["mins"]);
        List<string> words = fields(sentence);
        List<string> results = validate(commands, mins, words);
        string out1 = "user words:";
        int k = 0;
        while (k < words.Length)
        {
            out1 = string.Concat(out1, " ");
            if (k < (words.Length - 1))
            {
                out1 = (out1 + padRight(_indexList(words, k), _indexList(results, k).Length));
            }
            else
            {
                out1 = (out1 + _indexList(words, k));
            }
            k = (k + 1);
        }
        Console.WriteLine(out1);
        Console.WriteLine(("full words: " + join(results, " ")));
    }

    static void Main()
    {
        main();
    }
    static string _sliceString(string s, long i, long j)
    {
        var start = i;
        var end = j;
        var n = s.Length;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        return s.Substring((int)start, (int)(end - start));
    }

    static dynamic _indexList(dynamic l, long i)
    {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }

    static T _cast<T>(dynamic v)
    {
        if (v is T tv) return tv;
        if (typeof(T) == typeof(long))
        {
            if (v is long) return (T)v;
            if (v is int) return (T)(object)(long)(int)v;
            if (v is double) return (T)(object)(long)(double)v;
            if (v is float) return (T)(object)(long)(float)v;
            if (v is string) return (T)(object)long.Parse((string)v);
        }
        if (typeof(T) == typeof(int))
        {
            if (v is int) return (T)v;
            if (v is long) return (T)(object)(int)(long)v;
            if (v is double) return (T)(object)(int)(double)v;
            if (v is float) return (T)(object)(int)(float)v;
            if (v is string) return (T)(object)int.Parse((string)v);
        }
        if (typeof(T) == typeof(double))
        {
            if (v is int) return (T)(object)(double)(int)v;
            if (v is double) return (T)v;
            if (v is float) return (T)(object)(double)(float)v;
            if (v is string) return (T)(object)double.Parse((string)v);
        }
        if (typeof(T) == typeof(float))
        {
            if (v is int) return (T)(object)(float)(int)v;
            if (v is double) return (T)(object)(float)(double)v;
            if (v is float) return (T)v;
            if (v is string) return (T)(object)float.Parse((string)v);
        }
        if (typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition() == typeof(Dictionary<,>) && v is System.Collections.IDictionary d)
        {
            var args = typeof(T).GetGenericArguments();
            var res = (System.Collections.IDictionary)Activator.CreateInstance(typeof(Dictionary<,>).MakeGenericType(args));
            var mCast = typeof(Program).GetMethod("_cast");
            foreach (System.Collections.DictionaryEntry kv in d)
            {
                var k = mCast.MakeGenericMethod(args[0]).Invoke(null, new object[] { kv.Key });
                var val = mCast.MakeGenericMethod(args[1]).Invoke(null, new object[] { kv.Value });
                res.Add(k, val);
            }
            return (T)res;
        }
        if (v is System.Collections.Generic.IDictionary<object, object> dm)
        {
            var m = new Dictionary<string, object>();
            foreach (var kv in dm) m[Convert.ToString(kv.Key)] = kv.Value;
            v = m;
        }
        var json = JsonSerializer.Serialize(v, new JsonSerializerOptions { IncludeFields = true });
        return JsonSerializer.Deserialize<T>(json, new JsonSerializerOptions { IncludeFields = true });
    }

}
