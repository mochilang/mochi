// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:28:18Z
using System;
using System.Collections.Generic;
using System.Text.Json;

class Program
{
    static List<string> fields(string s)
    {
        List<string> words = new List<string>();
        string cur = "";
        int i = 0;
        while (i < s.Length)
        {
            string ch = _sliceString(s, i, (i + 1));
            if ((ch == " ") || (ch == "\n")) || (ch == "\t") {
                if (cur.Length > 0)
                {
                    words = new List<string>(words) { cur };
                    cur = "";
                }
            } else
            {
                cur = string.Concat(cur, ch);
            }
            i = (i + 1);
        }
        if (cur.Length > 0)
        {
            words = new List<string>(words) { cur };
        }
        return words;
    }

    static string join(List<string> xs, string sep)
    {
        string res = "";
        int i = 0;
        while (i < xs.Length)
        {
            if (i > 0)
            {
                res = string.Concat(res, sep);
            }
            res = (res + _indexList(xs, i));
            i = (i + 1);
        }
        return res;
    }

    static string numberName(int n)
    {
        List<string> small = new List<string> { "no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" };
        List<string> tens = new List<string> { "ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety" };
        if (n < 0)
        {
            return "";
        }
        if (n < 20)
        {
            return _indexList(small, n);
        }
        if (n < 100)
        {
            string t = _indexList(tens, _cast<int>(((n / 10))));
            var s = (n % 10);
            if (s > 0)
            {
                t = (string.Concat(t, " ") + _indexList(small, s));
            }
            return t;
        }
        return "";
    }

    static string pluralizeFirst(string s, int n)
    {
        if (n == 1)
        {
            return s;
        }
        List<string> w = fields(s);
        if (w.Length > 0)
        {
            w[0] = (_indexList(w, 0) + "s");
        }
        return join(w, " ");
    }

    static int randInt(int seed, int n)
    {
        var next = ((((seed * 1664525) + 1013904223)) % 2147483647);
        return (next % n);
    }

    static string slur(string p, int d)
    {
        if (p.Length <= 2)
        {
            return p;
        }
        List<string> a = new List<string>();
        int i = 1;
        while (i < (p.Length - 1))
        {
            a = new List<string>(a) { _sliceString(p, i, (i + 1)) };
            i = (i + 1);
        }
        int idx = (a.Length - 1);
        var seed = d;
        while (idx >= 1)
        {
            seed = ((((seed * 1664525) + 1013904223)) % 2147483647);
            if ((seed % 100) >= d)
            {
                var j = (seed % ((idx + 1)));
                string tmp = _indexList(a, idx);
                a[idx] = _indexList(a, j);
                a[j] = tmp;
            }
            idx = (idx - 1);
        }
        string s = _sliceString(p, 0, 1);
        int k = 0;
        while (k < a.Length)
        {
            s = (s + _indexList(a, k));
            k = (k + 1);
        }
        s = (s + _sliceString(p, (p.Length - 1), p.Length));
        List<string> w = fields(s);
        return join(w, " ");
    }

    static void main()
    {
        int i = 99;
        while (i > 0)
        {
            Console.WriteLine(((((slur(numberName(i), i) + " ") + pluralizeFirst(slur("bottle of", i), i)) + " ") + slur("beer on the wall", i)));
            Console.WriteLine(((((slur(numberName(i), i) + " ") + pluralizeFirst(slur("bottle of", i), i)) + " ") + slur("beer", i)));
            Console.WriteLine(((((slur("take one", i) + " ") + slur("down", i)) + " ") + slur("pass it around", i)));
            Console.WriteLine(((((slur(numberName((i - 1)), i) + " ") + pluralizeFirst(slur("bottle of", i), (i - 1))) + " ") + slur("beer on the wall", i)));
            i = (i - 1);
        }
    }

    static void Main()
    {
        main();
    }
    static string _sliceString(string s, long i, long j)
    {
        var start = i;
        var end = j;
        var n = s.Length;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        return s.Substring((int)start, (int)(end - start));
    }

    static dynamic _indexList(dynamic l, long i)
    {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }

    static T _cast<T>(dynamic v)
    {
        if (v is T tv) return tv;
        if (typeof(T) == typeof(long))
        {
            if (v is long) return (T)v;
            if (v is int) return (T)(object)(long)(int)v;
            if (v is double) return (T)(object)(long)(double)v;
            if (v is float) return (T)(object)(long)(float)v;
            if (v is string) return (T)(object)long.Parse((string)v);
        }
        if (typeof(T) == typeof(int))
        {
            if (v is int) return (T)v;
            if (v is long) return (T)(object)(int)(long)v;
            if (v is double) return (T)(object)(int)(double)v;
            if (v is float) return (T)(object)(int)(float)v;
            if (v is string) return (T)(object)int.Parse((string)v);
        }
        if (typeof(T) == typeof(double))
        {
            if (v is int) return (T)(object)(double)(int)v;
            if (v is double) return (T)v;
            if (v is float) return (T)(object)(double)(float)v;
            if (v is string) return (T)(object)double.Parse((string)v);
        }
        if (typeof(T) == typeof(float))
        {
            if (v is int) return (T)(object)(float)(int)v;
            if (v is double) return (T)(object)(float)(double)v;
            if (v is float) return (T)v;
            if (v is string) return (T)(object)float.Parse((string)v);
        }
        if (typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition() == typeof(Dictionary<,>) && v is System.Collections.IDictionary d)
        {
            var args = typeof(T).GetGenericArguments();
            var res = (System.Collections.IDictionary)Activator.CreateInstance(typeof(Dictionary<,>).MakeGenericType(args));
            var mCast = typeof(Program).GetMethod("_cast");
            foreach (System.Collections.DictionaryEntry kv in d)
            {
                var k = mCast.MakeGenericMethod(args[0]).Invoke(null, new object[] { kv.Key });
                var val = mCast.MakeGenericMethod(args[1]).Invoke(null, new object[] { kv.Value });
                res.Add(k, val);
            }
            return (T)res;
        }
        if (v is System.Collections.Generic.IDictionary<object, object> dm)
        {
            var m = new Dictionary<string, object>();
            foreach (var kv in dm) m[Convert.ToString(kv.Key)] = kv.Value;
            v = m;
        }
        var json = JsonSerializer.Serialize(v, new JsonSerializerOptions { IncludeFields = true });
        return JsonSerializer.Deserialize<T>(json, new JsonSerializerOptions { IncludeFields = true });
    }

}
