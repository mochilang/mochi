// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// circles-of-given-radius-through-two-points.mochi
import java.util.*;

class Point {
    double x;
    double y;
    Point(double x, double y) {
        this.x = x;
        this.y = y;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Point other)) return false;
        return Objects.equals(this.x, other.x) && Objects.equals(this.y, other.y);
    }
    @Override public int hashCode() {
        return Objects.hash(x, y);
    }
}
public class CirclesOfGivenRadiusThroughTwoPoints {
    static double sqrtApprox(double x) {
        double g = x;
        int i = 0;
        while (i < 40) {
            g = (g + x / g) / 2.000000;
            i = (int)(i + 1);
        }
        return g;
    }
    static double hypot(double x, double y) {
        return sqrtApprox(x * x + y * y);
    }
    static List<Object> circles(Point p1, Point p2, double r) {
        if (p1.x == p2.x && p1.y == p2.y) {
            if (r == 0.000000) {
                return Arrays.asList(p1, p1, "Coincident points with r==0.0 describe a degenerate circle.");
            }
            return Arrays.asList(p1, p2, "Coincident points describe an infinite number of circles.");
        }
        if (r == 0.000000) {
            return Arrays.asList(p1, p2, "R==0.0 does not describe circles.");
        }
        double dx = p2.x - p1.x;
        double dy = p2.y - p1.y;
        double q = hypot(dx, dy);
        if (q > 2.000000 * r) {
            return Arrays.asList(p1, p2, "Points too far apart to form circles.");
        }
        Point m = new Point((p1.x + p2.x) / 2.000000, (p1.y + p2.y) / 2.000000);
        if (Objects.equals(q, 2.000000 * r)) {
            return Arrays.asList(m, m, "Points form a diameter and describe only a single circle.");
        }
        double d = sqrtApprox(r * r - q * q / 4.000000);
        double ox = d * dx / q;
        double oy = d * dy / q;
        return Arrays.asList(new Point(m.x - oy, m.y + ox), new Point(m.x + oy, m.y - ox), "Two circles.");
    }
    public static void main(String[] args) {
        String Two = "Two circles.";
        String R0 = "R==0.0 does not describe circles.";
        String Co = "Coincident points describe an infinite number of circles.";
        String CoR0 = "Coincident points with r==0.0 describe a degenerate circle.";
        String Diam = "Points form a diameter and describe only a single circle.";
        String Far = "Points too far apart to form circles.";
        List<List<Point>> td = new ArrayList<>(Arrays.asList(Arrays.asList(new Point(0.123400, 0.987600), new Point(0.876500, 0.234500), 2.000000), Arrays.asList(new Point(0.000000, 2.000000), new Point(0.000000, 0.000000), 1.000000), Arrays.asList(new Point(0.123400, 0.987600), new Point(0.123400, 0.987600), 2.000000), Arrays.asList(new Point(0.123400, 0.987600), new Point(0.876500, 0.234500), 0.500000), Arrays.asList(new Point(0.123400, 0.987600), new Point(0.123400, 0.987600), 0.000000)));
        for (List<Point> tc : td) {
            List<Point> p1 = tc.get(0);
            List<Point> p2 = tc.get(1);
            List<Point> r = tc.get(2);
            System.out.println("p1:  {" + String.valueOf(p1.x) + " " + String.valueOf(p1.y) + "}");
            System.out.println("p2:  {" + String.valueOf(p2.x) + " " + String.valueOf(p2.y) + "}");
            System.out.println("r:  " + String.valueOf(r));
            List<Object> res = circles(p1, p2, r);
            List<Object> c1 = res.get(0);
            List<Object> c2 = res.get(1);
            List<Object> caseStr = res.get(2);
            System.out.println("   " + caseStr);
            if (Objects.equals(caseStr, "Points form a diameter and describe only a single circle.") || Objects.equals(caseStr, "Coincident points with r==0.0 describe a degenerate circle.")) {
                System.out.println("   Center:  {" + String.valueOf(c1.x) + " " + String.valueOf(c1.y) + "}");
            }
            else {
                if (Objects.equals(caseStr, "Two circles.")) {
                    System.out.println("   Center 1:  {" + String.valueOf(c1.x) + " " + String.valueOf(c1.y) + "}");
                    System.out.println("   Center 2:  {" + String.valueOf(c2.x) + " " + String.valueOf(c2.y) + "}");
                }
            }
            System.out.println("");
        }
    }
}
