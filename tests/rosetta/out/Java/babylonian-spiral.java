// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// babylonian-spiral.mochi
import java.util.*;

public class BabylonianSpiral {
    static List<Map<String,Integer>> push(List<Map<String,Integer>> h, Map<String,Integer> it) {
        h.add(it);
        int i = h.size() - 1;
        while (i > 0 && String.valueOf(((List)h.get(i - 1)).get("s")).compareTo(String.valueOf(((List)h.get(i)).get("s"))) > 0) {
            List<Map<String,Integer>> tmp = h.get(i - 1);
            h.set(i - 1, h.get(i));
            h.set(i, tmp);
            i = (int)(i - 1);
        }
        return h;
    }
    static Map<String,Object> step(List<Map<String,Integer>> h, int nv, List<Integer> dir) {
        while (Objects.equals(h.size(), 0) || String.valueOf(nv * nv).compareTo(String.valueOf(((List)h.get(0)).get("s"))) <= 0) {
            h = push(h, new H(nv * nv, nv, 0));
            nv = (int)(nv + 1);
        }
        List<Map<String,Integer>> s = ((List)h.get(0)).get("s");
        List<List<Integer>> v = Arrays.asList();
        while (h.size() > 0 && Objects.equals(((List)h.get(0)).get("s"), s)) {
            List<Map<String,Integer>> it = h.get(0);
            h = ((List)h).subList(1, h.size());
            v.add(Arrays.asList(it.get("a"), it.get("b")));
            if (String.valueOf(it.get("a")).compareTo(String.valueOf(it.get("b"))) > 0) {
                h = push(h, new H(((Number)((Number)it.get("a")).doubleValue() * ((Number)it.get("a")).doubleValue()).doubleValue() + ((Number)((Number)(((Number)it.get("b")).doubleValue() + 1)).doubleValue() * ((Number)(((Number)it.get("b")).doubleValue() + 1)).doubleValue()).doubleValue(), it.get("a"), ((Number)it.get("b")).doubleValue() + 1));
            }
        }
        List<List<Integer>> list = Arrays.asList();
        for (List<Integer> p : v) {
            list.add(p);
        }
        List<List<Integer>> temp = list;
        for (List<Integer> p : temp) {
            if (!Objects.equals(p.get(0), p.get(1))) {
                list.add(Arrays.asList(p.get(1), p.get(0)));
            }
        }
        temp = list;
        for (List<Integer> p : temp) {
            if (!Objects.equals(p.get(1), 0)) {
                list.add(Arrays.asList(p.get(0), -p.get(1)));
            }
        }
        temp = list;
        for (List<Integer> p : temp) {
            if (!Objects.equals(p.get(0), 0)) {
                list.add(Arrays.asList(-p.get(0), p.get(1)));
            }
        }
        int bestDot = -999999999;
        List<Integer> best = dir;
        for (List<Integer> p : list) {
            int cross = ((Number)((Number)p.get(0)).doubleValue() * ((Number)dir.get(1)).doubleValue()).doubleValue() - ((Number)((Number)p.get(1)).doubleValue() * ((Number)dir.get(0)).doubleValue()).doubleValue();
            if (cross >= 0) {
                int dot = ((Number)((Number)p.get(0)).doubleValue() * ((Number)dir.get(0)).doubleValue()).doubleValue() + ((Number)((Number)p.get(1)).doubleValue() * ((Number)dir.get(1)).doubleValue()).doubleValue();
                if (dot > bestDot) {
                    bestDot = (int)(dot);
                    best = p;
                }
            }
        }
        return new DHeapN(best, h, nv);
    }
    static List<List<Integer>> positions(int n) {
        List<List<Integer>> pos = Arrays.asList();
        int x = 0;
        int y = 0;
        List<Integer> dir = Arrays.asList(0, 1);
        List<Map<String,Integer>> heap = Arrays.asList();
        int nv = 1;
        int i = 0;
        while (i < n) {
            pos.add(Arrays.asList(x, y));
            Map<String,Object> st = step(heap, nv, dir);
            dir = (List<Integer>)((Map)st.get("d"));
            heap = (List<Map<String,Integer>>)((Map)st.get("heap"));
            nv = (int)(Integer.parseInt(((Map)st.get("n"))));
            x = (int)(x + ((Number)dir.get(0)).doubleValue());
            y = (int)(y + ((Number)dir.get(1)).doubleValue());
            i = (int)(i + 1);
        }
        return pos;
    }
    static String pad(String s, int w) {
        String r = s;
        while (r.length() < w) {
            r = r + " ";
        }
        return r;
    }
    static void main() {
        List<List<Integer>> pts = positions(40);
        System.out.println("The first 40 Babylonian spiral points are:");
        String line = "";
        int i = 0;
        while (i < pts.size()) {
            List<List<Integer>> p = pts.get(i);
            String s = pad(((Number)((Number)((Number)"(" + ((Number)String.valueOf(p.get(0))).doubleValue()).doubleValue() + ", ").doubleValue() + ((Number)String.valueOf(p.get(1))).doubleValue()).doubleValue() + ")", 10);
            line = line + s;
            if (Objects.equals((i + 1) % 10, 0)) {
                System.out.println(line);
                line = "";
            }
            i = (int)(i + 1);
        }
    }
    public static void main(String[] args) {
        main();
    }
}
