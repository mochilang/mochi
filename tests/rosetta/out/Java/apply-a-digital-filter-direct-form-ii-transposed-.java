// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:41Z
// apply-a-digital-filter-direct-form-ii-transposed-.mochi
import java.util.*;

public class ApplyADigitalFilterDirectFormIiTransposed {
    static List<Double> a = new ArrayList<>(Arrays.asList(1.000000, -0.000000, 0.333333, -0.000000));
    static List<Double> b = new ArrayList<>(Arrays.asList(0.166667, 0.500000, 0.500000, 0.166667));
    static List<Double> applyFilter(List<? extends Number> input, List<? extends Number> a, List<? extends Number> b) {
        List<Double> out = Arrays.asList();
        double scale = 1.000000 / ((Number)a.get(0)).doubleValue();
        int i = 0;
        while (i < input.size()) {
            double tmp = 0.000000;
            int j = 0;
            while (j <= i && j < b.size()) {
                tmp = tmp + ((Number)((Number)b.get(j)).doubleValue() * ((Number)input.get(i - j)).doubleValue()).doubleValue();
                j = (int)(j + 1);
            }
            j = (int)(0);
            while (j < i && String.valueOf(j + 1).compareTo(String.valueOf(a.size())) < 0) {
                tmp = tmp - ((Number)((Number)a.get(j + 1)).doubleValue() * ((Number)out.get(i - j - 1)).doubleValue()).doubleValue();
                j = (int)(j + 1);
            }
            out.add(tmp * scale);
            i = (int)(i + 1);
        }
        return out;
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    List<Double> sig = new ArrayList<>(Arrays.asList(-0.917844, 0.141985, 1.205369, 0.190287, -0.662371, -1.007005, -0.404707, 0.800482, 0.743500, 1.010905, 0.741528, 0.277842, 0.400833, -0.208599, -0.172842, -0.134316, 0.025930, 0.490106, 0.549391, 0.904720));
    List<Double> res = applyFilter(sig, a, b);
    int k = 0;
    while (k < res.size()) {
        System.out.println(res.get(k));
        k = (int)(k + 1);
    }
    }
}
