// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:09:17Z
// 9-billion-names-of-god-the-integer.mochi
import java.util.*;

public class M9BillionNamesOfGodTheInteger {
    static int x = 1;
    static List<Integer> bigTrim(List<Integer> a) {
        int n = a.size();
        while (n > 1 && Objects.equals(a.get(n - 1), 0)) {
            a = ((List)a).subList(0, n - 1);
            n = (int)(n - 1);
        }
        return a;
    }
    static List<Integer> bigFromInt(int x) {
        if (x == 0) {
            return Arrays.asList(0);
        }
        List<Integer> digits = Arrays.asList();
        int n = x;
        while (n > 0) {
            digits.add(n % 10);
            n = (int)(n / 10);
        }
        return digits;
    }
    static List<Integer> bigAdd(List<Integer> a, List<Integer> b) {
        List<Integer> res = Arrays.asList();
        int carry = 0;
        int i = 0;
        while (i < a.size() || i < b.size() || carry > 0) {
            int av = 0;
            if (i < a.size()) {
                av = (int)(a.get(i));
            }
            int bv = 0;
            if (i < b.size()) {
                bv = (int)(b.get(i));
            }
            int s = av + bv + carry;
            res.add(s % 10);
            carry = (int)(s / 10);
            i = (int)(i + 1);
        }
        return bigTrim(res);
    }
    static List<Integer> bigSub(List<Integer> a, List<Integer> b) {
        List<Integer> res = Arrays.asList();
        int borrow = 0;
        int i = 0;
        while (i < a.size()) {
            List<Integer> av = a.get(i);
            int bv = 0;
            if (i < b.size()) {
                bv = (int)(b.get(i));
            }
            int diff = av - bv - borrow;
            if (diff < 0) {
                diff = (int)(diff + 10);
                borrow = (int)(1);
            }
            else {
                borrow = (int)(0);
            }
            res.add(diff);
            i = (int)(i + 1);
        }
        return bigTrim(res);
    }
    static String bigToString(List<Integer> a) {
        String s = "";
        int i = a.size() - 1;
        while (i >= 0) {
            s = s + ((Number)String.valueOf(a.get(i))).doubleValue();
            i = (int)(i - 1);
        }
        return s;
    }
    static int minInt(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
    static List<List<Integer>> cumu(int n) {
        List<List<List<Integer>>> cache = Arrays.asList(Arrays.asList(bigFromInt(1)));
        int y = 1;
        while (y <= n) {
            List<List<Integer>> row = Arrays.asList(bigFromInt(0));
            int x = 1;
            while (x <= y) {
                List<List<List<Integer>>> val = ((List)cache.get(y - x)).get(minInt(x, y - x));
                row.add(bigAdd(row.get(row.size() - 1), val));
                x = (int)(x + 1);
            }
            cache.add(row);
            y = (int)(y + 1);
        }
        return cache.get(n);
    }
    static List<String> row(int n) {
        List<List<Integer>> e = cumu(n);
        List<String> out = Arrays.asList();
        int i = 0;
        while (i < n) {
            List<Integer> diff = bigSub(e.get(i + 1), e.get(i));
            out.add(bigToString(diff));
            i = (int)(i + 1);
        }
        return out;
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    System.out.println("rows:");
    while (x < 11) {
        List<String> r = row(x);
        String line = "";
        int i = 0;
        while (i < r.size()) {
            line = ((Number)line + " " + ((Number)r.get(i)).doubleValue()).doubleValue() + " ";
            i = (int)(i + 1);
        }
        System.out.println(line);
        x = (int)(x + 1);
    }
    System.out.println("");
    System.out.println("sums:");
    for (Integer num : Arrays.asList(23, 123, 1234)) {
        List<List<Integer>> r = cumu(num);
        System.out.println(String.valueOf(num) + " " + ((Number)bigToString(r.get(r.size() - 1))).doubleValue());
    }
    }
}
