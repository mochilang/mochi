// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// balanced-ternary.mochi
import java.util.*;

public class BalancedTernary {
    static String trimLeftZeros(String s) {
        int i = 0;
        while (i < s.length() && Objects.equals(s.substring(i, i + 1), "0")) {
            i = (int)(i + 1);
        }
        return s.substring(i, s.length());
    }
    static Map<String,Object> btString(String s) {
        s = trimLeftZeros(s);
        List<Integer> b = Arrays.asList();
        int i = s.length() - 1;
        while (i >= 0) {
            String ch = s.substring(i, i + 1);
            if (Objects.equals(ch, "+")) {
                b.add(1);
            }
            else {
                if (Objects.equals(ch, "0")) {
                    b.add(0);
                }
                else {
                    if (Objects.equals(ch, "-")) {
                        b.add(0 - 1);
                    }
                    else {
                        return new BtOk(Arrays.asList(), false);
                    }
                }
            }
            i = (int)(i - 1);
        }
        return new BtOk(b, true);
    }
    static String btToString(List<Integer> b) {
        if (Objects.equals(b.size(), 0)) {
            return "0";
        }
        String r = "";
        int i = b.size() - 1;
        while (i >= 0) {
            List<Integer> d = b.get(i);
            if (Objects.equals(d, 0 - 1)) {
                r = r + "-";
            }
            else {
                if (Objects.equals(d, 0)) {
                    r = r + "0";
                }
                else {
                    r = r + "+";
                }
            }
            i = (int)(i - 1);
        }
        return r;
    }
    static List<Integer> btInt(int i) {
        if (i == 0) {
            return Arrays.asList();
        }
        int n = i;
        List<Integer> b = Arrays.asList();
        while (n != 0) {
            int m = n % 3;
            n = (int)(Integer.parseInt((n / 3)));
            if (m == 2) {
                m = (int)(0 - 1);
                n = (int)(n + 1);
            }
            else {
                if (Objects.equals(m, 0 - 2)) {
                    m = (int)(1);
                    n = (int)(n - 1);
                }
            }
            b.add(m);
        }
        return b;
    }
    static int btToInt(List<Integer> b) {
        int r = 0;
        int pt = 1;
        int i = 0;
        while (i < b.size()) {
            r = (int)(r + ((Number)((Number)b.get(i)).doubleValue() * pt).doubleValue());
            pt = (int)(pt * 3);
            i = (int)(i + 1);
        }
        return r;
    }
    static List<Integer> btNeg(List<Integer> b) {
        List<Integer> r = Arrays.asList();
        int i = 0;
        while (i < b.size()) {
            r.add(-b.get(i));
            i = (int)(i + 1);
        }
        return r;
    }
    static List<Integer> btAdd(List<Integer> a, List<Integer> b) {
        return btInt(btToInt(a) + btToInt(b));
    }
    static List<Integer> btMul(List<Integer> a, List<Integer> b) {
        return btInt(btToInt(a) * btToInt(b));
    }
    static String padLeft(String s, int w) {
        String r = s;
        while (r.length() < w) {
            r = " " + r;
        }
        return r;
    }
    static void show(String label, List<Integer> b) {
        String l = padLeft(label, 7);
        String bs = padLeft(btToString(b), 12);
        String is = padLeft(String.valueOf(btToInt(b)), 7);
        System.out.println(l + " " + bs + " " + is);
    }
    static void main() {
        Map<String,Object> ares = btString("+-0++0+");
        Map<String,Object> a = ares.get("bt");
        List<Integer> b = btInt(-436);
        Map<String,Object> cres = btString("+-++-");
        Map<String,Object> c = cres.get("bt");
        show("a:", a);
        show("b:", b);
        show("c:", c);
        show("a(b-c):", btMul(a, btAdd(b, btNeg(c))));
    }
    public static void main(String[] args) {
        main();
    }
}
