// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:03Z
// averages-arithmetic-mean.mochi
import java.util.*;

public class AveragesArithmeticMean {
    static Map<String,any> mean(List<? extends Number> v) {
        if (Objects.equals(v.size(), 0)) {
            return new Ok(false);
        }
        double sum = 0.000000;
        int i = 0;
        while (i < v.size()) {
            sum = sum + ((Number)v.get(i)).doubleValue();
            i = (int)(i + 1);
        }
        return new OkMean(true, sum / (Double.parseDouble(String.valueOf(v.size()))));
    }
    static void main() {
        List<List<Object>> sets = new ArrayList<>(Arrays.asList(Arrays.asList(), Arrays.asList(3.000000, 1.000000, 4.000000, 1.000000, 5.000000, 9.000000), Arrays.asList(100000000000000000000.000000, 3.000000, 1.000000, 4.000000, 1.000000, 5.000000, 9.000000, -100000000000000000000.000000), Arrays.asList(10.000000, 9.000000, 8.000000, 7.000000, 6.000000, 5.000000, 4.000000, 3.000000, 2.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.110000), Arrays.asList(10.000000, 20.000000, 30.000000, 40.000000, 50.000000, -100.000000, 4.700000, -1100.000000)));
        for (List<Object> v : sets) {
            System.out.println("Vector: " + String.valueOf(v));
            Map<String,any> r = mean(v);
            if (r.get("ok")) {
                System.out.println("Mean of " + String.valueOf(v.size()) + " numbers is " + ((Number)String.valueOf(r.get("mean"))).doubleValue());
            }
            else {
                System.out.println("Mean undefined");
            }
            System.out.println("");
        }
    }
    public static void main(String[] args) {
    main();
    }
}
