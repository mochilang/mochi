// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// averages-mode.mochi
import java.util.*;

public class AveragesMode {
    public static void main(String[] args) {
        List<Integer> arr1 = new ArrayList<>(Arrays.asList(2, 7, 1, 8, 2));
        Map<Integer,Integer> counts1 = new LinkedHashMap<Integer,Integer>();
        List<Integer> keys1 = Arrays.asList();
        int i = 0;
        while (i < arr1.size()) {
            List<Integer> v = arr1.get(i);
            if (counts1.containsKey(v)) {
                counts1.put(v, ((Number)counts1.get(v)).doubleValue() + 1);
            }
            else {
                counts1.put(v, 1);
                keys1.add(v);
            }
            i = (int)(i + 1);
        }
        int max1 = 0;
        i = (int)(0);
        while (i < keys1.size()) {
            List<Integer> k = keys1.get(i);
            Map<Integer,Integer> c = counts1.get(k);
            if (c > max1) {
                max1 = (int)(c);
            }
            i = (int)(i + 1);
        }
        List<Integer> modes1 = Arrays.asList();
        i = (int)(0);
        while (i < keys1.size()) {
            List<Integer> k = keys1.get(i);
            if (Objects.equals(counts1.get(k), max1)) {
                modes1.add(k);
            }
            i = (int)(i + 1);
        }
        System.out.println(String.valueOf(modes1));
        List<Integer> arr2 = new ArrayList<>(Arrays.asList(2, 7, 1, 8, 2, 8));
        Map<Integer,Integer> counts2 = new LinkedHashMap<Integer,Integer>();
        List<Integer> keys2 = Arrays.asList();
        i = (int)(0);
        while (i < arr2.size()) {
            List<Integer> v = arr2.get(i);
            if (counts2.containsKey(v)) {
                counts2.put(v, ((Number)counts2.get(v)).doubleValue() + 1);
            }
            else {
                counts2.put(v, 1);
                keys2.add(v);
            }
            i = (int)(i + 1);
        }
        int max2 = 0;
        i = (int)(0);
        while (i < keys2.size()) {
            List<Integer> k = keys2.get(i);
            Map<Integer,Integer> c = counts2.get(k);
            if (c > max2) {
                max2 = (int)(c);
            }
            i = (int)(i + 1);
        }
        List<Integer> modes2 = Arrays.asList();
        i = (int)(0);
        while (i < keys2.size()) {
            List<Integer> k = keys2.get(i);
            if (Objects.equals(counts2.get(k), max2)) {
                modes2.add(k);
            }
            i = (int)(i + 1);
        }
        System.out.println(String.valueOf(modes2));
    }
}
