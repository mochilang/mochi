// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:10:53Z
// bitmap.mochi
import java.util.*;

class Pixel {
    int R;
    int G;
    int B;
    Pixel(int R, int G, int B) {
        this.R = R;
        this.G = G;
        this.B = B;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Pixel other)) return false;
        return Objects.equals(this.R, other.R) && Objects.equals(this.G, other.G) && Objects.equals(this.B, other.B);
    }
    @Override public int hashCode() {
        return Objects.hash(R, G, B);
    }
}
class Bitmap {
    int cols;
    int rows;
    List<List<Object>> px;
    Bitmap(int cols, int rows, List<List<Object>> px) {
        this.cols = cols;
        this.rows = rows;
        this.px = px;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Bitmap other)) return false;
        return Objects.equals(this.cols, other.cols) && Objects.equals(this.rows, other.rows) && Objects.equals(this.px, other.px);
    }
    @Override public int hashCode() {
        return Objects.hash(cols, rows, px);
    }
}
public class Bitmap {
    static Object pixelFromRgb(int c) {
        int r = (Integer.parseInt((c / 65536))) % 256;
        int g = (Integer.parseInt((c / 256))) % 256;
        int b = c % 256;
        return new Pixel(r, g, b);
    }
    static int rgbFromPixel(Object p) {
        return ((Number)((Number)((Number)((Map<?,?>)p).get("R")).doubleValue() * 65536).doubleValue() + ((Number)((Number)((Map<?,?>)p).get("G")).doubleValue() * 256).doubleValue()).doubleValue() + ((Number)((Map<?,?>)p).get("B")).doubleValue();
    }
    static Object NewBitmap(int x, int y) {
        List<List<Object>> data = Arrays.asList();
        int row = 0;
        while (row < y) {
            List<Object> r = Arrays.asList();
            int col = 0;
            while (col < x) {
                r.add(new Pixel(0, 0, 0));
                col = (int)(col + 1);
            }
            data.add(r);
            row = (int)(row + 1);
        }
        return new Bitmap(x, y, data);
    }
    static Map<String,Integer> Extent(Object b) {
        return new ColsRows(((Map<?,?>)b).get("cols"), ((Map<?,?>)b).get("rows"));
    }
    static void Fill(Object b, Object p) {
        int y = 0;
        while (y < ((Number)((Map<?,?>)b).get("rows")).doubleValue()) {
            int x = 0;
            while (x < ((Number)((Map<?,?>)b).get("cols")).doubleValue()) {
                Object px = ((Map<?,?>)b).get("px");
                Object row = ((Map<?,?>)px).get(y);
                ((Map<?,?>)row).put(x, p);
                ((Map<?,?>)px).put(y, row);
                b.px = px;
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
    }
    static void FillRgb(Object b, int c) {
        Fill(b, pixelFromRgb(c));
    }
    static boolean SetPx(Object b, int x, int y, Object p) {
        if (x < 0 || x >= ((Number)((Map<?,?>)b).get("cols")).doubleValue() || y < 0 || y >= ((Number)((Map<?,?>)b).get("rows")).doubleValue()) {
            return false;
        }
        Object px = ((Map<?,?>)b).get("px");
        Object row = ((Map<?,?>)px).get(y);
        ((Map<?,?>)row).put(x, p);
        ((Map<?,?>)px).put(y, row);
        b.px = px;
        return true;
    }
    static boolean SetPxRgb(Object b, int x, int y, int c) {
        return SetPx(b, x, y, pixelFromRgb(c));
    }
    static Map<String,Object> GetPx(Object b, int x, int y) {
        if (x < 0 || x >= ((Number)((Map<?,?>)b).get("cols")).doubleValue() || y < 0 || y >= ((Number)((Map<?,?>)b).get("rows")).doubleValue()) {
            return new Ok(false);
        }
        Object row = ((Map<?,?>)((Map<?,?>)b).get("px")).get(y);
        return new OkPixel(true, ((Map<?,?>)row).get(x));
    }
    static Map<String,Object> GetPxRgb(Object b, int x, int y) {
        Map<String,Object> r = GetPx(b, x, y);
        if (!((Map<String,Object>)r).get("ok")) {
            return new Ok(false);
        }
        return new OkRgb(true, rgbFromPixel(((Map<String,Object>)r).get("pixel")));
    }
    static int ppmSize(Object b) {
        int header = ((Number)((Number)((Number)"P6\n# Creator: Rosetta Code http://rosettacode.org/\n" + ((Number)String.valueOf(((Map<?,?>)b).get("cols"))).doubleValue()).doubleValue() + " ").doubleValue() + ((Number)String.valueOf(((Map<?,?>)b).get("rows"))).doubleValue()).doubleValue() + "\n255\n";
        return header.size() + ((Number)((Number)3 * ((Number)((Map<?,?>)b).get("cols")).doubleValue()).doubleValue() * ((Number)((Map<?,?>)b).get("rows")).doubleValue()).doubleValue();
    }
    static String pixelStr(Object p) {
        return ((Number)((Number)((Number)((Number)((Number)"{" + ((Number)String.valueOf(((Map<?,?>)p).get("R"))).doubleValue()).doubleValue() + " ").doubleValue() + ((Number)String.valueOf(((Map<?,?>)p).get("G"))).doubleValue()).doubleValue() + " ").doubleValue() + ((Number)String.valueOf(((Map<?,?>)p).get("B"))).doubleValue()).doubleValue() + "}";
    }
    static void main() {
        Object bm = NewBitmap(300, 240);
        FillRgb(bm, 16711680);
        SetPxRgb(bm, 10, 20, 255);
        SetPxRgb(bm, 20, 30, 0);
        SetPxRgb(bm, 30, 40, 1056816);
        Map<String,Object> c1 = GetPx(bm, 0, 0);
        Map<String,Object> c2 = GetPx(bm, 10, 20);
        Map<String,Object> c3 = GetPx(bm, 30, 40);
        System.out.println(((Number)((Number)"Image size: " + ((Number)String.valueOf(((Map<?,?>)bm).get("cols"))).doubleValue()).doubleValue() + " Ã— ").doubleValue() + ((Number)String.valueOf(((Map<?,?>)bm).get("rows"))).doubleValue());
        System.out.println(String.valueOf(ppmSize(bm)) + " bytes when encoded as PPM.");
        if (((Map<String,Object>)c1).get("ok")) {
            System.out.println("Pixel at (0,0) is " + ((Number)pixelStr(((Map<String,Object>)c1).get("pixel"))).doubleValue());
        }
        if (((Map<String,Object>)c2).get("ok")) {
            System.out.println("Pixel at (10,20) is " + ((Number)pixelStr(((Map<String,Object>)c2).get("pixel"))).doubleValue());
        }
        if (((Map<String,Object>)c3).get("ok")) {
            Object p = ((Map<String,Object>)c3).get("pixel");
            int r16 = ((Number)((Map<?,?>)p).get("R")).doubleValue() * 257;
            int g16 = ((Number)((Map<?,?>)p).get("G")).doubleValue() * 257;
            int b16 = ((Number)((Map<?,?>)p).get("B")).doubleValue() * 257;
            System.out.println("Pixel at (30,40) has R=" + String.valueOf(r16) + ", G=" + String.valueOf(g16) + ", B=" + String.valueOf(b16));
        }
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    main();
    }
}
