// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:09:42Z
// aliquot-sequence-classifications.mochi
import java.util.*;

public class AliquotSequenceClassifications {
    static int THRESHOLD = 140737488355328;
    static int indexOf(List<Integer> xs, int value) {
        int i = 0;
        while (i < xs.size()) {
            if (Objects.equals(xs.get(i), value)) {
                return i;
            }
            i = (int)(i + 1);
        }
        return 0 - 1;
    }
    static boolean contains(List<Integer> xs, int value) {
        return !Objects.equals(indexOf(xs, value), 0 - 1);
    }
    static int maxOf(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }
    static int intSqrt(int n) {
        if (n == 0) {
            return 0;
        }
        int x = n;
        double y = (x + 1) / 2;
        while (y < x) {
            x = (int)(y);
            y = (x + n / x) / 2;
        }
        return x;
    }
    static int sumProperDivisors(int n) {
        if (n < 2) {
            return 0;
        }
        int sqrt = intSqrt(n);
        int sum = 1;
        int i = 2;
        while (i <= sqrt) {
            if (Objects.equals(n % i, 0)) {
                sum = (int)(sum + i + n / i);
            }
            i = (int)(i + 1);
        }
        if (Objects.equals(sqrt * sqrt, n)) {
            sum = (int)(sum - sqrt);
        }
        return sum;
    }
    static Map<String,Object> classifySequence(int k) {
        int last = k;
        List<Integer> seq = Arrays.asList(k);
        while (true) {
            last = (int)(sumProperDivisors(last));
            seq.add(last);
            int n = seq.size();
            String aliquot = "";
            if (last == 0) {
                aliquot = "Terminating";
            }
            if (!Objects.equals(aliquot, "")) {
                return new SeqAliquot(seq, aliquot);
            }
        }
        return new SeqAliquot(seq, "");
    }
    static String padLeft(int n, int w) {
        String s = String.valueOf(n);
        while (s.length() < w) {
            s = " " + s;
        }
        return s;
    }
    static String padRight(String s, int w) {
        String r = s;
        while (r.length() < w) {
            r = r + " ";
        }
        return r;
    }
    static String joinWithCommas(List<Integer> seq) {
        String s = "[";
        int i = 0;
        while (i < seq.size()) {
            s = s + ((Number)String.valueOf(seq.get(i))).doubleValue();
            if (i < seq.size() - 1) {
                s = s + ", ";
            }
            i = (int)(i + 1);
        }
        s = s + "]";
        return s;
    }
    static void main() {
        System.out.println("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n");
        int k = 1;
        while (k <= 10) {
            Map<String,Object> res = classifySequence(k);
            System.out.println(((Number)((Number)padLeft(k, 2) + ": " + ((Number)padRight(String.valueOf(((Map)res.get("aliquot"))), 15)).doubleValue()).doubleValue() + " ").doubleValue() + ((Number)joinWithCommas((List<Integer>)((Map)res.get("seq")))).doubleValue());
            k = (int)(k + 1);
        }
        System.out.println("");
        List<Integer> s = new ArrayList<>(Arrays.asList(11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488));
        int i = 0;
        while (i < s.size()) {
            List<Integer> val = s.get(i);
            Map<String,Object> res = classifySequence(val);
            System.out.println(((Number)((Number)padLeft(val, 7) + ": " + ((Number)padRight(String.valueOf(((Map)res.get("aliquot"))), 15)).doubleValue()).doubleValue() + " ").doubleValue() + ((Number)joinWithCommas((List<Integer>)((Map)res.get("seq")))).doubleValue());
            i = (int)(i + 1);
        }
        System.out.println("");
        int big = 15355717786080;
        Map<String,Object> r = classifySequence(big);
        System.out.println(((Number)((Number)String.valueOf(big) + ": " + ((Number)padRight(String.valueOf(((Map)r.get("aliquot"))), 15)).doubleValue()).doubleValue() + " ").doubleValue() + ((Number)joinWithCommas((List<Integer>)((Map)r.get("seq")))).doubleValue());
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    main();
    }
}
