// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// ackermann-function-3.mochi
import java.util.*;

public class AckermannFunction3 {
    static String err = "";
    static Object pow_big(Object base, int exp) {
        Object result = 1;
        Object b = base;
        int e = exp;
        while (e > 0) {
            if (Objects.equals(e % 2, 1)) {
                result = result * b;
            }
            b = b * b;
            e = (int)(Integer.parseInt((e / 2)));
        }
        return result;
    }
    static int bit_len(Object x) {
        Object n = x;
        int c = 0;
        while (n > 0) {
            n = n / 2;
            c = (int)(c + 1);
        }
        return c;
    }
    static Object ackermann2(Object m, Object n) {
        if (!Objects.equals(err, "")) {
            return (Object)0;
        }
        if (m <= 3) {
            Object mi = int(m);
            if (Objects.equals(mi, 0)) {
                return n + 1;
            }
            if (Objects.equals(mi, 1)) {
                return n + 2;
            }
            if (Objects.equals(mi, 2)) {
                return 2 * n + 3;
            }
            if (Objects.equals(mi, 3)) {
                int nb = bit_len(n);
                if (nb > 64) {
                    err = "A(m,n) had n of " + String.valueOf(nb) + " bits; too large";
                    return (Object)0;
                }
                Object r = pow_big((Object)2, int(n));
                return 8 * r - 3;
            }
        }
        if (Objects.equals(bit_len(n), 0)) {
            return ackermann2(m - ((Object)1), (Object)1);
        }
        return ackermann2(m - ((Object)1), ackermann2(m, n - ((Object)1)));
    }
    static void show(int m, int n) {
        err = "";
        Object res = ackermann2((Object)m, (Object)n);
        if (!Objects.equals(err, "")) {
            System.out.println("A(" + String.valueOf(m) + ", " + String.valueOf(n) + ") = Error: " + err);
            return ;
        }
        if (bit_len(res) <= 256) {
            System.out.println("A(" + String.valueOf(m) + ", " + String.valueOf(n) + ") = " + String.valueOf(res));
        }
        else {
            String s = String.valueOf(res);
            String pre = s.substring(0, 20);
            String suf = s.substring(s.length() - 20, s.length());
            System.out.println("A(" + String.valueOf(m) + ", " + String.valueOf(n) + ") = " + String.valueOf(s.length()) + " digits starting/ending with: " + pre + "..." + suf);
        }
    }
    static void main() {
        show(0, 0);
        show(1, 2);
        show(2, 4);
        show(3, 100);
        show(3, 1000000);
        show(4, 1);
        show(4, 2);
        show(4, 3);
    }
    public static void main(String[] args) {
        main();
    }
}
