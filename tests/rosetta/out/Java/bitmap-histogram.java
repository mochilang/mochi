// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// bitmap-histogram.mochi
import java.util.*;

public class BitmapHistogram {
    static List<List<Integer>> image() {
        return Arrays.asList(Arrays.asList(0, 0, 10000), Arrays.asList(65535, 65535, 65535), Arrays.asList(65535, 65535, 65535));
    }
    static List<Integer> histogram(List<List<Integer>> g, int bins) {
        if (bins <= 0) {
            bins = (int)(g.get(0).size());
        }
        List<Integer> h = Arrays.asList();
        int i = 0;
        while (i < bins) {
            h.add(0);
            i = (int)(i + 1);
        }
        int y = 0;
        while (y < g.size()) {
            List<List<Integer>> row = g.get(y);
            int x = 0;
            while (x < row.size()) {
                List<List<Integer>> p = row.get(x);
                int idx = Integer.parseInt(((p * (bins - 1)) / 65535));
                h.set(idx, ((Number)h.get(idx)).doubleValue() + 1);
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
        return h;
    }
    static int medianThreshold(List<Integer> h) {
        int lb = 0;
        int ub = h.size() - 1;
        int lSum = 0;
        int uSum = 0;
        while (lb <= ub) {
            if (String.valueOf(lSum + ((Number)h.get(lb)).doubleValue()).compareTo(String.valueOf(uSum + ((Number)h.get(ub)).doubleValue())) < 0) {
                lSum = (int)(lSum + ((Number)h.get(lb)).doubleValue());
                lb = (int)(lb + 1);
            }
            else {
                uSum = (int)(uSum + ((Number)h.get(ub)).doubleValue());
                ub = (int)(ub - 1);
            }
        }
        return Integer.parseInt(((ub * 65535) / h.size()));
    }
    static List<List<Integer>> threshold(List<List<Integer>> g, int t) {
        List<List<Integer>> out = Arrays.asList();
        int y = 0;
        while (y < g.size()) {
            List<List<Integer>> row = g.get(y);
            List<Integer> newRow = Arrays.asList();
            int x = 0;
            while (x < row.size()) {
                if (((Number)row.get(x)).doubleValue() < t) {
                    newRow.add(0);
                }
                else {
                    newRow.add(65535);
                }
                x = (int)(x + 1);
            }
            out.add(newRow);
            y = (int)(y + 1);
        }
        return out;
    }
    static void printImage(List<List<Integer>> g) {
        int y = 0;
        while (y < g.size()) {
            List<List<Integer>> row = g.get(y);
            String line = "";
            int x = 0;
            while (x < row.size()) {
                if (Objects.equals(row.get(x), 0)) {
                    line = line + "0";
                }
                else {
                    line = line + "1";
                }
                x = (int)(x + 1);
            }
            System.out.println(line);
            y = (int)(y + 1);
        }
    }
    static void main() {
        List<List<Integer>> img = image();
        List<Integer> h = histogram(img, 0);
        System.out.println("Histogram: " + String.valueOf(h));
        int t = medianThreshold(h);
        System.out.println("Threshold: " + String.valueOf(t));
        List<List<Integer>> bw = threshold(img, t);
        printImage(bw);
    }
    public static void main(String[] args) {
        main();
    }
}
