// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:32:36Z
// bitmap-write-a-ppm-file.mochi
import java.util.*;

class Bitmap {
    int width;
    int height;
    List<List<Colour>> pixels;
    Bitmap(int width, int height, List<List<Colour>> pixels) {
        this.width = width;
        this.height = height;
        this.pixels = pixels;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Bitmap other)) return false;
        return Objects.equals(this.width, other.width) && Objects.equals(this.height, other.height) && Objects.equals(this.pixels, other.pixels);
    }
    @Override public int hashCode() {
        return Objects.hash(width, height, pixels);
    }
}
class Colour {
    int R;
    int G;
    int B;
    Colour(int R, int G, int B) {
        this.R = R;
        this.G = G;
        this.B = B;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Colour other)) return false;
        return Objects.equals(this.R, other.R) && Objects.equals(this.G, other.G) && Objects.equals(this.B, other.B);
    }
    @Override public int hashCode() {
        return Objects.hash(R, G, B);
    }
}
public class BitmapWriteAPpmFile {
    static Bitmap newBitmap(int w, int h, Colour c) {
        List<List<Colour>> rows = Arrays.asList();
        int y = 0;
        while (y < h) {
            List<Colour> row = Arrays.asList();
            int x = 0;
            while (x < w) {
                row.add(c);
                x = (int)(x + 1);
            }
            rows.add(row);
            y = (int)(y + 1);
        }
        return new Bitmap(w, h, rows);
    }
    static void setPixel(Bitmap b, int x, int y, Colour c) {
        List<List<Colour>> rows = b.pixels;
        List<List<Colour>> row = rows.get(y);
        row.set(x, c);
        rows.set(y, row);
        b.pixels = rows;
    }
    static void fillRect(Bitmap b, int x, int y, int w, int h, Colour c) {
        int yy = y;
        while (yy < y + h) {
            int xx = x;
            while (xx < x + w) {
                setPixel(b, xx, yy, c);
                xx = (int)(xx + 1);
            }
            yy = (int)(yy + 1);
        }
    }
    static String pad(int n, int width) {
        String s = String.valueOf(n);
        while (s.length() < width) {
            s = " " + s;
        }
        return s;
    }
    static String writePPMP3(Bitmap b) {
        int maxv = 0;
        int y = 0;
        while (y < b.height) {
            int x = 0;
            while (x < b.width) {
                List<List<Colour>> p = ((List)b.pixels.get(y)).get(x);
                if (p.R > maxv) {
                    maxv = (int)(p.R);
                }
                if (p.G > maxv) {
                    maxv = (int)(p.G);
                }
                if (p.B > maxv) {
                    maxv = (int)(p.B);
                }
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
        int out = "P3\n# generated from Bitmap.writeppmp3\n" + String.valueOf(b.width) + " " + String.valueOf(b.height) + "\n" + String.valueOf(maxv) + "\n";
        int numsize = String.valueOf(maxv).size();
        y = (int)(b.height - 1);
        while (y >= 0) {
            String line = "";
            int x = 0;
            while (x < b.width) {
                List<List<Colour>> p = ((List)b.pixels.get(y)).get(x);
                line = line + "   " + pad(p.R, numsize) + " " + pad(p.G, numsize) + " " + pad(p.B, numsize);
                x = (int)(x + 1);
            }
            out = (int)(out + line);
            if (y > 0) {
                out = (int)(out + "\n");
            }
            else {
                out = (int)(out + "\n");
            }
            y = (int)(y - 1);
        }
        return out;
    }
    static void main() {
        Colour black = new Colour(0, 0, 0);
        Colour white = new Colour(255, 255, 255);
        Bitmap bm = newBitmap(4, 4, black);
        fillRect(bm, 1, 0, 1, 2, white);
        setPixel(bm, 3, 3, new Colour(127, 0, 63));
        String ppm = writePPMP3(bm);
        System.out.println(ppm);
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    main();
    }
}
