// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:10:10Z
// arithmetic-complex.mochi
import java.util.*;

class Complex {
    double re;
    double im;
    Complex(double re, double im) {
        this.re = re;
        this.im = im;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Complex other)) return false;
        return Objects.equals(this.re, other.re) && Objects.equals(this.im, other.im);
    }
    @Override public int hashCode() {
        return Objects.hash(re, im);
    }
}
public class ArithmeticComplex {
    static Complex a = new Complex(1.000000, 1.000000);
    static Complex b = new Complex(3.141590, 1.250000);
    static Object add(Object a, Object b) {
        return new Complex(((Number)((Map<?,?>)a).get("re")).doubleValue() + ((Number)((Map<?,?>)b).get("re")).doubleValue(), ((Number)((Map<?,?>)a).get("im")).doubleValue() + ((Number)((Map<?,?>)b).get("im")).doubleValue());
    }
    static Object mul(Object a, Object b) {
        return new Complex(((Number)((Number)((Map<?,?>)a).get("re")).doubleValue() * ((Number)((Map<?,?>)b).get("re")).doubleValue()).doubleValue() - ((Number)((Number)((Map<?,?>)a).get("im")).doubleValue() * ((Number)((Map<?,?>)b).get("im")).doubleValue()).doubleValue(), ((Number)((Number)((Map<?,?>)a).get("re")).doubleValue() * ((Number)((Map<?,?>)b).get("im")).doubleValue()).doubleValue() + ((Number)((Number)((Map<?,?>)a).get("im")).doubleValue() * ((Number)((Map<?,?>)b).get("re")).doubleValue()).doubleValue());
    }
    static Object neg(Object a) {
        return new Complex(-((Map<?,?>)a).get("re"), -((Map<?,?>)a).get("im"));
    }
    static Object inv(Object a) {
        int denom = ((Number)((Number)((Map<?,?>)a).get("re")).doubleValue() * ((Number)((Map<?,?>)a).get("re")).doubleValue()).doubleValue() + ((Number)((Number)((Map<?,?>)a).get("im")).doubleValue() * ((Number)((Map<?,?>)a).get("im")).doubleValue()).doubleValue();
        return new Complex(((Number)((Map<?,?>)a).get("re")).doubleValue() / denom, ((Number)-((Map<?,?>)a).get("im")).doubleValue() / denom);
    }
    static Object conj(Object a) {
        return new Complex(((Map<?,?>)a).get("re"), -((Map<?,?>)a).get("im"));
    }
    static String cstr(Object a) {
        int s = "(" + ((Number)String.valueOf(((Map<?,?>)a).get("re"))).doubleValue();
        if (((Number)((Map<?,?>)a).get("im")).doubleValue() >= 0) {
            s = (int)(((Number)s + "+" + ((Number)String.valueOf(((Map<?,?>)a).get("im"))).doubleValue()).doubleValue() + "i)");
        }
        else {
            s = (int)(((Number)s + ((Number)String.valueOf(((Map<?,?>)a).get("im"))).doubleValue()).doubleValue() + "i)");
        }
        return s;
    }
    public static void main(String[] args) {
    System.out.println("a:       " + cstr(a));
    System.out.println("b:       " + cstr(b));
    System.out.println("a + b:   " + cstr(add(a, b)));
    System.out.println("a * b:   " + cstr(mul(a, b)));
    System.out.println("-a:      " + cstr(neg(a)));
    System.out.println("1 / a:   " + cstr(inv(a)));
    System.out.println("aÌ…:       " + cstr(conj(a)));
    }
}
