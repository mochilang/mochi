// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// arithmetic-complex.mochi
import java.util.*;

class Complex {
    double re;
    double im;
    Complex(double re, double im) {
        this.re = re;
        this.im = im;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Complex other)) return false;
        return Objects.equals(this.re, other.re) && Objects.equals(this.im, other.im);
    }
    @Override public int hashCode() {
        return Objects.hash(re, im);
    }
}
public class ArithmeticComplex {
    static Complex a = new Complex(1.000000, 1.000000);
    static Complex b = new Complex(3.141590, 1.250000);
    static Complex add(Complex a, Complex b) {
        return new Complex(a.re + b.re, a.im + b.im);
    }
    static Complex mul(Complex a, Complex b) {
        return new Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re);
    }
    static Complex neg(Complex a) {
        return new Complex(-a.re, -a.im);
    }
    static Complex inv(Complex a) {
        double denom = a.re * a.re + a.im * a.im;
        return new Complex(a.re / denom, -a.im / denom);
    }
    static Complex conj(Complex a) {
        return new Complex(a.re, -a.im);
    }
    static String cstr(Complex a) {
        String s = "(" + String.valueOf(a.re);
        if (a.im >= 0) {
            s = s + "+" + String.valueOf(a.im) + "i)";
        }
        else {
            s = s + String.valueOf(a.im) + "i)";
        }
        return s;
    }
    public static void main(String[] args) {
        System.out.println("a:       " + cstr(a));
        System.out.println("b:       " + cstr(b));
        System.out.println("a + b:   " + cstr(add(a, b)));
        System.out.println("a * b:   " + cstr(mul(a, b)));
        System.out.println("-a:      " + cstr(neg(a)));
        System.out.println("1 / a:   " + cstr(inv(a)));
        System.out.println("aÌ…:       " + cstr(conj(a)));
    }
}
