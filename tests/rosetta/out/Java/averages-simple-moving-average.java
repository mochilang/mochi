// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:10:31Z
// averages-simple-moving-average.mochi
import java.util.*;

public class AveragesSimpleMovingAverage {
    static int indexOf(String s, String ch) {
        int i = 0;
        while (i < s.length()) {
            if (Objects.equals(s.substring(i, i + 1), ch)) {
                return i;
            }
            i = (int)(i + 1);
        }
        return -1;
    }
    static String fmt3(double x) {
        double y = Double.parseDouble(String.valueOf(Integer.parseInt(((x * 1000.000000) + 0.500000)))) / 1000.000000;
        String s = String.valueOf(y);
        int dot = indexOf(s, ".");
        if (Objects.equals(dot, 0 - 1)) {
            s = s + ".000";
        }
        else {
            int decs = s.length() - dot - 1;
            if (decs > 3) {
                s = s.substring(0, dot + 4);
            }
            else {
                while (decs < 3) {
                    s = s + "0";
                    decs = (int)(decs + 1);
                }
            }
        }
        return s;
    }
    static String pad(String s, int width) {
        String out = s;
        while (out.length() < width) {
            out = " " + out;
        }
        return out;
    }
    static List<Double> smaSeries(List<? extends Number> xs, int period) {
        List<Double> res = Arrays.asList();
        double sum = 0.000000;
        int i = 0;
        while (i < xs.size()) {
            sum = sum + ((Number)xs.get(i)).doubleValue();
            if (i >= period) {
                sum = sum - ((Number)xs.get(i - period)).doubleValue();
            }
            int denom = i + 1;
            if (denom > period) {
                denom = (int)(period);
            }
            res.add(sum / (Double.parseDouble(String.valueOf(denom))));
            i = (int)(i + 1);
        }
        return res;
    }
    static void main() {
        List<Double> xs = new ArrayList<>(Arrays.asList(1.000000, 2.000000, 3.000000, 4.000000, 5.000000, 5.000000, 4.000000, 3.000000, 2.000000, 1.000000));
        List<Double> sma3 = smaSeries(xs, 3);
        List<Double> sma5 = smaSeries(xs, 5);
        System.out.println("x       sma3   sma5");
        int i = 0;
        while (i < xs.size()) {
            int line = ((Number)((Number)((Number)((Number)pad(fmt3(xs.get(i)), 5)).doubleValue() + "  ").doubleValue() + ((Number)pad(fmt3(sma3.get(i)), 5)).doubleValue()).doubleValue() + "  ").doubleValue() + ((Number)pad(fmt3(sma5.get(i)), 5)).doubleValue();
            System.out.println(line);
            i = (int)(i + 1);
        }
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    main();
    }
}
