// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// constrained-random-points-on-a-circle-2.mochi
import java.util.*;

public class ConstrainedRandomPointsOnACircle2 {
    public static void main(String[] args) {
        int nPts = 100;
        int rMin = 10;
        int rMax = 15;
        int span = rMax + 1 + rMax;
        List<List<Integer>> poss = Arrays.asList();
        int min2 = rMin * rMin;
        int max2 = rMax * rMax;
        int y = -rMax;
        while (y <= rMax) {
            int x = -rMax;
            while (x <= rMax) {
                int r2 = x * x + y * y;
                if (r2 >= min2 && r2 <= max2) {
                    poss.add(Arrays.asList(x, y));
                }
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
        System.out.println(String.valueOf(poss.size()) + " possible points");
        List<List<String>> rows = Arrays.asList();
        int r = 0;
        while (r < span) {
            List<String> row = Arrays.asList();
            int c = 0;
            while (c < span * 2) {
                row.add(" ");
                c = (int)(c + 1);
            }
            rows.add(row);
            r = (int)(r + 1);
        }
        int u = 0;
        Map<String,Boolean> seen = new LinkedHashMap<String,Boolean>();
        int n = 0;
        while (n < nPts) {
            int i = System.currentTimeMillis() % poss.size();
            List<List<Integer>> x = ((List)poss.get(i)).get(0);
            List<List<Integer>> yy = ((List)poss.get(i)).get(1);
            int row = yy + rMax;
            int col = (x + rMax) * 2;
            ((List)rows.get(row)).set(col, "*");
            String key = String.valueOf(row) + "," + String.valueOf(col);
            if (!((Boolean)seen.get(key))) {
                seen.put(key, true);
                u = (int)(u + 1);
            }
            n = (int)(n + 1);
        }
        int i2 = 0;
        while (i2 < span) {
            String line = "";
            int j = 0;
            while (j < span * 2) {
                line = line + ((Number)((List)rows.get(i2)).get(j)).doubleValue();
                j = (int)(j + 1);
            }
            System.out.println(line);
            i2 = (int)(i2 + 1);
        }
        System.out.println(String.valueOf(u) + " unique points");
    }
}
