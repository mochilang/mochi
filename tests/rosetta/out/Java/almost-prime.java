// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:21Z
// almost-prime.mochi
import java.util.*;

public class AlmostPrime {
    static boolean kPrime(int n, int k) {
        int nf = 0;
        int i = 2;
        while (i <= n) {
            while (Objects.equals(n % i, 0)) {
                if (nf == k) {
                    return false;
                }
                nf = (int)(nf + 1);
                n = (int)(n / i);
            }
            i = (int)(i + 1);
        }
        return nf == k;
    }
    static List<Integer> gen(int k, int count) {
        List<Integer> r = Arrays.asList();
        int n = 2;
        while (r.size() < count) {
            if (kPrime(n, k)) {
                r.add(n);
            }
            n = (int)(n + 1);
        }
        return r;
    }
    static void main() {
        int k = 1;
        while (k <= 5) {
            System.out.println(String.valueOf(k) + " " + String.valueOf(gen(k, 10)));
            k = (int)(k + 1);
        }
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    main();
    }
}
