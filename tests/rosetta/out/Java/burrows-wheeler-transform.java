// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// burrows-wheeler-transform.mochi
import java.util.*;

public class BurrowsWheelerTransform {
    static String stx = "\x02";
    static String etx = "\x03";
    static boolean contains(String s, String ch) {
        int i = 0;
        while (i < s.length()) {
            if (Objects.equals(s.substring(i, i + 1), ch)) {
                return true;
            }
            i = (int)(i + 1);
        }
        return false;
    }
    static List<String> sortStrings(List<String> xs) {
        List<String> arr = xs;
        int n = arr.size();
        int i = 0;
        while (i < n) {
            int j = 0;
            while (j < n - 1) {
                if (String.valueOf(arr.get(j)).compareTo(String.valueOf(arr.get(j + 1))) > 0) {
                    List<String> tmp = arr.get(j);
                    arr.set(j, arr.get(j + 1));
                    arr.set(j + 1, tmp);
                }
                j = (int)(j + 1);
            }
            i = (int)(i + 1);
        }
        return arr;
    }
    static Map<String,Object> bwt(String s) {
        if (contains(s, stx) || contains(s, etx)) {
            return new ErrRes(true, "");
        }
        s = stx + s + etx;
        int le = s.length();
        List<String> table = Arrays.asList();
        int i = 0;
        while (i < le) {
            String rot = s.substring(i, le) + s.substring(0, i);
            table.add(rot);
            i = (int)(i + 1);
        }
        table = sortStrings(table);
        String last = "";
        i = (int)(0);
        while (i < le) {
            last = last + ((Number)table.get(i).substring(le - 1, le)).doubleValue();
            i = (int)(i + 1);
        }
        return new ErrRes(false, last);
    }
    static String ibwt(String r) {
        int le = r.length();
        List<String> table = Arrays.asList();
        int i = 0;
        while (i < le) {
            table.add("");
            i = (int)(i + 1);
        }
        int n = 0;
        while (n < le) {
            i = (int)(0);
            while (i < le) {
                table.set(i, r.substring(i, i + 1) + ((Number)table.get(i)).doubleValue());
                i = (int)(i + 1);
            }
            table = sortStrings(table);
            n = (int)(n + 1);
        }
        i = (int)(0);
        while (i < le) {
            if (Objects.equals(table.get(i).substring(le - 1, le), etx)) {
                return table.get(i).substring(1, le - 1);
            }
            i = (int)(i + 1);
        }
        return "";
    }
    static String makePrintable(String s) {
        String out = "";
        int i = 0;
        while (i < s.length()) {
            String ch = s.substring(i, i + 1);
            if (Objects.equals(ch, stx)) {
                out = out + "^";
            }
            i = (int)(i + 1);
        }
        return out;
    }
    static void main() {
        List<String> examples = new ArrayList<>(Arrays.asList("banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"));
        for (String t : examples) {
            System.out.println(makePrintable(t));
            Map<String,Object> res = bwt(t);
            if (res.get("err")) {
                System.out.println(" --> ERROR: String can't contain STX or ETX");
                System.out.println(" -->");
            }
            else {
                String enc = String.valueOf(((Map)res.get("res")));
                System.out.println(" --> " + makePrintable(enc));
                String r = ibwt(enc);
                System.out.println(" --> " + r);
            }
            System.out.println("");
        }
    }
    public static void main(String[] args) {
        main();
    }
}
