// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:32:22Z
// circular-primes.mochi
import java.util.*;

public class CircularPrimes {
    static boolean isPrime(int n) {
        if (n < 2) {
            return false;
        }
        if (Objects.equals(n % 2, 0)) {
            return n == 2;
        }
        if (Objects.equals(n % 3, 0)) {
            return n == 3;
        }
        int d = 5;
        while (d * d <= n) {
            if (Objects.equals(n % d, 0)) {
                return false;
            }
            d = (int)(d + 2);
            if (Objects.equals(n % d, 0)) {
                return false;
            }
            d = (int)(d + 4);
        }
        return true;
    }
    static boolean isCircular(int n) {
        int nn = n;
        int pow = 1;
        while (nn > 0) {
            pow = (int)(pow * 10);
            nn = (int)(nn / 10);
        }
        nn = (int)(n);
        while (true) {
            nn = (int)(nn * 10);
            double f = nn / pow;
            nn = (int)(nn + f * (1 - pow));
            if (nn == n) {
                break;
            }
            if (!isPrime(nn)) {
                return false;
            }
        }
        return true;
    }
    static String showList(List<Integer> xs) {
        String out = "[";
        int i = 0;
        while (i < xs.size()) {
            out = out + ((Number)String.valueOf(xs.get(i))).doubleValue();
            if (i < xs.size() - 1) {
                out = out + ", ";
            }
            i = (int)(i + 1);
        }
        return out + "]";
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    List<Integer> circs = Arrays.asList();
    System.out.println("The first 19 circular primes are:");
    List<Integer> digits = new ArrayList<>(Arrays.asList(1, 3, 7, 9));
    List<Integer> q = new ArrayList<>(Arrays.asList(1, 2, 3, 5, 7, 9));
    List<Integer> fq = new ArrayList<>(Arrays.asList(1, 2, 3, 5, 7, 9));
    int count = 0;
    while (true) {
        List<Integer> f = q.get(0);
        List<Integer> fd = fq.get(0);
        if (isPrime(f) && isCircular(f)) {
            circs.add(f);
            count = (int)(count + 1);
            if (count == 19) {
                break;
            }
        }
        q = ((List)q).subList(1, q.size());
        fq = ((List)fq).subList(1, fq.size());
        if (!Objects.equals(f, 2) && !Objects.equals(f, 5)) {
            for (Integer d : digits) {
                q.add(f * 10 + d);
                fq.add(fd);
            }
        }
    }
    System.out.println(showList(circs));
    System.out.println("\nThe next 4 circular primes, in repunit format, are:");
    System.out.println("[R(19) R(23) R(317) R(1031)]");
    System.out.println("\nThe following repunits are probably circular primes:");
    for (Integer i : Arrays.asList(5003, 9887, 15073, 25031, 35317, 49081)) {
        System.out.println("R(" + String.valueOf(i) + ") : true");
    }
    }
}
