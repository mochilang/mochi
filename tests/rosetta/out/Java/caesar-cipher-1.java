// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:32:42Z
// caesar-cipher-1.mochi
import java.util.*;

public class CaesarCipher1 {
    static int indexOf(String s, String ch) {
        int i = 0;
        while (i < s.length()) {
            if (Objects.equals(s.substring(i, i + 1), ch)) {
                return i;
            }
            i = (int)(i + 1);
        }
        return -1;
    }
    static int ord(String ch) {
        String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lower = "abcdefghijklmnopqrstuvwxyz";
        int idx = indexOf(upper, ch);
        if (idx >= 0) {
            return 65 + idx;
        }
        idx = (int)(indexOf(lower, ch));
        if (idx >= 0) {
            return 97 + idx;
        }
        return 0;
    }
    static String chr(int n) {
        String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lower = "abcdefghijklmnopqrstuvwxyz";
        if (n >= 65 && n < 91) {
            return upper.substring(n - 65, n - 64);
        }
        if (n >= 97 && n < 123) {
            return lower.substring(n - 97, n - 96);
        }
        return "?";
    }
    static String shiftRune(String r, int k) {
        if (String.valueOf(r).compareTo(String.valueOf("a")) >= 0 && String.valueOf(r).compareTo(String.valueOf("z")) <= 0) {
            return chr(((ord(r) - 97 + k) % 26) + 97);
        }
        if (String.valueOf(r).compareTo(String.valueOf("A")) >= 0 && String.valueOf(r).compareTo(String.valueOf("Z")) <= 0) {
            return chr(((ord(r) - 65 + k) % 26) + 65);
        }
        return r;
    }
    static String encipher(String s, int k) {
        String out = "";
        int i = 0;
        while (i < s.length()) {
            out = out + shiftRune(s.substring(i, i + 1), k);
            i = (int)(i + 1);
        }
        return out;
    }
    static String decipher(String s, int k) {
        return encipher(s, (26 - k % 26) % 26);
    }
    static void main() {
        String pt = "The five boxing wizards jump quickly";
        System.out.println("Plaintext: " + pt);
        for (Integer key : Arrays.asList(0, 1, 7, 25, 26)) {
            if (key < 1 || key > 25) {
                System.out.println("Key " + String.valueOf(key) + " invalid");
                continue;
            }
            String ct = encipher(pt, key);
            System.out.println("Key " + String.valueOf(key));
            System.out.println("  Enciphered: " + ct);
            System.out.println("  Deciphered: " + decipher(ct, key));
        }
    }
    public static void main(String[] args) {
    main();
    }
}
