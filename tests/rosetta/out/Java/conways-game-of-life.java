// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// conways-game-of-life.mochi
import java.util.*;

class Life {
    Field a;
    Field b;
    int w;
    int h;
    Life(Field a, Field b, int w, int h) {
        this.a = a;
        this.b = b;
        this.w = w;
        this.h = h;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Life other)) return false;
        return Objects.equals(this.a, other.a) && Objects.equals(this.b, other.b) && Objects.equals(this.w, other.w) && Objects.equals(this.h, other.h);
    }
    @Override public int hashCode() {
        return Objects.hash(a, b, w, h);
    }
}
class Field {
    List<List<Boolean>> s;
    int w;
    int h;
    Field(List<List<Boolean>> s, int w, int h) {
        this.s = s;
        this.w = w;
        this.h = h;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Field other)) return false;
        return Objects.equals(this.s, other.s) && Objects.equals(this.w, other.w) && Objects.equals(this.h, other.h);
    }
    @Override public int hashCode() {
        return Objects.hash(s, w, h);
    }
}
public class ConwaysGameOfLife {
    static int seed = 1;
    static int randN(int n) {
        seed = (int)((seed * 1664525 + 1013904223) % 2147483647);
        return seed % n;
    }
    static Field newField(int w, int h) {
        List<List<Boolean>> rows = Arrays.asList();
        int y = 0;
        while (y < h) {
            List<Boolean> row = Arrays.asList();
            int x = 0;
            while (x < w) {
                row.add(false);
                x = (int)(x + 1);
            }
            rows.add(row);
            y = (int)(y + 1);
        }
        return new Field(rows, w, h);
    }
    static void setCell(Field f, int x, int y, boolean b) {
        List<List<Boolean>> rows = f.s;
        List<List<Boolean>> row = rows.get(y);
        row.set(x, b);
        rows.set(y, row);
        f.s = rows;
    }
    static boolean state(Field f, int x, int y) {
        while (y < 0) {
            y = (int)(y + f.h);
        }
        while (x < 0) {
            x = (int)(x + f.w);
        }
        return ((List)f.s.get(y % f.h)).get(x % f.w);
    }
    static boolean nextState(Field f, int x, int y) {
        int count = 0;
        int dy = -1;
        while (dy <= 1) {
            int dx = -1;
            while (dx <= 1) {
                if (!((Boolean)(dx == 0 && dy == 0)) && state(f, x + dx, y + dy)) {
                    count = (int)(count + 1);
                }
                dx = (int)(dx + 1);
            }
            dy = (int)(dy + 1);
        }
        return count == 3 || (count == 2 && state(f, x, y));
    }
    static Life newLife(int w, int h) {
        Field a = newField(w, h);
        int i = 0;
        while (i < (w * h / 2)) {
            setCell(a, randN(w), randN(h), true);
            i = (int)(i + 1);
        }
        return new Life(a, newField(w, h), w, h);
    }
    static void step(Life l) {
        int y = 0;
        while (y < l.h) {
            int x = 0;
            while (x < l.w) {
                setCell(l.b, x, y, nextState(l.a, x, y));
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
        Field tmp = l.a;
        l.a = l.b;
        l.b = tmp;
    }
    static String lifeString(Life l) {
        String out = "";
        int y = 0;
        while (y < l.h) {
            int x = 0;
            while (x < l.w) {
                if (state(l.a, x, y)) {
                    out = out + "*";
                }
                else {
                    out = out + " ";
                }
                x = (int)(x + 1);
            }
            out = out + "\n";
            y = (int)(y + 1);
        }
        return out;
    }
    static void main() {
        Life l = newLife(80, 15);
        int i = 0;
        while (i < 300) {
            step(l);
            System.out.println("\f");
            System.out.println(lifeString(l));
            i = (int)(i + 1);
        }
    }
    public static void main(String[] args) {
        main();
    }
}
