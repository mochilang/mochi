// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// cholesky-decomposition-1.mochi
import java.util.*;

public class CholeskyDecomposition1 {
    static double sqrtApprox(double x) {
        double guess = x;
        int i = 0;
        while (i < 20) {
            guess = (guess + x / guess) / 2.000000;
            i = (int)(i + 1);
        }
        return guess;
    }
    static Map<String,Object> makeSym(int order, List<? extends Number> elements) {
        return new OrderEle(order, elements);
    }
    static List<List<Double>> unpackSym(Map<String,Object> m) {
        Map<String,Object> n = m.get("order");
        Map<String,Object> ele = m.get("ele");
        List<List<Double>> mat = Arrays.asList();
        int idx = 0;
        int r = 0;
        while (r < n) {
            List<Double> row = Arrays.asList();
            int c = 0;
            while (c <= r) {
                row.add(ele.get(idx));
                idx = (int)(idx + 1);
                c = (int)(c + 1);
            }
            while (c < n) {
                row.add(0.000000);
                c = (int)(c + 1);
            }
            mat.add(row);
            r = (int)(r + 1);
        }
        r = (int)(0);
        while (r < n) {
            int c = r + 1;
            while (c < n) {
                ((List)mat.get(r)).set(c, ((List)mat.get(c)).get(r));
                c = (int)(c + 1);
            }
            r = (int)(r + 1);
        }
        return mat;
    }
    static void printMat(List<List<Double>> m) {
        int i = 0;
        while (i < m.size()) {
            String line = "";
            int j = 0;
            while (j < ((Number)m.get(i).size()).doubleValue()) {
                line = line + ((Number)String.valueOf(((List)m.get(i)).get(j))).doubleValue();
                if (j < ((Number)((Number)m.get(i).size()).doubleValue() - 1).doubleValue()) {
                    line = line + " ";
                }
                j = (int)(j + 1);
            }
            System.out.println(line);
            i = (int)(i + 1);
        }
    }
    static void printSym(Map<String,Object> m) {
        printMat(unpackSym(m));
    }
    static void printLower(Map<String,Object> m) {
        Map<String,Object> n = m.get("order");
        Map<String,Object> ele = m.get("ele");
        List<List<Double>> mat = Arrays.asList();
        int idx = 0;
        int r = 0;
        while (r < n) {
            List<Double> row = Arrays.asList();
            int c = 0;
            while (c <= r) {
                row.add(ele.get(idx));
                idx = (int)(idx + 1);
                c = (int)(c + 1);
            }
            while (c < n) {
                row.add(0.000000);
                c = (int)(c + 1);
            }
            mat.add(row);
            r = (int)(r + 1);
        }
        printMat(mat);
    }
    static Map<String,Object> choleskyLower(Map<String,Object> a) {
        Map<String,Object> n = a.get("order");
        Map<String,Object> ae = a.get("ele");
        List<Double> le = Arrays.asList();
        int idx = 0;
        while (idx < ae.size()) {
            le.add(0.000000);
            idx = (int)(idx + 1);
        }
        int row = 1;
        int col = 1;
        int dr = 0;
        int dc = 0;
        int i = 0;
        while (i < ae.size()) {
            Map<String,Object> e = ae.get(i);
            if (i < dr) {
                double d = ((Number)(e - ((Number)le.get(i)).doubleValue())).doubleValue() / ((Number)le.get(dc)).doubleValue();
                le.set(i, d);
                int ci = col;
                int cx = dc;
                int j = i + 1;
                while (j <= dr) {
                    cx = (int)(cx + ci);
                    ci = (int)(ci + 1);
                    le.set(j, ((Number)le.get(j)).doubleValue() + ((Number)d * ((Number)le.get(cx)).doubleValue()).doubleValue());
                    j = (int)(j + 1);
                }
                col = (int)(col + 1);
                dc = (int)(dc + col);
            }
            else {
                le.set(i, sqrtApprox(e - ((Number)le.get(i)).doubleValue()));
                row = (int)(row + 1);
                dr = (int)(dr + row);
                col = (int)(1);
                dc = (int)(0);
            }
            i = (int)(i + 1);
        }
        return new OrderEle(n, le);
    }
    static void demo(Map<String,Object> a) {
        System.out.println("A:");
        printSym(a);
        System.out.println("L:");
        Map<String,Object> l = choleskyLower(a);
        printLower(l);
    }
    public static void main(String[] args) {
        demo(makeSym(3, Arrays.asList(25.000000, 15.000000, 18.000000, -5.000000, 0.000000, 11.000000)));
        demo(makeSym(4, Arrays.asList(18.000000, 22.000000, 70.000000, 54.000000, 86.000000, 174.000000, 42.000000, 62.000000, 134.000000, 106.000000)));
    }
}
