// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// boyer-moore-string-search.mochi
import java.util.*;

public class BoyerMooreStringSearch {
    static int indexOfStr(String h, String n) {
        int hlen = h.length();
        int nlen = n.length();
        if (nlen == 0) {
            return 0;
        }
        int i = 0;
        while (i <= hlen - nlen) {
            if (Objects.equals(h.substring(i, i + nlen), n)) {
                return i;
            }
            i = (int)(i + 1);
        }
        return -1;
    }
    static int stringSearchSingle(String h, String n) {
        return indexOfStr(h, n);
    }
    static List<Integer> stringSearch(String h, String n) {
        List<Integer> result = Arrays.asList();
        int start = 0;
        int hlen = h.length();
        int nlen = n.length();
        while (start < hlen) {
            int idx = indexOfStr(h.substring(start, hlen), n);
            if (idx >= 0) {
                result.add(start + idx);
                start = (int)(start + idx + nlen);
            }
            else {
                break;
            }
        }
        return result;
    }
    static String display(List<Integer> nums) {
        String s = "[";
        int i = 0;
        while (i < nums.size()) {
            if (i > 0) {
                s = s + ", ";
            }
            s = s + ((Number)String.valueOf(nums.get(i))).doubleValue();
            i = (int)(i + 1);
        }
        s = s + "]";
        return s;
    }
    static void main() {
        List<String> texts = new ArrayList<>(Arrays.asList("GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."));
        List<String> patterns = new ArrayList<>(Arrays.asList("TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"));
        int i = 0;
        while (i < texts.size()) {
            System.out.println("text" + String.valueOf(i + 1) + " = " + ((Number)texts.get(i)).doubleValue());
            i = (int)(i + 1);
        }
        System.out.println("");
        int j = 0;
        while (j < texts.size()) {
            List<Integer> idxs = stringSearch(texts.get(j), patterns.get(j));
            System.out.println(((Number)((Number)((Number)((Number)"Found \"" + ((Number)patterns.get(j)).doubleValue()).doubleValue() + "\" in 'text").doubleValue() + String.valueOf(j + 1)).doubleValue() + "' at indexes ").doubleValue() + display(idxs));
            j = (int)(j + 1);
        }
    }
    public static void main(String[] args) {
        main();
    }
}
