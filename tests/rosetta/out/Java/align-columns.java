// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:09:41Z
// align-columns.mochi
import java.util.*;

public class AlignColumns {
    static double text = "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" + "are$delineated$by$a$single$'dollar'$character,$write$a$program\n" + "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n" + "column$are$separated$by$at$least$one$space.\n" + "Further,$allow$for$each$word$in$a$column$to$be$either$left\n" + "justified,$right$justified,$or$center$justified$within$its$column.";
    static Map<String,Object> f = newFormatter(text);
    static List<String> split(String s, String sep) {
        List<String> parts = Arrays.asList();
        String cur = "";
        int i = 0;
        while (i < s.length()) {
            if (sep.length() > 0 && String.valueOf(i + sep.length()).compareTo(String.valueOf(s.length())) <= 0 && Objects.equals(s.substring(i, i + sep.length()), sep)) {
                parts.add(cur);
                cur = "";
                i = (int)(i + sep.length());
            }
            else {
                cur = cur + s.substring(i, i + 1);
                i = (int)(i + 1);
            }
        }
        parts.add(cur);
        return parts;
    }
    static List<String> rstripEmpty(List<String> words) {
        int n = words.size();
        while (n > 0 && Objects.equals(words.get(n - 1), "")) {
            n = (int)(n - 1);
        }
        return ((List)words).subList(0, n);
    }
    static String spaces(int n) {
        String out = "";
        int i = 0;
        while (i < n) {
            out = out + " ";
            i = (int)(i + 1);
        }
        return out;
    }
    static String pad(String word, int width, int align) {
        int diff = width - word.length();
        if (align == 0) {
            return word + spaces(diff);
        }
        if (align == 2) {
            return spaces(diff) + word;
        }
        int left = Integer.parseInt((diff / 2));
        int right = diff - left;
        return spaces(left) + word + spaces(right);
    }
    static Map<String,Object> newFormatter(String text) {
        List<String> lines = split(text, "\n");
        List<List<String>> fmtLines = Arrays.asList();
        List<Integer> width = Arrays.asList();
        int i = 0;
        while (i < lines.size()) {
            if (Objects.equals(lines.get(i).size(), 0)) {
                i = (int)(i + 1);
                continue;
            }
            List<String> words = rstripEmpty(split(lines.get(i), "$"));
            fmtLines.add(words);
            int j = 0;
            while (j < words.size()) {
                int wlen = words.get(j).size();
                if (Objects.equals(j, width.size())) {
                    width.add(wlen);
                }
                j = (int)(j + 1);
            }
            i = (int)(i + 1);
        }
        return new TextWidth(fmtLines, width);
    }
    static void printFmt(Map<String,Object> f, int align) {
        List<List<String>> lines = (List<List<String>>)((Map)f.get("text"));
        List<Integer> width = (List<Integer>)((Map)f.get("width"));
        int i = 0;
        while (i < lines.size()) {
            List<List<String>> words = lines.get(i);
            String line = "";
            int j = 0;
            while (j < words.size()) {
                line = ((Number)line + ((Number)pad(words.get(j), width.get(j), align)).doubleValue()).doubleValue() + " ";
                j = (int)(j + 1);
            }
            System.out.println(line);
            i = (int)(i + 1);
        }
        System.out.println("");
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    printFmt(f, 0);
    printFmt(f, 1);
    printFmt(f, 2);
    }
}
