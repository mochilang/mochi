// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// adfgvx-cipher.mochi
import java.util.*;

public class AdfgvxCipher {
    static String adfgvx = "ADFGVX";
    static String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    static String shuffleStr(String s) {
        List<String> arr = Arrays.asList();
        int i = 0;
        while (i < s.length()) {
            arr = arr + Arrays.asList(s.charAt(i));
            i = (int)(i + 1);
        }
        int j = arr.size() - 1;
        while (j > 0) {
            int k = now() % (j + 1);
            List<String> tmp = arr.get(j);
            arr.set(j, arr.get(k));
            arr.set(k, tmp);
            j = (int)(j - 1);
        }
        String out = "";
        i = (int)(0);
        while (i < arr.size()) {
            out = out + ((Number)arr.get(i)).doubleValue();
            i = (int)(i + 1);
        }
        return out;
    }
    static List<String> createPolybius() {
        String shuffled = shuffleStr(alphabet);
        System.out.println("6 x 6 Polybius square:\n");
        System.out.println("  | A D F G V X");
        System.out.println("---------------");
        List<String> p = Arrays.asList();
        int i = 0;
        while (i < 6) {
            String row = shuffled.substring(i * 6, (i + 1) * 6);
            p = p + Arrays.asList(row);
            String line = adfgvx.charAt(i) + " | ";
            int j = 0;
            while (j < 6) {
                line = line + row.charAt(j) + " ";
                j = (int)(j + 1);
            }
            System.out.println(line);
            i = (int)(i + 1);
        }
        return p;
    }
    static String createKey(int n) {
        if (n < 7 || n > 12) {
            System.out.println("Key should be within 7 and 12 letters long.");
        }
        String pool = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        String key = "";
        int i = 0;
        while (i < n) {
            int idx = now() % pool.length();
            key = key + pool.charAt(idx);
            pool = pool.substring(0, idx) + pool.substring(idx + 1, pool.length());
            i = (int)(i + 1);
        }
        System.out.println("\nThe key is " + key);
        return key;
    }
    static List<Integer> orderKey(String key) {
        List<Object> pairs = new ArrayList<>(Arrays.asList());
        int i = 0;
        while (i < key.length()) {
            pairs = pairs + Arrays.asList(Arrays.asList(key.charAt(i), i));
            i = (int)(i + 1);
        }
        int n = pairs.size();
        int m = 0;
        while (m < n) {
            int j = 0;
            while (j < n - 1) {
                if (String.valueOf(((Map<?,?>)((List)pairs.get(j))).get(0)).compareTo(String.valueOf(((Map<?,?>)((List)pairs.get(j + 1))).get(0))) > 0) {
                    List<Object> tmp = pairs.get(j);
                    pairs.set(j, pairs.get(j + 1));
                    pairs.set(j + 1, tmp);
                }
                j = (int)(j + 1);
            }
            m = (int)(m + 1);
        }
        List<Object> res = new ArrayList<>(Arrays.asList());
        i = (int)(0);
        while (i < n) {
            res = res + ((Number)Arrays.asList(Integer.parseInt(((?)((List)pairs.get(i)).get(1))))).doubleValue();
            i = (int)(i + 1);
        }
        return res;
    }
    static String encrypt(List<String> polybius, String key, String plainText) {
        String temp = "";
        int i = 0;
        while (i < plainText.length()) {
            int r = 0;
            while (r < 6) {
                int c = 0;
                while (c < 6) {
                    if (Objects.equals(((Map<?,?>)((List)polybius.get(r))).get(c), plainText.charAt(i))) {
                        temp = temp + adfgvx.charAt(r) + adfgvx.charAt(c);
                    }
                    c = (int)(c + 1);
                }
                r = (int)(r + 1);
            }
            i = (int)(i + 1);
        }
        double colLen = temp.length() / key.length();
        if (temp.length() % key.length() > 0) {
            colLen = colLen + 1;
        }
        List<List<String>> table = Arrays.asList();
        int rIdx = 0;
        while (rIdx < colLen) {
            List<String> row = Arrays.asList();
            int j = 0;
            while (j < key.length()) {
                row = row + Arrays.asList("");
                j = (int)(j + 1);
            }
            table = table + Arrays.asList(row);
            rIdx = (int)(rIdx + 1);
        }
        int idx = 0;
        while (idx < temp.length()) {
            double row = idx / key.length();
            int col = idx % key.length();
            ((List)table.get(row)).set(col, temp.substring(idx, idx + 1));
            idx = (int)(idx + 1);
        }
        List<Integer> order = orderKey(key);
        List<String> cols = Arrays.asList();
        int ci = 0;
        while (ci < key.length()) {
            String colStr = "";
            int ri = 0;
            while (ri < colLen) {
                colStr = colStr + ((Number)((List)table.get(ri)).get(order.get(ci))).doubleValue();
                ri = (int)(ri + 1);
            }
            cols = cols + Arrays.asList(colStr);
            ci = (int)(ci + 1);
        }
        String result = "";
        ci = (int)(0);
        while (ci < cols.size()) {
            result = result + ((Number)cols.get(ci)).doubleValue();
            if (ci < cols.size() - 1) {
                result = result + " ";
            }
            ci = (int)(ci + 1);
        }
        return result;
    }
    static int indexOf(String s, String ch) {
        int i = 0;
        while (i < s.length()) {
            if (Objects.equals(s.charAt(i), ch)) {
                return i;
            }
            i = (int)(i + 1);
        }
        return -1;
    }
    static String decrypt(List<String> polybius, String key, String cipherText) {
        List<String> colStrs = Arrays.asList();
        int start = 0;
        int i = 0;
        while (i <= cipherText.length()) {
            if (Objects.equals(i, cipherText.length()) || Objects.equals(cipherText.charAt(i), " ")) {
                colStrs = colStrs + Arrays.asList(cipherText.substring(start, i));
                start = (int)(i + 1);
            }
            i = (int)(i + 1);
        }
        int maxColLen = 0;
        i = (int)(0);
        while (i < colStrs.size()) {
            if (((Number)colStrs.get(i).size()).doubleValue() > maxColLen) {
                maxColLen = (int)(colStrs.get(i).size());
            }
            i = (int)(i + 1);
        }
        List<List<String>> cols = Arrays.asList();
        i = (int)(0);
        while (i < colStrs.size()) {
            List<String> s = colStrs.get(i);
            List<String> ls = Arrays.asList();
            int j = 0;
            while (j < s.size()) {
                ls = ls + ((Number)Arrays.asList(s.get(j))).doubleValue();
                j = (int)(j + 1);
            }
            if (s.size() < maxColLen) {
                List<String> pad = Arrays.asList();
                int k = 0;
                while (k < maxColLen) {
                    if (k < ls.size()) {
                        pad = pad + ((Number)Arrays.asList(ls.get(k))).doubleValue();
                    }
                    else {
                        pad = pad + Arrays.asList("");
                    }
                    k = (int)(k + 1);
                }
                cols = cols + Arrays.asList(pad);
            }
            else {
                cols = cols + Arrays.asList(ls);
            }
            i = (int)(i + 1);
        }
        List<List<String>> table = Arrays.asList();
        int r = 0;
        while (r < maxColLen) {
            List<String> row = Arrays.asList();
            int c = 0;
            while (c < key.length()) {
                row = row + Arrays.asList("");
                c = (int)(c + 1);
            }
            table = table + Arrays.asList(row);
            r = (int)(r + 1);
        }
        List<Integer> order = orderKey(key);
        r = (int)(0);
        while (r < maxColLen) {
            int c = 0;
            while (c < key.length()) {
                ((List)table.get(r)).set(order.get(c), ((List)cols.get(c)).get(r));
                c = (int)(c + 1);
            }
            r = (int)(r + 1);
        }
        String temp = "";
        r = (int)(0);
        while (r < table.size()) {
            int j = 0;
            while (j < ((Number)table.get(r).size()).doubleValue()) {
                temp = temp + ((Number)((List)table.get(r)).get(j)).doubleValue();
                j = (int)(j + 1);
            }
            r = (int)(r + 1);
        }
        String plainText = "";
        int idx = 0;
        while (idx < temp.length()) {
            int rIdx = indexOf(adfgvx, temp.substring(idx, idx + 1));
            int cIdx = indexOf(adfgvx, temp.substring(idx + 1, idx + 2));
            plainText = plainText + ((Number)((Map<?,?>)((List)polybius.get(rIdx))).get(cIdx)).doubleValue();
            idx = (int)(idx + 2);
        }
        return plainText;
    }
    static void main() {
        String plainText = "ATTACKAT1200AM";
        List<String> polybius = createPolybius();
        String key = createKey(9);
        System.out.println("\nPlaintext : " + plainText);
        String cipherText = encrypt(polybius, key, plainText);
        System.out.println("\nEncrypted : " + cipherText);
        String plainText2 = decrypt(polybius, key, cipherText);
        System.out.println("\nDecrypted : " + plainText2);
    }
    public static void main(String[] args) {
        main();
    }
}
