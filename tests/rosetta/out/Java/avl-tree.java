// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:10:32Z
// avl-tree.mochi
import java.util.*;

public class AvlTree {
    static Map<String,Object> Node(int data) {
        return new DataBalanceLink(data, 0, Arrays.asList(null, null));
    }
    static Object getLink(Map<String,Object> n, int dir) {
        return ((Map<?,?>)((List<Object>)((Map)n.get("Link")))).get(dir);
    }
    static void setLink(Map<String,Object> n, int dir, Object v) {
        List<Object> links = (List<Object>)((Map)n.get("Link"));
        links.set(dir, v);
        n.put("Link", links);
    }
    static int opp(int dir) {
        return 1 - dir;
    }
    static Map<String,Object> single(Map<String,Object> root, int dir) {
        Object tmp = getLink(root, opp(dir));
        setLink(root, opp(dir), getLink(tmp, dir));
        setLink(tmp, dir, root);
        return tmp;
    }
    static Map<String,Object> double(Map<String,Object> root, int dir) {
        Object tmp = getLink(getLink(root, opp(dir)), dir);
        setLink(getLink(root, opp(dir)), dir, getLink(tmp, opp(dir)));
        setLink(tmp, opp(dir), getLink(root, opp(dir)));
        setLink(root, opp(dir), tmp);
        tmp = getLink(root, opp(dir));
        setLink(root, opp(dir), getLink(tmp, dir));
        setLink(tmp, dir, root);
        return tmp;
    }
    static void adjustBalance(Map<String,Object> root, int dir, int bal) {
        Map<String,Object> n = (Map<String,Object>)getLink(root, dir);
        Map<String,Object> nn = (Map<String,Object>)getLink(n, opp(dir));
        if (Objects.equals(nn.get("Balance"), 0)) {
            root.put("Balance", 0);
            n.put("Balance", 0);
        }
        nn.put("Balance", 0);
    }
    static Map<String,Object> insertBalance(Map<String,Object> root, int dir) {
        Map<String,Object> n = (Map<String,Object>)getLink(root, dir);
        int bal = 2 * dir - 1;
        if (Objects.equals(n.get("Balance"), bal)) {
            root.put("Balance", 0);
            n.put("Balance", 0);
            return single(root, opp(dir));
        }
        adjustBalance(root, dir, bal);
        return double(root, opp(dir));
    }
    static Map<String,Object> insertR(Object root, int data) {
        if (Objects.equals(root, null)) {
            return new NodeDone(Node(data), false);
        }
        Map<String,Object> node = (Map<String,Object>)root;
        int dir = 0;
        if (((Number)(Integer.parseInt(((Map)node.get("Data"))))).doubleValue() < data) {
            dir = (int)(1);
        }
        Map<String,Object> r = insertR(getLink(node, dir), data);
        setLink(node, dir, r.get("node"));
        if (r.get("done")) {
            return new NodeDone(node, true);
        }
        node.put("Balance", ((Number)(Integer.parseInt(((Map)node.get("Balance"))))).doubleValue() + (2 * dir - 1));
        if (Objects.equals(node.get("Balance"), 0)) {
            return new NodeDone(node, true);
        }
        if (Objects.equals(node.get("Balance"), 1) || Objects.equals(node.get("Balance"), (-1))) {
            return new NodeDone(node, false);
        }
        return new NodeDone(insertBalance(node, dir), true);
    }
    static Object Insert(Object tree, int data) {
        Map<String,Object> r = insertR(tree, data);
        return r.get("node");
    }
    static Map<String,Object> removeBalance(Map<String,Object> root, int dir) {
        Map<String,Object> n = (Map<String,Object>)getLink(root, opp(dir));
        int bal = 2 * dir - 1;
        if (Objects.equals(n.get("Balance"), (-bal))) {
            root.put("Balance", 0);
            n.put("Balance", 0);
            return new NodeDone(single(root, dir), false);
        }
        if (Objects.equals(n.get("Balance"), bal)) {
            adjustBalance(root, opp(dir), (-bal));
            return new NodeDone(double(root, dir), false);
        }
        root.put("Balance", -bal);
        n.put("Balance", bal);
        return new NodeDone(single(root, dir), true);
    }
    static Map<String,Object> removeR(Object root, int data) {
        if (Objects.equals(root, null)) {
            return new NodeDone(null, false);
        }
        Map<String,Object> node = (Map<String,Object>)root;
        if (Objects.equals((Integer.parseInt(((Map)node.get("Data")))), data)) {
            if (Objects.equals(getLink(node, 0), null)) {
                return new NodeDone(getLink(node, 1), false);
            }
            if (Objects.equals(getLink(node, 1), null)) {
                return new NodeDone(getLink(node, 0), false);
            }
            Object heir = getLink(node, 0);
            while (!Objects.equals(getLink(heir, 1), null)) {
                heir = getLink(heir, 1);
            }
            node.put("Data", ((Map<?,?>)heir).get("Data"));
            data = (int)(Integer.parseInt(((?)heir).get("Data")));
        }
        int dir = 0;
        if (((Number)(Integer.parseInt(((Map)node.get("Data"))))).doubleValue() < data) {
            dir = (int)(1);
        }
        Map<String,Object> r = removeR(getLink(node, dir), data);
        setLink(node, dir, r.get("node"));
        if (r.get("done")) {
            return new NodeDone(node, true);
        }
        node.put("Balance", ((Number)((Number)(Integer.parseInt(((Map)node.get("Balance"))))).doubleValue() + 1).doubleValue() - 2 * dir);
        if (Objects.equals(node.get("Balance"), 1) || Objects.equals(node.get("Balance"), (-1))) {
            return new NodeDone(node, true);
        }
        if (Objects.equals(node.get("Balance"), 0)) {
            return new NodeDone(node, false);
        }
        return removeBalance(node, dir);
    }
    static Object Remove(Object tree, int data) {
        Map<String,Object> r = removeR(tree, data);
        return r.get("node");
    }
    static String indentStr(int n) {
        String s = "";
        int i = 0;
        while (i < n) {
            s = s + " ";
            i = (int)(i + 1);
        }
        return s;
    }
    static void dumpNode(Object node, int indent, boolean comma) {
        String sp = indentStr(indent);
        if (Objects.equals(node, null)) {
            int line = sp + "null";
            if (comma) {
                line = (int)(line + ",");
            }
            System.out.println(line);
        }
        else {
            System.out.println(sp + "{");
            System.out.println(((Number)indentStr(indent + 3) + "\"Data\": " + ((Number)String.valueOf(((Map<?,?>)node).get("Data"))).doubleValue()).doubleValue() + ",");
            System.out.println(((Number)indentStr(indent + 3) + "\"Balance\": " + ((Number)String.valueOf(((Map<?,?>)node).get("Balance"))).doubleValue()).doubleValue() + ",");
            System.out.println(indentStr(indent + 3) + "\"Link\": [");
            dumpNode(getLink(node, 0), indent + 6, true);
            dumpNode(getLink(node, 1), indent + 6, false);
            System.out.println(indentStr(indent + 3) + "]");
            int end = sp + "}";
            if (comma) {
                end = (int)(end + ",");
            }
            System.out.println(end);
        }
    }
    static void dump(Object node, int indent) {
        dumpNode(node, indent, false);
    }
    static void main() {
        Object tree = null;
        System.out.println("Empty tree:");
        dump(tree, 0);
        System.out.println("");
        System.out.println("Insert test:");
        tree = Insert(tree, 3);
        tree = Insert(tree, 1);
        tree = Insert(tree, 4);
        tree = Insert(tree, 1);
        tree = Insert(tree, 5);
        dump(tree, 0);
        System.out.println("");
        System.out.println("Remove test:");
        tree = Remove(tree, 3);
        tree = Remove(tree, 1);
        Map<String,Object> t = (Map<String,Object>)tree;
        t.put("Balance", 0);
        tree = t;
        dump(tree, 0);
    }
    public static void main(String[] args) {
    main();
    }
}
