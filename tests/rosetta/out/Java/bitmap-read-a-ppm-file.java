// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:10:52Z
// bitmap-read-a-ppm-file.mochi
import java.util.*;

class Pixel {
    int R;
    int G;
    int B;
    Pixel(int R, int G, int B) {
        this.R = R;
        this.G = G;
        this.B = B;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Pixel other)) return false;
        return Objects.equals(this.R, other.R) && Objects.equals(this.G, other.G) && Objects.equals(this.B, other.B);
    }
    @Override public int hashCode() {
        return Objects.hash(R, G, B);
    }
}
class Bitmap {
    int w;
    int h;
    int max;
    List<List<Object>> data;
    Bitmap(int w, int h, int max, List<List<Object>> data) {
        this.w = w;
        this.h = h;
        this.max = max;
        this.data = data;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Bitmap other)) return false;
        return Objects.equals(this.w, other.w) && Objects.equals(this.h, other.h) && Objects.equals(this.max, other.max) && Objects.equals(this.data, other.data);
    }
    @Override public int hashCode() {
        return Objects.hash(w, h, max, data);
    }
}
public class BitmapReadAPpmFile {
    static Object bm = readP3(ppmtxt);
    static String out = writeP3(bm);
    static Object newBitmap(int w, int h, int max) {
        List<List<Object>> rows = Arrays.asList();
        int y = 0;
        while (y < h) {
            List<Object> row = Arrays.asList();
            int x = 0;
            while (x < w) {
                row.add(new Pixel(0, 0, 0));
                x = (int)(x + 1);
            }
            rows.add(row);
            y = (int)(y + 1);
        }
        return new Bitmap(w, h, max, rows);
    }
    static void setPx(Object b, int x, int y, Object p) {
        Object rows = ((Map<?,?>)b).get("data");
        Object row = ((Map<?,?>)rows).get(y);
        ((Map<?,?>)row).put(x, p);
        ((Map<?,?>)rows).put(y, row);
        b.data = rows;
    }
    static Object getPx(Object b, int x, int y) {
        return ((Map<?,?>)((?)((Map<?,?>)b).get("data")).get(y)).get(x);
    }
    static List<String> splitLines(String s) {
        List<String> out = Arrays.asList();
        String cur = "";
        int i = 0;
        while (i < s.length()) {
            Object ch = substr(s, i, i + 1);
            if (Objects.equals(ch, "\n")) {
                out.add(cur);
                cur = "";
            }
            else {
                cur = cur + ch;
            }
            i = (int)(i + 1);
        }
        out.add(cur);
        return out;
    }
    static List<String> splitWS(String s) {
        List<String> out = Arrays.asList();
        String cur = "";
        int i = 0;
        while (i < s.length()) {
            Object ch = substr(s, i, i + 1);
            if (Objects.equals(ch, " ") || Objects.equals(ch, "\t") || Objects.equals(ch, "\r") || Objects.equals(ch, "\n")) {
                if (cur.length() > 0) {
                    out.add(cur);
                    cur = "";
                }
            }
            else {
                cur = cur + ch;
            }
            i = (int)(i + 1);
        }
        if (cur.length() > 0) {
            out.add(cur);
        }
        return out;
    }
    static int parseIntStr(String str) {
        int i = 0;
        boolean neg = false;
        if (str.length() > 0 && Objects.equals(str.substring(0, 1), "-")) {
            neg = true;
            i = (int)(1);
        }
        int n = 0;
        M0123456789 digits = new M0123456789(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
        while (i < str.length()) {
            n = (int)(n * 10 + ((Number)((Map<?,?>)digits).get(str.substring(i, i + 1))).doubleValue());
            i = (int)(i + 1);
        }
        if (neg) {
            n = (int)(-n);
        }
        return n;
    }
    static List<String> tokenize(String s) {
        List<String> lines = splitLines(s);
        List<String> toks = Arrays.asList();
        int i = 0;
        while (i < lines.size()) {
            List<String> line = lines.get(i);
            if (line.size() > 0 && Objects.equals(substr(line, 0, 1), "#")) {
                i = (int)(i + 1);
                continue;
            }
            List<String> parts = splitWS(line);
            int j = 0;
            while (j < parts.size()) {
                toks.add(parts.get(j));
                j = (int)(j + 1);
            }
            i = (int)(i + 1);
        }
        return toks;
    }
    static Object readP3(String text) {
        List<String> toks = tokenize(text);
        if (toks.size() < 4) {
            return newBitmap(0, 0, 0);
        }
        if (!Objects.equals(toks.get(0), "P3")) {
            return newBitmap(0, 0, 0);
        }
        int w = parseIntStr(toks.get(1));
        int h = parseIntStr(toks.get(2));
        int maxv = parseIntStr(toks.get(3));
        int idx = 4;
        Object bm = newBitmap(w, h, maxv);
        int y = h - 1;
        while (y >= 0) {
            int x = 0;
            while (x < w) {
                int r = parseIntStr(toks.get(idx));
                int g = parseIntStr(toks.get(idx + 1));
                int b = parseIntStr(toks.get(idx + 2));
                setPx(bm, x, y, new Pixel(r, g, b));
                idx = (int)(idx + 3);
                x = (int)(x + 1);
            }
            y = (int)(y - 1);
        }
        return bm;
    }
    static void toGrey(Object b) {
        int h = ((Map<?,?>)b).get("h");
        int w = ((Map<?,?>)b).get("w");
        int m = 0;
        int y = 0;
        while (y < h) {
            int x = 0;
            while (x < w) {
                Object p = getPx(b, x, y);
                double l = ((Number)(((Number)((Number)((Number)((Map<?,?>)p).get("R")).doubleValue() * 2126).doubleValue() + ((Number)((Number)((Map<?,?>)p).get("G")).doubleValue() * 7152).doubleValue()).doubleValue() + ((Number)((Number)((Map<?,?>)p).get("B")).doubleValue() * 722).doubleValue())).doubleValue() / 10000;
                if (l > ((Number)((Map<?,?>)b).get("max")).doubleValue()) {
                    l = ((Map<?,?>)b).get("max");
                }
                setPx(b, x, y, new Pixel(l, l, l));
                if (l > m) {
                    m = (int)(l);
                }
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
        b.max = m;
    }
    static String pad(int n, int w) {
        String s = String.valueOf(n);
        while (s.length() < w) {
            s = " " + s;
        }
        return s;
    }
    static String writeP3(Object b) {
        int h = ((Map<?,?>)b).get("h");
        int w = ((Map<?,?>)b).get("w");
        Object max = ((Map<?,?>)b).get("max");
        int digits = String.valueOf(max).size();
        int out = "P3\n# generated from Bitmap.writeppmp3\n" + String.valueOf(w) + " " + String.valueOf(h) + "\n" + String.valueOf(max) + "\n";
        int y = h - 1;
        while (y >= 0) {
            String line = "";
            int x = 0;
            while (x < w) {
                Object p = getPx(b, x, y);
                line = ((Number)((Number)((Number)((Number)line + "   " + ((Number)pad(((Map<?,?>)p).get("R"), digits)).doubleValue()).doubleValue() + " ").doubleValue() + ((Number)pad(((Map<?,?>)p).get("G"), digits)).doubleValue()).doubleValue() + " ").doubleValue() + ((Number)pad(((Map<?,?>)p).get("B"), digits)).doubleValue();
                x = (int)(x + 1);
            }
            out = (int)(out + line + "\n");
            y = (int)(y - 1);
        }
        return out;
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    int ppmtxt = "P3\n" + "# feep.ppm\n" + "4 4\n" + "15\n" + " 0  0  0    0  0  0    0  0  0   15  0 15\n" + " 0  0  0    0 15  7    0  0  0    0  0  0\n" + " 0  0  0    0  0  0    0 15  7    0  0  0\n" + "15  0 15    0  0  0    0  0  0    0  0  0\n";
    System.out.println("Original Colour PPM file");
    System.out.println(ppmtxt);
    System.out.println("Grey PPM:");
    toGrey(bm);
    System.out.println(out);
    }
}
