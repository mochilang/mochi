// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// arithmetic-derivative.mochi
import java.util.*;

public class ArithmeticDerivative {
    static List<Integer> primeFactors(int n) {
        List<Integer> factors = Arrays.asList();
        int x = n;
        while (Objects.equals(x % 2, 0)) {
            factors.add(2);
            x = (int)(Integer.parseInt((x / 2)));
        }
        int p = 3;
        while (p * p <= x) {
            while (Objects.equals(x % p, 0)) {
                factors.add(p);
                x = (int)(Integer.parseInt((x / p)));
            }
            p = (int)(p + 2);
        }
        if (x > 1) {
            factors.add(x);
        }
        return factors;
    }
    static String repeat(String ch, int n) {
        String s = "";
        int i = 0;
        while (i < n) {
            s = s + ch;
            i = (int)(i + 1);
        }
        return s;
    }
    static double D(double n) {
        if (n < 0.000000) {
            return -D(-n);
        }
        if (n < 2.000000) {
            return 0.000000;
        }
        List<Integer> factors = Arrays.asList();
        if (n < 10000000000000000000.000000) {
            factors = primeFactors(Integer.parseInt((n)));
        }
        else {
            int g = Integer.parseInt((n / 100.000000));
            factors = primeFactors(g);
            factors.add(2);
            factors.add(2);
            factors.add(5);
            factors.add(5);
        }
        int c = factors.size();
        if (c == 1) {
            return 1.000000;
        }
        if (c == 2) {
            return Double.parseDouble(String.valueOf((((Number)factors.get(0)).doubleValue() + ((Number)factors.get(1)).doubleValue())));
        }
        double d = n / ((Number)(Double.parseDouble(String.valueOf(((List)factors.get(0)))))).doubleValue();
        return ((Number)D(d) * ((Number)(Double.parseDouble(String.valueOf(((List)factors.get(0)))))).doubleValue()).doubleValue() + d;
    }
    static String pad(int n) {
        String s = String.valueOf(n);
        while (s.length() < 4) {
            s = " " + s;
        }
        return s;
    }
    static void main() {
        List<Integer> vals = Arrays.asList();
        int n = -99;
        while (n < 101) {
            vals.add(Integer.parseInt((D(Double.parseDouble(String.valueOf(n))))));
            n = (int)(n + 1);
        }
        int i = 0;
        while (i < vals.size()) {
            String line = "";
            int j = 0;
            while (j < 10) {
                line = line + ((Number)pad(vals.get(i + j))).doubleValue();
                if (j < 9) {
                    line = line + " ";
                }
                j = (int)(j + 1);
            }
            System.out.println(line);
            i = (int)(i + 10);
        }
        double pow = 1.000000;
        int m = 1;
        while (m < 21) {
            pow = pow * 10.000000;
            String exp = String.valueOf(m);
            if (exp.length() < 2) {
                exp = exp + " ";
            }
            String res = String.valueOf(m) + repeat("0", m - 1);
            System.out.println("D(10^" + exp + ") / 7 = " + res);
            m = (int)(m + 1);
        }
    }
    public static void main(String[] args) {
        main();
    }
}
