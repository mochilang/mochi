// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// camel-case-and-snake-case.mochi
import java.util.*;

public class CamelCaseAndSnakeCase {
    static String trimSpace(String s) {
        int start = 0;
        while (start < s.length() && Objects.equals(s.substring(start, start + 1), " ")) {
            start = (int)(start + 1);
        }
        int end = s.length();
        while (end > start && Objects.equals(s.substring(end - 1, end), " ")) {
            end = (int)(end - 1);
        }
        return s.substring(start, end);
    }
    static boolean isUpper(String ch) {
        return String.valueOf(ch).compareTo(String.valueOf("A")) >= 0 && String.valueOf(ch).compareTo(String.valueOf("Z")) <= 0;
    }
    static String padLeft(String s, int w) {
        String res = "";
        int n = w - s.length();
        while (n > 0) {
            res = res + " ";
            n = (int)(n - 1);
        }
        return res + s;
    }
    static String snakeToCamel(String s) {
        s = trimSpace(s);
        String out = "";
        boolean up = false;
        int i = 0;
        while (i < s.length()) {
            String ch = s.substring(i, i + 1);
            if (Objects.equals(ch, "_") || Objects.equals(ch, "-") || Objects.equals(ch, " ") || Objects.equals(ch, ".")) {
                up = true;
                i = (int)(i + 1);
                continue;
            }
            if (i == 0) {
                out = out + lower(ch);
                up = false;
                i = (int)(i + 1);
                continue;
            }
            if (up) {
                out = out + upper(ch);
                up = false;
            }
            else {
                out = out + ch;
            }
            i = (int)(i + 1);
        }
        return out;
    }
    static String camelToSnake(String s) {
        s = trimSpace(s);
        String out = "";
        boolean prevUnd = false;
        int i = 0;
        while (i < s.length()) {
            String ch = s.substring(i, i + 1);
            if (Objects.equals(ch, " ") || Objects.equals(ch, "-") || Objects.equals(ch, ".")) {
                if (!prevUnd && out.length() > 0) {
                    out = out + "_";
                    prevUnd = true;
                }
                i = (int)(i + 1);
                continue;
            }
            if (Objects.equals(ch, "_")) {
                if (!prevUnd && out.length() > 0) {
                    out = out + "_";
                    prevUnd = true;
                }
                i = (int)(i + 1);
                continue;
            }
            if (isUpper(ch)) {
                if (i > 0 && (!prevUnd)) {
                    out = out + "_";
                }
                out = out + lower(ch);
                prevUnd = false;
            }
            else {
                out = out + lower(ch);
                prevUnd = false;
            }
            i = (int)(i + 1);
        }
        int start = 0;
        while (start < out.length() && Objects.equals(out.substring(start, start + 1), "_")) {
            start = (int)(start + 1);
        }
        int end = out.length();
        while (end > start && Objects.equals(out.substring(end - 1, end), "_")) {
            end = (int)(end - 1);
        }
        out = out.substring(start, end);
        String res = "";
        int j = 0;
        boolean lastUnd = false;
        while (j < out.length()) {
            String c = out.substring(j, j + 1);
            if (Objects.equals(c, "_")) {
                if (!lastUnd) {
                    res = res + c;
                }
                lastUnd = true;
            }
            else {
                res = res + c;
                lastUnd = false;
            }
            j = (int)(j + 1);
        }
        return res;
    }
    static void main() {
        List<String> samples = new ArrayList<>(Arrays.asList("snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "));
        System.out.println("=== To snake_case ===");
        for (String s : samples) {
            System.out.println(padLeft(s, 34) + " => " + camelToSnake(s));
        }
        System.out.println("");
        System.out.println("=== To camelCase ===");
        for (String s : samples) {
            System.out.println(padLeft(s, 34) + " => " + snakeToCamel(s));
        }
    }
    public static void main(String[] args) {
        main();
    }
}
