// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// canny-edge-detector.mochi
import java.util.*;

public class CannyEdgeDetector {
    static List<List<Double>> conv2d(List<List<Double>> img, List<List<Double>> k) {
        int h = img.size();
        int w = img.get(0).size();
        int n = k.size();
        double half = n / 2;
        List<List<Double>> out = Arrays.asList();
        int y = 0;
        while (y < h) {
            List<Double> row = Arrays.asList();
            int x = 0;
            while (x < w) {
                double sum = 0.000000;
                int j = 0;
                while (j < n) {
                    int i = 0;
                    while (i < n) {
                        double yy = y + j - half;
                        if (yy < 0) {
                            yy = 0;
                        }
                        if (yy >= h) {
                            yy = h - 1;
                        }
                        double xx = x + i - half;
                        if (xx < 0) {
                            xx = 0;
                        }
                        if (xx >= w) {
                            xx = w - 1;
                        }
                        sum = sum + ((Number)((Number)((List)img.get(yy)).get(xx)).doubleValue() * ((Number)((List)k.get(j)).get(i)).doubleValue()).doubleValue();
                        i = (int)(i + 1);
                    }
                    j = (int)(j + 1);
                }
                row.add(sum);
                x = (int)(x + 1);
            }
            out.add(row);
            y = (int)(y + 1);
        }
        return out;
    }
    static List<List<Double>> gradient(List<List<Double>> img) {
        List<List<Double>> hx = new ArrayList<>(Arrays.asList(Arrays.asList(-1.000000, 0.000000, 1.000000), Arrays.asList(-2.000000, 0.000000, 2.000000), Arrays.asList(-1.000000, 0.000000, 1.000000)));
        List<List<Double>> hy = new ArrayList<>(Arrays.asList(Arrays.asList(1.000000, 2.000000, 1.000000), Arrays.asList(0.000000, 0.000000, 0.000000), Arrays.asList(-1.000000, -2.000000, -1.000000)));
        List<List<Double>> gx = conv2d(img, hx);
        List<List<Double>> gy = conv2d(img, hy);
        int h = img.size();
        int w = img.get(0).size();
        List<List<Double>> out = Arrays.asList();
        int y = 0;
        while (y < h) {
            List<Double> row = Arrays.asList();
            int x = 0;
            while (x < w) {
                int g = ((Number)((Number)((List)gx.get(y)).get(x)).doubleValue() * ((Number)((List)gx.get(y)).get(x)).doubleValue()).doubleValue() + ((Number)((Number)((List)gy.get(y)).get(x)).doubleValue() * ((Number)((List)gy.get(y)).get(x)).doubleValue()).doubleValue();
                row.add(g);
                x = (int)(x + 1);
            }
            out.add(row);
            y = (int)(y + 1);
        }
        return out;
    }
    static List<List<Integer>> threshold(List<List<Double>> g, double t) {
        int h = g.size();
        int w = g.get(0).size();
        List<List<Integer>> out = Arrays.asList();
        int y = 0;
        while (y < h) {
            List<Integer> row = Arrays.asList();
            int x = 0;
            while (x < w) {
                if (((Number)((List)g.get(y)).get(x)).doubleValue() >= t) {
                    row.add(1);
                }
                else {
                    row.add(0);
                }
                x = (int)(x + 1);
            }
            out.add(row);
            y = (int)(y + 1);
        }
        return out;
    }
    static void printMatrix(List<List<Integer>> m) {
        int y = 0;
        while (y < m.size()) {
            String line = "";
            int x = 0;
            while (x < ((Number)m.get(0).size()).doubleValue()) {
                line = line + ((Number)String.valueOf(((List)m.get(y)).get(x))).doubleValue();
                if (x < ((Number)((Number)m.get(0).size()).doubleValue() - 1).doubleValue()) {
                    line = line + " ";
                }
                x = (int)(x + 1);
            }
            System.out.println(line);
            y = (int)(y + 1);
        }
    }
    static void main() {
        List<List<Double>> img = new ArrayList<>(Arrays.asList(Arrays.asList(0.000000, 0.000000, 0.000000, 0.000000, 0.000000), Arrays.asList(0.000000, 255.000000, 255.000000, 255.000000, 0.000000), Arrays.asList(0.000000, 255.000000, 255.000000, 255.000000, 0.000000), Arrays.asList(0.000000, 255.000000, 255.000000, 255.000000, 0.000000), Arrays.asList(0.000000, 0.000000, 0.000000, 0.000000, 0.000000)));
        List<List<Double>> g = gradient(img);
        List<List<Integer>> edges = threshold(g, 1020.000000 * 1020.000000);
        printMatrix(edges);
    }
    public static void main(String[] args) {
        double PI = 3.141593;
        main();
    }
}
