// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// algebraic-data-types.mochi
import java.util.*;

public class AlgebraicDataTypes {
    static Object tr = null;
    static Map<String,Object> node(String cl, Object le, int aa, Object ri) {
        return new ClLeAaRi(cl, le, aa, ri);
    }
    static String treeString(Object t) {
        if (Objects.equals(t, null)) {
            return "E";
        }
        Map<String,Object> m = (Map<String,Object>)t;
        return ((Number)((Number)((Number)((Number)((Number)((Number)((Number)"T(" + ((Number)m.get("cl")).doubleValue()).doubleValue() + ", ").doubleValue() + ((Number)treeString(m.get("le"))).doubleValue()).doubleValue() + ", ").doubleValue() + ((Number)String.valueOf(m.get("aa"))).doubleValue()).doubleValue() + ", ").doubleValue() + ((Number)treeString(m.get("ri"))).doubleValue()).doubleValue() + ")";
    }
    static Object balance(Object t) {
        if (Objects.equals(t, null)) {
            return t;
        }
        Map<String,Object> m = (Map<String,Object>)t;
        if (!Objects.equals(m.get("cl"), "B")) {
            return t;
        }
        Map<String,Object> le = m.get("le");
        Map<String,Object> ri = m.get("ri");
        if (!Objects.equals(le, null)) {
            Map<String,Object> leMap = (Map<String,Object>)le;
            if (Objects.equals(leMap.get("cl"), "R")) {
                Map<String,Object> lele = leMap.get("le");
                if (!Objects.equals(lele, null)) {
                    Map<String,Object> leleMap = (Map<String,Object>)lele;
                    if (Objects.equals(leleMap.get("cl"), "R")) {
                        return node("R", node("B", leleMap.get("le"), leleMap.get("aa"), leleMap.get("ri")), leMap.get("aa"), node("B", leMap.get("ri"), m.get("aa"), ri));
                    }
                }
                Map<String,Object> leri = leMap.get("ri");
                if (!Objects.equals(leri, null)) {
                    Map<String,Object> leriMap = (Map<String,Object>)leri;
                    if (Objects.equals(leriMap.get("cl"), "R")) {
                        return node("R", node("B", leMap.get("le"), leMap.get("aa"), leriMap.get("le")), leriMap.get("aa"), node("B", leriMap.get("ri"), m.get("aa"), ri));
                    }
                }
            }
        }
        if (!Objects.equals(ri, null)) {
            Map<String,Object> riMap = (Map<String,Object>)ri;
            if (Objects.equals(riMap.get("cl"), "R")) {
                Map<String,Object> rile = riMap.get("le");
                if (!Objects.equals(rile, null)) {
                    Map<String,Object> rileMap = (Map<String,Object>)rile;
                    if (Objects.equals(rileMap.get("cl"), "R")) {
                        return node("R", node("B", m.get("le"), m.get("aa"), rileMap.get("le")), rileMap.get("aa"), node("B", rileMap.get("ri"), riMap.get("aa"), riMap.get("ri")));
                    }
                }
                Map<String,Object> riri = riMap.get("ri");
                if (!Objects.equals(riri, null)) {
                    Map<String,Object> ririMap = (Map<String,Object>)riri;
                    if (Objects.equals(ririMap.get("cl"), "R")) {
                        return node("R", node("B", m.get("le"), m.get("aa"), riMap.get("le")), riMap.get("aa"), node("B", ririMap.get("le"), ririMap.get("aa"), ririMap.get("ri")));
                    }
                }
            }
        }
        return t;
    }
    static Object ins(Object tr, int x) {
        if (Objects.equals(tr, null)) {
            return node("R", null, x, null);
        }
        if (x < ((Number)((Map<?,?>)tr).get("aa")).doubleValue()) {
            return balance(node(((Map<?,?>)tr).get("cl"), ins(((Map<?,?>)tr).get("le"), x), ((Map<?,?>)tr).get("aa"), ((Map<?,?>)tr).get("ri")));
        }
        if (x > ((Number)((Map<?,?>)tr).get("aa")).doubleValue()) {
            return balance(node(((Map<?,?>)tr).get("cl"), ((Map<?,?>)tr).get("le"), ((Map<?,?>)tr).get("aa"), ins(((Map<?,?>)tr).get("ri"), x)));
        }
        return tr;
    }
    static Object insert(Object tr, int x) {
        Object t = ins(tr, x);
        if (Objects.equals(t, null)) {
            return null;
        }
        Map<String,Object> m = (Map<String,Object>)t;
        return node("B", m.get("le"), m.get("aa"), m.get("ri"));
    }
    public static void main(String[] args) {
        int i = 1;
        while (i <= 16) {
            tr = insert(tr, i);
            i = (int)(i + 1);
        }
        System.out.println(treeString(tr));
    }
}
