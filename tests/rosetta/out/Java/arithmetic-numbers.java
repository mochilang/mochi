// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:51Z
// arithmetic-numbers.mochi
import java.util.*;

public class ArithmeticNumbers {
    static List<Integer> sieve(int limit) {
        List<Integer> spf = Arrays.asList();
        int i = 0;
        while (i <= limit) {
            spf.add(0);
            i = (int)(i + 1);
        }
        i = (int)(2);
        while (i <= limit) {
            if (Objects.equals(spf.get(i), 0)) {
                spf.set(i, i);
                if (i * i <= limit) {
                    int j = i * i;
                    while (j <= limit) {
                        if (Objects.equals(spf.get(j), 0)) {
                            spf.set(j, i);
                        }
                        j = (int)(j + i);
                    }
                }
            }
            i = (int)(i + 1);
        }
        return spf;
    }
    static List<Integer> primesFrom(List<Integer> spf, int limit) {
        List<Integer> primes = Arrays.asList();
        int i = 3;
        while (i <= limit) {
            if (Objects.equals(spf.get(i), i)) {
                primes.add(i);
            }
            i = (int)(i + 1);
        }
        return primes;
    }
    static String pad3(int n) {
        String s = String.valueOf(n);
        while (s.length() < 3) {
            s = " " + s;
        }
        return s;
    }
    static String commatize(int n) {
        String s = String.valueOf(n);
        String out = "";
        int i = s.length() - 1;
        int c = 0;
        while (i >= 0) {
            out = s.substring(i, i + 1) + out;
            c = (int)(c + 1);
            if (Objects.equals(c % 3, 0) && i > 0) {
                out = "," + out;
            }
            i = (int)(i - 1);
        }
        return out;
    }
    static int primeCount(List<Integer> primes, int last, List<Integer> spf) {
        int lo = 0;
        int hi = primes.size();
        while (lo < hi) {
            int mid = Integer.parseInt(((lo + hi) / 2));
            if (((Number)primes.get(mid)).doubleValue() < last) {
                lo = (int)(mid + 1);
            }
            else {
                hi = (int)(mid);
            }
        }
        int count = lo + 1;
        if (!Objects.equals(spf.get(last), last)) {
            count = (int)(count - 1);
        }
        return count;
    }
    static List<Integer> arithmeticNumbers(int limit, List<Integer> spf) {
        List<Integer> arr = Arrays.asList(1);
        int n = 3;
        while (arr.size() < limit) {
            if (Objects.equals(spf.get(n), n)) {
                arr.add(n);
            }
            else {
                int x = n;
                int sigma = 1;
                int tau = 1;
                while (x > 1) {
                    List<Integer> p = spf.get(x);
                    if (Objects.equals(p, 0)) {
                        p = x;
                    }
                    int cnt = 0;
                    List<Integer> power = p;
                    int sum = 1;
                    while (Objects.equals(x % p, 0)) {
                        x = (int)(x / p);
                        cnt = (int)(cnt + 1);
                        sum = (int)(sum + power);
                        power = power * p;
                    }
                    sigma = (int)(sigma * sum);
                    tau = (int)(tau * (cnt + 1));
                }
                if (Objects.equals(sigma % tau, 0)) {
                    arr.add(n);
                }
            }
            n = (int)(n + 1);
        }
        return arr;
    }
    static void main() {
        int limit = 1228663;
        List<Integer> spf = sieve(limit);
        List<Integer> primes = primesFrom(spf, limit);
        List<Integer> arr = arithmeticNumbers(1000000, spf);
        System.out.println("The first 100 arithmetic numbers are:");
        int i = 0;
        while (i < 100) {
            String line = "";
            int j = 0;
            while (j < 10) {
                line = line + ((Number)pad3(arr.get(i + j))).doubleValue();
                if (j < 9) {
                    line = line + " ";
                }
                j = (int)(j + 1);
            }
            System.out.println(line);
            i = (int)(i + 10);
        }
        for (Integer x : Arrays.asList(1000, 10000, 100000, 1000000)) {
            List<Integer> last = arr.get(x - 1);
            String lastc = commatize(last);
            System.out.println("\nThe " + commatize(x) + "th arithmetic number is: " + lastc);
            int pc = primeCount(primes, last, spf);
            int comp = x - pc - 1;
            System.out.println("The count of such numbers <= " + lastc + " which are composite is " + commatize(comp) + ".");
        }
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    main();
    }
}
