// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:33:07Z
// chernicks-carmichael-numbers.mochi
import java.util.*;

public class ChernicksCarmichaelNumbers {
    static boolean isPrime(int n) {
        if (n < 2) {
            return false;
        }
        if (Objects.equals(n % 2, 0)) {
            return n == 2;
        }
        if (Objects.equals(n % 3, 0)) {
            return n == 3;
        }
        int d = 5;
        while (d * d <= n) {
            if (Objects.equals(n % d, 0)) {
                return false;
            }
            d = (int)(d + 2);
            if (Objects.equals(n % d, 0)) {
                return false;
            }
            d = (int)(d + 4);
        }
        return true;
    }
    static List<Integer> bigTrim(List<Integer> a) {
        int n = a.size();
        while (n > 1 && Objects.equals(a.get(n - 1), 0)) {
            a = ((List)a).subList(0, n - 1);
            n = (int)(n - 1);
        }
        return a;
    }
    static List<Integer> bigFromInt(int x) {
        if (x == 0) {
            return Arrays.asList(0);
        }
        List<Integer> digits = Arrays.asList();
        int n = x;
        while (n > 0) {
            digits.add(n % 10);
            n = (int)(n / 10);
        }
        return digits;
    }
    static List<Integer> bigMulSmall(List<Integer> a, int m) {
        if (m == 0) {
            return Arrays.asList(0);
        }
        List<Integer> res = Arrays.asList();
        int carry = 0;
        int i = 0;
        while (i < a.size()) {
            int prod = ((Number)((Number)a.get(i)).doubleValue() * m).doubleValue() + carry;
            res.add(prod % 10);
            carry = (int)(prod / 10);
            i = (int)(i + 1);
        }
        while (carry > 0) {
            res.add(carry % 10);
            carry = (int)(carry / 10);
        }
        return bigTrim(res);
    }
    static String bigToString(List<Integer> a) {
        String s = "";
        int i = a.size() - 1;
        while (i >= 0) {
            s = s + ((Number)String.valueOf(a.get(i))).doubleValue();
            i = (int)(i - 1);
        }
        return s;
    }
    static int pow2(int k) {
        int r = 1;
        int i = 0;
        while (i < k) {
            r = (int)(r * 2);
            i = (int)(i + 1);
        }
        return r;
    }
    static List<Integer> ccFactors(int n, int m) {
        int p = 6 * m + 1;
        if (!isPrime(p)) {
            return Arrays.asList();
        }
        List<Integer> prod = bigFromInt(p);
        p = (int)(12 * m + 1);
        if (!isPrime(p)) {
            return Arrays.asList();
        }
        prod = bigMulSmall(prod, p);
        int i = 1;
        while (i <= n - 2) {
            p = (int)((pow2(i) * 9 * m) + 1);
            if (!isPrime(p)) {
                return Arrays.asList();
            }
            prod = bigMulSmall(prod, p);
            i = (int)(i + 1);
        }
        return prod;
    }
    static void ccNumbers(int start, int end) {
        int n = start;
        while (n <= end) {
            int m = 1;
            if (n > 4) {
                m = (int)(pow2(n - 4));
            }
            while (true) {
                List<Integer> num = ccFactors(n, m);
                if (num.size() > 0) {
                    System.out.println("a(" + String.valueOf(n) + ") = " + bigToString(num));
                    break;
                }
                if (n <= 4) {
                    m = (int)(m + 1);
                }
                else {
                    m = (int)(m + pow2(n - 4));
                }
            }
            n = (int)(n + 1);
        }
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    ccNumbers(3, 9);
    }
}
