// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// 2048.mochi
import java.util.*;

public class M2048 {
    static int SIZE = 4;
    static Map<String,Object> r = spawnTile(board);
    static int score = 0;
    static List<List<Integer>> newBoard() {
        List<List<Integer>> b = Arrays.asList();
        int y = 0;
        while (y < SIZE) {
            List<Integer> row = Arrays.asList();
            int x = 0;
            while (x < SIZE) {
                row.add(0);
                x = (int)(x + 1);
            }
            b.add(row);
            y = (int)(y + 1);
        }
        return b;
    }
    static Map<String,Object> spawnTile(List<List<Integer>> b) {
        List<List<Integer>> empty = Arrays.asList();
        int y = 0;
        while (y < SIZE) {
            int x = 0;
            while (x < SIZE) {
                if (Objects.equals(((List)b.get(y)).get(x), 0)) {
                    empty.add(Arrays.asList(x, y));
                }
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
        if (Objects.equals(empty.size(), 0)) {
            return new BoardFull(b, true);
        }
        int idx = now() % empty.size();
        List<List<Integer>> cell = empty.get(idx);
        int val = 4;
        if (now() % 10 < 9) {
            val = (int)(2);
        }
        ((List)b.get(cell.get(1))).set(cell.get(0), val);
        return new BoardFull(b, Objects.equals(empty.size(), 1));
    }
    static String pad(int n) {
        String s = String.valueOf(n);
        int pad = 4 - s.length();
        int i = 0;
        String out = "";
        while (i < pad) {
            out = out + " ";
            i = (int)(i + 1);
        }
        return out + s;
    }
    static void draw(List<List<Integer>> b, int score) {
        System.out.println("Score: " + String.valueOf(score));
        int y = 0;
        while (y < SIZE) {
            System.out.println("+----+----+----+----+");
            String line = "|";
            int x = 0;
            while (x < SIZE) {
                List<List<Integer>> v = ((List)b.get(y)).get(x);
                if (Objects.equals(v, 0)) {
                    line = line + "    |";
                }
                else {
                    line = line + pad(v) + "|";
                }
                x = (int)(x + 1);
            }
            System.out.println(line);
            y = (int)(y + 1);
        }
        System.out.println("+----+----+----+----+");
        System.out.println("W=Up S=Down A=Left D=Right Q=Quit");
    }
    static List<Integer> reverseRow(List<Integer> r) {
        List<Integer> out = Arrays.asList();
        int i = r.size() - 1;
        while (i >= 0) {
            out.add(r.get(i));
            i = (int)(i - 1);
        }
        return out;
    }
    static Map<String,Object> slideLeft(List<Integer> row) {
        List<Integer> xs = Arrays.asList();
        int i = 0;
        while (i < row.size()) {
            if (!Objects.equals(row.get(i), 0)) {
                xs.add(row.get(i));
            }
            i = (int)(i + 1);
        }
        List<Integer> res = Arrays.asList();
        int gain = 0;
        i = (int)(0);
        while (i < xs.size()) {
            if (String.valueOf(i + 1).compareTo(String.valueOf(xs.size())) < 0 && Objects.equals(xs.get(i), xs.get(i + 1))) {
                int v = ((Number)xs.get(i)).doubleValue() * 2;
                gain = (int)(gain + v);
                res.add(v);
                i = (int)(i + 2);
            }
            else {
                res.add(xs.get(i));
                i = (int)(i + 1);
            }
        }
        while (res.size() < SIZE) {
            res.add(0);
        }
        return new RowGain(res, gain);
    }
    static Map<String,Object> moveLeft(List<List<Integer>> b, int score) {
        boolean moved = false;
        int y = 0;
        while (y < SIZE) {
            Map<String,Object> r = slideLeft(b.get(y));
            Map<String,Object> new = r.get("row");
            score = (int)(score + ((Number)r.get("gain")).doubleValue());
            int x = 0;
            while (x < SIZE) {
                if (!Objects.equals(((List)b.get(y)).get(x), new.get(x))) {
                    moved = true;
                }
                ((List)b.get(y)).set(x, new.get(x));
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
        return new BoardScoreMoved(b, score, moved);
    }
    static Map<String,Object> moveRight(List<List<Integer>> b, int score) {
        boolean moved = false;
        int y = 0;
        while (y < SIZE) {
            List<Integer> rev = reverseRow(b.get(y));
            Map<String,Object> r = slideLeft(rev);
            rev = r.get("row");
            score = (int)(score + ((Number)r.get("gain")).doubleValue());
            rev = reverseRow(rev);
            int x = 0;
            while (x < SIZE) {
                if (!Objects.equals(((List)b.get(y)).get(x), rev.get(x))) {
                    moved = true;
                }
                ((List)b.get(y)).set(x, rev.get(x));
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
        return new BoardScoreMoved(b, score, moved);
    }
    static List<Integer> getCol(List<List<Integer>> b, int x) {
        List<Integer> col = Arrays.asList();
        int y = 0;
        while (y < SIZE) {
            col.add(((List)b.get(y)).get(x));
            y = (int)(y + 1);
        }
        return col;
    }
    static void setCol(List<List<Integer>> b, int x, List<Integer> col) {
        int y = 0;
        while (y < SIZE) {
            ((List)b.get(y)).set(x, col.get(y));
            y = (int)(y + 1);
        }
    }
    static Map<String,Object> moveUp(List<List<Integer>> b, int score) {
        boolean moved = false;
        int x = 0;
        while (x < SIZE) {
            List<Integer> col = getCol(b, x);
            Map<String,Object> r = slideLeft(col);
            Map<String,Object> new = r.get("row");
            score = (int)(score + ((Number)r.get("gain")).doubleValue());
            int y = 0;
            while (y < SIZE) {
                if (!Objects.equals(((List)b.get(y)).get(x), new.get(y))) {
                    moved = true;
                }
                ((List)b.get(y)).set(x, new.get(y));
                y = (int)(y + 1);
            }
            x = (int)(x + 1);
        }
        return new BoardScoreMoved(b, score, moved);
    }
    static Map<String,Object> moveDown(List<List<Integer>> b, int score) {
        boolean moved = false;
        int x = 0;
        while (x < SIZE) {
            List<Integer> col = reverseRow(getCol(b, x));
            Map<String,Object> r = slideLeft(col);
            col = r.get("row");
            score = (int)(score + ((Number)r.get("gain")).doubleValue());
            col = reverseRow(col);
            int y = 0;
            while (y < SIZE) {
                if (!Objects.equals(((List)b.get(y)).get(x), col.get(y))) {
                    moved = true;
                }
                ((List)b.get(y)).set(x, col.get(y));
                y = (int)(y + 1);
            }
            x = (int)(x + 1);
        }
        return new BoardScoreMoved(b, score, moved);
    }
    static boolean hasMoves(List<List<Integer>> b) {
        int y = 0;
        while (y < SIZE) {
            int x = 0;
            while (x < SIZE) {
                if (Objects.equals(((List)b.get(y)).get(x), 0)) {
                    return true;
                }
                if (x + 1 < SIZE && Objects.equals(((List)b.get(y)).get(x), ((List)b.get(y)).get(x + 1))) {
                    return true;
                }
                if (y + 1 < SIZE && Objects.equals(((List)b.get(y)).get(x), ((List)b.get(y + 1)).get(x))) {
                    return true;
                }
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
        return false;
    }
    static boolean has2048(List<List<Integer>> b) {
        int y = 0;
        while (y < SIZE) {
            int x = 0;
            while (x < SIZE) {
                if (((Number)((List)b.get(y)).get(x)).doubleValue() >= 2048) {
                    return true;
                }
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
        return false;
    }
    public static void main(String[] args) {
        List<List<Integer>> board = newBoard();
        board = r.get("board");
        Map<String,Object> full = r.get("full");
        r = spawnTile(board);
        board = r.get("board");
        full = r.get("full");
        draw(board, score);
        while (true) {
            System.out.println("Move: ");
            Object cmd = input();
            boolean moved = false;
            if (Objects.equals(cmd, "a") || Objects.equals(cmd, "A")) {
                Map<String,Object> m = moveLeft(board, score);
                board = m.get("board");
                score = (int)(m.get("score"));
                moved = m.get("moved");
            }
            if (Objects.equals(cmd, "d") || Objects.equals(cmd, "D")) {
                Map<String,Object> m = moveRight(board, score);
                board = m.get("board");
                score = (int)(m.get("score"));
                moved = m.get("moved");
            }
            if (Objects.equals(cmd, "w") || Objects.equals(cmd, "W")) {
                Map<String,Object> m = moveUp(board, score);
                board = m.get("board");
                score = (int)(m.get("score"));
                moved = m.get("moved");
            }
            if (Objects.equals(cmd, "s") || Objects.equals(cmd, "S")) {
                Map<String,Object> m = moveDown(board, score);
                board = m.get("board");
                score = (int)(m.get("score"));
                moved = m.get("moved");
            }
            if (Objects.equals(cmd, "q") || Objects.equals(cmd, "Q")) {
                break;
            }
            if (moved) {
                Map<String,Object> r2 = spawnTile(board);
                board = r2.get("board");
                full = r2.get("full");
                if (full != null && (!((Boolean)hasMoves(board)))) {
                    draw(board, score);
                    System.out.println("Game Over");
                    break;
                }
            }
            draw(board, score);
            if (has2048(board)) {
                System.out.println("You win!");
                break;
            }
            if (!((Boolean)hasMoves(board))) {
                System.out.println("Game Over");
                break;
            }
        }
    }
}
