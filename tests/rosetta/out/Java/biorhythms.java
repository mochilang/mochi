// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:32:30Z
// biorhythms.mochi
import java.util.*;

public class Biorhythms {
    static double PI = 3.141593;
    static double sinApprox(double x) {
        double term = x;
        double sum = x;
        int n = 1;
        while (n <= 8) {
            double denom = Double.parseDouble(String.valueOf(((2 * n) * (2 * n + 1))));
            term = -term * x * x / denom;
            sum = sum + term;
            n = (int)(n + 1);
        }
        return sum;
    }
    static double floor(double x) {
        int i = Integer.parseInt(x);
        if ((Double.parseDouble(String.valueOf(i))) > x) {
            i = (int)(i - 1);
        }
        return Double.parseDouble(String.valueOf(i));
    }
    static double absFloat(double x) {
        if (x < 0.000000) {
            return -x;
        }
        return x;
    }
    static int absInt(int n) {
        if (n < 0) {
            return -n;
        }
        return n;
    }
    static int parseIntStr(String str) {
        int i = 0;
        boolean neg = false;
        if (str.length() > 0 && Objects.equals(str.substring(0, 1), "-")) {
            neg = true;
            i = (int)(1);
        }
        int n = 0;
        M0123456789 digits = new M0123456789(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
        while (i < str.length()) {
            n = (int)(n * 10 + ((Number)((Map<?,?>)digits).get(str.substring(i, i + 1))).doubleValue());
            i = (int)(i + 1);
        }
        if (neg) {
            n = (int)(-n);
        }
        return n;
    }
    static List<Integer> parseDate(String s) {
        int y = parseIntStr(s.substring(0, 4));
        int m = parseIntStr(s.substring(5, 7));
        int d = parseIntStr(s.substring(8, 10));
        return Arrays.asList(y, m, d);
    }
    static boolean leap(int y) {
        if (Objects.equals(y % 400, 0)) {
            return true;
        }
        if (Objects.equals(y % 100, 0)) {
            return false;
        }
        return Objects.equals(y % 4, 0);
    }
    static int daysInMonth(int y, int m) {
        Object feb = (leap(y) ? 29 : 28);
        List<Integer> lengths = new ArrayList<>(Arrays.asList(31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31));
        return lengths.get(m - 1);
    }
    static List<Integer> addDays(int y, int m, int d, int n) {
        int yy = y;
        int mm = m;
        int dd = d;
        if (n >= 0) {
            int i = 0;
            while (i < n) {
                dd = (int)(dd + 1);
                if (dd > daysInMonth(yy, mm)) {
                    dd = (int)(1);
                    mm = (int)(mm + 1);
                    if (mm > 12) {
                        mm = (int)(1);
                        yy = (int)(yy + 1);
                    }
                }
                i = (int)(i + 1);
            }
        }
        else {
            int i = 0;
            while (i > n) {
                dd = (int)(dd - 1);
                if (dd < 1) {
                    mm = (int)(mm - 1);
                    if (mm < 1) {
                        mm = (int)(12);
                        yy = (int)(yy - 1);
                    }
                    dd = (int)(daysInMonth(yy, mm));
                }
                i = (int)(i - 1);
            }
        }
        return Arrays.asList(yy, mm, dd);
    }
    static String pad2(int n) {
        if (n < 10) {
            return "0" + String.valueOf(n);
        }
        return String.valueOf(n);
    }
    static String dateString(int y, int m, int d) {
        return String.valueOf(y) + "-" + pad2(m) + "-" + pad2(d);
    }
    static int day(int y, int m, int d) {
        int part1 = 367 * y;
        int part2 = Integer.parseInt(((7 * (Integer.parseInt((y + ((m + 9) / 12))))) / 4));
        int part3 = Integer.parseInt(((275 * m) / 9));
        return part1 - part2 + part3 + d - 730530;
    }
    static void biorhythms(String birth, String target) {
        List<Integer> bparts = parseDate(birth);
        List<Integer> by = bparts.get(0);
        List<Integer> bm = bparts.get(1);
        List<Integer> bd = bparts.get(2);
        List<Integer> tparts = parseDate(target);
        List<Integer> ty = tparts.get(0);
        List<Integer> tm = tparts.get(1);
        List<Integer> td = tparts.get(2);
        int diff = absInt(day(ty, tm, td) - day(by, bm, bd));
        System.out.println("Born " + birth + ", Target " + target);
        System.out.println("Day " + String.valueOf(diff));
        List<String> cycles = new ArrayList<>(Arrays.asList("Physical day ", "Emotional day", "Mental day   "));
        List<Integer> lengths = new ArrayList<>(Arrays.asList(23, 28, 33));
        List<List<String>> quadrants = new ArrayList<>(Arrays.asList(Arrays.asList("up and rising", "peak"), Arrays.asList("up but falling", "transition"), Arrays.asList("down and falling", "valley"), Arrays.asList("down but rising", "transition")));
        int i = 0;
        while (i < 3) {
            List<Integer> length = lengths.get(i);
            List<String> cycle = cycles.get(i);
            int position = diff % length;
            double quadrant = (position * 4) / length;
            double percent = sinApprox(2.000000 * PI * (Double.parseDouble(String.valueOf(position))) / (Double.parseDouble(String.valueOf(length))));
            percent = floor(percent * 1000.000000) / 10.000000;
            String description = "";
            if (percent > 95.000000) {
                description = " peak";
            }
            String posStr = String.valueOf(position);
            if (position < 10) {
                posStr = " " + posStr;
            }
            System.out.println(cycle + posStr + " : " + description);
            i = (int)(i + 1);
        }
        System.out.println("");
    }
    static void main() {
        List<List<String>> pairs = new ArrayList<>(Arrays.asList(Arrays.asList("1943-03-09", "1972-07-11"), Arrays.asList("1809-01-12", "1863-11-19"), Arrays.asList("1809-02-12", "1863-11-19")));
        int idx = 0;
        while (idx < pairs.size()) {
            List<List<String>> p = pairs.get(idx);
            biorhythms(p.get(0), p.get(1));
            idx = (int)(idx + 1);
        }
    }
    public static void main(String[] args) {
    double TWO_PI = 6.283185;
    main();
    }
}
