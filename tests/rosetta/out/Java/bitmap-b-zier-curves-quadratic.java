// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:10:48Z
// bitmap-b-zier-curves-quadratic.mochi
import java.util.*;

class Pixel {
    int r;
    int g;
    int b;
    Pixel(int r, int g, int b) {
        this.r = r;
        this.g = g;
        this.b = b;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Pixel other)) return false;
        return Objects.equals(this.r, other.r) && Objects.equals(this.g, other.g) && Objects.equals(this.b, other.b);
    }
    @Override public int hashCode() {
        return Objects.hash(r, g, b);
    }
}
public class BitmapBZierCurvesQuadratic {
    static int b2Seg = 20;
    static Map<String,Object> b = newBitmap(400, 300);
    static Object pixelFromRgb(int rgb) {
        int r = Integer.parseInt(((rgb / 65536) % 256));
        int g = Integer.parseInt(((rgb / 256) % 256));
        int b = Integer.parseInt((rgb % 256));
        return new Pixel(r, g, b);
    }
    static Map<String,Object> newBitmap(int cols, int rows) {
        List<List<Object>> d = Arrays.asList();
        int y = 0;
        while (y < rows) {
            List<Object> row = Arrays.asList();
            int x = 0;
            while (x < cols) {
                row.add(new Pixel(0, 0, 0));
                x = (int)(x + 1);
            }
            d.add(row);
            y = (int)(y + 1);
        }
        return new ColsRowsData(cols, rows, d);
    }
    static void setPx(Map<String,Object> b, int x, int y, Object p) {
        int cols = Integer.parseInt(((Map)b.get("cols")));
        int rows = Integer.parseInt(((Map)b.get("rows")));
        if (x >= 0 && x < cols && y >= 0 && y < rows) {
            ((Map<?,?>)((Map)b.get("data")).y).put(x, p);
        }
    }
    static void fill(Map<String,Object> b, Object p) {
        int cols = Integer.parseInt(((Map)b.get("cols")));
        int rows = Integer.parseInt(((Map)b.get("rows")));
        int y = 0;
        while (y < rows) {
            int x = 0;
            while (x < cols) {
                ((Map<?,?>)((Map)b.get("data")).y).put(x, p);
                x = (int)(x + 1);
            }
            y = (int)(y + 1);
        }
    }
    static void fillRgb(Map<String,Object> b, int rgb) {
        fill(b, pixelFromRgb(rgb));
    }
    static void line(Map<String,Object> b, int x0, int y0, int x1, int y1, Object p) {
        int dx = x1 - x0;
        if (dx < 0) {
            dx = (int)(-dx);
        }
        int dy = y1 - y0;
        if (dy < 0) {
            dy = (int)(-dy);
        }
        int sx = -1;
        if (x0 < x1) {
            sx = (int)(1);
        }
        int sy = -1;
        if (y0 < y1) {
            sy = (int)(1);
        }
        int err = dx - dy;
        while (true) {
            setPx(b, x0, y0, p);
            if (x0 == x1 && y0 == y1) {
                break;
            }
            int e2 = 2 * err;
            if (e2 > (0 - dy)) {
                err = (int)(err - dy);
                x0 = (int)(x0 + sx);
            }
            if (e2 < dx) {
                err = (int)(err + dx);
                y0 = (int)(y0 + sy);
            }
        }
    }
    static void bezier2(Map<String,Object> b, int x1, int y1, int x2, int y2, int x3, int y3, Object p) {
        List<Integer> px = Arrays.asList();
        List<Integer> py = Arrays.asList();
        int i = 0;
        while (i <= b2Seg) {
            px.add(0);
            py.add(0);
            i = (int)(i + 1);
        }
        double fx1 = Double.parseDouble(String.valueOf(x1));
        double fy1 = Double.parseDouble(String.valueOf(y1));
        double fx2 = Double.parseDouble(String.valueOf(x2));
        double fy2 = Double.parseDouble(String.valueOf(y2));
        double fx3 = Double.parseDouble(String.valueOf(x3));
        double fy3 = Double.parseDouble(String.valueOf(y3));
        i = (int)(0);
        while (i <= b2Seg) {
            double c = (Double.parseDouble(String.valueOf(i))) / (Double.parseDouble(String.valueOf(b2Seg)));
            double a = 1.000000 - c;
            double a2 = a * a;
            double b2 = 2.000000 * c * a;
            double c2 = c * c;
            px.set(i, Integer.parseInt((a2 * fx1 + b2 * fx2 + c2 * fx3)));
            py.set(i, Integer.parseInt((a2 * fy1 + b2 * fy2 + c2 * fy3)));
            i = (int)(i + 1);
        }
        List<Integer> x0 = px.get(0);
        List<Integer> y0 = py.get(0);
        i = (int)(1);
        while (i <= b2Seg) {
            List<Integer> x = px.get(i);
            List<Integer> y = py.get(i);
            line(b, x0, y0, x, y, p);
            x0 = x;
            y0 = y;
            i = (int)(i + 1);
        }
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    fillRgb(b, 14614575);
    bezier2(b, 20, 150, 500, -100, 300, 280, pixelFromRgb(4165615));
    }
}
