// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// cholesky-decomposition.mochi
import java.util.*;

public class CholeskyDecomposition {
    static double sqrtApprox(double x) {
        double guess = x;
        int i = 0;
        while (i < 20) {
            guess = (guess + x / guess) / 2.000000;
            i = (int)(i + 1);
        }
        return guess;
    }
    static List<List<Double>> cholesky(List<List<Double>> a) {
        int n = a.size();
        List<List<Double>> l = Arrays.asList();
        int i = 0;
        while (i < n) {
            List<Double> row = Arrays.asList();
            int j = 0;
            while (j < n) {
                row.add(0.000000);
                j = (int)(j + 1);
            }
            l.add(row);
            i = (int)(i + 1);
        }
        i = (int)(0);
        while (i < n) {
            int j = 0;
            while (j <= i) {
                List<List<Double>> sum = ((List)a.get(i)).get(j);
                int k = 0;
                while (k < j) {
                    sum = sum - ((Number)((Number)((List)l.get(i)).get(k)).doubleValue() * ((Number)((List)l.get(j)).get(k)).doubleValue()).doubleValue();
                    k = (int)(k + 1);
                }
                if (i == j) {
                    ((List)l.get(i)).set(j, sqrtApprox(sum));
                }
                else {
                    ((List)l.get(i)).set(j, sum / ((Number)((List)l.get(j)).get(j)).doubleValue());
                }
                j = (int)(j + 1);
            }
            i = (int)(i + 1);
        }
        return l;
    }
    static void printMat(List<List<Double>> m) {
        int i = 0;
        while (i < m.size()) {
            String line = "";
            int j = 0;
            while (j < ((Number)m.get(i).size()).doubleValue()) {
                line = line + ((Number)String.valueOf(((List)m.get(i)).get(j))).doubleValue();
                if (j < ((Number)((Number)m.get(i).size()).doubleValue() - 1).doubleValue()) {
                    line = line + " ";
                }
                j = (int)(j + 1);
            }
            System.out.println(line);
            i = (int)(i + 1);
        }
    }
    static void demo(List<List<Double>> a) {
        System.out.println("A:");
        printMat(a);
        List<List<Double>> l = cholesky(a);
        System.out.println("L:");
        printMat(l);
    }
    public static void main(String[] args) {
        demo(Arrays.asList(Arrays.asList(25.000000, 15.000000, -5.000000), Arrays.asList(15.000000, 18.000000, 0.000000), Arrays.asList(-5.000000, 0.000000, 11.000000)));
        demo(Arrays.asList(Arrays.asList(18.000000, 22.000000, 54.000000, 42.000000), Arrays.asList(22.000000, 70.000000, 86.000000, 62.000000), Arrays.asList(54.000000, 86.000000, 174.000000, 134.000000), Arrays.asList(42.000000, 62.000000, 134.000000, 106.000000)));
    }
}
