// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:30:44Z
// archimedean-spiral.mochi
import java.util.*;

public class ArchimedeanSpiral {
    static double sinApprox(double x) {
        double term = x;
        double sum = x;
        int n = 1;
        while (n <= 10) {
            double denom = Double.parseDouble(String.valueOf(((2 * n) * (2 * n + 1))));
            term = -term * x * x / denom;
            sum = sum + term;
            n = (int)(n + 1);
        }
        return sum;
    }
    static double cosApprox(double x) {
        double term = 1.000000;
        double sum = 1.000000;
        int n = 1;
        while (n <= 10) {
            double denom = Double.parseDouble(String.valueOf(((2 * n - 1) * (2 * n))));
            term = -term * x * x / denom;
            sum = sum + term;
            n = (int)(n + 1);
        }
        return sum;
    }
    public static void main(String[] args) {
    double PI = 3.141593;
    double degreesIncr = 0.100000 * PI / 180.000000;
    double turns = 2.000000;
    double stop = 360.000000 * turns * 10.000000 * degreesIncr;
    double width = 600.000000;
    double centre = width / 2.000000;
    double a = 1.000000;
    double b = 20.000000;
    double theta = 0.000000;
    int count = 0;
    while (theta < stop) {
        double r = a + b * theta;
        double x = r * cosApprox(theta);
        double y = r * sinApprox(theta);
        if (Objects.equals(count % 100, 0)) {
            System.out.println(String.valueOf(centre + x) + "," + String.valueOf(centre - y));
        }
        theta = theta + degreesIncr;
        count = (int)(count + 1);
    }
    }
}
