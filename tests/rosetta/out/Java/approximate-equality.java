// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// approximate-equality.mochi
import java.util.*;

public class ApproximateEquality {
    static double abs(double x) {
        if (x < 0.000000) {
            return -x;
        }
        return x;
    }
    static double maxf(double a, double b) {
        if (a > b) {
            return a;
        }
        return b;
    }
    static boolean isClose(double a, double b) {
        double relTol = 0.000000;
        double t = abs(a - b);
        double u = relTol * maxf(abs(a), abs(b));
        return t <= u;
    }
    static double sqrtApprox(double x) {
        double guess = x;
        int i = 0;
        while (i < 10) {
            guess = (guess + x / guess) / 2.000000;
            i = (int)(i + 1);
        }
        return guess;
    }
    static void main() {
        double root2 = sqrtApprox(2.000000);
        List<List<Double>> pairs = new ArrayList<>(Arrays.asList(Arrays.asList(100000000000000.015625, 100000000000000.015625), Arrays.asList(100.010000, 100.011000), Arrays.asList(10000000000000.001953 / 10000.000000, 1000000000.000000), Arrays.asList(0.001000, 0.001000), Arrays.asList(0.000000, 0.000000), Arrays.asList(root2 * root2, 2.000000), Arrays.asList((-root2) * root2, -2.000000), Arrays.asList(100000000000000000.000000, 100000000000000000.000000), Arrays.asList(3.141593, 3.141593)));
        for (List<Double> pair : pairs) {
            List<Double> a = pair.get(0);
            List<Double> b = pair.get(1);
            Object s = (isClose(a, b) ? "≈" : "≉");
            System.out.println(String.valueOf(a) + " " + s + " " + String.valueOf(b));
        }
    }
    public static void main(String[] args) {
        main();
    }
}
