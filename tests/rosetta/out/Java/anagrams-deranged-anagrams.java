// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:31:52Z
// anagrams-deranged-anagrams.mochi
import java.util.*;

public class AnagramsDerangedAnagrams {
    static String sortRunes(String s) {
        List<String> arr = Arrays.asList();
        int i = 0;
        while (i < s.length()) {
            arr.add(s.substring(i, i + 1));
            i = (int)(i + 1);
        }
        int n = arr.size();
        int m = 0;
        while (m < n) {
            int j = 0;
            while (j < n - 1) {
                if (String.valueOf(arr.get(j)).compareTo(String.valueOf(arr.get(j + 1))) > 0) {
                    List<String> tmp = arr.get(j);
                    arr.set(j, arr.get(j + 1));
                    arr.set(j + 1, tmp);
                }
                j = (int)(j + 1);
            }
            m = (int)(m + 1);
        }
        String out = "";
        i = (int)(0);
        while (i < n) {
            out = out + ((Number)arr.get(i)).doubleValue();
            i = (int)(i + 1);
        }
        return out;
    }
    static boolean deranged(String a, String b) {
        if (!Objects.equals(a.length(), b.length())) {
            return false;
        }
        int i = 0;
        while (i < a.length()) {
            if (Objects.equals(a.substring(i, i + 1), b.substring(i, i + 1))) {
                return false;
            }
            i = (int)(i + 1);
        }
        return true;
    }
    static void main() {
        List<String> words = new ArrayList<>(Arrays.asList("constitutionalism", "misconstitutional"));
        Map<String,List<String>> m = new LinkedHashMap<String,List<String>>();
        int bestLen = 0;
        String w1 = "";
        String w2 = "";
        for (String w : words) {
            if (w.length() <= bestLen) {
                continue;
            }
            String k = sortRunes(w);
            if (!(m.containsKey(k))) {
                m.put(k, Arrays.asList(w));
                continue;
            }
            for (String c : m.get(k).keySet()) {
                if (deranged(w, c)) {
                    bestLen = (int)(w.length());
                    w1 = c;
                    w2 = w;
                    break;
                }
            }
            m.put(k, append(m.get(k), w));
        }
        System.out.println(w1 + " " + w2 + " : Length " + String.valueOf(bestLen));
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    static <K,V> Map.Entry<K,V> entry(K k, V v) { return new AbstractMap.SimpleEntry<>(k, v); }
    static <K,V> LinkedHashMap<K,V> mapOfEntries(Map.Entry<? extends K,? extends V>... entries) {
        LinkedHashMap<K,V> m = new LinkedHashMap<>();
        for (var e : entries) m.put(e.getKey(), e.getValue());
        return m;
    }
    public static void main(String[] args) {
    main();
    }
}
