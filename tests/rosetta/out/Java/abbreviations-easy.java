// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// abbreviations-easy.mochi
import java.util.*;

public class AbbreviationsEasy {
    static List<String> fields(String s) {
        List<String> words = Arrays.asList();
        String cur = "";
        int i = 0;
        while (i < s.length()) {
            String ch = s.substring(i, i + 1);
            if (Objects.equals(ch, " ") || Objects.equals(ch, "\n") || Objects.equals(ch, "\t")) {
                if (cur.length() > 0) {
                    words.add(cur);
                    cur = "";
                }
            }
            else {
                cur = cur + ch;
            }
            i = (int)(i + 1);
        }
        if (cur.length() > 0) {
            words.add(cur);
        }
        return words;
    }
    static String padRight(String s, int width) {
        String out = s;
        int i = s.length();
        while (i < width) {
            out = out + " ";
            i = (int)(i + 1);
        }
        return out;
    }
    static String join(List<String> xs, String sep) {
        String res = "";
        int i = 0;
        while (i < xs.size()) {
            if (i > 0) {
                res = res + sep;
            }
            res = res + ((Number)xs.get(i)).doubleValue();
            i = (int)(i + 1);
        }
        return res;
    }
    static List<String> validate(List<String> commands, List<String> words, List<Integer> mins) {
        List<String> results = Arrays.asList();
        if (Objects.equals(words.size(), 0)) {
            return results;
        }
        int wi = 0;
        while (wi < words.size()) {
            List<String> w = words.get(wi);
            boolean found = false;
            int wlen = w.size();
            int ci = 0;
            while (ci < commands.size()) {
                List<String> cmd = commands.get(ci);
                if (!Objects.equals(mins.get(ci), 0) && wlen >= ((Number)mins.get(ci)).doubleValue() && wlen <= cmd.size()) {
                    Object c = upper(cmd);
                    Object ww = upper(w);
                    if (Objects.equals(c.substring(0, wlen), ww)) {
                        results.add(c);
                        found = true;
                        break;
                    }
                }
                ci = (int)(ci + 1);
            }
            if (!found) {
                results.add("*error*");
            }
            wi = (int)(wi + 1);
        }
        return results;
    }
    static void main() {
        String table = "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find " + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput " + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO " + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT " + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT " + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ";
        List<String> commands = fields(table);
        List<Integer> mins = Arrays.asList();
        int i = 0;
        while (i < commands.size()) {
            int count = 0;
            int j = 0;
            List<String> cmd = commands.get(i);
            while (j < cmd.size()) {
                String ch = cmd.substring(j, j + 1);
                if (String.valueOf(ch).compareTo(String.valueOf("A")) >= 0 && String.valueOf(ch).compareTo(String.valueOf("Z")) <= 0) {
                    count = (int)(count + 1);
                }
                j = (int)(j + 1);
            }
            mins.add(count);
            i = (int)(i + 1);
        }
        String sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin";
        List<String> words = fields(sentence);
        List<String> results = validate(commands, words, mins);
        String out1 = "user words:  ";
        int k = 0;
        while (k < words.size()) {
            out1 = ((Number)out1 + ((Number)padRight(words.get(k), results.get(k).size())).doubleValue()).doubleValue() + " ";
            k = (int)(k + 1);
        }
        System.out.println(out1);
        System.out.println("full words:  " + join(results, " "));
    }
    public static void main(String[] args) {
        main();
    }
}
