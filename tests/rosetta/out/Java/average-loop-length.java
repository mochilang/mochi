// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:02Z
// average-loop-length.mochi
import java.util.*;

public class AverageLoopLength {
    static double absf(double x) {
        if (x < 0.000000) {
            return -x;
        }
        return x;
    }
    static double floorf(double x) {
        return Double.parseDouble(String.valueOf((Integer.parseInt(x))));
    }
    static int indexOf(String s, String ch) {
        int i = 0;
        while (i < s.length()) {
            if (Objects.equals(s.substring(i, i + 1), ch)) {
                return i;
            }
            i = (int)(i + 1);
        }
        return -1;
    }
    static String fmtF(double x) {
        double y = floorf(x * 10000.000000 + 0.500000) / 10000.000000;
        String s = String.valueOf(y);
        int dot = indexOf(s, ".");
        if (Objects.equals(dot, 0 - 1)) {
            s = s + ".0000";
        }
        else {
            int decs = s.length() - dot - 1;
            if (decs > 4) {
                s = s.substring(0, dot + 5);
            }
            else {
                while (decs < 4) {
                    s = s + "0";
                    decs = (int)(decs + 1);
                }
            }
        }
        return s;
    }
    static String padInt(int n, int width) {
        String s = String.valueOf(n);
        while (s.length() < width) {
            s = " " + s;
        }
        return s;
    }
    static String padFloat(double x, int width) {
        String s = fmtF(x);
        while (s.length() < width) {
            s = " " + s;
        }
        return s;
    }
    static double avgLen(int n) {
        int tests = 10000;
        int sum = 0;
        int seed = 1;
        int t = 0;
        while (t < tests) {
            List<Boolean> visited = Arrays.asList();
            int i = 0;
            while (i < n) {
                visited.add(false);
                i = (int)(i + 1);
            }
            int x = 0;
            while (!visited.get(x)) {
                visited.set(x, true);
                sum = (int)(sum + 1);
                seed = (int)((seed * 1664525 + 1013904223) % 2147483647);
                x = (int)(seed % n);
            }
            t = (int)(t + 1);
        }
        return (Double.parseDouble(String.valueOf(sum))) / tests;
    }
    static double ana(int n) {
        double nn = Double.parseDouble(String.valueOf(n));
        double term = 1.000000;
        double sum = 1.000000;
        double i = nn - 1.000000;
        while (i >= 1.000000) {
            term = term * (i / nn);
            sum = sum + term;
            i = i - 1.000000;
        }
        return sum;
    }
    static void main() {
        int nmax = 20;
        System.out.println(" N    average    analytical    (error)");
        System.out.println("===  =========  ============  =========");
        int n = 1;
        while (n <= nmax) {
            double a = avgLen(n);
            double b = ana(n);
            double err = absf(a - b) / b * 100.000000;
            int line = padInt(n, 3) + "  " + padFloat(a, 9) + "  " + padFloat(b, 12) + "  (" + padFloat(err, 6) + "%)";
            System.out.println(line);
            n = (int)(n + 1);
        }
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    main();
    }
}
