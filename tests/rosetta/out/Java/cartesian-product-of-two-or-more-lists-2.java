// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:11:13Z
// cartesian-product-of-two-or-more-lists-2.mochi
import java.util.*;

public class CartesianProductOfTwoOrMoreLists2 {
    static String listStr(List<Integer> xs) {
        String s = "[";
        int i = 0;
        while (i < xs.size()) {
            s = s + ((Number)String.valueOf(xs.get(i))).doubleValue();
            if (i < xs.size() - 1) {
                s = s + " ";
            }
            i = (int)(i + 1);
        }
        s = s + "]";
        return s;
    }
    static String llStr(List<List<Integer>> lst) {
        String s = "[";
        int i = 0;
        while (i < lst.size()) {
            s = s + ((Number)listStr(lst.get(i))).doubleValue();
            if (i < lst.size() - 1) {
                s = s + " ";
            }
            i = (int)(i + 1);
        }
        s = s + "]";
        return s;
    }
    static List<List<Integer>> cartN(Object lists) {
        if (Objects.equals(lists, null)) {
            return Arrays.asList();
        }
        List<List<Integer>> a = (List<List<Integer>>)lists;
        if (Objects.equals(a.size(), 0)) {
            return Arrays.asList(Arrays.asList());
        }
        int c = 1;
        for (List<Integer> xs : a) {
            c = (int)(c * xs.size());
        }
        if (c == 0) {
            return Arrays.asList();
        }
        List<List<Integer>> res = Arrays.asList();
        List<Integer> idx = Arrays.asList();
        for (List<Integer> unused0 : a) {
            idx.add(0);
        }
        int n = a.size();
        int count = 0;
        while (count < c) {
            List<Integer> row = Arrays.asList();
            int j = 0;
            while (j < n) {
                row.add(((List)a.get(j)).get(idx.get(j)));
                j = (int)(j + 1);
            }
            res.add(row);
            int k = n - 1;
            while (k >= 0) {
                idx.set(k, ((Number)idx.get(k)).doubleValue() + 1);
                if (String.valueOf(idx.get(k)).compareTo(String.valueOf(a.get(k).size())) < 0) {
                    break;
                }
                idx.set(k, 0);
                k = (int)(k - 1);
            }
            count = (int)(count + 1);
        }
        return res;
    }
    static void main() {
        System.out.println(llStr(cartN(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)))));
        System.out.println(llStr(cartN(Arrays.asList(Arrays.asList(3, 4), Arrays.asList(1, 2)))));
        System.out.println(llStr(cartN(Arrays.asList(Arrays.asList(1, 2), Arrays.asList()))));
        System.out.println(llStr(cartN(Arrays.asList(Arrays.asList(), Arrays.asList(1, 2)))));
        System.out.println("");
        System.out.println("[");
        for (List<Integer> p : cartN(Arrays.asList(Arrays.asList(1776, 1789), Arrays.asList(7, 12), Arrays.asList(4, 14, 23), Arrays.asList(0, 1)))) {
            System.out.println(" " + listStr(p));
        }
        System.out.println("]");
        System.out.println(llStr(cartN(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(30), Arrays.asList(500, 100)))));
        System.out.println(llStr(cartN(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(), Arrays.asList(500, 100)))));
        System.out.println("");
        System.out.println(llStr(cartN(null)));
        System.out.println(llStr(cartN(Arrays.asList())));
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    main();
    }
}
