// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// abundant-odd-numbers.mochi
import java.util.*;

public class AbundantOddNumbers {
    static List<Integer> divisors(int n) {
        List<Integer> divs = Arrays.asList(1);
        List<Integer> divs2 = Arrays.asList();
        int i = 2;
        while (i * i <= n) {
            if (Objects.equals(n % i, 0)) {
                int j = Integer.parseInt((n / i));
                divs.add(i);
                if (i != j) {
                    divs2.add(j);
                }
            }
            i = (int)(i + 1);
        }
        int j = divs2.size() - 1;
        while (j >= 0) {
            divs.add(divs2.get(j));
            j = (int)(j - 1);
        }
        return divs;
    }
    static int sum(List<Integer> xs) {
        int tot = 0;
        for (Integer v : xs) {
            tot = (int)(tot + v);
        }
        return tot;
    }
    static String sumStr(List<Integer> xs) {
        String s = "";
        int i = 0;
        while (i < xs.size()) {
            s = ((Number)s + ((Number)String.valueOf(xs.get(i))).doubleValue()).doubleValue() + " + ";
            i = (int)(i + 1);
        }
        return s.substring(0, s.length() - 3);
    }
    static String pad2(int n) {
        String s = String.valueOf(n);
        if (s.length() < 2) {
            return " " + s;
        }
        return s;
    }
    static String pad5(int n) {
        String s = String.valueOf(n);
        while (s.length() < 5) {
            s = " " + s;
        }
        return s;
    }
    static int abundantOdd(int searchFrom, int countFrom, int countTo, boolean printOne) {
        int count = countFrom;
        int n = searchFrom;
        while (count < countTo) {
            List<Integer> divs = divisors(n);
            int tot = divs.stream().mapToInt(n -> ((Number)n).intValue()).sum();
            if (tot > n) {
                count = (int)(count + 1);
                if (printOne && count < countTo) {
                    n = (int)(n + 2);
                    continue;
                }
                String s = sumStr(divs);
                if (!printOne) {
                    System.out.println(pad2(count) + ". " + pad5(n) + " < " + s + " = " + String.valueOf(tot));
                }
                else {
                    System.out.println(String.valueOf(n) + " < " + s + " = " + String.valueOf(tot));
                }
            }
            n = (int)(n + 2);
        }
        return n;
    }
    static void main() {
        int max = 25;
        System.out.println("The first " + String.valueOf(max) + " abundant odd numbers are:");
        int n = abundantOdd(1, 0, max, false);
        System.out.println("\nThe one thousandth abundant odd number is:");
        abundantOdd(n, max, 1000, true);
        System.out.println("\nThe first abundant odd number above one billion is:");
        abundantOdd(1000000001, 0, 1, true);
    }
    public static void main(String[] args) {
        main();
    }
}
