// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// averages-mean-time-of-day.mochi
import java.util.*;

public class AveragesMeanTimeOfDay {
    static double PI = 3.141593;
    static double sinApprox(double x) {
        double term = x;
        double sum = x;
        int n = 1;
        while (n <= 8) {
            double denom = Double.parseDouble(String.valueOf(((2 * n) * (2 * n + 1))));
            term = -term * x * x / denom;
            sum = sum + term;
            n = (int)(n + 1);
        }
        return sum;
    }
    static double cosApprox(double x) {
        double term = 1.000000;
        double sum = 1.000000;
        int n = 1;
        while (n <= 8) {
            double denom = Double.parseDouble(String.valueOf(((2 * n - 1) * (2 * n))));
            term = -term * x * x / denom;
            sum = sum + term;
            n = (int)(n + 1);
        }
        return sum;
    }
    static double atanApprox(double x) {
        if (x > 1.000000) {
            return PI / 2.000000 - x / (x * x + 0.280000);
        }
        if (x < (-1.000000)) {
            return -PI / 2.000000 - x / (x * x + 0.280000);
        }
        return x / (1.000000 + 0.280000 * x * x);
    }
    static double atan2Approx(double y, double x) {
        if (x > 0.000000) {
            return atanApprox(y / x);
        }
        if (x < 0.000000) {
            if (y >= 0.000000) {
                return atanApprox(y / x) + PI;
            }
            return atanApprox(y / x) - PI;
        }
        if (y > 0.000000) {
            return PI / 2.000000;
        }
        if (y < 0.000000) {
            return -PI / 2.000000;
        }
        return 0.000000;
    }
    static int digit(String ch) {
        String digits = "0123456789";
        int i = 0;
        while (i < digits.length()) {
            if (Objects.equals(digits.substring(i, i + 1), ch)) {
                return i;
            }
            i = (int)(i + 1);
        }
        return 0;
    }
    static int parseTwo(String s, int idx) {
        return digit(s.substring(idx, idx + 1)) * 10 + digit(s.substring(idx + 1, idx + 2));
    }
    static double parseSec(String s) {
        int h = parseTwo(s, 0);
        int m = parseTwo(s, 3);
        int sec = parseTwo(s, 6);
        return Double.parseDouble(String.valueOf(((h * 60 + m) * 60 + sec)));
    }
    static String pad(int n) {
        if (n < 10) {
            return "0" + String.valueOf(n);
        }
        return String.valueOf(n);
    }
    static String meanTime(List<String> times) {
        double ssum = 0.000000;
        double csum = 0.000000;
        int i = 0;
        while (i < times.size()) {
            double sec = parseSec(times.get(i));
            double ang = sec * 2.000000 * PI / 86400.000000;
            ssum = ssum + sinApprox(ang);
            csum = csum + cosApprox(ang);
            i = (int)(i + 1);
        }
        double theta = atan2Approx(ssum, csum);
        double frac = theta / (2.000000 * PI);
        while (frac < 0.000000) {
            frac = frac + 1.000000;
        }
        double total = frac * 86400.000000;
        int si = Integer.parseInt(total);
        int h = Integer.parseInt((si / 3600));
        int m = Integer.parseInt(((si % 3600) / 60));
        int s = Integer.parseInt((si % 60));
        return pad(h) + ":" + pad(m) + ":" + pad(s);
    }
    static void main() {
        List<String> inputs = new ArrayList<>(Arrays.asList("23:00:17", "23:40:20", "00:12:45", "00:17:19"));
        System.out.println(meanTime(inputs));
    }
    public static void main(String[] args) {
        main();
    }
}
