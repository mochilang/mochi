// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// 4-rings-or-4-squares-puzzle.mochi
import java.util.*;

public class M4RingsOr4SquaresPuzzle {
    static boolean validComb(int a, int b, int c, int d, int e, int f, int g) {
        int square1 = a + b;
        int square2 = b + c + d;
        int square3 = d + e + f;
        int square4 = f + g;
        return square1 == square2 && square2 == square3 && square3 == square4;
    }
    static boolean isUnique(int a, int b, int c, int d, int e, int f, int g) {
        List<Integer> nums = new ArrayList<>(Arrays.asList(a, b, c, d, e, f, g));
        int i = 0;
        while (i < nums.size()) {
            int j = i + 1;
            while (j < nums.size()) {
                if (Objects.equals(nums.get(i), nums.get(j))) {
                    return false;
                }
                j = (int)(j + 1);
            }
            i = (int)(i + 1);
        }
        return true;
    }
    static Map<String,Object> getCombs(int low, int high, boolean unique) {
        List<Object> valid = new ArrayList<>(Arrays.asList());
        int count = 0;
        for (int b = low; b < (high + 1); b++) {
            for (int c = low; c < (high + 1); c++) {
                for (int d = low; d < (high + 1); d++) {
                    int s = b + c + d;
                    for (int e = low; e < (high + 1); e++) {
                        for (int f = low; f < (high + 1); f++) {
                            int a = s - b;
                            int g = s - f;
                            if (a < low || a > high) {
                                continue;
                            }
                            if (g < low || g > high) {
                                continue;
                            }
                            if (!Objects.equals(d + e + f, s)) {
                                continue;
                            }
                            if (!Objects.equals(f + g, s)) {
                                continue;
                            }
                            if (!unique || isUnique(a, b, c, d, e, f, g)) {
                                valid.add(Arrays.asList(a, b, c, d, e, f, g));
                                count = (int)(count + 1);
                            }
                        }
                    }
                }
            }
        }
        return new CountList(count, valid);
    }
    public static void main(String[] args) {
        Map<String,Object> r1 = getCombs(1, 7, true);
        System.out.println(((Number)String.valueOf(r1.get("count"))).doubleValue() + " unique solutions in 1 to 7");
        System.out.println(r1.get("list"));
        Map<String,Object> r2 = getCombs(3, 9, true);
        System.out.println(((Number)String.valueOf(r2.get("count"))).doubleValue() + " unique solutions in 3 to 9");
        System.out.println(r2.get("list"));
        Map<String,Object> r3 = getCombs(0, 9, false);
        System.out.println(((Number)String.valueOf(r3.get("count"))).doubleValue() + " non-unique solutions in 0 to 9");
    }
}
