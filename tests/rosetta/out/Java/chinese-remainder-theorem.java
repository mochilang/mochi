// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:33:08Z
// chinese-remainder-theorem.mochi
import java.util.*;

public class ChineseRemainderTheorem {
    static List<Integer> n = new ArrayList<>(Arrays.asList(3, 5, 7));
    static List<Integer> a = new ArrayList<>(Arrays.asList(2, 3, 2));
    static int res = crt(a, n);
    static List<Integer> egcd(int a, int b) {
        if (a == 0) {
            return Arrays.asList(b, 0, 1);
        }
        List<Integer> res = egcd(b % a, a);
        List<Integer> g = res.get(0);
        List<Integer> x1 = res.get(1);
        List<Integer> y1 = res.get(2);
        return Arrays.asList(g, y1 - (b / a) * x1, x1);
    }
    static int modInv(int a, int m) {
        List<Integer> r = egcd(a, m);
        if (!Objects.equals(r.get(0), 1)) {
            return 0;
        }
        List<Integer> x = r.get(1);
        if (x < 0) {
            return x + m;
        }
        return x;
    }
    static int crt(List<Integer> a, List<Integer> n) {
        int prod = 1;
        int i = 0;
        while (i < n.size()) {
            prod = (int)(prod * ((Number)n.get(i)).doubleValue());
            i = (int)(i + 1);
        }
        int x = 0;
        i = (int)(0);
        while (i < n.size()) {
            List<Integer> ni = n.get(i);
            List<Integer> ai = a.get(i);
            double p = prod / ni;
            int inv = modInv(p % ni, ni);
            x = (int)(x + ai * inv * p);
            i = (int)(i + 1);
        }
        return x % prod;
    }
    public static void main(String[] args) {
    System.out.println(String.valueOf(res) + " <nil>");
    }
}
