// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// 100-prisoners.mochi
import java.util.*;

public class M100Prisoners {
    static List<Integer> shuffle(List<Integer> xs) {
        List<Integer> arr = xs;
        int i = (int)(99);
        while (i > 0) {
            int j = (int)(System.currentTimeMillis() % (i + 1));
            Integer tmp = arr.get(i);
            arr.set(i, arr.get(j));
            arr.set(j, tmp);
            i = (int)(i - 1);
        }
        return arr;
    }
    static void doTrials(int trials, int np, String strategy) {
        int pardoned = (int)(0);
        int t = (int)(0);
        while (t < trials) {
            List<Integer> drawers = new ArrayList<>(Arrays.asList());
            int i = (int)(0);
            while (i < 100) {
                drawers.add(i);
                i = (int)(i + 1);
            }
            drawers = shuffle(drawers);
            int p = (int)(0);
            boolean success = true;
            while (p < np) {
                boolean found = false;
                if (Objects.equals(strategy, "optimal")) {
                    int prev = (int)(p);
                    int d = (int)(0);
                    while (d < 50) {
                        Integer this_ = drawers.get(prev);
                        if (Objects.equals(this_, p)) {
                            found = true;
                            break;
                        }
                        prev = (int)(this_);
                        d = (int)(d + 1);
                    }
                }
                else {
                    List<Boolean> opened = new ArrayList<>(Arrays.asList());
                    int k = (int)(0);
                    while (k < 100) {
                        opened.add(false);
                        k = (int)(k + 1);
                    }
                    int d = (int)(0);
                    while (d < 50) {
                        int n = (int)(System.currentTimeMillis() % 100);
                        while (opened.get(n)) {
                            n = (int)(System.currentTimeMillis() % 100);
                        }
                        opened.set(n, true);
                        if (Objects.equals(drawers.get(n), p)) {
                            found = true;
                            break;
                        }
                        d = (int)(d + 1);
                    }
                }
                if (!found) {
                    success = false;
                    break;
                }
                p = (int)(p + 1);
            }
            if (success) {
                pardoned = (int)(pardoned + 1);
            }
            t = (int)(t + 1);
        }
        double rf = (Double.parseDouble(String.valueOf(pardoned))) / (Double.parseDouble(String.valueOf(trials))) * 100.000000;
        System.out.println("  strategy = " + strategy + "  pardoned = " + String.valueOf(pardoned) + " relative frequency = " + String.valueOf(rf) + "%");
    }
    static void main() {
        int trials = (int)(1000);
        for (Integer np : new ArrayList<>(Arrays.asList(10, 100))) {
            System.out.println("Results from " + String.valueOf(trials) + " trials with " + String.valueOf(np) + " prisoners:\n");
            for (String strat : new ArrayList<>(Arrays.asList("random", "optimal"))) {
                doTrials(trials, np, strat);
            }
        }
    }
    public static void main(String[] args) {
        main();
    }
}
