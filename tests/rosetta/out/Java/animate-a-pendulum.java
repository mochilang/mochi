// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:31:56Z
// animate-a-pendulum.mochi
public class AnimateAPendulum {
    static double sinApprox(double x) {
        double term = x;
        double sum = x;
        int n = 1;
        while (n <= 10) {
            double denom = Double.parseDouble(String.valueOf(((2 * n) * (2 * n + 1))));
            term = -term * x * x / denom;
            sum = sum + term;
            n = (int)(n + 1);
        }
        return sum;
    }
    static double cosApprox(double x) {
        double term = 1.000000;
        double sum = 1.000000;
        int n = 1;
        while (n <= 10) {
            double denom = Double.parseDouble(String.valueOf(((2 * n - 1) * (2 * n))));
            term = -term * x * x / denom;
            sum = sum + term;
            n = (int)(n + 1);
        }
        return sum;
    }
    static double sqrtApprox(double x) {
        double guess = x;
        int i = 0;
        while (i < 10) {
            guess = (guess + x / guess) / 2.000000;
            i = (int)(i + 1);
        }
        return guess;
    }
    public static void main(String[] args) {
    double PI = 3.141593;
    double L = 10.000000;
    double G = 9.810000;
    double dt = 0.200000;
    double phi0 = PI / 4.000000;
    double omega = sqrtApprox(G / L);
    double t = 0.000000;
    for (int step = 0; step < 10; step++) {
        double phi = phi0 * cosApprox(omega * t);
        int pos = Integer.parseInt((10.000000 * sinApprox(phi) + 0.500000));
        System.out.println(String.valueOf(pos));
        t = t + dt;
    }
    }
}
