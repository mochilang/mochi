// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:10:45Z
// bioinformatics-sequence-mutation.mochi
import java.util.*;

public class BioinformaticsSequenceMutation {
    static List<Integer> randInt(int s, int n) {
        int next = (s * 1664525 + 1013904223) % 2147483647;
        return Arrays.asList(next, next % n);
    }
    static String padLeft(String s, int w) {
        String res = "";
        int n = w - s.length();
        while (n > 0) {
            res = res + " ";
            n = (int)(n - 1);
        }
        return res + s;
    }
    static List<Object> makeSeq(int s, int le) {
        String bases = "ACGT";
        String out = "";
        int i = 0;
        while (i < le) {
            List<Integer> r = randInt(s, 4);
            s = (int)(r.get(0));
            int idx = Integer.parseInt(((List)r.get(1)));
            out = out + bases.substring(idx, idx + 1);
            i = (int)(i + 1);
        }
        return Arrays.asList(s, out);
    }
    static List<Object> mutate(int s, String dna, List<Integer> w) {
        String bases = "ACGT";
        int le = dna.length();
        List<Integer> r = randInt(s, le);
        s = (int)(r.get(0));
        int p = Integer.parseInt(((List)r.get(1)));
        r = randInt(s, 300);
        s = (int)(r.get(0));
        int x = Integer.parseInt(((List)r.get(1)));
        List<String> arr = Arrays.asList();
        int i = 0;
        while (i < le) {
            arr.add(dna.substring(i, i + 1));
            i = (int)(i + 1);
        }
        if (x < ((Number)w.get(0)).doubleValue()) {
            r = randInt(s, 4);
            s = (int)(r.get(0));
            int idx = Integer.parseInt(((List)r.get(1)));
            String b = bases.substring(idx, idx + 1);
            System.out.println(((Number)((Number)((Number)"  Change @" + padLeft(String.valueOf(p), 3) + " '" + ((Number)arr.get(p)).doubleValue()).doubleValue() + "' to '").doubleValue() + b).doubleValue() + "'");
            arr.set(p, b);
        }
        String out = "";
        i = (int)(0);
        while (i < arr.size()) {
            out = out + ((Number)arr.get(i)).doubleValue();
            i = (int)(i + 1);
        }
        return Arrays.asList(s, out);
    }
    static void prettyPrint(String dna, int rowLen) {
        System.out.println("SEQUENCE:");
        int le = dna.length();
        int i = 0;
        while (i < le) {
            int k = i + rowLen;
            if (k > le) {
                k = (int)(le);
            }
            System.out.println(padLeft(String.valueOf(i), 5) + ": " + dna.substring(i, k));
            i = (int)(i + rowLen);
        }
        int a = 0;
        int c = 0;
        int g = 0;
        int t = 0;
        int idx = 0;
        while (idx < le) {
            String ch = dna.substring(idx, idx + 1);
            if (Objects.equals(ch, "A")) {
                a = (int)(a + 1);
            }
            else {
                if (Objects.equals(ch, "C")) {
                    c = (int)(c + 1);
                }
                else {
                    if (Objects.equals(ch, "G")) {
                        g = (int)(g + 1);
                    }
                    else {
                        if (Objects.equals(ch, "T")) {
                            t = (int)(t + 1);
                        }
                    }
                }
            }
            idx = (int)(idx + 1);
        }
        System.out.println("");
        System.out.println("BASE COUNT:");
        System.out.println("    A: " + padLeft(String.valueOf(a), 3));
        System.out.println("    C: " + padLeft(String.valueOf(c), 3));
        System.out.println("    G: " + padLeft(String.valueOf(g), 3));
        System.out.println("    T: " + padLeft(String.valueOf(t), 3));
        System.out.println("    ------");
        System.out.println("    Î£: " + String.valueOf(le));
        System.out.println("    ======");
    }
    static String wstring(List<Integer> w) {
        return ((Number)((Number)((Number)((Number)((Number)"  Change: " + ((Number)String.valueOf(w.get(0))).doubleValue()).doubleValue() + "\n  Delete: ").doubleValue() + ((Number)String.valueOf(w.get(1))).doubleValue()).doubleValue() + "\n  Insert: ").doubleValue() + ((Number)String.valueOf(w.get(2))).doubleValue()).doubleValue() + "\n";
    }
    static void main() {
        int seed = 1;
        List<Object> res = makeSeq(seed, 250);
        seed = (int)(res.get(0));
        String dna = String.valueOf(((List)res.get(1)));
        prettyPrint(dna, 50);
        int muts = 10;
        List<Integer> w = new ArrayList<>(Arrays.asList(100, 100, 100));
        System.out.println("\nWEIGHTS (ex 300):");
        System.out.println(wstring(w));
        System.out.println("MUTATIONS (" + String.valueOf(muts) + "):");
        int i = 0;
        while (i < muts) {
            res = mutate(seed, dna, w);
            seed = (int)(res.get(0));
            dna = String.valueOf(((List)res.get(1)));
            i = (int)(i + 1);
        }
        System.out.println("");
        prettyPrint(dna, 50);
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    main();
    }
}
