// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:31:40Z
// abelian-sandpile-model.mochi
import java.util.*;

public class AbelianSandpileModel {
    static int dim = 16;
    static List<List<Integer>> newPile(int d) {
        List<List<Integer>> b = Arrays.asList();
        int y = 0;
        while (y < d) {
            List<Integer> row = Arrays.asList();
            int x = 0;
            while (x < d) {
                row.add(0);
                x = (int)(x + 1);
            }
            b.add(row);
            y = (int)(y + 1);
        }
        return b;
    }
    static List<List<Integer>> handlePile(List<List<Integer>> pile, int x, int y) {
        if (((Number)((List)pile.get(y)).get(x)).doubleValue() >= 4) {
            ((List)pile.get(y)).set(x, ((Number)((List)pile.get(y)).get(x)).doubleValue() - 4);
            if (y > 0) {
                ((List)pile.get(y - 1)).set(x, ((Number)((List)pile.get(y - 1)).get(x)).doubleValue() + 1);
                if (((Number)((List)pile.get(y - 1)).get(x)).doubleValue() >= 4) {
                    pile = handlePile(pile, x, y - 1);
                }
            }
            if (x > 0) {
                ((List)pile.get(y)).set(x - 1, ((Number)((List)pile.get(y)).get(x - 1)).doubleValue() + 1);
                if (((Number)((List)pile.get(y)).get(x - 1)).doubleValue() >= 4) {
                    pile = handlePile(pile, x - 1, y);
                }
            }
            if (y < dim - 1) {
                ((List)pile.get(y + 1)).set(x, ((Number)((List)pile.get(y + 1)).get(x)).doubleValue() + 1);
                if (((Number)((List)pile.get(y + 1)).get(x)).doubleValue() >= 4) {
                    pile = handlePile(pile, x, y + 1);
                }
            }
            if (x < dim - 1) {
                ((List)pile.get(y)).set(x + 1, ((Number)((List)pile.get(y)).get(x + 1)).doubleValue() + 1);
                if (((Number)((List)pile.get(y)).get(x + 1)).doubleValue() >= 4) {
                    pile = handlePile(pile, x + 1, y);
                }
            }
            pile = handlePile(pile, x, y);
        }
        return pile;
    }
    static void drawPile(List<List<Integer>> pile, int d) {
        List<String> chars = new ArrayList<>(Arrays.asList(" ", "░", "▓", "█"));
        int row = 0;
        while (row < d) {
            String line = "";
            int col = 0;
            while (col < d) {
                List<List<Integer>> v = ((List)pile.get(row)).get(col);
                if (v > 3) {
                    v = 3;
                }
                line = line + ((Number)chars.get(v)).doubleValue();
                col = (int)(col + 1);
            }
            System.out.println(line);
            row = (int)(row + 1);
        }
    }
    static void main() {
        List<List<Integer>> pile = newPile(16);
        int hdim = 7;
        ((List)pile.get(hdim)).set(hdim, 16);
        pile = handlePile(pile, hdim, hdim);
        drawPile(pile, 16);
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    main();
    }
}
