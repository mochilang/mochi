// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// 24-game-solve.mochi
import java.util.*;

public class M24GameSolve {
    static int OP_NUM = 0;
    static int OP_ADD = 1;
    static int OP_SUB = 2;
    static int OP_MUL = 3;
    static int OP_DIV = 4;
    static int n_cards = 4;
    static int goal = 24;
    static int digit_range = 9;
    static Map<String,Object> newNum(int n) {
        return new OpValue(OP_NUM, new NumDenom(n, 1));
    }
    static Map<String,Integer> exprEval(Map<String,Object> x) {
        if (Objects.equals(x.get("op"), OP_NUM)) {
            return x.get("value");
        }
        Map<String,Integer> l = exprEval(x.get("left"));
        Map<String,Integer> r = exprEval(x.get("right"));
        if (Objects.equals(x.get("op"), OP_ADD)) {
            return new NumDenom(((Number)((Number)l.get("num")).doubleValue() * ((Number)r.get("denom")).doubleValue()).doubleValue() + ((Number)((Number)l.get("denom")).doubleValue() * ((Number)r.get("num")).doubleValue()).doubleValue(), ((Number)l.get("denom")).doubleValue() * ((Number)r.get("denom")).doubleValue());
        }
        if (Objects.equals(x.get("op"), OP_SUB)) {
            return new NumDenom(((Number)((Number)l.get("num")).doubleValue() * ((Number)r.get("denom")).doubleValue()).doubleValue() - ((Number)((Number)l.get("denom")).doubleValue() * ((Number)r.get("num")).doubleValue()).doubleValue(), ((Number)l.get("denom")).doubleValue() * ((Number)r.get("denom")).doubleValue());
        }
        if (Objects.equals(x.get("op"), OP_MUL)) {
            return new NumDenom(((Number)l.get("num")).doubleValue() * ((Number)r.get("num")).doubleValue(), ((Number)l.get("denom")).doubleValue() * ((Number)r.get("denom")).doubleValue());
        }
        return new NumDenom(((Number)l.get("num")).doubleValue() * ((Number)r.get("denom")).doubleValue(), ((Number)l.get("denom")).doubleValue() * ((Number)r.get("num")).doubleValue());
    }
    static String exprString(Map<String,Object> x) {
        if (Objects.equals(x.get("op"), OP_NUM)) {
            return String.valueOf(((Map<?,?>)((Map)x.get("value"))).get("num"));
        }
        String ls = exprString(x.get("left"));
        String rs = exprString(x.get("right"));
        String opstr = "";
        if (Objects.equals(x.get("op"), OP_ADD)) {
            opstr = " + ";
        }
        return "(" + ls + opstr + rs + ")";
    }
    static boolean solve(List<Map<String,Object>> xs) {
        if (Objects.equals(xs.size(), 1)) {
            Map<String,Integer> f = exprEval(xs.get(0));
            if (!Objects.equals(f.get("denom"), 0) && Objects.equals(f.get("num"), ((Number)f.get("denom")).doubleValue() * goal)) {
                System.out.println(exprString(xs.get(0)));
                return true;
            }
            return false;
        }
        int i = 0;
        while (i < xs.size()) {
            int j = i + 1;
            while (j < xs.size()) {
                List<Map<String,Object>> rest = new ArrayList<>(Arrays.asList());
                int k = 0;
                while (k < xs.size()) {
                    if (k != i && k != j) {
                        rest.add(xs.get(k));
                    }
                    k = (int)(k + 1);
                }
                List<Map<String,Object>> a = xs.get(i);
                List<Map<String,Object>> b = xs.get(j);
                for (Integer op : new ArrayList<>(Arrays.asList(OP_ADD, OP_SUB, OP_MUL, OP_DIV))) {
                    Node node = new Node(op, a, b);
                    if (solve(append(rest, node))) {
                        return true;
                    }
                }
                Node node = new Node(OP_SUB, b, a);
                if (solve(append(rest, node))) {
                    return true;
                }
                node = new Node(OP_DIV, b, a);
                if (solve(append(rest, node))) {
                    return true;
                }
                j = (int)(j + 1);
            }
            i = (int)(i + 1);
        }
        return false;
    }
    static void main() {
        int iter = 0;
        while (iter < 10) {
            List<Map<String,Object>> cards = new ArrayList<>(Arrays.asList());
            int i = 0;
            while (i < n_cards) {
                int n = (System.currentTimeMillis() % (digit_range - 1)) + 1;
                cards.add(newNum(n));
                System.out.println(" " + String.valueOf(n));
                i = (int)(i + 1);
            }
            System.out.println(":  ");
            if (!((Boolean)solve(cards))) {
                System.out.println("No solution");
            }
            iter = (int)(iter + 1);
        }
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
        main();
    }
}
