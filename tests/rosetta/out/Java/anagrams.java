// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// anagrams.mochi
import java.util.*;

public class Anagrams {
    static String sortRunes(String s) {
        List<String> arr = Arrays.asList();
        int i = 0;
        while (i < s.length()) {
            arr.add(s.substring(i, i + 1));
            i = (int)(i + 1);
        }
        int n = arr.size();
        int m = 0;
        while (m < n) {
            int j = 0;
            while (j < n - 1) {
                if (String.valueOf(arr.get(j)).compareTo(String.valueOf(arr.get(j + 1))) > 0) {
                    List<String> tmp = arr.get(j);
                    arr.set(j, arr.get(j + 1));
                    arr.set(j + 1, tmp);
                }
                j = (int)(j + 1);
            }
            m = (int)(m + 1);
        }
        String out = "";
        i = (int)(0);
        while (i < n) {
            out = out + ((Number)arr.get(i)).doubleValue();
            i = (int)(i + 1);
        }
        return out;
    }
    static List<String> sortStrings(List<String> xs) {
        List<String> res = Arrays.asList();
        List<String> tmp = xs;
        while (tmp.size() > 0) {
            List<String> min = tmp.get(0);
            int idx = 0;
            int i = 1;
            while (i < tmp.size()) {
                if (String.valueOf(tmp.get(i)).compareTo(String.valueOf(min)) < 0) {
                    min = tmp.get(i);
                    idx = (int)(i);
                }
                i = (int)(i + 1);
            }
            res.add(min);
            List<String> out = Arrays.asList();
            int j = 0;
            while (j < tmp.size()) {
                if (j != idx) {
                    out.add(tmp.get(j));
                }
                j = (int)(j + 1);
            }
            tmp = out;
        }
        return res;
    }
    static void main() {
        List<String> words = new ArrayList<>(Arrays.asList("abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"));
        Map<String,List<String>> groups = new LinkedHashMap<String,List<String>>();
        int maxLen = 0;
        for (String w : words) {
            String k = sortRunes(w);
            if (!((Boolean)(groups.containsKey(k)))) {
                groups.put(k, Arrays.asList(w));
            }
            else {
                groups.put(k, append(groups.get(k), w));
            }
            if (((Number)groups.get(k).size()).doubleValue() > maxLen) {
                maxLen = (int)(groups.get(k).size());
            }
        }
        Map<String,Boolean> printed = new LinkedHashMap<String,Boolean>();
        for (String w : words) {
            String k = sortRunes(w);
            if (Objects.equals(groups.get(k).size(), maxLen)) {
                if (!((Boolean)(printed.containsKey(k)))) {
                    List<String> g = sortStrings(groups.get(k));
                    String line = "[" + ((Number)g.get(0)).doubleValue();
                    int i = 1;
                    while (i < g.size()) {
                        line = line + " " + ((Number)g.get(i)).doubleValue();
                        i = (int)(i + 1);
                    }
                    line = line + "]";
                    System.out.println(line);
                    printed.put(k, true);
                }
            }
        }
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
        main();
    }
}
