// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:32:50Z
// canonicalize-cidr.mochi
import java.util.*;

public class CanonicalizeCidr {
    static List<String> split(String s, String sep) {
        List<String> parts = Arrays.asList();
        String cur = "";
        int i = 0;
        while (i < s.length()) {
            if (sep.length() > 0 && String.valueOf(i + sep.length()).compareTo(String.valueOf(s.length())) <= 0 && Objects.equals(s.substring(i, i + sep.length()), sep)) {
                parts.add(cur);
                cur = "";
                i = (int)(i + sep.length());
            }
            else {
                cur = cur + s.substring(i, i + 1);
                i = (int)(i + 1);
            }
        }
        parts.add(cur);
        return parts;
    }
    static String join(List<String> xs, String sep) {
        String res = "";
        int i = 0;
        while (i < xs.size()) {
            if (i > 0) {
                res = res + sep;
            }
            res = res + ((Number)xs.get(i)).doubleValue();
            i = (int)(i + 1);
        }
        return res;
    }
    static String repeat(String ch, int n) {
        String out = "";
        int i = 0;
        while (i < n) {
            out = out + ch;
            i = (int)(i + 1);
        }
        return out;
    }
    static int parseIntStr(String str) {
        int i = 0;
        boolean neg = false;
        if (str.length() > 0 && Objects.equals(str.substring(0, 1), "-")) {
            neg = true;
            i = (int)(1);
        }
        int n = 0;
        M0123456789 digits = new M0123456789(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
        while (i < str.length()) {
            n = (int)(n * 10 + ((Number)((Map<?,?>)digits).get(str.substring(i, i + 1))).doubleValue());
            i = (int)(i + 1);
        }
        if (neg) {
            n = (int)(-n);
        }
        return n;
    }
    static String toBinary(int n, int bits) {
        String b = "";
        int val = n;
        int i = 0;
        while (i < bits) {
            b = String.valueOf(val % 2) + b;
            val = (int)(Integer.parseInt((val / 2)));
            i = (int)(i + 1);
        }
        return b;
    }
    static int binToInt(String bits) {
        int n = 0;
        int i = 0;
        while (i < bits.length()) {
            n = (int)(n * 2 + parseIntStr(bits.substring(i, i + 1)));
            i = (int)(i + 1);
        }
        return n;
    }
    static String padRight(String s, int width) {
        String out = s;
        while (out.length() < width) {
            out = out + " ";
        }
        return out;
    }
    static String canonicalize(String cidr) {
        List<String> parts = split(cidr, "/");
        List<String> dotted = parts.get(0);
        int size = parseIntStr(parts.get(1));
        List<String> binParts = Arrays.asList();
        for (String p : split(dotted, ".")) {
            binParts.add(toBinary(parseIntStr(p), 8));
        }
        String binary = join(binParts, "");
        binary = binary.substring(0, size) + repeat("0", 32 - size);
        List<String> canonParts = Arrays.asList();
        int i = 0;
        while (i < binary.length()) {
            canonParts.add(String.valueOf(binToInt(binary.substring(i, i + 8))));
            i = (int)(i + 8);
        }
        return join(canonParts, ".") + "/" + ((Number)parts.get(1)).doubleValue();
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    public static void main(String[] args) {
    List<String> tests = new ArrayList<>(Arrays.asList("87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"));
    for (String t : tests) {
        System.out.println(padRight(t, 18) + " -> " + canonicalize(t));
    }
    }
}
