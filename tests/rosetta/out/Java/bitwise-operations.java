// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:10:54Z
// bitwise-operations.mochi
import java.util.*;

public class BitwiseOperations {
    static int toUnsigned16(int n) {
        int u = n;
        if (u < 0) {
            u = (int)(u + 65536);
        }
        return u % 65536;
    }
    static String bin16(int n) {
        int u = toUnsigned16(n);
        String bits = "";
        int mask = 32768;
        for (int i = 0; i < 16; i++) {
            if (u >= mask) {
                bits = bits + "1";
                u = (int)(u - mask);
            }
            else {
                bits = bits + "0";
            }
            mask = (int)(Integer.parseInt((mask / 2)));
        }
        return bits;
    }
    static int bit_and(int a, int b) {
        int ua = toUnsigned16(a);
        int ub = toUnsigned16(b);
        int res = 0;
        int bit = 1;
        for (int i = 0; i < 16; i++) {
            if (Objects.equals(ua % 2, 1) && Objects.equals(ub % 2, 1)) {
                res = (int)(res + bit);
            }
            ua = (int)(Integer.parseInt((ua / 2)));
            ub = (int)(Integer.parseInt((ub / 2)));
            bit = (int)(bit * 2);
        }
        return res;
    }
    static int bit_or(int a, int b) {
        int ua = toUnsigned16(a);
        int ub = toUnsigned16(b);
        int res = 0;
        int bit = 1;
        for (int i = 0; i < 16; i++) {
            if (Objects.equals(ua % 2, 1) || Objects.equals(ub % 2, 1)) {
                res = (int)(res + bit);
            }
            ua = (int)(Integer.parseInt((ua / 2)));
            ub = (int)(Integer.parseInt((ub / 2)));
            bit = (int)(bit * 2);
        }
        return res;
    }
    static int bit_xor(int a, int b) {
        int ua = toUnsigned16(a);
        int ub = toUnsigned16(b);
        int res = 0;
        int bit = 1;
        for (int i = 0; i < 16; i++) {
            int abit = ua % 2;
            int bbit = ub % 2;
            if ((abit == 1 && bbit == 0) || (abit == 0 && bbit == 1)) {
                res = (int)(res + bit);
            }
            ua = (int)(Integer.parseInt((ua / 2)));
            ub = (int)(Integer.parseInt((ub / 2)));
            bit = (int)(bit * 2);
        }
        return res;
    }
    static int bit_not(int a) {
        int ua = toUnsigned16(a);
        return 65535 - ua;
    }
    static int shl(int a, int b) {
        int ua = toUnsigned16(a);
        int i = 0;
        while (i < b) {
            ua = (int)((ua * 2) % 65536);
            i = (int)(i + 1);
        }
        return ua;
    }
    static int shr(int a, int b) {
        int ua = toUnsigned16(a);
        int i = 0;
        while (i < b) {
            ua = (int)(Integer.parseInt((ua / 2)));
            i = (int)(i + 1);
        }
        return ua;
    }
    static int las(int a, int b) {
        return shl(a, b);
    }
    static int ras(int a, int b) {
        int val = a;
        int i = 0;
        while (i < b) {
            if (val >= 0) {
                val = (int)(Integer.parseInt((val / 2)));
            }
            else {
                val = (int)(Integer.parseInt(((val - 1) / 2)));
            }
            i = (int)(i + 1);
        }
        return toUnsigned16(val);
    }
    static int rol(int a, int b) {
        int ua = toUnsigned16(a);
        int left = shl(ua, b);
        int right = shr(ua, 16 - b);
        return toUnsigned16(left + right);
    }
    static int ror(int a, int b) {
        int ua = toUnsigned16(a);
        int right = shr(ua, b);
        int left = shl(ua, 16 - b);
        return toUnsigned16(left + right);
    }
    static void bitwise(int a, int b) {
        System.out.println("a:   " + bin16(a));
        System.out.println("b:   " + bin16(b));
        System.out.println("and: " + bin16(bit_and(a, b)));
        System.out.println("or:  " + bin16(bit_or(a, b)));
        System.out.println("xor: " + bin16(bit_xor(a, b)));
        System.out.println("not: " + bin16(bit_not(a)));
        if (b < 0) {
            System.out.println("Right operand is negative, but all shifts require an unsigned right operand (shift distance).");
            return null;
        }
        System.out.println("shl: " + bin16(shl(a, b)));
        System.out.println("shr: " + bin16(shr(a, b)));
        System.out.println("las: " + bin16(las(a, b)));
        System.out.println("ras: " + bin16(ras(a, b)));
        System.out.println("rol: " + bin16(rol(a, b)));
        System.out.println("ror: " + bin16(ror(a, b)));
    }
    public static void main(String[] args) {
    bitwise(-460, 6);
    }
}
