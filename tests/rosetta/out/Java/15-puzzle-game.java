// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// 15-puzzle-game.mochi
import java.util.*;

public class M15PuzzleGame {
    static List<Integer> board = new ArrayList<>(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0)));
    static List<Integer> solved = new ArrayList<>(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0)));
    static int empty = 15;
    static int moves = 0;
    static boolean quit = false;
    static int randMove() {
        return System.currentTimeMillis() % 4;
    }
    static boolean isSolved() {
        int i = 0;
        while (i < 16) {
            if (!Objects.equals(board.get(i), solved.get(i))) {
                return false;
            }
            i = (int)(i + 1);
        }
        return true;
    }
    static Map<String,Object> isValidMove(int m) {
        if (m == 0) {
            return new IdxOk(empty - 4, empty / 4 > 0);
        }
        if (m == 1) {
            return new IdxOk(empty + 4, empty / 4 < 3);
        }
        if (m == 2) {
            return new IdxOk(empty + 1, empty % 4 < 3);
        }
        if (m == 3) {
            return new IdxOk(empty - 1, empty % 4 > 0);
        }
        return new IdxOk(0, false);
    }
    static boolean doMove(int m) {
        Map<String,Object> r = isValidMove(m);
        if (!((Boolean)r.get("ok"))) {
            return false;
        }
        int i = empty;
        int j = Integer.parseInt(String.valueOf(r.get("idx")));
        List<Integer> tmp = board.get(i);
        board.set(i, board.get(j));
        board.set(j, tmp);
        empty = (int)(j);
        moves = (int)(moves + 1);
        return true;
    }
    static void shuffle(int n) {
        int i = 0;
        while (i < n || isSolved()) {
            if (doMove(randMove())) {
                i = (int)(i + 1);
            }
        }
    }
    static void printBoard() {
        String line = "";
        int i = 0;
        while (i < 16) {
            List<Integer> val = board.get(i);
            if (Objects.equals(val, 0)) {
                line = line + "  .";
            }
            else {
                String s = String.valueOf(val);
                if (val < 10) {
                    line = line + "  " + s;
                }
                else {
                    line = line + " " + s;
                }
            }
            if (Objects.equals(i % 4, 3)) {
                System.out.println(line);
                line = "";
            }
            i = (int)(i + 1);
        }
    }
    static void playOneMove() {
        while (true) {
            System.out.println("Enter move #" + String.valueOf(moves + 1) + " (U, D, L, R, or Q): ");
            String s = scanner.nextLine();
            if (Objects.equals(s, "")) {
                continue;
            }
            String c = s.substring(0, 1);
            int m = 0;
            if (Objects.equals(c, "U") || Objects.equals(c, "u")) {
                m = (int)(0);
            }
            if (!((Boolean)doMove(m))) {
                System.out.println("That is not a valid move at the moment.");
                continue;
            }
            return ;
        }
    }
    static void play() {
        System.out.println("Starting board:");
        while (!quit && Objects.equals(isSolved(), false)) {
            System.out.println("");
            printBoard();
            playOneMove();
        }
        if (isSolved()) {
            System.out.println("You solved the puzzle in " + String.valueOf(moves) + " moves.");
        }
    }
    static void main() {
        shuffle(50);
        play();
    }
    public static void main(String[] args) {
        main();
    }
}
