// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
// continued-fraction.mochi
import java.util.*;

public class ContinuedFraction {
    static Map<String,Integer> newTerm(int a, int b) {
        return new AB(a, b);
    }
    static List<Map<String,Integer>> cfSqrt2(int nTerms) {
        List<Map<String,Integer>> f = Arrays.asList();
        int n = 0;
        while (n < nTerms) {
            f.add(newTerm(2, 1));
            n = (int)(n + 1);
        }
        if (nTerms > 0) {
            ((List)f.get(0)).put("a", 1);
        }
        return f;
    }
    static List<Map<String,Integer>> cfNap(int nTerms) {
        List<Map<String,Integer>> f = Arrays.asList();
        int n = 0;
        while (n < nTerms) {
            f.add(newTerm(n, n - 1));
            n = (int)(n + 1);
        }
        if (nTerms > 0) {
            ((List)f.get(0)).put("a", 2);
        }
        if (nTerms > 1) {
            ((List)f.get(1)).put("b", 1);
        }
        return f;
    }
    static List<Map<String,Integer>> cfPi(int nTerms) {
        List<Map<String,Integer>> f = Arrays.asList();
        int n = 0;
        while (n < nTerms) {
            int g = 2 * n - 1;
            f.add(newTerm(6, g * g));
            n = (int)(n + 1);
        }
        if (nTerms > 0) {
            ((List)f.get(0)).put("a", 3);
        }
        return f;
    }
    static double real(List<Map<String,Integer>> f) {
        double r = 0.000000;
        int i = f.size() - 1;
        while (i > 0) {
            r = ((Number)(Double.parseDouble(String.valueOf(((Integer)((List)f.get(i)).get("b")))))).doubleValue() / ((Number)(((Number)(Double.parseDouble(String.valueOf(((Integer)((List)f.get(i)).get("a")))))).doubleValue() + r)).doubleValue();
            i = (int)(i - 1);
        }
        if (f.size() > 0) {
            r = r + ((Number)(Double.parseDouble(String.valueOf(((Integer)((List)f.get(0)).get("a")))))).doubleValue();
        }
        return r;
    }
    static void main() {
        System.out.println("sqrt2: " + String.valueOf(real(cfSqrt2(20))));
        System.out.println("nap:   " + String.valueOf(real(cfNap(20))));
        System.out.println("pi:    " + String.valueOf(real(cfPi(20))));
    }
    public static void main(String[] args) {
        main();
    }
}
