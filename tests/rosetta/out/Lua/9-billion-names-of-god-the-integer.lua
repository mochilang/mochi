-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:31:20Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __append(lst, v)
    local out = {}
    if lst then for i = 1, #lst do out[#out+1] = lst[i] end end
    out[#out+1] = v
    return out
end
function __count(v)
    if type(v) == 'table' then
        if v.items ~= nil then return #v.items end
        if v[1] ~= nil or #v > 0 then return #v end
        local n = 0
        for _ in pairs(v) do n = n + 1 end
        return n
    elseif type(v) == 'string' then
        return #v
    else
        error('count() expects list or group')
    end
end
function __div(a, b)
    if math.type and math.type(a) == 'integer' and math.type(b) == 'integer' then
        return a // b
    end
    return a / b
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __index(obj, i)
    if type(obj) == 'string' then
        return __indexString(obj, i)
    elseif type(obj) == 'table' then
        if obj[1] ~= nil or #obj > 0 then
            return obj[(i)+1]
        else
            return obj[i]
        end
    else
        error('cannot index')
    end
end
function __indexString(s, i)
    local len = #s
    if i < 0 then
        i = len + i + 1
    else
        i = i + 1
    end
    if i < 1 or i > len then error('index out of range') end
    return string.sub(s, i, i)
end
function __slice(obj, i, j)
    if i == nil then i = 0 end
    if type(obj) == 'string' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        return string.sub(obj, i+1, j)
    elseif type(obj) == 'table' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        local out = {}
        for k = i+1, j do
            out[#out+1] = obj[k]
        end
        return out
    else
        return {}
    end
end
function bigTrim(a)
    local n = __count(a)
    while ((n > 1) and __eq(__index(a, (n - 1)), 0)) do
        a = __slice(a, 0, (n - 1))
        n = (n - 1)
    end
    return a
end

function bigFromInt(x)
    if (x == 0) then
        return {0}
    end
    local digits = {}
    local n = x
    while (n > 0) do
        digits = __append(digits, (n % 10))
        n = __div(n, 10)
    end
    return digits
end

function bigAdd(a, b)
    local res = {}
    local carry = 0
    local i = 0
    while (((i < __count(a)) or (i < __count(b))) or (carry > 0)) do
        local av = 0
        if (i < __count(a)) then
            av = __index(a, i)
        end
        local bv = 0
        if (i < __count(b)) then
            bv = __index(b, i)
        end
        local s = __add(__add(av, bv), carry)
        res = __append(res, (s % 10))
        carry = __div(s, 10)
        i = __add(i, 1)
    end
    return bigTrim(res)
end

function bigSub(a, b)
    local res = {}
    local borrow = 0
    local i = 0
    while (i < __count(a)) do
        local av = __index(a, i)
        local bv = 0
        if (i < __count(b)) then
            bv = __index(b, i)
        end
        local diff = ((av - bv) - borrow)
        if (diff < 0) then
            diff = __add(diff, 10)
            borrow = 1
        else
            borrow = 0
        end
        res = __append(res, diff)
        i = __add(i, 1)
    end
    return bigTrim(res)
end

function bigToString(a)
    local s = ""
    local i = (__count(a) - 1)
    while (i >= 0) do
        s = __add(s, tostring(__index(a, i)))
        i = (i - 1)
    end
    return s
end

function minInt(a, b)
    if (a < b) then
        return a
    else
        return b
    end
end

function cumu(n)
    local cache = {{bigFromInt(1)}}
    local y = 1
    while (y <= n) do
        local row = {bigFromInt(0)}
        local x = 1
        while (x <= y) do
            local val = __index(__index(cache, (y - x)), minInt(x, (y - x)))
            row = __append(row, bigAdd(__index(row, (__count(row) - 1)), val))
            x = (x + 1)
        end
        cache = __append(cache, row)
        y = __add(y, 1)
    end
    return __index(cache, n)
end

function row(n)
    local e = cumu(n)
    local out = {}
    local i = 0
    while (i < n) do
        local diff = bigSub(__index(e, __add(i, 1)), __index(e, i))
        out = __append(out, bigToString(diff))
        i = __add(i, 1)
    end
    return out
end

print("rows:")
x = 1
while (x < 11) do
    local r = row(x)
    local line = ""
    local i = 0
    while (i < __count(r)) do
        line = (__add(__add(line, " "), __index(r, i)) .. " ")
        i = __add(i, 1)
    end
    print(line)
    x = (x + 1)
end
print("")
print("sums:")
for _, num in ipairs({23, 123, 1234}) do
    local r = cumu(num)
    print(((tostring(num) .. " ") .. bigToString(__index(r, (__count(r) - 1)))))
end
