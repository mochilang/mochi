-- Generated by Mochi compiler v0.10.26 on 2025-07-16T11:41:44Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __str(v)
    local t = type(v)
    if t == 'table' then
        if v[1] ~= nil or #v > 0 then
            local parts = {}
            for i=1,#v do parts[#parts+1] = __str(v[i]) end
            return '['..table.concat(parts, ' ')..']'
        else
            local keys = {}
            for k in pairs(v) do keys[#keys+1] = k end
            table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
            local parts = {}
            for _,k in ipairs(keys) do parts[#parts+1] = __str(k)..':'..__str(v[k]) end
            return '{'..table.concat(parts, ',')..'}'
        end
    else
        return tostring(v)
    end
end
door = 1
incrementer = 0
for current = 1, (101)-1 do
    local line = (("Door " .. __str(current)) .. " ")
    if __eq(current, door) then
        line = __add(line, "Open")
        incrementer = (incrementer + 1)
        door = ((door + (2 * incrementer)) + 1)
    else
        line = __add(line, "Closed")
    end
    print(__str(line))
end
