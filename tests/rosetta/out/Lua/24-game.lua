-- Generated by Mochi compiler v0.10.30 on 2025-07-19T00:33:19Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __append(lst, v)
    local out = {}
    if lst then for i = 1, #lst do out[#out+1] = lst[i] end end
    out[#out+1] = v
    return out
end
function __div(a, b)
    if math.type and math.type(a) == 'integer' and math.type(b) == 'integer' then
        return a // b
    end
    return a / b
end
function __index(obj, i)
    if type(obj) == 'string' then
        return __indexString(obj, i)
    elseif type(obj) == 'table' then
        if obj[1] ~= nil or #obj > 0 then
            return obj[(i)+1]
        else
            return obj[i]
        end
    else
        error('cannot index')
    end
end
function __indexString(s, i)
    local len = #s
    if i < 0 then
        i = len + i + 1
    else
        i = i + 1
    end
    if i < 1 or i > len then error('index out of range') end
    return string.sub(s, i, i)
end
function __input()
    local line = io.read('*l')
    if line == nil then return '' end
    return line
end
function int(v)
    return math.floor(v)
end
function __slice(obj, i, j)
    if i == nil then i = 0 end
    if type(obj) == 'string' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        return string.sub(obj, i+1, j)
    elseif type(obj) == 'table' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        local out = {}
        for k = i+1, j do
            out[#out+1] = obj[k]
        end
        return out
    else
        return {}
    end
end
function randDigit()
    return (((os.time() % 9)) + 1)
end

function main()
    local digits = {};
    for i = 0, (4)-1 do
        digits = __append(digits, randDigit());
    end
    local numstr = "";
    for i = 0, (4)-1 do
        numstr = __add(numstr, tostring(__index(digits, i)));
    end
    print(tostring((__add("Your numbers: ", numstr) .. "\n")));
    print("Enter RPN: ");
    local expr = __input();
    if (#expr ~= 7) then
        print("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)");
        return nil
    end
    local stack = {};
    local i = 0;
    local valid = true;
    while (i < #expr) do
        local ch = __slice(expr, i, __add(i, 1));
        if ((ch >= "0") and (ch <= "9")) then
            if (#digits == 0) then
                print("too many numbers.");
                return nil
            end
            local j = 0;
            while (__index(digits, j) ~= (int(ch) - int("0"))) do
                j = __add(j, 1);
                if (j == #digits) then
                    print("wrong numbers.");
                    return nil
                end
            end
            digits = __add(__slice(digits, 0, j), __slice(digits, __add(j, 1), nil));
            stack = __append(stack, float((int(ch) - int("0"))));
        else
            if (#stack < 2) then
                print("invalid expression syntax.");
                valid = false;
                break
            end
            local b = __index(stack, (#stack - 1));
            local a = __index(stack, (#stack - 2));
            if (ch == "+") then
                stack[(#stack - 2)] = __add(a, b);
            elseif (ch == "-") then
                stack[(#stack - 2)] = (a - b);
            elseif (ch == "*") then
                stack[(#stack - 2)] = (a * b);
            elseif (ch == "/") then
                stack[(#stack - 2)] = __div(a, b);
            else
                print(tostring(__add(ch, " invalid.")));
                valid = false;
                break
            end
            stack = __slice(stack, 0, (#stack - 1));
        end
        i = __add(i, 1);
    end
    if valid then
        if (math.abs((__index(stack, 0) - 24.0)) > 0.000001) then
            print((("incorrect. " .. tostring(__index(stack, 0))) .. " != 24"));
        else
            print("correct.");
        end
    end
end

main();
