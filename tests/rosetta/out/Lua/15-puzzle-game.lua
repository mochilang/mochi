-- Generated by Mochi compiler v0.10.30 on 2025-07-18T17:00:26Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __input()
    local line = io.read('*l')
    if line == nil then return '' end
    return line
end
function int(v)
    return math.floor(v)
end
function __slice(obj, i, j)
    if i == nil then i = 0 end
    if type(obj) == 'string' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        return string.sub(obj, i+1, j)
    elseif type(obj) == 'table' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        local out = {}
        for k = i+1, j do
            out[#out+1] = obj[k]
        end
        return out
    else
        return {}
    end
end
function randMove()
    return (os.time() % 4)
end

function isSolved()
    local i = 0;
    while (i < 16) do
        if (board[(i)+1] ~= solved[(i)+1]) then
            return false
        end
        i = __add(i, 1);
    end
    return true
end

function isValidMove(m)
    if (m == 0) then
        return {["idx"]=(empty - 4), ["ok"]=((empty // 4) > 0)}
    end
    if (m == 1) then
        return {["idx"]=(empty + 4), ["ok"]=((empty // 4) < 3)}
    end
    if (m == 2) then
        return {["idx"]=(empty + 1), ["ok"]=((empty % 4) < 3)}
    end
    if (m == 3) then
        return {["idx"]=(empty - 1), ["ok"]=((empty % 4) > 0)}
    end
    return {["idx"]=0, ["ok"]=false}
end

function doMove(m)
    local r = isValidMove(m);
    if not r["ok"] then
        return false
    end
    local i = empty;
    local j = int(r["idx"]);
    local tmp = board[(i)+1];
    board[(i)+1] = board[(j)+1];
    board[(j)+1] = tmp;
    empty = j;
    moves = (moves + 1);
    return true
end

function shuffle(n)
    local i = 0;
    while ((i < n) or isSolved()) do
        if doMove(randMove()) then
            i = __add(i, 1);
        end
    end
end

function printBoard()
    local line = "";
    local i = 0;
    while (i < 16) do
        local val = board[(i)+1];
        if (val == 0) then
            line = __add(line, "  .");
        else
            local s = tostring(val);
            if (val < 10) then
                line = __add(__add(line, "  "), s);
            else
                line = __add(__add(line, " "), s);
            end
        end
        if ((i % 4) == 3) then
            print(tostring(line));
            line = "";
        end
        i = __add(i, 1);
    end
end

function playOneMove()
    while true do
        ::__continue0::
        print((("Enter move #" .. string.format('%.15g', (moves + 1))) .. " (U, D, L, R, or Q): "));
        local s = __input();
        if (s == "") then
            goto __continue0
        end
        local c = __slice(s, 0, 1);
        local m = 0;
        if ((c == "U") or (c == "u")) then
            m = 0;
        elseif ((c == "D") or (c == "d")) then
            m = 1;
        elseif ((c == "R") or (c == "r")) then
            m = 2;
        elseif ((c == "L") or (c == "l")) then
            m = 3;
        elseif ((c == "Q") or (c == "q")) then
            print((("Quiting after " .. string.format('%.15g', moves)) .. " moves."));
            quit = true;
            return nil
        else
            print(((("Please enter \"U\", \"D\", \"L\", or \"R\" to move the empty cell\n" .. "up, down, left, or right. You can also enter \"Q\" to quit.\n") .. "Upper or lowercase is accepted and only the first non-blank\n") .. "character is important (i.e. you may enter \"up\" if you like)."));
            goto __continue0
        end
        if not doMove(m) then
            print("That is not a valid move at the moment.");
            goto __continue0
        end
        return nil
    end
end

function play()
    print("Starting board:");
    while ((not quit and (not isSolved()))) do
        print("");
        printBoard();
        playOneMove();
    end
    if isSolved() then
        print((("You solved the puzzle in " .. string.format('%.15g', moves)) .. " moves."));
    end
end

function main()
    shuffle(50);
    play();
end

board = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0};
solved = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0};
empty = 15;
moves = 0;
quit = false;
main();
