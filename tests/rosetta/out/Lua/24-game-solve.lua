-- Generated by Mochi compiler v0.10.30 on 2025-07-19T00:33:19Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __append(lst, v)
    local out = {}
    if lst then for i = 1, #lst do out[#out+1] = lst[i] end end
    out[#out+1] = v
    return out
end
function __index(obj, i)
    if type(obj) == 'string' then
        return __indexString(obj, i)
    elseif type(obj) == 'table' then
        if obj[1] ~= nil or #obj > 0 then
            return obj[(i)+1]
        else
            return obj[i]
        end
    else
        error('cannot index')
    end
end
function __indexString(s, i)
    local len = #s
    if i < 0 then
        i = len + i + 1
    else
        i = i + 1
    end
    if i < 1 or i > len then error('index out of range') end
    return string.sub(s, i, i)
end
function newNum(n)
    return {["op"]=OP_NUM, ["value"]={["num"]=n, ["denom"]=1}}
end

function exprEval(x)
    if (x["op"] == OP_NUM) then
        return x["value"]
    end
    local l = exprEval(x["left"]);
    local r = exprEval(x["right"]);
    if (x["op"] == OP_ADD) then
        return {["num"]=__add((l["num"] * r["denom"]), (l["denom"] * r["num"])), ["denom"]=(l["denom"] * r["denom"])}
    end
    if (x["op"] == OP_SUB) then
        return {["num"]=((l["num"] * r["denom"]) - (l["denom"] * r["num"])), ["denom"]=(l["denom"] * r["denom"])}
    end
    if (x["op"] == OP_MUL) then
        return {["num"]=(l["num"] * r["num"]), ["denom"]=(l["denom"] * r["denom"])}
    end
    return {["num"]=(l["num"] * r["denom"]), ["denom"]=(l["denom"] * r["num"])}
end

function exprString(x)
    if (x["op"] == OP_NUM) then
        return tostring(x["value"]["num"])
    end
    local ls = exprString(x["left"]);
    local rs = exprString(x["right"]);
    local opstr = "";
    if (x["op"] == OP_ADD) then
        opstr = " + ";
    elseif (x["op"] == OP_SUB) then
        opstr = " - ";
    elseif (x["op"] == OP_MUL) then
        opstr = " * ";
    else
        opstr = " / ";
    end
    return (__add(__add(__add("(", ls), opstr), rs) .. ")")
end

function solve(xs)
    if (#xs == 1) then
        local f = exprEval(__index(xs, 0));
        if ((f["denom"] ~= 0) and (f["num"] == (f["denom"] * goal))) then
            print(exprString(__index(xs, 0)));
            return true
        end
        return false
    end
    local i = 0;
    while (i < #xs) do
        local j = __add(i, 1);
        while (j < #xs) do
            local rest = {};
            local k = 0;
            while (k < #xs) do
                if ((k ~= i) and (k ~= j)) then
                    rest = __append(rest, __index(xs, k));
                end
                k = __add(k, 1);
            end
            local a = __index(xs, i);
            local b = __index(xs, j);
            for _, op in ipairs({OP_ADD, OP_SUB, OP_MUL, OP_DIV}) do
                local node = {["op"]=op, ["left"]=a, ["right"]=b};
                if solve(__append(rest, node)) then
                    return true
                end
            end
            local node = {["op"]=OP_SUB, ["left"]=b, ["right"]=a};
            if solve(__append(rest, node)) then
                return true
            end
            node = {["op"]=OP_DIV, ["left"]=b, ["right"]=a};
            if solve(__append(rest, node)) then
                return true
            end
            j = __add(j, 1);
        end
        i = __add(i, 1);
    end
    return false
end

function main()
    local iter = 0;
    while (iter < 10) do
        local cards = {};
        local i = 0;
        while (i < n_cards) do
            local n = (((os.time() % ((digit_range - 1)))) + 1);
            cards = __append(cards, newNum(n));
            print((" " .. tostring(n)));
            i = __add(i, 1);
        end
        print(":  ");
        if not solve(cards) then
            print("No solution");
        end
        iter = __add(iter, 1);
    end
end

OP_NUM = 0;
OP_ADD = 1;
OP_SUB = 2;
OP_MUL = 3;
OP_DIV = 4;
n_cards = 4;
goal = 24;
digit_range = 9;
main();
