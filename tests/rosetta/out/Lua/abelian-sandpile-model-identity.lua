-- Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:44Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __append(lst, v)
    local out = {}
    if lst then for i = 1, #lst do out[#out+1] = lst[i] end end
    out[#out+1] = v
    return out
end
function __index(obj, i)
    if type(obj) == 'string' then
        return __indexString(obj, i)
    elseif type(obj) == 'table' then
        if obj[1] ~= nil or #obj > 0 then
            return obj[(i)+1]
        else
            return obj[i]
        end
    else
        error('cannot index')
    end
end
function __indexString(s, i)
    local len = #s
    if i < 0 then
        i = len + i + 1
    else
        i = i + 1
    end
    if i < 1 or i > len then error('index out of range') end
    return string.sub(s, i, i)
end
function __iter(obj)
    if type(obj) == 'table' then
        if obj[1] ~= nil or #obj > 0 then
            local i = 0
            local n = #obj
            return function()
                i = i + 1
                if i <= n then return i, obj[i] end
            end
        else
            return pairs(obj)
        end
    elseif type(obj) == 'string' then
        local i = 0
        local n = #obj
        return function()
            i = i + 1
            if i <= n then return i, string.sub(obj, i, i) end
        end
    else
        return function() return nil end
    end
end
function neighborsList()
    return {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4, 6}, {1, 3, 5, 7}, {2, 4, 8}, {3, 7}, {4, 6, 8}, {5, 7}}
end

function plus(a, b)
    local res = {}
    local i = 0
    while (i < #a) do
        res = __append(res, __add(__index(a, i), __index(b, i)))
        i = __add(i, 1)
    end
    return res
end

function isStable(p)
    for _, v in __iter(p) do
        if (v > 3) then
            return false
        end
    end
    return true
end

function topple(p)
    local neighbors = neighborsList()
    local i = 0
    while (i < #p) do
        if (__index(p, i) > 3) then
            p[i] = (__index(p, i) - 4)
            local nbs = __index(neighbors, i)
            for _, j in __iter(nbs) do
                p[j] = __add(__index(p, j), 1)
            end
            return 0
        end
        i = __add(i, 1)
    end
    return 0
end

function pileString(p)
    local s = ""
    local r = 0
    while (r < 3) do
        local c = 0
        while (c < 3) do
            s = (__add(s, tostring(__index(p, __add((3 * r), c)))) .. " ")
            c = __add(c, 1)
        end
        s = __add(s, "\n")
        r = __add(r, 1)
    end
    return s
end

print("Avalanche of topplings:\n")
s4 = {4, 3, 3, 3, 1, 2, 0, 2, 3}
print(pileString(s4))
while not isStable(s4) do
    topple(s4)
    print(pileString(s4))
end
print("Commutative additions:\n")
s1 = {1, 2, 0, 2, 1, 1, 0, 1, 3}
s2 = {2, 1, 3, 1, 0, 1, 0, 1, 0}
s3_a = plus(s1, s2)
while not isStable(s3_a) do
    topple(s3_a)
end
s3_b = plus(s2, s1)
while not isStable(s3_b) do
    topple(s3_b)
end
print(((((pileString(s1) .. "\nplus\n\n") .. pileString(s2)) .. "\nequals\n\n") .. pileString(s3_a)))
print(((((("and\n\n" .. pileString(s2)) .. "\nplus\n\n") .. pileString(s1)) .. "\nalso equals\n\n") .. pileString(s3_b)))
print("Addition of identity sandpile:\n")
s3 = {3, 3, 3, 3, 3, 3, 3, 3, 3}
s3_id = {2, 1, 2, 1, 0, 1, 2, 1, 2}
s4b = plus(s3, s3_id)
while not isStable(s4b) do
    topple(s4b)
end
print(((((pileString(s3) .. "\nplus\n\n") .. pileString(s3_id)) .. "\nequals\n\n") .. pileString(s4b)))
print("Addition of identities:\n")
s5 = plus(s3_id, s3_id)
while not isStable(s5) do
    topple(s5)
end
print(((((pileString(s3_id) .. "\nplus\n\n") .. pileString(s3_id)) .. "\nequals\n\n") .. pileString(s5)))
