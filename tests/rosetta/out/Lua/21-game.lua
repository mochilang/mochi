-- Generated by Mochi compiler v0.10.26 on 2025-07-16T12:28:39Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __index(obj, i)
    if type(obj) == 'string' then
        return __indexString(obj, i)
    elseif type(obj) == 'table' then
        if obj[1] ~= nil or #obj > 0 then
            return obj[(i)+1]
        else
            return obj[i]
        end
    else
        error('cannot index')
    end
end
function __indexString(s, i)
    local len = #s
    if i < 0 then
        i = len + i + 1
    else
        i = i + 1
    end
    if i < 1 or i > len then error('index out of range') end
    return string.sub(s, i, i)
end
function __input()
    local line = io.read('*l')
    if line == nil then return '' end
    return line
end
function __print(v)
    if type(v) == 'table' and (v[1] ~= nil or #v > 0) and type(v[1]) == 'table' then
        local parts = {}
        for i=1,#v do parts[#parts+1] = __str(v[i]) end
        print(table.concat(parts, ' '))
    else
        print(__str(v))
    end
end
function __slice(obj, i, j)
    if i == nil then i = 0 end
    if type(obj) == 'string' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        return string.sub(obj, i+1, j)
    elseif type(obj) == 'table' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        local out = {}
        for k = i+1, j do
            out[#out+1] = obj[k]
        end
        return out
    else
        return {}
    end
end
function __str(v)
    local t = type(v)
    if t == 'table' then
        if v[1] ~= nil or #v > 0 then
            local parts = {}
            for i=1,#v do parts[#parts+1] = __str(v[i]) end
            return '['..table.concat(parts, ' ')..']'
        else
            local keys = {}
            for k in pairs(v) do keys[#keys+1] = k end
            table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
            local parts = {}
            for _,k in ipairs(keys) do parts[#parts+1] = __str(k)..':'..__str(v[k]) end
            return '{'..table.concat(parts, ',')..'}'
        end
    else
        return tostring(v)
    end
end
function parseIntStr(str)
    local i = 0
    local neg = false
    if ((#str > 0) and __eq(__slice(str, 0, 1), "-")) then
        neg = true
        i = 1
    end
    local n = 0
    local digits = {["0"]=0, ["1"]=1, ["2"]=2, ["3"]=3, ["4"]=4, ["5"]=5, ["6"]=6, ["7"]=7, ["8"]=8, ["9"]=9}
    while (i < #str) do
        n = __add((n * 10), __index(digits, __slice(str, i, __add(i, 1))))
        i = __add(i, 1)
    end
    if neg then
        n = -n
    end
    return n
end

function main()
    local total = 0
    local computer = ((os.time()*1000000000 % 2) == 0)
    __print("Enter q to quit at any time\n")
    if computer then
        __print("The computer will choose first")
    else
        __print("You will choose first")
    end
    __print("\n\nRunning total is now 0\n\n")
    local round = 1
    local done = false
    while not done do
        __print((("ROUND " .. __str(round)) .. ":\n\n"))
        local i = 0
        while ((i < 2) and (not done)) do
            if computer then
                local choice = 0
                if (total < 18) then
                    choice = ((os.time()*1000000000 % 3) + 1)
                else
                    choice = (21 - total)
                end
                total = __add(total, choice)
                __print(("The computer chooses " .. __str(choice)))
                __print(("Running total is now " .. __str(total)))
                if __eq(total, 21) then
                    __print("\nSo, commiserations, the computer has won!")
                    done = true
                end
            else
                while true do
                    __print("Your choice 1 to 3 : ")
                    local line = __input()
                    if (__eq(line, "q") or __eq(line, "Q")) then
                        __print("OK, quitting the game")
                        done = true
                        break
                    end
                    local num = parseIntStr(line)
                    if ((num < 1) or (num > 3)) then
                        if (__add(total, num) > 21) then
                            __print("Too big, try again")
                        else
                            __print("Out of range, try again")
                        end
                        goto __continue2
                    end
                    if (__add(total, num) > 21) then
                        __print("Too big, try again")
                        goto __continue2
                    end
                    total = __add(total, num)
                    __print(("Running total is now " .. __str(total)))
                    break
                    ::__continue2::
                end
                if __eq(total, 21) then
                    __print("\nSo, congratulations, you've won!")
                    done = true
                end
            end
            __print("\n")
            computer = not computer
            i = __add(i, 1)
            ::__continue1::
        end
        round = __add(round, 1)
        ::__continue0::
    end
end

main()
