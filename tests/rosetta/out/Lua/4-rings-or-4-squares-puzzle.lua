-- Generated by Mochi compiler v0.10.30 on 2025-07-19T00:33:20Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __append(lst, v)
    local out = {}
    if lst then for i = 1, #lst do out[#out+1] = lst[i] end end
    out[#out+1] = v
    return out
end
function __index(obj, i)
    if type(obj) == 'string' then
        return __indexString(obj, i)
    elseif type(obj) == 'table' then
        if obj[1] ~= nil or #obj > 0 then
            return obj[(i)+1]
        else
            return obj[i]
        end
    else
        error('cannot index')
    end
end
function __indexString(s, i)
    local len = #s
    if i < 0 then
        i = len + i + 1
    else
        i = i + 1
    end
    if i < 1 or i > len then error('index out of range') end
    return string.sub(s, i, i)
end
function validComb(a, b, c, d, e, f, g)
    local square1 = __add(a, b);
    local square2 = __add(__add(b, c), d);
    local square3 = __add(__add(d, e), f);
    local square4 = __add(f, g);
    return (((square1 == square2) and (square2 == square3)) and (square3 == square4))
end

function isUnique(a, b, c, d, e, f, g)
    local nums = {a, b, c, d, e, f, g};
    local i = 0;
    while (i < #nums) do
        local j = __add(i, 1);
        while (j < #nums) do
            if (__index(nums, i) == __index(nums, j)) then
                return false
            end
            j = __add(j, 1);
        end
        i = __add(i, 1);
    end
    return true
end

function getCombs(low, high, unique)
    local valid = {};
    local count = 0;
    for b = low, ((__add(high, 1)))-1 do
        ::__continue0::
        for c = low, ((__add(high, 1)))-1 do
            ::__continue1::
            for d = low, ((__add(high, 1)))-1 do
                ::__continue2::
                local s = __add(__add(b, c), d);
                for e = low, ((__add(high, 1)))-1 do
                    ::__continue3::
                    for f = low, ((__add(high, 1)))-1 do
                        ::__continue4::
                        local a = (s - b);
                        local g = (s - f);
                        if ((a < low) or (a > high)) then
                            goto __continue4
                        end
                        if ((g < low) or (g > high)) then
                            goto __continue4
                        end
                        if (__add(__add(d, e), f) ~= s) then
                            goto __continue4
                        end
                        if (__add(f, g) ~= s) then
                            goto __continue4
                        end
                        if (not unique or isUnique(a, b, c, d, e, f, g)) then
                            valid = __append(valid, {a, b, c, d, e, f, g});
                            count = __add(count, 1);
                        end
                    end
                end
            end
        end
    end
    return {["count"]=count, ["list"]=valid}
end

r1 = getCombs(1, 7, true);
print((tostring(r1["count"]) .. " unique solutions in 1 to 7"));
print(tostring(r1["list"]));
r2 = getCombs(3, 9, true);
print((tostring(r2["count"]) .. " unique solutions in 3 to 9"));
print(tostring(r2["list"]));
r3 = getCombs(0, 9, false);
print((tostring(r3["count"]) .. " non-unique solutions in 0 to 9"));
