-- Generated by Mochi compiler v0.10.30 on 2025-07-18T18:44:04Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function node(cl, le, aa, ri)
    return {["cl"]=cl, ["le"]=le, ["aa"]=aa, ["ri"]=ri}
end

function treeString(t)
    if (t == nil) then
        return "E"
    end
    local m = t;
    return (((((((__add("T(", m["cl"]) .. ", ") .. treeString(m["le"])) .. ", ") .. tostring(m["aa"])) .. ", ") .. treeString(m["ri"])) .. ")")
end

function balance(t)
    if (t == nil) then
        return t
    end
    local m = t;
    if (m["cl"] ~= "B") then
        return t
    end
    local le = m["le"];
    local ri = m["ri"];
    if (le ~= nil) then
        local leMap = le;
        if (leMap["cl"] == "R") then
            local lele = leMap["le"];
            if (lele ~= nil) then
                local leleMap = lele;
                if (leleMap["cl"] == "R") then
                    return node("R", node("B", leleMap["le"], leleMap["aa"], leleMap["ri"]), leMap["aa"], node("B", leMap["ri"], m["aa"], ri))
                end
            end
            local leri = leMap["ri"];
            if (leri ~= nil) then
                local leriMap = leri;
                if (leriMap["cl"] == "R") then
                    return node("R", node("B", leMap["le"], leMap["aa"], leriMap["le"]), leriMap["aa"], node("B", leriMap["ri"], m["aa"], ri))
                end
            end
        end
    end
    if (ri ~= nil) then
        local riMap = ri;
        if (riMap["cl"] == "R") then
            local rile = riMap["le"];
            if (rile ~= nil) then
                local rileMap = rile;
                if (rileMap["cl"] == "R") then
                    return node("R", node("B", m["le"], m["aa"], rileMap["le"]), rileMap["aa"], node("B", rileMap["ri"], riMap["aa"], riMap["ri"]))
                end
            end
            local riri = riMap["ri"];
            if (riri ~= nil) then
                local ririMap = riri;
                if (ririMap["cl"] == "R") then
                    return node("R", node("B", m["le"], m["aa"], riMap["le"]), riMap["aa"], node("B", ririMap["le"], ririMap["aa"], ririMap["ri"]))
                end
            end
        end
    end
    return t
end

function ins(tr, x)
    if (tr == nil) then
        return node("R", nil, x, nil)
    end
    if (x < tr["aa"]) then
        return balance(node(tr["cl"], ins(tr["le"], x), tr["aa"], tr["ri"]))
    end
    if (x > tr["aa"]) then
        return balance(node(tr["cl"], tr["le"], tr["aa"], ins(tr["ri"], x)))
    end
    return tr
end

function insert(tr, x)
    local t = ins(tr, x);
    if (t == nil) then
        return nil
    end
    local m = t;
    return node("B", m["le"], m["aa"], m["ri"])
end

tr = nil;
i = 1;
while (i <= 16) do
    tr = insert(tr, i);
    i = (i + 1);
end
print(treeString(tr));
