; Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
(ns main)

(defn _indexList [xs i]
  (let [idx (if (neg? i) (+ i (count xs)) i)]
    (if (or (< idx 0) (>= idx (count xs)))
      (throw (ex-info "index out of range" {}))
      (nth xs idx))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
(declare OP_NUM OP_ADD OP_SUB OP_MUL OP_DIV n_cards goal digit_range)

;; Function newNum takes [n: int] and returns map of string to any
(defn newNum [n]
  (try
    (throw (ex-info "return" {:value {"op" OP_NUM "value" {"num" n "denom" 1}}}))
  (catch clojure.lang.ExceptionInfo e
    (if (= (.getMessage e) "return")
      (:value (ex-data e))
    (throw e)))
  )
)

;; Function exprEval takes [x: map of string to any] and returns map of string to int
(defn exprEval [x]
  (try
    (when (_equal (get x "op") OP_NUM)
      (throw (ex-info "return" {:value (get x "value")}))
    )
    (def l (exprEval (get x "left"))) ;; map of string to int
    (def r (exprEval (get x "right"))) ;; map of string to int
    (when (_equal (get x "op") OP_ADD)
      (throw (ex-info "return" {:value {"num" (+ (* (get l "num") (get r "denom")) (* (get l "denom") (get r "num"))) "denom" (* (get l "denom") (get r "denom"))}}))
    )
    (when (_equal (get x "op") OP_SUB)
      (throw (ex-info "return" {:value {"num" (- (* (get l "num") (get r "denom")) (* (get l "denom") (get r "num"))) "denom" (* (get l "denom") (get r "denom"))}}))
    )
    (when (_equal (get x "op") OP_MUL)
      (throw (ex-info "return" {:value {"num" (* (get l "num") (get r "num")) "denom" (* (get l "denom") (get r "denom"))}}))
    )
    (throw (ex-info "return" {:value {"num" (* (get l "num") (get r "denom")) "denom" (* (get l "denom") (get r "num"))}}))
  (catch clojure.lang.ExceptionInfo e
    (if (= (.getMessage e) "return")
      (:value (ex-data e))
    (throw e)))
  )
)

;; Function exprString takes [x: map of string to any] and returns string
(defn exprString [x]
  (try
    (when (_equal (get x "op") OP_NUM)
      (throw (ex-info "return" {:value (str (get (get x "value") "num"))}))
    )
    (def ls (exprString (get x "left"))) ;; string
    (def rs (exprString (get x "right"))) ;; string
    (def opstr "") ;; string
    (if (_equal (get x "op") OP_ADD)
      (do
        (def opstr " + ") ;; string
      )

    (if (_equal (get x "op") OP_SUB)
      (do
        (def opstr " - ") ;; string
      )

    (if (_equal (get x "op") OP_MUL)
      (do
        (def opstr " * ") ;; string
      )

    (do
      (def opstr " / ") ;; string
    )
    )
    )
    )
    (throw (ex-info "return" {:value (str (str (str (str "(" ls) opstr) rs) ")")}))
  (catch clojure.lang.ExceptionInfo e
    (if (= (.getMessage e) "return")
      (:value (ex-data e))
    (throw e)))
  )
)

;; Function solve takes [xs: list of map of string to any] and returns bool
(defn solve [xs]
  (try
    (when (= (count xs) 1)
      (def f (exprEval (_indexList xs 0))) ;; map of string to int
      (when (and (not (= (get f "denom") 0)) (= (get f "num") (* (get f "denom") goal)))
        (_print (exprString (_indexList xs 0)))
        (throw (ex-info "return" {:value true}))
      )
      (throw (ex-info "return" {:value false}))
    )
    (def i 0) ;; int
    (loop []
      (when (< i (count xs))
        (let [r (try
          (def j (+ i 1)) ;; int
          (loop []
            (when (< j (count xs))
              (let [r (try
                (def rest []) ;; list of map of string to any
                (def k 0) ;; int
                (loop []
                  (when (< k (count xs))
                    (let [r (try
                      (when (and (not (= k i)) (not (= k j)))
                        (def rest (conj rest (_indexList xs k))) ;; list of map of string to any
                      )
                      (def k (+ k 1)) ;; int
                      :next
                    (catch clojure.lang.ExceptionInfo e
                      (cond
                        (= (.getMessage e) "continue") :next
                        (= (.getMessage e) "break") :break
                        :else (throw e))
                      )
                    )]
                  (cond
                    (= r :break) nil
                    (= r :next) (recur)
                  )
                )
              )
            )
            (def a (_indexList xs i)) ;; map of string to any
            (def b (_indexList xs j)) ;; map of string to any
            (loop [_tmp0 (seq [OP_ADD OP_SUB OP_MUL OP_DIV])]
              (when _tmp0
                (let [op (clojure.core/first _tmp0)]
                  (let [r (try
                    (def node {"op" op "left" a "right" b}) ;; map of string to any
                    (when (solve (conj rest node))
                      (throw (ex-info "return" {:value true}))
                    )
                    :next
                  (catch clojure.lang.ExceptionInfo e
                    (cond
                      (= (.getMessage e) "continue") :next
                      (= (.getMessage e) "break") :break
                      :else (throw e))
                    )
                  )]
                (cond
                  (= r :break) nil
                  :else (recur (next _tmp0))
                )
              )
            )
          )
        )
        (def node {"op" OP_SUB "left" b "right" a}) ;; map of string to any
        (when (solve (conj rest node))
          (throw (ex-info "return" {:value true}))
        )
        (def node {"op" OP_DIV "left" b "right" a}) ;; map of string to any
        (when (solve (conj rest node))
          (throw (ex-info "return" {:value true}))
        )
        (def j (+ j 1)) ;; int
        :next
      (catch clojure.lang.ExceptionInfo e
        (cond
          (= (.getMessage e) "continue") :next
          (= (.getMessage e) "break") :break
          :else (throw e))
        )
      )]
    (cond
      (= r :break) nil
      (= r :next) (recur)
    )
  )
)
)
(def i (+ i 1)) ;; int
:next
(catch clojure.lang.ExceptionInfo e
(cond
(= (.getMessage e) "continue") :next
(= (.getMessage e) "break") :break
:else (throw e))
)
)]
(cond
(= r :break) nil
(= r :next) (recur)
)
)
)
)
(throw (ex-info "return" {:value false}))
(catch clojure.lang.ExceptionInfo e
(if (= (.getMessage e) "return")
(:value (ex-data e))
(throw e)))
)
)

;; Function main returns any
(defn main []
(try
(def iter 0) ;; int
(loop []
(when (< iter 10)
(let [r (try
(def cards []) ;; list of map of string to any
(def i 0) ;; int
(loop []
(when (< i n_cards)
(let [r (try
(def n (+ (mod (System/nanoTime) (- digit_range 1)) 1)) ;; int
(def cards (conj cards (newNum n))) ;; list of map of string to any
(_print (str " " (str n)))
(def i (+ i 1)) ;; int
:next
(catch clojure.lang.ExceptionInfo e
(cond
  (= (.getMessage e) "continue") :next
  (= (.getMessage e) "break") :break
  :else (throw e))
)
)]
(cond
(= r :break) nil
(= r :next) (recur)
)
)
)
)
(_print ":  ")
(when (not (solve cards))
(_print "No solution")
)
(def iter (+ iter 1)) ;; int
:next
(catch clojure.lang.ExceptionInfo e
(cond
(= (.getMessage e) "continue") :next
(= (.getMessage e) "break") :break
:else (throw e))
)
)]
(cond
(= r :break) nil
(= r :next) (recur)
)
)
)
)
(catch clojure.lang.ExceptionInfo e
(if (= (.getMessage e) "return")
(:value (ex-data e))
(throw e)))
)
)

(defn -main []
(def OP_NUM 0) ;; int
(def OP_ADD 1) ;; int
(def OP_SUB 2) ;; int
(def OP_MUL 3) ;; int
(def OP_DIV 4) ;; int
(def n_cards 4) ;; int
(def goal 24) ;; int
(def digit_range 9) ;; int
(main )
)

(-main)
