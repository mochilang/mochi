; Generated by Mochi compiler v0.10.26 on 2025-07-16T09:56:38Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(declare door incrementer)

(defn -main []
  (def door 1) ;; int
  (def incrementer 0) ;; int
  (loop [current 1]
    (when (< current 101)
      (let [r (try
        (def line (str (str "Door " (str current)) " ")) ;; string
        (if (_equal current door)
          (do
            (def line (str line "Open")) ;; string
            (def incrementer (+ incrementer 1)) ;; int
            (def door (+ (+ door (* 2 incrementer)) 1)) ;; int
          )

        (do
          (def line (str line "Closed")) ;; string
        )
        )
        (println line)
        :next
      (catch clojure.lang.ExceptionInfo e
        (cond
          (= (.getMessage e) "continue") :next
          (= (.getMessage e) "break") :break
          :else (throw e))
        )
      )]
    (cond
      (= r :break) nil
      :else (recur (inc current))
    )
  )
)
)
)

(-main)
