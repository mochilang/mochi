; Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
(ns main)

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
;; Function bottles takes [n: int] and returns string
(defn bottles [n]
  (try
    (when (= n 0)
      (throw (ex-info "return" {:value "No more bottles"}))
    )
    (when (= n 1)
      (throw (ex-info "return" {:value "1 bottle"}))
    )
    (throw (ex-info "return" {:value (str (str n) " bottles")}))
  (catch clojure.lang.ExceptionInfo e
    (if (= (.getMessage e) "return")
      (:value (ex-data e))
    (throw e)))
  )
)

;; Function main returns any
(defn main []
  (try
    (def main_i 99) ;; int
    (loop []
      (when (> main_i 0)
        (let [r (try
          (_print (str (bottles main_i) " of beer on the wall"))
          (_print (str (bottles main_i) " of beer"))
          (_print "Take one down, pass it around")
          (_print (str (bottles (- main_i 1)) " of beer on the wall"))
          (def main_i (- main_i 1)) ;; int
          :next
        (catch clojure.lang.ExceptionInfo e
          (cond
            (= (.getMessage e) "continue") :next
            (= (.getMessage e) "break") :break
            :else (throw e))
          )
        )]
      (cond
        (= r :break) nil
        (= r :next) (recur)
      )
    )
  )
)
(catch clojure.lang.ExceptionInfo e
(if (= (.getMessage e) "return")
  (:value (ex-data e))
(throw e)))
)
)

(defn -main []
(main )
)

(-main)
