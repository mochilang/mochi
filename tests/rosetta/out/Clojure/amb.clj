; Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
(ns main)

(defn _indexList [xs i]
  (let [idx (if (neg? i) (+ i (count xs)) i)]
    (if (or (< idx 0) (>= idx (count xs)))
      (throw (ex-info "index out of range" {}))
      (nth xs idx))))

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
;; Function amb takes [wordsets: list of list of string, res: list of string, idx: int] and returns bool
(defn amb [wordsets res idx]
  (try
    (when (= idx (count wordsets))
      (throw (ex-info "return" {:value true}))
    )
    (def amb_prev "") ;; string
    (when (> idx 0)
      (def amb_prev (_indexList res (- idx 1))) ;; string
    )
    (def amb_i 0) ;; int
    (loop []
      (when (< amb_i (count (_indexList wordsets idx)))
        (let [r (try
          (def amb_w (_indexList (_indexList wordsets idx) amb_i)) ;; string
          (when (or (= idx 0) (= (.substring amb_prev (- (count amb_prev) 1) (count amb_prev)) (.substring amb_w 0 1)))
            (def res (assoc res idx amb_w)) ;; string
            (when (amb wordsets res (+ idx 1))
              (throw (ex-info "return" {:value true}))
            )
          )
          (def amb_i (+ amb_i 1)) ;; int
          :next
        (catch clojure.lang.ExceptionInfo e
          (cond
            (= (.getMessage e) "continue") :next
            (= (.getMessage e) "break") :break
            :else (throw e))
          )
        )]
      (cond
        (= r :break) nil
        (= r :next) (recur)
      )
    )
  )
)
(throw (ex-info "return" {:value false}))
(catch clojure.lang.ExceptionInfo e
(if (= (.getMessage e) "return")
  (:value (ex-data e))
(throw e)))
)
)

;; Function main returns any
(defn main []
(try
(def main_wordset [["the" "that" "a"] ["frog" "elephant" "thing"] ["walked" "treaded" "grows"] ["slowly" "quickly"]]) ;; list of list of string
(def main_res []) ;; list of string
(def main_i 0) ;; int
(loop []
  (when (< main_i (count main_wordset))
    (let [r (try
      (def main_res (conj main_res "")) ;; list of string
      (def main_i (+ main_i 1)) ;; int
      :next
    (catch clojure.lang.ExceptionInfo e
      (cond
        (= (.getMessage e) "continue") :next
        (= (.getMessage e) "break") :break
        :else (throw e))
      )
    )]
  (cond
    (= r :break) nil
    (= r :next) (recur)
  )
)
)
)
(if (amb main_wordset main_res 0)
(do
(def main_out (str "[" (_indexList main_res 0))) ;; string
(def main_j 1) ;; int
(loop []
  (when (< main_j (count main_res))
    (let [r (try
      (def main_out (str (str main_out " ") (_indexList main_res main_j))) ;; string
      (def main_j (+ main_j 1)) ;; int
      :next
    (catch clojure.lang.ExceptionInfo e
      (cond
        (= (.getMessage e) "continue") :next
        (= (.getMessage e) "break") :break
        :else (throw e))
      )
    )]
  (cond
    (= r :break) nil
    (= r :next) (recur)
  )
)
)
)
(def main_out (str main_out "]")) ;; string
(_print main_out)
)

(do
(_print "No amb found")
)
)
(catch clojure.lang.ExceptionInfo e
(if (= (.getMessage e) "return")
(:value (ex-data e))
(throw e)))
)
)

(defn -main []
(main )
)

(-main)
