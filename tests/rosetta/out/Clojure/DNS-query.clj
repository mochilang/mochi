; Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
(ns main
  (:require
    [net :as net]
  ))

(defn _indexList [xs i]
  (let [idx (if (neg? i) (+ i (count xs)) i)]
    (if (or (< idx 0) (>= idx (count xs)))
      (throw (ex-info "index out of range" {}))
      (nth xs idx))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
(declare res addrs err)

(defn -main []
  (def res ((:LookupHost net) "www.kame.net")) ;; list of any
  (def addrs (_indexList res 0)) ;; any
  (def err (_indexList res 1)) ;; any
  (if (_equal err nil)
    (do
      (_print (str addrs))
    )

  (do
    (_print err)
  )
  )
)

(-main)
