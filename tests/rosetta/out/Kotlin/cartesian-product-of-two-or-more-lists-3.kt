// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}
// Code generated from cartesian-product-of-two-or-more-lists-3.mochi

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Int>
 * @return String
 */
fun listStr(xs: MutableList<Int>): String {
    var s = "["
    var i = 0
    while (i < xs.size) {
        s = s + xs[i].toString()
        if (i < xs.size - 1) {
            s = s + " "
        }
        i = i + 1
    }
    s = s + "]"
    return s
}

/**
 * Auto-generated from Mochi
 * @param lst MutableList<MutableList<Int>>
 * @return String
 */
fun llStr(lst: MutableList<MutableList<Int>>): String {
    var s = "["
    var i = 0
    while (i < lst.size) {
        s = s + listStr(lst[i])
        if (i < lst.size - 1) {
            s = s + " "
        }
        i = i + 1
    }
    s = s + "]"
    return s
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @param b MutableList<Int>
 * @return MutableList<Int>
 */
fun concat(a: MutableList<Int>, b: MutableList<Int>): MutableList<Int> {
    var out: MutableList<Int> = mutableListOf<Int>()
    for (v in a) {
        out = append(out, v)
    }
    for (v in b) {
        out = append(out, v)
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param lists Any
 * @return MutableList<MutableList<Int>>
 */
fun cartN(lists: Any): MutableList<MutableList<Int>> {
    if (toDouble(lists) == toDouble(null)) {
        return mutableListOf<Any?>()
    }
    val a = lists as MutableList<MutableList<Int>>
    if (a.size == 0) {
        return mutableListOf(mutableListOf<Any?>())
    }
    var out: MutableList<MutableList<Int>> = mutableListOf<MutableList<Int>>()
    val rest = cartN(a.subList(1, a.size))
    for (x in a[0]) {
        for (p in rest) {
            out = append(out, concat(mutableListOf(x), p))
        }
    }
    return out
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    println(llStr(cartN(mutableListOf(mutableListOf(1, 2), mutableListOf(3, 4)))))
    println(llStr(cartN(mutableListOf(mutableListOf(3, 4), mutableListOf(1, 2)))))
    println(llStr(cartN(mutableListOf(mutableListOf(1, 2), mutableListOf<Any?>()))))
    println(llStr(cartN(mutableListOf(mutableListOf<Any?>(), mutableListOf(1, 2)))))
    println("")
    println("[")
    for (p in cartN(mutableListOf(mutableListOf(1776, 1789), mutableListOf(7, 12), mutableListOf(4, 14, 23), mutableListOf(0, 1)))) {
        println(" " + listStr(p))
    }
    println("]")
    println(llStr(cartN(mutableListOf(mutableListOf(1, 2, 3), mutableListOf(30), mutableListOf(500, 100)))))
    println(llStr(cartN(mutableListOf(mutableListOf(1, 2, 3), mutableListOf<Any?>(), mutableListOf(500, 100)))))
    println("")
    println(llStr(cartN(null)))
    println(llStr(cartN(mutableListOf<Any?>())))
}

