// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from arena-storage-pool.mochi

/**
 * Auto-generated from Mochi
 * @param p MutableList<Int>
 * @param x Int
 * @return MutableList<Int>
 */
fun poolPut(p: MutableList<Int>, x: Int): MutableList<Int> {
    return append(p, x)
}

/**
 * Auto-generated from Mochi
 * @param p MutableList<Int>
 * @return MutableMap<String, Any>
 */
fun poolGet(p: MutableList<Int>): MutableMap<String, Any> {
    if (p.size == 0) {
        println("pool empty")
        return mutableMapOf("pool" to p, "val" to 0)
    }
    val idx = p.size - 1
    val v = p[idx]
    p = p.subList(0, idx)
    return mutableMapOf("pool" to p, "val" to v)
}

/**
 * Auto-generated from Mochi
 * @param p MutableList<Int>
 * @return MutableList<Int>
 */
fun clearPool(p: MutableList<Int>): MutableList<Int> {
    return mutableListOf<Any?>()
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    var pool: MutableList<Int> = mutableListOf<Int>()
    var i = 1
    var j = 2
    println(i + j.toString())
    pool = poolPut(pool, i)
    pool = poolPut(pool, j)
    i = 0
    j = 0
    val res1 = poolGet(pool)
    pool = (res1["pool"] as Any?) as MutableList<Int>
    i = ((res1["val"] as Any?)).toInt()
    val res2 = poolGet(pool)
    pool = (res2["pool"] as Any?) as MutableList<Int>
    j = ((res2["val"] as Any?)).toInt()
    i = 4
    j = 5
    println(i + j.toString())
    pool = poolPut(pool, i)
    pool = poolPut(pool, j)
    i = 0
    j = 0
    pool = clearPool(pool)
    val res3 = poolGet(pool)
    pool = (res3["pool"] as Any?) as MutableList<Int>
    i = ((res3["val"] as Any?)).toInt()
    val res4 = poolGet(pool)
    pool = (res4["pool"] as Any?) as MutableList<Int>
    j = ((res4["val"] as Any?)).toInt()
    i = 7
    j = 8
    println(i + j.toString())
}

