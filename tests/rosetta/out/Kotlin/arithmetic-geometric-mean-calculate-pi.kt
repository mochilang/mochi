// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun div(a: Any?, b: Any?): Double {
    val x = toDouble(a)
    val y = toDouble(b)
    return if (y == 0.0) 0.0 else x / y
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}
// Code generated from arithmetic-geometric-mean-calculate-pi.mochi

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun abs(x: Double): Double {
    if (x < 0.0) {
        return -x
    }
    return x
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun sqrtApprox(x: Double): Double {
    var guess = x
    var i = 0
    while (i < 20) {
        guess = (guess + x / guess) / 2.0
        i = i + 1
    }
    return guess
}

/**
 * Auto-generated from Mochi
 * @return Double
 */
fun agmPi(): Double {
    var a = 1.0
    var g = 1.0 / sqrtApprox(2.0)
    var sum = 0.0
    var pow = 2.0
    while (abs(a - g) > 0.000000000000001) {
        var t = (a + g) / 2.0
        var u = sqrtApprox(a * g)
        a = t
        g = u
        pow = pow * 2.0
        var diff = a * a - g * g
        sum = sum + diff * pow
    }
    var pi = div(4.0 * a * a, toDouble((1.0 - sum)))
    return pi
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    println(agmPi().toString())
}

