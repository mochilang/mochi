// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// Code generated from averages-median-3.mochi

/**
 * Auto-generated from Mochi
 * @param a MutableList<Double>
 * @param k Int
 * @return Double
 */
fun qsel(a: MutableList<Double>, k: Int): Double {
    var arr = a
    while (arr.size > 1) {
        var px = System.nanoTime().toInt() % arr.size
        var pv = arr[px]
        val last = arr.size - 1
        val tmp = arr[px]
        arr[px] = arr[last]
        arr[last] = tmp
        px = 0
        var i = 0
        while (i < last) {
            val v = arr[i]
            if (v < pv) {
                val tmp2 = arr[px]
                arr[px] = arr[i]
                arr[i] = tmp2
                px = px + 1
            }
            i = i + 1
        }
        if (px == k) {
            return pv
        }
        if (k < px) {
            arr = arr.subList(0, px)
        }
        else {
            val tmp2 = arr[px]
            arr[px] = pv
            arr[last] = tmp2
            arr = arr.subList((px + 1), arr.size)
            k = k - (px + 1)
        }
    }
    return arr[0]
}

/**
 * Auto-generated from Mochi
 * @param list MutableList<Double>
 * @return Double
 */
fun median(list: MutableList<Double>): Double {
    var arr = list
    val half = (((arr.size).toDouble() / (2).toDouble())).toInt()
    val med = qsel(arr, half)
    if (arr.size % 2 == 0) {
        return (med + qsel(arr, half - 1)) / 2.0
    }
    return med
}

fun main() {
    println(median(mutableListOf(3.0, 1.0, 4.0, 1.0)).toString())
    println(median(mutableListOf(3.0, 1.0, 4.0, 1.0, 5.0)).toString())
}
