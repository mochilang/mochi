// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from benfords-law.mochi

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun floorf(x: Double): Double {
    return ((x).toInt()) as Double
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param ch String
 * @return Int
 */
fun indexOf(s: String, ch: String): Int {
    var i = 0
    while (i < s.length) {
        if (s.substring(i, i + 1) == ch) {
            return i
        }
        i = i + 1
    }
    return -1
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return String
 */
fun fmtF3(x: Double): String {
    var y = floorf(x * 1000.0 + 0.5) / 1000.0
    var s = y.toString()
    var dot = indexOf(s, ".")
    if (dot == 0 - 1) {
        s = s + ".000"
    }
    else {
        var decs = s.length - dot - 1
        if (decs > 3) {
            s = s.substring(0, dot + 4)
        }
        else {
            while (decs < 3) {
                s = s + "0"
                decs = decs + 1
            }
        }
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @param width Int
 * @return String
 */
fun padFloat3(x: Double, width: Int): String {
    var s = fmtF3(x)
    while (s.length < width) {
        s = " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @return MutableList<Double>
 */
fun fib1000(): MutableList<Double> {
    var a = 0.0
    var b = 1.0
    var res: MutableList<Double> = mutableListOf<Double>()
    var i = 0
    while (i < 1000) {
        res = append(res, b)
        var t = b
        b = b + a
        a = t
        i = i + 1
    }
    return res
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Int
 */
fun leadingDigit(x: Double): Int {
    if (x < 0.0) {
        x = -x
    }
    while (x >= 10.0) {
        x = x / 10.0
    }
    while (x > 0.0 && x < 1.0) {
        x = x * 10.0
    }
    return (x).toInt()
}

/**
 * Auto-generated from Mochi
 * @param nums MutableList<Double>
 * @param title String
 */
fun show(nums: MutableList<Double>, title: String): Unit {
    var counts = mutableListOf(0, 0, 0, 0, 0, 0, 0, 0, 0)
    for (n in nums) {
        val d = leadingDigit(n)
        if (d >= 1 && d <= 9) {
            counts[d - 1] = counts[d - 1] + 1
        }
    }
    val preds = mutableListOf(0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046)
    val total = nums.size
    println(title)
    println("Digit  Observed  Predicted")
    var i = 0
    while (i < 9) {
        val obs = ((counts[i] as Int) as Double) / (total as Double)
        var line = "  " + i + 1.toString() + "  " + padFloat3(obs, 9) + "  " + padFloat3(preds[i], 8)
        println(line)
        i = i + 1
    }
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    show(fib1000(), "First 1000 Fibonacci numbers")
}

