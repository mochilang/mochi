// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}
// Code generated from averages-pythagorean-means.mochi

/**
 * Auto-generated from Mochi
 * @param base Double
 * @param exp Int
 * @return Double
 */
fun powf(base: Double, exp: Int): Double {
    var result = 1.0
    var i = 0
    while (i < exp) {
        result = result * base
        i = i + 1
    }
    return result
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @param n Int
 * @return Double
 */
fun nthRoot(x: Double, n: Int): Double {
    var low = 0.0
    var high = x
    var i = 0
    while (i < 60) {
        val mid = (low + high) / 2.0
        if (powf(mid, n) > x) {
            high = mid
        }
        else {
            low = mid
        }
        i = i + 1
    }
    return low
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    var sum = 0.0
    var sumRecip = 0.0
    var prod = 1.0
    var n = 1
    while (n <= 10) {
        val f = n as Double
        sum = sum + f
        sumRecip = sumRecip + 1.0 / f
        prod = prod * f
        n = n + 1
    }
    val count = 10.0
    val a = sum / count
    val g = nthRoot(prod, 10)
    val h = count / sumRecip
    println("A: " + a.toString() + " G: " + g.toString() + " H: " + h.toString())
    println("A >= G >= H: " + toDouble(a) >= g && g >= toDouble(h).toString())
}

