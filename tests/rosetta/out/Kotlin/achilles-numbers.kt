// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// Code generated from achilles-numbers.mochi

var pps: MutableMap<Int, Boolean> = mutableMapOf<Int, Boolean>()

/**
 * Auto-generated from Mochi
 * @param exp Int
 * @return Int
 */
fun pow10(exp: Int): Int {
    var n = 1
    var i = 0
    while (i < exp) {
        n = n * 10
        i = i + 1
    }
    return n
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Int
 */
fun totient(n: Int): Int {
    var tot = n
    var nn = n
    var i = 2
    while (i * i <= nn) {
        if (nn % i == 0) {
            while (nn % i == 0) {
                nn = (nn).toDouble() / (i).toDouble()
            }
            tot = (tot).toDouble() - (tot).toDouble() / (i).toDouble()
        }
        if (i == 2) {
            i = 1
        }
        i = i + 2
    }
    if (nn > 1) {
        tot = (tot).toDouble() - (tot).toDouble() / (nn).toDouble()
    }
    return tot
}

/**
 * Auto-generated from Mochi
 * @param maxExp Int
 */
fun getPerfectPowers(maxExp: Int): Unit {
    val upper = pow10(maxExp)
    var i = 2
    while (i * i < upper) {
        var p = i * i
        while (true) {
            p = p * i
            if (p >= upper) {
                break
            }
            pps[p] = true
        }
        i = i + 1
    }
}

/**
 * Auto-generated from Mochi
 * @param minExp Int
 * @param maxExp Int
 * @return MutableMap<Int, Boolean>
 */
fun getAchilles(minExp: Int, maxExp: Int): MutableMap<Int, Boolean> {
    val lower = pow10(minExp)
    val upper = pow10(maxExp)
    var achilles: MutableMap<Int, Boolean> = mutableMapOf<Int, Boolean>()
    var b = 1
    while (b * b * b < upper) {
        val b3 = b * b * b
        var a = 1
        while (true) {
            val p = b3 * a * a
            if (p >= upper) {
                break
            }
            if (p >= lower) {
                if (!(p in pps)) {
                    achilles[p] = true
                }
            }
            a = a + 1
        }
        b = b + 1
    }
    return achilles
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Int>
 * @return MutableList<Int>
 */
fun sortInts(xs: MutableList<Int>): MutableList<Int> {
    var res: MutableList<Int> = mutableListOf<Int>()
    var tmp = xs
    while (tmp.size > 0) {
        var min = tmp[0]
        var idx = 0
        var i = 1
        while (i < tmp.size) {
            if (tmp[i] < min) {
                min = tmp[i]
                idx = i
            }
            i = i + 1
        }
        res = res + mutableListOf(min)
        var out: MutableList<Int> = mutableListOf<Int>()
        var j = 0
        while (j < tmp.size) {
            if (j != idx) {
                out = out + mutableListOf(tmp[j])
            }
            j = j + 1
        }
        tmp = out
    }
    return res
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @param width Int
 * @return String
 */
fun pad(n: Int, width: Int): String {
    var s = n.toString()
    while (s.length < width) {
        s = " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val maxDigits = 15
    getPerfectPowers(maxDigits)
    val achSet = getAchilles(1, 5)
    var ach: MutableList<Int> = mutableListOf<Int>()
    for (k in (achSet as MutableMap<Int, Boolean>)["keys"]()) {
        ach = ach + mutableListOf(k)
    }
    ach = sortInts(ach)
    println("First 50 Achilles numbers:")
    var i = 0
    while (i < 50) {
        var line = ""
        var j = 0
        while (j < 10) {
            line = line + pad(ach[i], 4)
            if (j < 9) {
                line = line + " "
            }
            i = i + 1
            j = j + 1
        }
        println(line)
    }
    println("\nFirst 30 strong Achilles numbers:")
    var strong: MutableList<Int> = mutableListOf<Int>()
    var count = 0
    var idx = 0
    while (count < 30) {
        val tot = totient(ach[idx])
        if (tot in achSet) {
            strong = strong + mutableListOf(ach[idx])
            count = count + 1
        }
        idx = idx + 1
    }
    i = 0
    while (i < 30) {
        var line = ""
        var j = 0
        while (j < 10) {
            line = line + pad(strong[i], 5)
            if (j < 9) {
                line = line + " "
            }
            i = i + 1
            j = j + 1
        }
        println(line)
    }
    println("\nNumber of Achilles numbers with:")
    val counts = mutableListOf(1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383)
    var d = 2
    while (d <= maxDigits) {
        val c = counts[d - 2]
        println(pad(d, 2) + " digits: " + c.toString())
        d = d + 1
    }
}

