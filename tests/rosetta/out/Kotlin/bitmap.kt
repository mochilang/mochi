// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toBool(v: Any?): Boolean = when (v) {
    is Boolean -> v
    is Int -> v != 0
    is Double -> v != 0.0
    is String -> v.isNotEmpty()
    null -> false
    else -> true
}
// Code generated from bitmap.mochi

data class Pixel(var R: Int, var G: Int, var B: Int)

data class Bitmap(var cols: Int, var rows: Int, var px: MutableList<MutableList<Pixel>>)

/**
 * Auto-generated from Mochi
 * @param c Int
 * @return Pixel
 */
fun pixelFromRgb(c: Int): Pixel {
    val r = ((((c).toDouble() / (65536).toDouble())).toInt()) % 256
    val g = ((((c).toDouble() / (256).toDouble())).toInt()) % 256
    val b = c % 256
    return Pixel(R = r, G = g, B = b)
}

/**
 * Auto-generated from Mochi
 * @param p Pixel
 * @return Int
 */
fun rgbFromPixel(p: Pixel): Int {
    return p.R * 65536 + p.G * 256 + p.B
}

/**
 * Auto-generated from Mochi
 * @param x Int
 * @param y Int
 * @return Bitmap
 */
fun NewBitmap(x: Int, y: Int): Bitmap {
    var data: MutableList<MutableList<Pixel>> = mutableListOf<MutableList<Pixel>>()
    var row = 0
    while (row < y) {
        var r: MutableList<Pixel> = mutableListOf<Pixel>()
        var col = 0
        while (col < x) {
            r = append(r, Pixel(R = 0, G = 0, B = 0))
            col = col + 1
        }
        data = append(data, r)
        row = row + 1
    }
    return Bitmap(cols = x, rows = y, px = data)
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @return MutableMap<String, Int>
 */
fun Extent(b: Bitmap): MutableMap<String, Int> {
    return mutableMapOf("cols" to (b.cols), "rows" to (b.rows))
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @param p Pixel
 */
fun Fill(b: Bitmap, p: Pixel): Unit {
    var y = 0
    while (y < b.rows) {
        var x = 0
        while (x < b.cols) {
            var px = b.px
            var row = px[y]
            row[x] = p
            px[y] = row
            b.px = px
            x = x + 1
        }
        y = y + 1
    }
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @param c Int
 */
fun FillRgb(b: Bitmap, c: Int): Unit {
    Fill(b, pixelFromRgb(c))
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @param x Int
 * @param y Int
 * @param p Pixel
 * @return Boolean
 */
fun SetPx(b: Bitmap, x: Int, y: Int, p: Pixel): Boolean {
    if (x < 0 || x >= b.cols || y < 0 || y >= b.rows) {
        return false
    }
    var px = b.px
    var row = px[y]
    row[x] = p
    px[y] = row
    b.px = px
    return true
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @param x Int
 * @param y Int
 * @param c Int
 * @return Boolean
 */
fun SetPxRgb(b: Bitmap, x: Int, y: Int, c: Int): Boolean {
    return SetPx(b, x, y, pixelFromRgb(c))
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @param x Int
 * @param y Int
 * @return MutableMap<String, Any>
 */
fun GetPx(b: Bitmap, x: Int, y: Int): MutableMap<String, Any> {
    if (x < 0 || x >= b.cols || y < 0 || y >= b.rows) {
        return mutableMapOf("ok" to false)
    }
    val row = b.px[y]
    return mutableMapOf("ok" to true, "pixel" to (row[x]))
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @param x Int
 * @param y Int
 * @return MutableMap<String, Any>
 */
fun GetPxRgb(b: Bitmap, x: Int, y: Int): MutableMap<String, Any> {
    val r = GetPx(b, x, y)
    if (toBool(!toBool((r as MutableMap<String, Any?>)["ok"]))) {
        return mutableMapOf("ok" to false)
    }
    return mutableMapOf("ok" to true, "rgb" to (rgbFromPixel((r as MutableMap<String, Any?>)["pixel"])))
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @return Int
 */
fun ppmSize(b: Bitmap): Int {
    val header = "P6\n# Creator: Rosetta Code http://rosettacode.org/\n" + b.cols.toString() + " " + b.rows.toString() + "\n255\n"
    return header.length + 3 * b.cols * b.rows
}

/**
 * Auto-generated from Mochi
 * @param p Pixel
 * @return String
 */
fun pixelStr(p: Pixel): String {
    return "{" + p.R.toString() + " " + p.G.toString() + " " + p.B.toString() + "}"
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    var bm = NewBitmap(300, 240)
    FillRgb(bm, 16711680)
    SetPxRgb(bm, 10, 20, 255)
    SetPxRgb(bm, 20, 30, 0)
    SetPxRgb(bm, 30, 40, 1056816)
    val c1 = GetPx(bm, 0, 0)
    val c2 = GetPx(bm, 10, 20)
    val c3 = GetPx(bm, 30, 40)
    println("Image size: " + bm.cols.toString() + " Ã— " + bm.rows.toString())
    println(ppmSize(bm).toString() + " bytes when encoded as PPM.")
    if (toBool((c1 as MutableMap<String, Any?>)["ok"])) {
        println("Pixel at (0,0) is " + pixelStr((c1 as MutableMap<String, Any?>)["pixel"]))
    }
    if (toBool((c2 as MutableMap<String, Any?>)["ok"])) {
        println("Pixel at (10,20) is " + pixelStr((c2 as MutableMap<String, Any?>)["pixel"]))
    }
    if (toBool((c3 as MutableMap<String, Any?>)["ok"])) {
        val p = (c3 as MutableMap<String, Any?>)["pixel"]
        var r16 = toInt((p as MutableMap<*, *>)["R"]) * 257
        var g16 = toInt((p as MutableMap<*, *>)["G"]) * 257
        var b16 = toInt((p as MutableMap<*, *>)["B"]) * 257
        println("Pixel at (30,40) has R=" + r16.toString() + ", G=" + g16.toString() + ", B=" + b16.toString())
    }
}

