// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// Code generated from approximate-equality.mochi

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun abs(x: Double): Double {
    if (x < 0.0) {
        return -x
    }
    return x
}

/**
 * Auto-generated from Mochi
 * @param a Double
 * @param b Double
 * @return Double
 */
fun maxf(a: Double, b: Double): Double {
    if (a > b) {
        return a
    }
    return b
}

/**
 * Auto-generated from Mochi
 * @param a Double
 * @param b Double
 * @return Boolean
 */
fun isClose(a: Double, b: Double): Boolean {
    val relTol = 0.000000001
    val t = abs(a - b)
    val u = relTol * maxf(abs(a), abs(b))
    return t <= u
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun sqrtApprox(x: Double): Double {
    var guess = x
    var i = 0
    while (i < 10) {
        guess = (guess + x / guess) / 2.0
        i = i + 1
    }
    return guess
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val root2 = sqrtApprox(2.0)
    val pairs = mutableListOf(mutableListOf(100000000000000.02, 100000000000000.02), mutableListOf(100.01, 100.011), mutableListOf(10000000000000.002 / 10000.0, 1000000000.0000001), mutableListOf(0.001, 0.0010000001), mutableListOf(0.000000000000000000000101, 0.0), mutableListOf(root2 * root2, 2.0), mutableListOf((-root2) * root2, -2.0), mutableListOf(100000000000000000.0, 100000000000000000.0), mutableListOf(3.141592653589793, 3.141592653589793))
    for (pair in pairs) {
        val a = pair[0]
        val b = pair[1]
        val s = if (isClose(a, b)) "≈" else "≉"
        println(a.toString() + " " + s + " " + b.toString())
    }
}

