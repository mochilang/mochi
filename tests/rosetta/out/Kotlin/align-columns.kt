// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from align-columns.mochi

val text = "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" + "are$delineated$by$a$single$'dollar'$character,$write$a$program\n" + "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n" + "column$are$separated$by$at$least$one$space.\n" + "Further,$allow$for$each$word$in$a$column$to$be$either$left\n" + "justified,$right$justified,$or$center$justified$within$its$column."

val f = newFormatter(text)

/**
 * Auto-generated from Mochi
 * @param s String
 * @param sep String
 * @return MutableList<String>
 */
fun split(s: String, sep: String): MutableList<String> {
    var parts: MutableList<String> = mutableListOf<String>()
    var cur = ""
    var i = 0
    while (i < s.length) {
        if (sep.length > 0 && i + sep.length <= s.length && s.substring(i, i + sep.length) == sep) {
            parts = append(parts, cur)
            cur = ""
            i = i + sep.length
        }
        else {
            cur = cur + s.substring(i, i + 1)
            i = i + 1
        }
    }
    parts = append(parts, cur)
    return parts
}

/**
 * Auto-generated from Mochi
 * @param words MutableList<String>
 * @return MutableList<String>
 */
fun rstripEmpty(words: MutableList<String>): MutableList<String> {
    var n = words.size
    while (n > 0 && words[n - 1] == "") {
        n = n - 1
    }
    return words.subList(0, n)
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return String
 */
fun spaces(n: Int): String {
    var out = ""
    var i = 0
    while (i < n) {
        out = out + " "
        i = i + 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param word String
 * @param width Int
 * @param align Int
 * @return String
 */
fun pad(word: String, width: Int, align: Int): String {
    val diff = width - word.length
    if (align == 0) {
        return word + spaces(diff)
    }
    if (align == 2) {
        return spaces(diff) + word
    }
    var left = (((diff).toDouble() / (2).toDouble())).toInt()
    var right = diff - left
    return spaces(left) + word + spaces(right)
}

/**
 * Auto-generated from Mochi
 * @param text String
 * @return MutableMap<String, Any>
 */
fun newFormatter(text: String): MutableMap<String, Any> {
    var lines = split(text, "\n")
    var fmtLines: MutableList<MutableList<String>> = mutableListOf<MutableList<String>>()
    var width: MutableList<Int> = mutableListOf<Int>()
    var i = 0
    while (i < lines.size) {
        if (lines[i].size == 0) {
            i = i + 1
            continue
        }
        var words = rstripEmpty(split(lines[i], "$"))
        fmtLines = append(fmtLines, words)
        var j = 0
        while (j < words.size) {
            val wlen = words[j].size
            if (j == width.size) {
                width = append(width, wlen)
            }
            else
            if (wlen > width[j]) {
                width[j] = wlen
            }
            j = j + 1
        }
        i = i + 1
    }
    return mutableMapOf("text" to fmtLines, "width" to width)
}

/**
 * Auto-generated from Mochi
 * @param f MutableMap<String, Any>
 * @param align Int
 */
fun printFmt(f: MutableMap<String, Any>, align: Int): Unit {
    val lines = (f["text"] as Any?) as MutableList<MutableList<String>>
    val width = (f["width"] as Any?) as MutableList<Int>
    var i = 0
    while (i < lines.size) {
        val words = lines[i]
        var line = ""
        var j = 0
        while (j < words.size) {
            line = line + pad(words[j], width[j], align) + " "
            j = j + 1
        }
        println(line)
        i = i + 1
    }
    println("")
}

fun main() {
    printFmt(f, 0)
    printFmt(f, 1)
    printFmt(f, 2)
}
