// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}
// Code generated from bernoulli-numbers.mochi

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Bigrat
 */
fun bernoulli(n: Int): Bigrat {
    var a: MutableList<Bigrat> = mutableListOf<Any?>()
    var m = 0
    while (m <= n) {
        a = append(a, 1 as Bigrat / ((m + 1) as Bigrat))
        var j = m
        while (j >= 1) {
            a[j - 1] = (j as Bigrat) * (a[j - 1] - a[j])
            j = j - 1
        }
        m = m + 1
    }
    return a[0]
}

fun main() {
    for (i in 0 until 61) {
        val b = bernoulli(i)
        if (num(b) != 0) {
            val numStr = num(b).toString()
            val denStr = denom(b).toString()
            println("B(" + toDouble(i.toString().padStart(2, " ")) + ") =" + toDouble(numStr.padStart(45, " ")) + "/" + denStr)
        }
    }
}
