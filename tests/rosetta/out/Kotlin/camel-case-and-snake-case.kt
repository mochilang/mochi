// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// Code generated from camel-case-and-snake-case.mochi

/**
 * Auto-generated from Mochi
 * @param s String
 * @return String
 */
fun trimSpace(s: String): String {
    var start = 0
    while (start < s.length && s.substring(start, start + 1) == " ") {
        start = start + 1
    }
    var end = s.length
    while (end > start && s.substring(end - 1, end) == " ") {
        end = end - 1
    }
    return s.substring(start, end)
}

/**
 * Auto-generated from Mochi
 * @param ch String
 * @return Boolean
 */
fun isUpper(ch: String): Boolean {
    return ch >= "A" && ch <= "Z"
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param w Int
 * @return String
 */
fun padLeft(s: String, w: Int): String {
    var res = ""
    var n = w - s.length
    while (n > 0) {
        res = res + " "
        n = n - 1
    }
    return res + s
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @return String
 */
fun snakeToCamel(s: String): String {
    s = trimSpace(s)
    var out = ""
    var up = false
    var i = 0
    while (i < s.length) {
        val ch = s.substring(i, i + 1)
        if (ch == "_" || ch == "-" || ch == " " || ch == ".") {
            up = true
            i = i + 1
            continue
        }
        if (i == 0) {
            out = out + lower(ch)
            up = false
            i = i + 1
            continue
        }
        if (up) {
            out = out + upper(ch)
            up = false
        }
        else {
            out = out + ch
        }
        i = i + 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @return String
 */
fun camelToSnake(s: String): String {
    s = trimSpace(s)
    var out = ""
    var prevUnd = false
    var i = 0
    while (i < s.length) {
        val ch = s.substring(i, i + 1)
        if (ch == " " || ch == "-" || ch == ".") {
            if (!prevUnd && out.length > 0) {
                out = out + "_"
                prevUnd = true
            }
            i = i + 1
            continue
        }
        if (ch == "_") {
            if (!prevUnd && out.length > 0) {
                out = out + "_"
                prevUnd = true
            }
            i = i + 1
            continue
        }
        if (isUpper(ch)) {
            if (i > 0 && (!prevUnd)) {
                out = out + "_"
            }
            out = out + lower(ch)
            prevUnd = false
        }
        else {
            out = out + lower(ch)
            prevUnd = false
        }
        i = i + 1
    }
    var start = 0
    while (start < out.length && out.substring(start, start + 1) == "_") {
        start = start + 1
    }
    var end = out.length
    while (end > start && out.substring(end - 1, end) == "_") {
        end = end - 1
    }
    out = out.substring(start, end)
    var res = ""
    var j = 0
    var lastUnd = false
    while (j < out.length) {
        val c = out.substring(j, j + 1)
        if (c == "_") {
            if (!lastUnd) {
                res = res + c
            }
            lastUnd = true
        }
        else {
            res = res + c
            lastUnd = false
        }
        j = j + 1
    }
    return res
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val samples = mutableListOf("snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces ")
    println("=== To snake_case ===")
    for (s in samples) {
        println(padLeft(s, 34) + " => " + camelToSnake(s))
    }
    println("")
    println("=== To camelCase ===")
    for (s in samples) {
        println(padLeft(s, 34) + " => " + snakeToCamel(s))
    }
}

