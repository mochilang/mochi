// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from bitmap-ppm-conversion-through-a-pipe.mochi

data class Pixel(var R: Int, var G: Int, var B: Int)

data class Bitmap(var cols: Int, var rows: Int, var px: MutableList<MutableList<Pixel>>)

/**
 * Auto-generated from Mochi
 * @param c Int
 * @return Pixel
 */
fun pixelFromRgb(c: Int): Pixel {
    val r = ((((c).toDouble() / (65536).toDouble())).toInt()) % 256
    val g = ((((c).toDouble() / (256).toDouble())).toInt()) % 256
    val b = c % 256
    return Pixel(R = r, G = g, B = b)
}

/**
 * Auto-generated from Mochi
 * @param p Pixel
 * @return Int
 */
fun rgbFromPixel(p: Pixel): Int {
    return p.R * 65536 + p.G * 256 + p.B
}

/**
 * Auto-generated from Mochi
 * @param x Int
 * @param y Int
 * @return Bitmap
 */
fun NewBitmap(x: Int, y: Int): Bitmap {
    var data: MutableList<MutableList<Pixel>> = mutableListOf<MutableList<Pixel>>()
    var row = 0
    while (row < y) {
        var r: MutableList<Pixel> = mutableListOf<Pixel>()
        var col = 0
        while (col < x) {
            r = append(r, Pixel(R = 0, G = 0, B = 0))
            col = col + 1
        }
        data = append(data, r)
        row = row + 1
    }
    return Bitmap(cols = x, rows = y, px = data)
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @param c Int
 */
fun FillRgb(b: Bitmap, c: Int): Unit {
    var y = 0
    val p = pixelFromRgb(c)
    while (y < b.rows) {
        var x = 0
        while (x < b.cols) {
            var px = b.px
            var row = px[y]
            row[x] = p
            px[y] = row
            b.px = px
            x = x + 1
        }
        y = y + 1
    }
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @param x Int
 * @param y Int
 * @param c Int
 * @return Boolean
 */
fun SetPxRgb(b: Bitmap, x: Int, y: Int, c: Int): Boolean {
    if (x < 0 || x >= b.cols || y < 0 || y >= b.rows) {
        return false
    }
    var px = b.px
    var row = px[y]
    row[x] = pixelFromRgb(c)
    px[y] = row
    b.px = px
    return true
}

/**
 * Auto-generated from Mochi
 * @param seed Int
 * @return Int
 */
fun nextRand(seed: Int): Int {
    return (seed * 1664525 + 1013904223) % 2147483648
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    var bm = NewBitmap(400, 300)
    FillRgb(bm, 12615744)
    var seed = System.nanoTime().toInt()
    var i = 0
    while (i < 2000) {
        seed = nextRand(seed)
        val x = seed % 400
        seed = nextRand(seed)
        val y = seed % 300
        SetPxRgb(bm, x, y, 8405024)
        i = i + 1
    }
    var x = 0
    while (x < 400) {
        var y = 240
        while (y < 245) {
            SetPxRgb(bm, x, y, 8405024)
            y = y + 1
        }
        y = 260
        while (y < 265) {
            SetPxRgb(bm, x, y, 8405024)
            y = y + 1
        }
        x = x + 1
    }
    var y = 0
    while (y < 300) {
        var x = 80
        while (x < 85) {
            SetPxRgb(bm, x, y, 8405024)
            x = x + 1
        }
        x = 95
        while (x < 100) {
            SetPxRgb(bm, x, y, 8405024)
            x = x + 1
        }
        y = y + 1
    }
}

