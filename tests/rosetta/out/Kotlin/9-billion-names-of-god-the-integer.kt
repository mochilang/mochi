// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)
// Code generated from 9-billion-names-of-god-the-integer.mochi

var x = 1

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @return MutableList<Int>
 */
fun bigTrim(a: MutableList<Int>): MutableList<Int> {
    var n = a.size
    while (n > 1 && a[n - 1] == 0) {
        a = a.subList(0, n - 1)
        n = n - 1
    }
    return a
}

/**
 * Auto-generated from Mochi
 * @param x Int
 * @return MutableList<Int>
 */
fun bigFromInt(x: Int): MutableList<Int> {
    if (x == 0) {
        return mutableListOf(0)
    }
    var digits: MutableList<Int> = mutableListOf<Int>()
    var n = x
    while (n > 0) {
        digits = append(digits, n % 10)
        n = (n).toDouble() / (10).toDouble()
    }
    return digits
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @param b MutableList<Int>
 * @return MutableList<Int>
 */
fun bigAdd(a: MutableList<Int>, b: MutableList<Int>): MutableList<Int> {
    var res: MutableList<Int> = mutableListOf<Int>()
    var carry = 0
    var i = 0
    while (i < a.size || i < b.size || carry > 0) {
        var av = 0
        if (i < a.size) {
            av = a[i]
        }
        var bv = 0
        if (i < b.size) {
            bv = b[i]
        }
        var s = av + bv + carry
        res = append(res, s % 10)
        carry = (s).toDouble() / (10).toDouble()
        i = i + 1
    }
    return bigTrim(res)
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @param b MutableList<Int>
 * @return MutableList<Int>
 */
fun bigSub(a: MutableList<Int>, b: MutableList<Int>): MutableList<Int> {
    var res: MutableList<Int> = mutableListOf<Int>()
    var borrow = 0
    var i = 0
    while (i < a.size) {
        var av = a[i]
        var bv = 0
        if (i < b.size) {
            bv = b[i]
        }
        var diff = av - bv - borrow
        if (diff < 0) {
            diff = diff + 10
            borrow = 1
        }
        else {
            borrow = 0
        }
        res = append(res, diff)
        i = i + 1
    }
    return bigTrim(res)
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @return String
 */
fun bigToString(a: MutableList<Int>): String {
    var s = ""
    var i = a.size - 1
    while (i >= 0) {
        s = s + a[i].toString()
        i = i - 1
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param a Int
 * @param b Int
 * @return Int
 */
fun minInt(a: Int, b: Int): Int {
    if (a < b) {
        return a
    }
    else {
        return b
    }
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return MutableList<MutableList<Int>>
 */
fun cumu(n: Int): MutableList<MutableList<Int>> {
    var cache: MutableList<MutableList<MutableList<Int>>> = mutableListOf(mutableListOf(bigFromInt(1)))
    var y = 1
    while (y <= n) {
        var row: MutableList<MutableList<Int>> = mutableListOf(bigFromInt(0))
        var x = 1
        while (x <= y) {
            val `val` = (cache[y - x] as MutableList<MutableList<Int>>)[minInt(x, y - x)]
            row = append(row, bigAdd(row[row.size - 1], `val`))
            x = x + 1
        }
        cache = append(cache, row)
        y = y + 1
    }
    return cache[n]
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return MutableList<String>
 */
fun row(n: Int): MutableList<String> {
    val e = cumu(n)
    var out: MutableList<String> = mutableListOf<String>()
    var i = 0
    while (i < n) {
        val diff = bigSub(e[i + 1], e[i])
        out = append(out, bigToString(diff))
        i = i + 1
    }
    return out
}

fun main() {
    println("rows:")
    while (x < 11) {
        val r = row(x)
        var line = ""
        var i = 0
        while (i < r.size) {
            line = line + " " + r[i] + " "
            i = i + 1
        }
        println(line)
        x = x + 1
    }
    println("")
    println("sums:")
    for (num in mutableListOf(23, 123, 1234)) {
        val r = cumu(num)
        println(num.toString() + " " + bigToString(r[r.size - 1]))
    }
}
