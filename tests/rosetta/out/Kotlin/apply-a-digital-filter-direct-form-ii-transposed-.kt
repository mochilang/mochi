// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from apply-a-digital-filter-direct-form-ii-transposed-.mochi

val a = mutableListOf(1.0, -0.00000000000000027756, 0.33333333, -0.0000000000000000185)

val b = mutableListOf(0.16666667, 0.5, 0.5, 0.16666667)

val sig = mutableListOf(-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589)

val res = applyFilter(sig, a, b)

var k = 0

/**
 * Auto-generated from Mochi
 * @param input MutableList<Double>
 * @param a MutableList<Double>
 * @param b MutableList<Double>
 * @return MutableList<Double>
 */
fun applyFilter(input: MutableList<Double>, a: MutableList<Double>, b: MutableList<Double>): MutableList<Double> {
    var out: MutableList<Double> = mutableListOf<Double>()
    val scale = 1.0 / a[0]
    var i = 0
    while (i < input.size) {
        var tmp = 0.0
        var j = 0
        while (j <= i && j < b.size) {
            tmp = tmp + b[j] * input[i - j]
            j = j + 1
        }
        j = 0
        while (j < i && j + 1 < a.size) {
            tmp = tmp - a[j + 1] * out[i - j - 1]
            j = j + 1
        }
        out = append(out, tmp * scale)
        i = i + 1
    }
    return out
}

fun main() {
    while (k < res.size) {
        println(res[k])
        k = k + 1
    }
}
