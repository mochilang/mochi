// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from barnsley-fern.mochi

val xMin = -2.182

val xMax = 2.6558

val yMin = 0.0

val yMax = 9.9983

val width = 60

val nIter = 10000

val dx = xMax - xMin

val dy = yMax - yMin

val height = (((width).toDouble() * dy / dx)).toInt()

var grid: MutableList<MutableList<String>> = mutableListOf<MutableList<String>>()

var row = 0

/**
 * Auto-generated from Mochi
 * @param s Int
 * @param n Int
 * @return MutableList<Int>
 */
fun randInt(s: Int, n: Int): MutableList<Int> {
    val next = (s * 1664525 + 1013904223) % 2147483647
    return mutableListOf(next, next % n)
}

fun main() {
    while (row < height) {
        var line: MutableList<String> = mutableListOf<String>()
        var col = 0
        while (col < width) {
            line = append(line, " ")
            col = col + 1
        }
        grid = append(grid, line)
        row = row + 1
    }
    var seed = 1
    var x = 0.0
    var y = 0.0
    var ix = (((width as Double) * (x - xMin) / dx)).toInt()
    var iy = (((height as Double) * (yMax - y) / dy)).toInt()
    if (ix >= 0 && ix < width && iy >= 0 && iy < height) {
        grid[iy]!![ix] = "*"
    }
    var i = 0
    while (i < nIter) {
        var res = randInt(seed, 100)
        seed = res[0]
        val r = res[1]
        if (r < 85) {
            val nx = 0.85 * x + 0.04 * y
            val ny = -0.04 * x + 0.85 * y + 1.6
            x = nx
            y = ny
        }
        else
        if (r < 92) {
            val nx = 0.2 * x - 0.26 * y
            val ny = 0.23 * x + 0.22 * y + 1.6
            x = nx
            y = ny
        }
        else
        if (r < 99) {
            val nx = -0.15 * x + 0.28 * y
            val ny = 0.26 * x + 0.24 * y + 0.44
            x = nx
            y = ny
        }
        else {
            x = 0.0
            y = 0.16 * y
        }
        ix = (((width as Double) * (x - xMin) / dx)).toInt()
        iy = (((height as Double) * (yMax - y) / dy)).toInt()
        if (ix >= 0 && ix < width && iy >= 0 && iy < height) {
            grid[iy]!![ix] = "*"
        }
        i = i + 1
    }
    row = 0
    while (row < height) {
        var line = ""
        var col = 0
        while (col < width) {
            line = line + (grid[row] as MutableList<String>)[col]
            col = col + 1
        }
        println(line)
        row = row + 1
    }
}
