// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from cantor-set.mochi

val width = 81

val height = 5

var lines: MutableList<String> = mutableListOf<String>()

/**
 * Auto-generated from Mochi
 * @param s String
 * @param idx Int
 * @param ch String
 * @return String
 */
fun setChar(s: String, idx: Int, ch: String): String {
    return s.substring(0, idx) + ch + s.substring(idx + 1, s.length)
}

fun main() {
    for (i in 0 until height) {
        var row = ""
        var j = 0
        while (j < width) {
            row = row + "*"
            j = j + 1
        }
        lines = append(lines, row)
    }
    var stack: MutableList<MutableMap<String, Int>> = mutableListOf(mutableMapOf("start" to 0, "len" to width, "index" to 1))
    while (stack.size > 0) {
        var frame = stack[stack.size - 1]
        stack = stack.subList(0, stack.size - 1)
        val start = frame["start"]
        val lenSeg = frame["len"]
        val index = frame["index"]
        val seg = (((lenSeg).toDouble() / (3).toDouble())).toInt()
        if (seg == 0) {
            continue
        }
        var i = index
        while (i < height) {
            var j = start + seg
            while (j < start + 2 * seg) {
                lines[i] = setChar(lines[i], j, " ")
                j = j + 1
            }
            i = i + 1
        }
        stack = append(stack, mutableMapOf("start" to start, "len" to seg, "index" to (index + 1)))
        stack = append(stack, mutableMapOf("start" to (start + seg * 2), "len" to seg, "index" to (index + 1)))
    }
    for (line in lines) {
        println(line)
    }
}
