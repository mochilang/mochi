// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from chaos-game.mochi

val width = 60

val height = ((width as Double * 0.86602540378)).toInt()

val iterations = 5000

var grid: MutableList<MutableList<String>> = mutableListOf<MutableList<String>>()

var y = 0

/**
 * Auto-generated from Mochi
 * @param s Int
 * @param n Int
 * @return MutableList<Int>
 */
fun randInt(s: Int, n: Int): MutableList<Int> {
    val next = (s * 1664525 + 1013904223) % 2147483647
    return mutableListOf(next, next % n)
}

fun main() {
    while (y < height) {
        var line: MutableList<String> = mutableListOf<String>()
        var x = 0
        while (x < width) {
            line = append(line, " ")
            x = x + 1
        }
        grid = append(grid, line)
        y = y + 1
    }
    var seed = 1
    val vertices: MutableList<MutableList<Int>> = mutableListOf(mutableListOf(0, height - 1), mutableListOf(width - 1, height - 1), mutableListOf((((width).toDouble() / (2).toDouble())).toInt(), 0))
    var px = (((width).toDouble() / (2).toDouble())).toInt()
    var py = (((height).toDouble() / (2).toDouble())).toInt()
    var i = 0
    while (i < iterations) {
        var r = randInt(seed, 3)
        seed = r[0]
        val idx = ((r[1] as Int)).toInt()
        val v = vertices[idx]
        px = ((((px + v[0])).toDouble() / (2).toDouble())).toInt()
        py = ((((py + v[1])).toDouble() / (2).toDouble())).toInt()
        if (px >= 0 && px < width && py >= 0 && py < height) {
            grid[py]!![px] = "*"
        }
        i = i + 1
    }
    y = 0
    while (y < height) {
        var line = ""
        var x = 0
        while (x < width) {
            line = line + (grid[y] as MutableList<String>)[x]
            x = x + 1
        }
        println(line)
        y = y + 1
    }
}
