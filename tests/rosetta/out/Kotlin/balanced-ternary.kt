// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from balanced-ternary.mochi

/**
 * Auto-generated from Mochi
 * @param s String
 * @return String
 */
fun trimLeftZeros(s: String): String {
    var i = 0
    while (i < s.length && s.substring(i, i + 1) == "0") {
        i = i + 1
    }
    return s.substring(i, s.length)
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @return MutableMap<String, Any>
 */
fun btString(s: String): MutableMap<String, Any> {
    s = trimLeftZeros(s)
    var b: MutableList<Int> = mutableListOf<Int>()
    var i = s.length - 1
    while (i >= 0) {
        val ch = s.substring(i, i + 1)
        if (ch == "+") {
            b = append(b, 1)
        }
        else {
            if (ch == "0") {
                b = append(b, 0)
            }
            else {
                if (ch == "-") {
                    b = append(b, 0 - 1)
                }
                else {
                    return mutableMapOf("bt" to (mutableListOf<Any?>()), "ok" to false)
                }
            }
        }
        i = i - 1
    }
    return mutableMapOf("bt" to b, "ok" to true)
}

/**
 * Auto-generated from Mochi
 * @param b MutableList<Int>
 * @return String
 */
fun btToString(b: MutableList<Int>): String {
    if (b.size == 0) {
        return "0"
    }
    var r = ""
    var i = b.size - 1
    while (i >= 0) {
        val d = b[i]
        if (d == 0 - 1) {
            r = r + "-"
        }
        else {
            if (d == 0) {
                r = r + "0"
            }
            else {
                r = r + "+"
            }
        }
        i = i - 1
    }
    return r
}

/**
 * Auto-generated from Mochi
 * @param i Int
 * @return MutableList<Int>
 */
fun btInt(i: Int): MutableList<Int> {
    if (i == 0) {
        return mutableListOf<Any?>()
    }
    var n = i
    var b: MutableList<Int> = mutableListOf<Int>()
    while (n != 0) {
        var m = n % 3
        n = (((n).toDouble() / (3).toDouble())).toInt()
        if (m == 2) {
            m = 0 - 1
            n = n + 1
        }
        else {
            if (m == 0 - 2) {
                m = 1
                n = n - 1
            }
        }
        b = append(b, m)
    }
    return b
}

/**
 * Auto-generated from Mochi
 * @param b MutableList<Int>
 * @return Int
 */
fun btToInt(b: MutableList<Int>): Int {
    var r = 0
    var pt = 1
    var i = 0
    while (i < b.size) {
        r = r + b[i] * pt
        pt = pt * 3
        i = i + 1
    }
    return r
}

/**
 * Auto-generated from Mochi
 * @param b MutableList<Int>
 * @return MutableList<Int>
 */
fun btNeg(b: MutableList<Int>): MutableList<Int> {
    var r: MutableList<Int> = mutableListOf<Int>()
    var i = 0
    while (i < b.size) {
        r = append(r, -b[i])
        i = i + 1
    }
    return r
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @param b MutableList<Int>
 * @return MutableList<Int>
 */
fun btAdd(a: MutableList<Int>, b: MutableList<Int>): MutableList<Int> {
    return btInt(btToInt(a) + btToInt(b))
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @param b MutableList<Int>
 * @return MutableList<Int>
 */
fun btMul(a: MutableList<Int>, b: MutableList<Int>): MutableList<Int> {
    return btInt(btToInt(a) * btToInt(b))
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param w Int
 * @return String
 */
fun padLeft(s: String, w: Int): String {
    var r = s
    while (r.length < w) {
        r = " " + r
    }
    return r
}

/**
 * Auto-generated from Mochi
 * @param label String
 * @param b MutableList<Int>
 */
fun show(label: String, b: MutableList<Int>): Unit {
    val l = padLeft(label, 7)
    val bs = padLeft(btToString(b), 12)
    val is = padLeft(btToInt(b).toString(), 7)
    println(l + " " + bs + " " + is)
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val ares = btString("+-0++0+")
    val a = ares["bt"]
    val b = btInt(-436)
    val cres = btString("+-++-")
    val c = cres["bt"]
    show("a:", a)
    show("b:", b)
    show("c:", c)
    show("a(b-c):", btMul(a, btAdd(b, btNeg(c))))
}

