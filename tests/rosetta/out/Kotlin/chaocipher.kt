// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// Code generated from chaocipher.mochi

/**
 * Auto-generated from Mochi
 * @param s String
 * @param ch String
 * @return Int
 */
fun indexOf(s: String, ch: String): Int {
    var i = 0
    while (i < s.length) {
        if (s.substring(i, i + 1) == ch) {
            return i
        }
        i = i + 1
    }
    return -1
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param n Int
 * @return String
 */
fun rotate(s: String, n: Int): String {
    return s.substring(n, s.length) + s.substring(0, n)
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @return String
 */
fun scrambleLeft(s: String): String {
    return s.substring(0, 1) + s.substring(2, 14) + s.substring(1, 2) + s.substring(14, s.length)
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @return String
 */
fun scrambleRight(s: String): String {
    return s.substring(1, 3) + s.substring(4, 15) + s.substring(3, 4) + s.substring(15, s.length) + s.substring(0, 1)
}

/**
 * Auto-generated from Mochi
 * @param text String
 * @param encode Boolean
 * @return String
 */
fun chao(text: String, encode: Boolean): String {
    var left = "HXUCZVAMDSLKPEFJRIGTWOBNYQ"
    var right = "PTLNBQDEOYSFAVZKGJRIHWXUMC"
    var out = ""
    var i = 0
    while (i < text.length) {
        val ch = text.substring(i, i + 1)
        var idx = 0
        if (encode) {
            idx = indexOf(right, ch)
            out = out + left.substring(idx, idx + 1)
        }
        else {
            idx = indexOf(left, ch)
            out = out + right.substring(idx, idx + 1)
        }
        left = rotate(left, idx)
        right = rotate(right, idx)
        left = scrambleLeft(left)
        right = scrambleRight(right)
        i = i + 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val plain = "WELLDONEISBETTERTHANWELLSAID"
    val cipher = chao(plain, true)
    println(plain)
    println(cipher)
    println(chao(cipher, false))
}

