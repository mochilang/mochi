// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from bitmap-midpoint-circle-algorithm.mochi

var g = circle(10)

/**
 * Auto-generated from Mochi
 * @param size Int
 * @return MutableList<MutableList<String>>
 */
fun initGrid(size: Int): MutableList<MutableList<String>> {
    var g: MutableList<MutableList<String>> = mutableListOf<MutableList<String>>()
    var y = 0
    while (y < size) {
        var row: MutableList<String> = mutableListOf<String>()
        var x = 0
        while (x < size) {
            row = append(row, " ")
            x = x + 1
        }
        g = append(g, row)
        y = y + 1
    }
    return g
}

/**
 * Auto-generated from Mochi
 * @param g MutableList<MutableList<String>>
 * @param x Int
 * @param y Int
 */
fun set(g: MutableList<MutableList<String>>, x: Int, y: Int): Unit {
    if (x >= 0 && x < g[0].size && y >= 0 && y < g.size) {
        g[y]!![x] = "#"
    }
}

/**
 * Auto-generated from Mochi
 * @param r Int
 * @return MutableList<MutableList<String>>
 */
fun circle(r: Int): MutableList<MutableList<String>> {
    val size = r * 2 + 1
    var g = initGrid(size)
    var x = r
    var y = 0
    var err = 1 - r
    while (y <= x) {
        set(g, r + x, r + y)
        set(g, r + y, r + x)
        set(g, r - x, r + y)
        set(g, r - y, r + x)
        set(g, r - x, r - y)
        set(g, r - y, r - x)
        set(g, r + x, r - y)
        set(g, r + y, r - x)
        y = y + 1
        if (err < 0) {
            err = err + 2 * y + 1
        }
        else {
            x = x - 1
            err = err + 2 * (y - x) + 1
        }
    }
    return g
}

/**
 * Auto-generated from Mochi
 * @param row MutableList<String>
 * @return String
 */
fun trimRight(row: MutableList<String>): String {
    var end = row.size
    while (end > 0 && row[end - 1] == " ") {
        end = end - 1
    }
    var s = ""
    var i = 0
    while (i < end) {
        s = s + row[i]
        i = i + 1
    }
    return s
}

fun main() {
    for (row in g) {
        println(trimRight(row))
    }
}
