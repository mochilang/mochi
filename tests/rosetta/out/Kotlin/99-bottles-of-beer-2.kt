// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)
// Code generated from 99-bottles-of-beer-2.mochi

/**
 * Auto-generated from Mochi
 * @param s String
 * @return MutableList<String>
 */
fun fields(s: String): MutableList<String> {
    var words: MutableList<String> = mutableListOf<String>()
    var cur = ""
    var i = 0
    while (i < s.length) {
        val ch = s.substring(i, i + 1)
        if (ch == " " || ch == "\n" || ch == "\t") {
            if (cur.length > 0) {
                words = append(words, cur)
                cur = ""
            }
        }
        else {
            cur = cur + ch
        }
        i = i + 1
    }
    if (cur.length > 0) {
        words = append(words, cur)
    }
    return words
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<String>
 * @param sep String
 * @return String
 */
fun join(xs: MutableList<String>, sep: String): String {
    var res = ""
    var i = 0
    while (i < xs.size) {
        if (i > 0) {
            res = res + sep
        }
        res = res + xs[i]
        i = i + 1
    }
    return res
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return String
 */
fun numberName(n: Int): String {
    val small = mutableListOf("no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen")
    val tens = mutableListOf("ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety")
    if (n < 0) {
        return ""
    }
    if (n < 20) {
        return small[n]
    }
    if (n < 100) {
        var t = tens[(((n).toDouble() / (10).toDouble())).toInt()]
        var s = n % 10
        if (s > 0) {
            t = t + " " + small[s]
        }
        return t
    }
    return ""
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param n Int
 * @return String
 */
fun pluralizeFirst(s: String, n: Int): String {
    if (n == 1) {
        return s
    }
    val w = fields(s)
    if (w.size > 0) {
        w[0] = w[0] + "s"
    }
    return join(w, " ")
}

/**
 * Auto-generated from Mochi
 * @param seed Int
 * @param n Int
 * @return Int
 */
fun randInt(seed: Int, n: Int): Int {
    val next = (seed * 1664525 + 1013904223) % 2147483647
    return next % n
}

/**
 * Auto-generated from Mochi
 * @param p String
 * @param d Int
 * @return String
 */
fun slur(p: String, d: Int): String {
    if (p.length <= 2) {
        return p
    }
    var a: MutableList<String> = mutableListOf<String>()
    var i = 1
    while (i < p.length - 1) {
        a = append(a, p.substring(i, i + 1))
        i = i + 1
    }
    var idx = a.size - 1
    var seed = d
    while (idx >= 1) {
        seed = (seed * 1664525 + 1013904223) % 2147483647
        if (seed % 100 >= d) {
            val j = seed % (idx + 1)
            val tmp = a[idx]
            a[idx] = a[j]
            a[j] = tmp
        }
        idx = idx - 1
    }
    var s = p.substring(0, 1)
    var k = 0
    while (k < a.size) {
        s = s + a[k]
        k = k + 1
    }
    s = s + p.substring(p.length - 1, p.length)
    val w = fields(s)
    return join(w, " ")
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    var i = 99
    while (i > 0) {
        println(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer on the wall", i))
        println(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer", i))
        println(slur("take one", i) + " " + slur("down", i) + " " + slur("pass it around", i))
        println(slur(numberName(i - 1), i) + " " + pluralizeFirst(slur("bottle of", i), i - 1) + " " + slur("beer on the wall", i))
        i = i - 1
    }
}

