// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from 100-prisoners.mochi

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Int>
 * @return MutableList<Int>
 */
fun shuffle(xs: MutableList<Int>): MutableList<Int> {
    var arr = xs
    var i = 99
    while (i > 0) {
        val j = kotlin.math.abs(System.nanoTime().toInt()) % (i + 1)
        val tmp = arr[i]
        arr[i] = arr[j]
        arr[j] = tmp
        i = i - 1
    }
    return arr
}

/**
 * Auto-generated from Mochi
 * @param trials Int
 * @param np Int
 * @param strategy String
 */
fun doTrials(trials: Int, np: Int, strategy: String): Unit {
    var pardoned = 0
    var t = 0
    while (t < trials) {
        var drawers: MutableList<Int> = mutableListOf<Int>()
        var i = 0
        while (i < 100) {
            drawers = append(drawers, i)
            i = i + 1
        }
        drawers = shuffle(drawers)
        var p = 0
        var success = true
        while (p < np) {
            var found = false
            if (strategy == "optimal") {
                var prev = p
                var d = 0
                while (d < 50) {
                    val `this` = drawers[prev]
                    if (`this` == p) {
                        found = true
                        break
                    }
                    prev = `this`
                    d = d + 1
                }
            }
            else {
                var opened: MutableList<Boolean> = mutableListOf<Boolean>()
                var k = 0
                while (k < 100) {
                    opened = append(opened, false)
                    k = k + 1
                }
                var d = 0
                while (d < 50) {
                    var n = kotlin.math.abs(System.nanoTime().toInt()) % 100
                    while (opened[n]) {
                        n = kotlin.math.abs(System.nanoTime().toInt()) % 100
                    }
                    opened[n] = true
                    if (drawers[n] == p) {
                        found = true
                        break
                    }
                    d = d + 1
                }
            }
            if (!found) {
                success = false
                break
            }
            p = p + 1
        }
        if (success) {
            pardoned = pardoned + 1
        }
        t = t + 1
    }
    val rf = ((pardoned).toDouble()) / ((trials).toDouble()) * 100.0
    println("  strategy = " + strategy + "  pardoned = " + pardoned.toString() + " relative frequency = " + rf.toString() + "%")
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val trials = 1000
    for (np in mutableListOf(10, 100)) {
        println("Results from " + trials.toString() + " trials with " + np.toString() + " prisoners:\n")
        for (strat in mutableListOf("random", "optimal")) {
            doTrials(trials, np, strat)
        }
    }
}

