// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}
// Code generated from abundant-odd-numbers.mochi

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return MutableList<Int>
 */
fun divisors(n: Int): MutableList<Int> {
    var divs: MutableList<Int> = mutableListOf(1)
    var divs2: MutableList<Int> = mutableListOf<Int>()
    var i = 2
    while (i * i <= n) {
        if (n % i == 0) {
            val j = (((n).toDouble() / (i).toDouble())).toInt()
            divs = append(divs, i)
            if (i != j) {
                divs2 = append(divs2, j)
            }
        }
        i = i + 1
    }
    var j = divs2.size - 1
    while (j >= 0) {
        divs = append(divs, divs2[j])
        j = j - 1
    }
    return divs
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Int>
 * @return Int
 */
fun sum(xs: MutableList<Int>): Int {
    var tot = 0
    for (v in xs) {
        tot = tot + v
    }
    return tot
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Int>
 * @return String
 */
fun sumStr(xs: MutableList<Int>): String {
    var s = ""
    var i = 0
    while (i < xs.size) {
        s = s + xs[i].toString() + " + "
        i = i + 1
    }
    return s.substring(0, s.length - 3)
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return String
 */
fun pad2(n: Int): String {
    val s = n.toString()
    if (s.length < 2) {
        return " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return String
 */
fun pad5(n: Int): String {
    var s = n.toString()
    while (s.length < 5) {
        s = " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param searchFrom Int
 * @param countFrom Int
 * @param countTo Int
 * @param printOne Boolean
 * @return Int
 */
fun abundantOdd(searchFrom: Int, countFrom: Int, countTo: Int, printOne: Boolean): Int {
    var count = countFrom
    var n = searchFrom
    while (count < countTo) {
        val divs = divisors(n)
        val tot = sum(divs)
        if (tot > n) {
            count = count + 1
            if (printOne && count < countTo) {
                n = n + 2
                continue
            }
            val s = sumStr(divs)
            if (!printOne) {
                println(pad2(count) + ". " + pad5(n) + " < " + s + " = " + tot.toString())
            }
            else {
                println(n.toString() + " < " + s + " = " + tot.toString())
            }
        }
        n = n + 2
    }
    return n
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val max = 25
    println("The first " + max.toString() + " abundant odd numbers are:")
    val n = abundantOdd(1, 0, max, false)
    println("\nThe one thousandth abundant odd number is:")
    abundantOdd(n, max, 1000, true)
    println("\nThe first abundant odd number above one billion is:")
    abundantOdd(1000000001, 0, 1, true)
}

