// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}
// Code generated from bitcoin-address-validation.mochi

/**
 * Auto-generated from Mochi
 * @param s String
 * @param ch String
 * @return Int
 */
fun indexOf(s: String, ch: String): Int {
    var i = 0
    while (i < s.length) {
        if (s.substring(i, i + 1) == ch) {
            return i
        }
        i = i + 1
    }
    return -1
}

/**
 * Auto-generated from Mochi
 * @param addr String
 * @return MutableList<Int>
 */
fun set58(addr: String): MutableList<Int> {
    val tmpl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
    var a: MutableList<Int> = mutableListOf<Int>()
    var i = 0
    while (i < 25) {
        a = append(a, 0)
        i = i + 1
    }
    var idx = 0
    while (idx < addr.length) {
        val ch = addr.substring(idx, idx + 1)
        var c = indexOf(tmpl, ch)
        if (c < 0) {
            return mutableListOf<Any?>()
        }
        var j = 24
        while (j >= 0) {
            c = c + 58 * a[j]
            a[j] = c % 256
            c = (((c).toDouble() / (256).toDouble())).toInt()
            j = j - 1
        }
        if (c > 0) {
            return mutableListOf<Any?>()
        }
        idx = idx + 1
    }
    return a
}

/**
 * Auto-generated from Mochi
 * @param bs MutableList<Int>
 * @return MutableList<Int>
 */
fun doubleSHA256(bs: MutableList<Int>): MutableList<Int> {
    val first = sha256(bs)
    return sha256(first)
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @return MutableList<Int>
 */
fun computeChecksum(a: MutableList<Int>): MutableList<Int> {
    val hash = doubleSHA256(a.subList(0, 21))
    return hash.subList(0, 4)
}

/**
 * Auto-generated from Mochi
 * @param addr String
 * @return Boolean
 */
fun validA58(addr: String): Boolean {
    val a = set58(addr)
    if (a.size != 25) {
        return false
    }
    if (a[0] != 0) {
        return false
    }
    val sum = computeChecksum(a)
    var i = 0
    while (i < 4) {
        if (a[21 + i] != toDouble(sum[i])) {
            return false
        }
        i = i + 1
    }
    return true
}

fun main() {
    println(validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i").toString())
    println(validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j").toString())
}
