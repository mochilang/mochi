// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from bitmap-read-an-image-through-a-pipe.mochi

val ppmData = "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n"

val img = parsePpm(ppmData)

/**
 * Auto-generated from Mochi
 * @param str String
 * @return Int
 */
fun parseIntStr(str: String): Int {
    var i = 0
    var neg = false
    if (str.length > 0 && str.substring(0, 1) == "-") {
        neg = true
        i = 1
    }
    var n = 0
    val digits = mutableMapOf("0" to 0, "1" to 1, "2" to 2, "3" to 3, "4" to 4, "5" to 5, "6" to 6, "7" to 7, "8" to 8, "9" to 9)
    while (i < str.length) {
        n = n * 10 + digits[str.substring(i, i + 1)]
        i = i + 1
    }
    if (neg) {
        n = -n
    }
    return n
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @return MutableList<String>
 */
fun splitWs(s: String): MutableList<String> {
    var parts: MutableList<String> = mutableListOf<String>()
    var cur = ""
    var i = 0
    while (i < s.length) {
        val ch = s.substring(i, i + 1)
        if (ch == " " || ch == "\n" || ch == "\t" || ch == "\r") {
            if (cur.length > 0) {
                parts = append(parts, cur)
                cur = ""
            }
        }
        else {
            cur = cur + ch
        }
        i = i + 1
    }
    if (cur.length > 0) {
        parts = append(parts, cur)
    }
    return parts
}

/**
 * Auto-generated from Mochi
 * @param data String
 * @return MutableMap<String, Any>
 */
fun parsePpm(data: String): MutableMap<String, Any> {
    val toks = splitWs(data)
    if (toks.size < 4) {
        return mutableMapOf("err" to true)
    }
    val magic = toks[0]
    val w = parseIntStr(toks[1])
    val h = parseIntStr(toks[2])
    val maxv = parseIntStr(toks[3])
    var px: MutableList<Int> = mutableListOf<Int>()
    var i = 4
    while (i < toks.size) {
        px = append(px, parseIntStr(toks[i]))
        i = i + 1
    }
    return mutableMapOf("magic" to magic, "w" to w, "h" to h, "max" to maxv, "px" to px)
}

fun main() {
    println("width=" + (img as MutableMap<String, Any?>)["w"].toString() + " height=" + (img as MutableMap<String, Any?>)["h"].toString())
}
