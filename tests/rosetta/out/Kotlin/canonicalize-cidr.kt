// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from canonicalize-cidr.mochi

val tests = mutableListOf("87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18")

/**
 * Auto-generated from Mochi
 * @param s String
 * @param sep String
 * @return MutableList<String>
 */
fun split(s: String, sep: String): MutableList<String> {
    var parts: MutableList<String> = mutableListOf<String>()
    var cur = ""
    var i = 0
    while (i < s.length) {
        if (sep.length > 0 && i + sep.length <= s.length && s.substring(i, i + sep.length) == sep) {
            parts = append(parts, cur)
            cur = ""
            i = i + sep.length
        }
        else {
            cur = cur + s.substring(i, i + 1)
            i = i + 1
        }
    }
    parts = append(parts, cur)
    return parts
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<String>
 * @param sep String
 * @return String
 */
fun join(xs: MutableList<String>, sep: String): String {
    var res = ""
    var i = 0
    while (i < xs.size) {
        if (i > 0) {
            res = res + sep
        }
        res = res + xs[i]
        i = i + 1
    }
    return res
}

/**
 * Auto-generated from Mochi
 * @param ch String
 * @param n Int
 * @return String
 */
fun repeat(ch: String, n: Int): String {
    var out = ""
    var i = 0
    while (i < n) {
        out = out + ch
        i = i + 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param str String
 * @return Int
 */
fun parseIntStr(str: String): Int {
    var i = 0
    var neg = false
    if (str.length > 0 && str.substring(0, 1) == "-") {
        neg = true
        i = 1
    }
    var n = 0
    val digits = mutableMapOf("0" to 0, "1" to 1, "2" to 2, "3" to 3, "4" to 4, "5" to 5, "6" to 6, "7" to 7, "8" to 8, "9" to 9)
    while (i < str.length) {
        n = n * 10 + digits[str.substring(i, i + 1)]
        i = i + 1
    }
    if (neg) {
        n = -n
    }
    return n
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @param bits Int
 * @return String
 */
fun toBinary(n: Int, bits: Int): String {
    var b = ""
    var `val` = n
    var i = 0
    while (i < bits) {
        b = `val` % 2.toString() + b
        `val` = (((`val`).toDouble() / (2).toDouble())).toInt()
        i = i + 1
    }
    return b
}

/**
 * Auto-generated from Mochi
 * @param bits String
 * @return Int
 */
fun binToInt(bits: String): Int {
    var n = 0
    var i = 0
    while (i < bits.length) {
        n = n * 2 + parseIntStr(bits.substring(i, i + 1))
        i = i + 1
    }
    return n
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param width Int
 * @return String
 */
fun padRight(s: String, width: Int): String {
    var out = s
    while (out.length < width) {
        out = out + " "
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param cidr String
 * @return String
 */
fun canonicalize(cidr: String): String {
    val parts = split(cidr, "/")
    val dotted = parts[0]
    val size = parseIntStr(parts[1])
    var binParts: MutableList<String> = mutableListOf<String>()
    for (p in split(dotted, ".")) {
        binParts = append(binParts, toBinary(parseIntStr(p), 8))
    }
    var binary = join(binParts, "")
    binary = binary.substring(0, size) + repeat("0", 32 - size)
    var canonParts: MutableList<String> = mutableListOf<String>()
    var i = 0
    while (i < binary.length) {
        canonParts = append(canonParts, binToInt(binary.substring(i, i + 8)).toString())
        i = i + 8
    }
    return join(canonParts, ".") + "/" + parts[1]
}

fun main() {
    for (t in tests) {
        println(padRight(t, 18) + " -> " + canonicalize(t))
    }
}
