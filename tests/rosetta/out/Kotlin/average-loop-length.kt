// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from average-loop-length.mochi

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun absf(x: Double): Double {
    if (x < 0.0) {
        return -x
    }
    return x
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun floorf(x: Double): Double {
    return ((x).toInt()) as Double
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param ch String
 * @return Int
 */
fun indexOf(s: String, ch: String): Int {
    var i = 0
    while (i < s.length) {
        if (s.substring(i, i + 1) == ch) {
            return i
        }
        i = i + 1
    }
    return -1
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return String
 */
fun fmtF(x: Double): String {
    var y = floorf(x * 10000.0 + 0.5) / 10000.0
    var s = y.toString()
    var dot = indexOf(s, ".")
    if (dot == 0 - 1) {
        s = s + ".0000"
    }
    else {
        var decs = s.length - dot - 1
        if (decs > 4) {
            s = s.substring(0, dot + 5)
        }
        else {
            while (decs < 4) {
                s = s + "0"
                decs = decs + 1
            }
        }
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @param width Int
 * @return String
 */
fun padInt(n: Int, width: Int): String {
    var s = n.toString()
    while (s.length < width) {
        s = " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @param width Int
 * @return String
 */
fun padFloat(x: Double, width: Int): String {
    var s = fmtF(x)
    while (s.length < width) {
        s = " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Double
 */
fun avgLen(n: Int): Double {
    val tests = 10000
    var sum = 0
    var seed = 1
    var t = 0
    while (t < tests) {
        var visited: MutableList<Boolean> = mutableListOf<Boolean>()
        var i = 0
        while (i < n) {
            visited = append(visited, false)
            i = i + 1
        }
        var x = 0
        while (!visited[x]) {
            visited[x] = true
            sum = sum + 1
            seed = (seed * 1664525 + 1013904223) % 2147483647
            x = seed % n
        }
        t = t + 1
    }
    return (sum as Double) / (tests).toDouble()
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Double
 */
fun ana(n: Int): Double {
    var nn = n as Double
    var term = 1.0
    var sum = 1.0
    var i = nn - 1.0
    while (i >= 1.0) {
        term = term * (i / nn)
        sum = sum + term
        i = i - 1.0
    }
    return sum
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val nmax = 20
    println(" N    average    analytical    (error)")
    println("===  =========  ============  =========")
    var n = 1
    while (n <= nmax) {
        val a = avgLen(n)
        val b = ana(n)
        val err = absf(a - b) / b * 100.0
        var line = padInt(n, 3) + "  " + padFloat(a, 9) + "  " + padFloat(b, 12) + "  (" + padFloat(err, 6) + "%)"
        println(line)
        n = n + 1
    }
}

