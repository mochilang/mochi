// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}
// Code generated from brilliant-numbers.mochi

var primes = primesUpTo(3200000)

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return MutableList<Int>
 */
fun primesUpTo(n: Int): MutableList<Int> {
    var sieve: MutableList<Boolean> = mutableListOf<Boolean>()
    var i = 0
    while (i <= n) {
        sieve = append(sieve, true)
        i = i + 1
    }
    var p = 2
    while (p * p <= n) {
        if (sieve[p]) {
            var m = p * p
            while (m <= n) {
                sieve[m] = false
                m = m + p
            }
        }
        p = p + 1
    }
    var res: MutableList<Int> = mutableListOf<Int>()
    var x = 2
    while (x <= n) {
        if (sieve[x]) {
            res = append(res, x)
        }
        x = x + 1
    }
    return res
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Int>
 * @return MutableList<Int>
 */
fun sortInts(xs: MutableList<Int>): MutableList<Int> {
    var res: MutableList<Int> = mutableListOf<Int>()
    var tmp = xs
    while (tmp.size > 0) {
        var min = tmp[0]
        var idx = 0
        var i = 1
        while (i < tmp.size) {
            if (tmp[i] < min) {
                min = tmp[i]
                idx = i
            }
            i = i + 1
        }
        res = append(res, min)
        var out: MutableList<Int> = mutableListOf<Int>()
        var j = 0
        while (j < tmp.size) {
            if (j != idx) {
                out = append(out, tmp[j])
            }
            j = j + 1
        }
        tmp = out
    }
    return res
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return String
 */
fun commatize(n: Int): String {
    var s = n.toString()
    var i = s.length - 3
    while (i >= 1) {
        s = s.substring(0, i) + "," + s.substring(i, s.length)
        i = i - 3
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param digits Int
 * @param limit Int
 * @param countOnly Boolean
 * @return MutableMap<String, Any>
 */
fun getBrilliant(digits: Int, limit: Int, countOnly: Boolean): MutableMap<String, Any> {
    var brilliant: MutableList<Int> = mutableListOf<Int>()
    var count = 0
    var pow = 1
    var next = 999999999999999
    var k = 1
    while (k <= digits) {
        var s: MutableList<Int> = mutableListOf<Int>()
        for (p in primes) {
            if (p >= pow * 10) {
                break
            }
            if (p > pow) {
                s = append(s, p)
            }
        }
        var i = 0
        while (i < s.size) {
            var j = i
            while (j < s.size) {
                var prod = s[i] * s[j]
                if (prod < limit) {
                    if (countOnly) {
                        count = count + 1
                    }
                    else {
                        brilliant = append(brilliant, prod)
                    }
                }
                else {
                    if (prod < next) {
                        next = prod
                    }
                    break
                }
                j = j + 1
            }
            i = i + 1
        }
        pow = pow * 10
        k = k + 1
    }
    if (countOnly) {
        return mutableMapOf("bc" to count, "next" to next)
    }
    return mutableMapOf("bc" to brilliant, "next" to next)
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    println("First 100 brilliant numbers:")
    val r = getBrilliant(2, 10000, false)
    var br = sortInts(r["bc"])
    br = br.subList(0, 100)
    var i = 0
    while (i < br.size) {
        println(listOf(br[i].toString().padStart(4, " ") + " ", false).joinToString(" "))
        if ((i + 1) % 10 == 0) {
            println(listOf("", true).joinToString(" "))
        }
        i = i + 1
    }
    println(listOf("", true).joinToString(" "))
    var k = 1
    while (k <= 13) {
        val limit = pow(10, k)
        val r2 = getBrilliant(k, limit, true)
        val total = r2["bc"]
        val next = r2["next"]
        val climit = commatize(limit)
        val ctotal = commatize(toInt(total) + 1)
        val cnext = commatize(next)
        println("First >= " + toDouble(climit.padStart(18, " ")) + " is " + toDouble(ctotal.padStart(14, " ")) + " in the series: " + toDouble(cnext.padStart(18, " ")))
        k = k + 1
    }
}

