// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from blum-integer.mochi

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Boolean
 */
fun isPrime(n: Int): Boolean {
    if (n < 2) {
        return false
    }
    if (n % 2 == 0) {
        return n == 2
    }
    if (n % 3 == 0) {
        return n == 3
    }
    var d = 5
    while (d * d <= n) {
        if (n % d == 0) {
            return false
        }
        d = d + 2
        if (n % d == 0) {
            return false
        }
        d = d + 4
    }
    return true
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Int
 */
fun firstPrimeFactor(n: Int): Int {
    if (n == 1) {
        return 1
    }
    if (n % 3 == 0) {
        return 3
    }
    if (n % 5 == 0) {
        return 5
    }
    var inc = mutableListOf(4, 2, 4, 2, 4, 6, 2, 6)
    var k = 7
    var i = 0
    while (k * k <= n) {
        if (n % k == 0) {
            return k
        }
        k = k + inc[i]
        i = (i + 1) % inc.size
    }
    return n
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param ch String
 * @return Int
 */
fun indexOf(s: String, ch: String): Int {
    var i = 0
    while (i < s.length) {
        if (s.substring(i, i + 1) == ch) {
            return i
        }
        i = i + 1
    }
    return -1
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @param width Int
 * @return String
 */
fun padLeft(n: Int, width: Int): String {
    var s = n.toString()
    while (s.length < width) {
        s = " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param f Double
 * @param prec Int
 * @return String
 */
fun formatFloat(f: Double, prec: Int): String {
    val s = f.toString()
    val idx = indexOf(s, ".")
    if (idx < 0) {
        return s
    }
    val need = idx + 1 + prec
    if (s.length > need) {
        return s.substring(0, need)
    }
    return s
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    var blum: MutableList<Int> = mutableListOf<Int>()
    var counts = mutableListOf(0, 0, 0, 0)
    var digits = mutableListOf(1, 3, 7, 9)
    var i = 1
    var bc = 0
    while (true) {
        val p = firstPrimeFactor(i)
        if (p % 4 == 3) {
            val q = (((i).toDouble() / (p).toDouble())).toInt()
            if (q != p && q % 4 == 3 && isPrime(q)) {
                if (bc < 50) {
                    blum = append(blum, i)
                }
                val d = i % 10
                if (d == 1) {
                    counts[0] = counts[0] + 1
                }
                else
                if (d == 3) {
                    counts[1] = counts[1] + 1
                }
                else
                if (d == 7) {
                    counts[2] = counts[2] + 1
                }
                else
                if (d == 9) {
                    counts[3] = counts[3] + 1
                }
                bc = bc + 1
                if (bc == 50) {
                    println("First 50 Blum integers:")
                    var idx = 0
                    while (idx < 50) {
                        var line = ""
                        var j = 0
                        while (j < 10) {
                            line = line + padLeft(blum[idx], 3) + " "
                            idx = idx + 1
                            j = j + 1
                        }
                        println(line.substring(0, line.length - 1))
                    }
                    break
                }
            }
        }
        if (i % 5 == 3) {
            i = i + 4
        }
        else {
            i = i + 2
        }
    }
}

