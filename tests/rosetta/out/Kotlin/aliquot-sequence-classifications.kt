// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from aliquot-sequence-classifications.mochi

val THRESHOLD = 140737488355328

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Int>
 * @param value Int
 * @return Int
 */
fun indexOf(xs: MutableList<Int>, value: Int): Int {
    var i = 0
    while (i < xs.size) {
        if (xs[i] == value) {
            return i
        }
        i = i + 1
    }
    return 0 - 1
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Int>
 * @param value Int
 * @return Boolean
 */
fun contains(xs: MutableList<Int>, value: Int): Boolean {
    return indexOf(xs, value) != 0 - 1
}

/**
 * Auto-generated from Mochi
 * @param a Int
 * @param b Int
 * @return Int
 */
fun maxOf(a: Int, b: Int): Int {
    if (a > b) {
        return a
    }
    else {
        return b
    }
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Int
 */
fun intSqrt(n: Int): Int {
    if (n == 0) {
        return 0
    }
    var x = n
    var y = ((x + 1)).toDouble() / (2).toDouble()
    while (y < x) {
        x = y
        y = ((x).toDouble() + (n).toDouble() / (x).toDouble()) / (2).toDouble()
    }
    return x
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Int
 */
fun sumProperDivisors(n: Int): Int {
    if (n < 2) {
        return 0
    }
    val sqrt = intSqrt(n)
    var sum = 1
    var i = 2
    while (i <= sqrt) {
        if (n % i == 0) {
            sum = (sum + i).toDouble() + (n).toDouble() / (i).toDouble()
        }
        i = i + 1
    }
    if (sqrt * sqrt == n) {
        sum = sum - sqrt
    }
    return sum
}

/**
 * Auto-generated from Mochi
 * @param k Int
 * @return MutableMap<String, Any>
 */
fun classifySequence(k: Int): MutableMap<String, Any> {
    var last = k
    var seq: MutableList<Int> = mutableListOf(k)
    while (true) {
        last = sumProperDivisors(last)
        seq = append(seq, last)
        val n = seq.size
        var aliquot = ""
        if (last == 0) {
            aliquot = "Terminating"
        }
        else
        if (n == 2 && last == k) {
            aliquot = "Perfect"
        }
        else
        if (n == 3 && last == k) {
            aliquot = "Amicable"
        }
        else
        if (n >= 4 && last == k) {
            aliquot = "Sociable[" + n - 1.toString() + "]"
        }
        else
        if (last == seq[n - 2]) {
            aliquot = "Aspiring"
        }
        else
        if (contains(seq.subList(1, maxOf(1, n - 2)), last)) {
            val idx = indexOf(seq, last)
            aliquot = "Cyclic[" + n - 1 - idx.toString() + "]"
        }
        else
        if (n == 16 || last > THRESHOLD) {
            aliquot = "Non-Terminating"
        }
        if (aliquot != "") {
            return mutableMapOf("seq" to seq, "aliquot" to aliquot)
        }
    }
    return mutableMapOf("seq" to seq, "aliquot" to "")
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @param w Int
 * @return String
 */
fun padLeft(n: Int, w: Int): String {
    var s = n.toString()
    while (s.length < w) {
        s = " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param w Int
 * @return String
 */
fun padRight(s: String, w: Int): String {
    var r = s
    while (r.length < w) {
        r = r + " "
    }
    return r
}

/**
 * Auto-generated from Mochi
 * @param seq MutableList<Int>
 * @return String
 */
fun joinWithCommas(seq: MutableList<Int>): String {
    var s = "["
    var i = 0
    while (i < seq.size) {
        s = s + seq[i].toString()
        if (i < seq.size - 1) {
            s = s + ", "
        }
        i = i + 1
    }
    s = s + "]"
    return s
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    println("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n")
    var k = 1
    while (k <= 10) {
        val res = classifySequence(k)
        println(padLeft(k, 2) + ": " + padRight((res["aliquot"] as Any?).toString(), 15) + " " + joinWithCommas((res["seq"] as Any?) as MutableList<Int>))
        k = k + 1
    }
    println("")
    val s = mutableListOf(11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488)
    var i = 0
    while (i < s.size) {
        val `val` = s[i]
        val res = classifySequence(`val`)
        println(padLeft(`val`, 7) + ": " + padRight((res["aliquot"] as Any?).toString(), 15) + " " + joinWithCommas((res["seq"] as Any?) as MutableList<Int>))
        i = i + 1
    }
    println("")
    val big = 15355717786080
    val r = classifySequence(big)
    println(big.toString() + ": " + padRight((r["aliquot"] as Any?).toString(), 15) + " " + joinWithCommas((r["seq"] as Any?) as MutableList<Int>))
}

