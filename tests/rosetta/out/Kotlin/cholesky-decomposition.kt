// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from cholesky-decomposition.mochi

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun sqrtApprox(x: Double): Double {
    var guess = x
    var i = 0
    while (i < 20) {
        guess = (guess + x / guess) / 2.0
        i = i + 1
    }
    return guess
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<MutableList<Double>>
 * @return MutableList<MutableList<Double>>
 */
fun cholesky(a: MutableList<MutableList<Double>>): MutableList<MutableList<Double>> {
    val n = a.size
    var l: MutableList<MutableList<Double>> = mutableListOf<MutableList<Double>>()
    var i = 0
    while (i < n) {
        var row: MutableList<Double> = mutableListOf<Double>()
        var j = 0
        while (j < n) {
            row = append(row, 0.0)
            j = j + 1
        }
        l = append(l, row)
        i = i + 1
    }
    i = 0
    while (i < n) {
        var j = 0
        while (j <= i) {
            var sum = (a[i] as MutableList<Double>)[j]
            var k = 0
            while (k < j) {
                sum = sum - (l[i] as MutableList<Double>)[k] * (l[j] as MutableList<Double>)[k]
                k = k + 1
            }
            if (i == j) {
                l[i]!![j] = sqrtApprox(sum)
            }
            else {
                l[i]!![j] = sum / (l[j] as MutableList<Double>)[j]
            }
            j = j + 1
        }
        i = i + 1
    }
    return l
}

/**
 * Auto-generated from Mochi
 * @param m MutableList<MutableList<Double>>
 */
fun printMat(m: MutableList<MutableList<Double>>): Unit {
    var i = 0
    while (i < m.size) {
        var line = ""
        var j = 0
        while (j < m[i].size) {
            line = line + (m[i] as MutableList<Double>)[j].toString()
            if (j < m[i].size - 1) {
                line = line + " "
            }
            j = j + 1
        }
        println(line)
        i = i + 1
    }
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<MutableList<Double>>
 */
fun demo(a: MutableList<MutableList<Double>>): Unit {
    println("A:")
    printMat(a)
    val l = cholesky(a)
    println("L:")
    printMat(l)
}

fun main() {
    demo(mutableListOf(mutableListOf(25.0, 15.0, -5.0), mutableListOf(15.0, 18.0, 0.0), mutableListOf(-5.0, 0.0, 11.0)))
    demo(mutableListOf(mutableListOf(18.0, 22.0, 54.0, 42.0), mutableListOf(22.0, 70.0, 86.0, 62.0), mutableListOf(54.0, 86.0, 174.0, 134.0), mutableListOf(42.0, 62.0, 134.0, 106.0)))
}
