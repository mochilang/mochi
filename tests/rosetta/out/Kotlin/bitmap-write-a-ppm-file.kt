// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from bitmap-write-a-ppm-file.mochi

data class Colour(var R: Int, var G: Int, var B: Int)

data class Bitmap(var width: Int, var height: Int, var pixels: MutableList<MutableList<Colour>>)

/**
 * Auto-generated from Mochi
 * @param w Int
 * @param h Int
 * @param c Colour
 * @return Bitmap
 */
fun newBitmap(w: Int, h: Int, c: Colour): Bitmap {
    var rows: MutableList<MutableList<Colour>> = mutableListOf<MutableList<Colour>>()
    var y = 0
    while (y < h) {
        var row: MutableList<Colour> = mutableListOf<Colour>()
        var x = 0
        while (x < w) {
            row = append(row, c)
            x = x + 1
        }
        rows = append(rows, row)
        y = y + 1
    }
    return Bitmap(width = w, height = h, pixels = rows)
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @param x Int
 * @param y Int
 * @param c Colour
 */
fun setPixel(b: Bitmap, x: Int, y: Int, c: Colour): Unit {
    var rows = b.pixels
    var row = rows[y]
    row[x] = c
    rows[y] = row
    b.pixels = rows
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @param x Int
 * @param y Int
 * @param w Int
 * @param h Int
 * @param c Colour
 */
fun fillRect(b: Bitmap, x: Int, y: Int, w: Int, h: Int, c: Colour): Unit {
    var yy = y
    while (yy < y + h) {
        var xx = x
        while (xx < x + w) {
            setPixel(b, xx, yy, c)
            xx = xx + 1
        }
        yy = yy + 1
    }
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @param width Int
 * @return String
 */
fun pad(n: Int, width: Int): String {
    var s = n.toString()
    while (s.length < width) {
        s = " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param b Bitmap
 * @return String
 */
fun writePPMP3(b: Bitmap): String {
    var maxv = 0
    var y = 0
    while (y < b.height) {
        var x = 0
        while (x < b.width) {
            val p = (b.pixels[y] as MutableList<Colour>)[x]
            if (p.R > maxv) {
                maxv = p.R
            }
            if (p.G > maxv) {
                maxv = p.G
            }
            if (p.B > maxv) {
                maxv = p.B
            }
            x = x + 1
        }
        y = y + 1
    }
    var out = "P3\n# generated from Bitmap.writeppmp3\n" + b.width.toString() + " " + b.height.toString() + "\n" + maxv.toString() + "\n"
    var numsize = maxv.toString().size
    y = b.height - 1
    while (y >= 0) {
        var line = ""
        var x = 0
        while (x < b.width) {
            val p = (b.pixels[y] as MutableList<Colour>)[x]
            line = line + "   " + pad(p.R, numsize) + " " + pad(p.G, numsize) + " " + pad(p.B, numsize)
            x = x + 1
        }
        out = out + line
        if (y > 0) {
            out = out + "\n"
        }
        else {
            out = out + "\n"
        }
        y = y - 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val black = Colour(R = 0, G = 0, B = 0)
    val white = Colour(R = 255, G = 255, B = 255)
    var bm = newBitmap(4, 4, black)
    fillRect(bm, 1, 0, 1, 2, white)
    setPixel(bm, 3, 3, Colour(R = 127, G = 0, B = 63))
    val ppm = writePPMP3(bm)
    println(ppm)
}

