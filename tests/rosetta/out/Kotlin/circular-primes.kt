// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from circular-primes.mochi

var circs: MutableList<Int> = mutableListOf<Int>()

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Boolean
 */
fun isPrime(n: Int): Boolean {
    if (n < 2) {
        return false
    }
    if (n % 2 == 0) {
        return n == 2
    }
    if (n % 3 == 0) {
        return n == 3
    }
    var d = 5
    while (d * d <= n) {
        if (n % d == 0) {
            return false
        }
        d = d + 2
        if (n % d == 0) {
            return false
        }
        d = d + 4
    }
    return true
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Boolean
 */
fun isCircular(n: Int): Boolean {
    var nn = n
    var pow = 1
    while (nn > 0) {
        pow = pow * 10
        nn = (nn).toDouble() / (10).toDouble()
    }
    nn = n
    while (true) {
        nn = nn * 10
        val f = (nn).toDouble() / (pow).toDouble()
        nn = (nn).toDouble() + f * ((1 - pow)).toDouble()
        if (nn == n) {
            break
        }
        if (!isPrime(nn)) {
            return false
        }
    }
    return true
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Int>
 * @return String
 */
fun showList(xs: MutableList<Int>): String {
    var out = "["
    var i = 0
    while (i < xs.size) {
        out = out + xs[i].toString()
        if (i < xs.size - 1) {
            out = out + ", "
        }
        i = i + 1
    }
    return out + "]"
}

fun main() {
    println("The first 19 circular primes are:")
    var digits = mutableListOf(1, 3, 7, 9)
    var q = mutableListOf(1, 2, 3, 5, 7, 9)
    var fq = mutableListOf(1, 2, 3, 5, 7, 9)
    var count = 0
    while (true) {
        val f = q[0]
        val fd = fq[0]
        if (isPrime(f) && isCircular(f)) {
            circs = append(circs, f)
            count = count + 1
            if (count == 19) {
                break
            }
        }
        q = q.subList(1, q.size)
        fq = fq.subList(1, fq.size)
        if (f != 2 && f != 5) {
            for (d in digits) {
                q = append(q, f * 10 + d)
                fq = append(fq, fd)
            }
        }
    }
    println(showList(circs))
    println("\nThe next 4 circular primes, in repunit format, are:")
    println("[R(19) R(23) R(317) R(1031)]")
    println("\nThe following repunits are probably circular primes:")
    for (i in mutableListOf(5003, 9887, 15073, 25031, 35317, 49081)) {
        println("R(" + i.toString() + ") : true")
    }
}
