// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from boyer-moore-string-search.mochi

/**
 * Auto-generated from Mochi
 * @param h String
 * @param n String
 * @return Int
 */
fun indexOfStr(h: String, n: String): Int {
    val hlen = h.length
    val nlen = n.length
    if (nlen == 0) {
        return 0
    }
    var i = 0
    while (i <= hlen - nlen) {
        if (h.substring(i, i + nlen) == n) {
            return i
        }
        i = i + 1
    }
    return -1
}

/**
 * Auto-generated from Mochi
 * @param h String
 * @param n String
 * @return Int
 */
fun stringSearchSingle(h: String, n: String): Int {
    return indexOfStr(h, n)
}

/**
 * Auto-generated from Mochi
 * @param h String
 * @param n String
 * @return MutableList<Int>
 */
fun stringSearch(h: String, n: String): MutableList<Int> {
    var result: MutableList<Int> = mutableListOf<Int>()
    var start = 0
    val hlen = h.length
    val nlen = n.length
    while (start < hlen) {
        val idx = indexOfStr(h.substring(start, hlen), n)
        if (idx >= 0) {
            result = append(result, start + idx)
            start = start + idx + nlen
        }
        else {
            break
        }
    }
    return result
}

/**
 * Auto-generated from Mochi
 * @param nums MutableList<Int>
 * @return String
 */
fun display(nums: MutableList<Int>): String {
    var s = "["
    var i = 0
    while (i < nums.size) {
        if (i > 0) {
            s = s + ", "
        }
        s = s + nums[i].toString()
        i = i + 1
    }
    s = s + "]"
    return s
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val texts = mutableListOf("GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk.")
    val patterns = mutableListOf("TCTA", "TAATAAA", "word", "needle", "and", "alfalfa")
    var i = 0
    while (i < texts.size) {
        println("text" + i + 1.toString() + " = " + texts[i])
        i = i + 1
    }
    println("")
    var j = 0
    while (j < texts.size) {
        val idxs = stringSearch(texts[j], patterns[j])
        println("Found \"" + patterns[j] + "\" in 'text" + j + 1.toString() + "' at indexes " + display(idxs))
        j = j + 1
    }
}

