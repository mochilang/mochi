// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)
// Code generated from 4-rings-or-4-squares-puzzle.mochi

val r1 = getCombs(1, 7, true)

val r2 = getCombs(3, 9, true)

val r3 = getCombs(0, 9, false)

/**
 * Auto-generated from Mochi
 * @param a Int
 * @param b Int
 * @param c Int
 * @param d Int
 * @param e Int
 * @param f Int
 * @param g Int
 * @return Boolean
 */
fun validComb(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int, g: Int): Boolean {
    val square1 = a + b
    val square2 = b + c + d
    val square3 = d + e + f
    val square4 = f + g
    return square1 == square2 && square2 == square3 && square3 == square4
}

/**
 * Auto-generated from Mochi
 * @param a Int
 * @param b Int
 * @param c Int
 * @param d Int
 * @param e Int
 * @param f Int
 * @param g Int
 * @return Boolean
 */
fun isUnique(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int, g: Int): Boolean {
    var nums = mutableListOf(a, b, c, d, e, f, g)
    var i = 0
    while (i < nums.size) {
        var j = i + 1
        while (j < nums.size) {
            if (nums[i] == nums[j]) {
                return false
            }
            j = j + 1
        }
        i = i + 1
    }
    return true
}

/**
 * Auto-generated from Mochi
 * @param low Int
 * @param high Int
 * @param unique Boolean
 * @return MutableMap<String, Any>
 */
fun getCombs(low: Int, high: Int, unique: Boolean): MutableMap<String, Any> {
    var valid = mutableListOf<Any?>()
    var count = 0
    for (b in low until (high + 1)) {
        for (c in low until (high + 1)) {
            for (d in low until (high + 1)) {
                val s = b + c + d
                for (e in low until (high + 1)) {
                    for (f in low until (high + 1)) {
                        val a = s - b
                        val g = s - f
                        if (a < low || a > high) {
                            continue
                        }
                        if (g < low || g > high) {
                            continue
                        }
                        if (d + e + f != s) {
                            continue
                        }
                        if (f + g != s) {
                            continue
                        }
                        if (!unique || isUnique(a, b, c, d, e, f, g)) {
                            valid = append(valid, mutableListOf(a, b, c, d, e, f, g))
                            count = count + 1
                        }
                    }
                }
            }
        }
    }
    return mutableMapOf("count" to count, "list" to valid)
}

fun main() {
    println(r1["count"].toString() + " unique solutions in 1 to 7")
    println(r1["list"])
    println(r2["count"].toString() + " unique solutions in 3 to 9")
    println(r2["list"])
    println(r3["count"].toString() + " non-unique solutions in 0 to 9")
}
