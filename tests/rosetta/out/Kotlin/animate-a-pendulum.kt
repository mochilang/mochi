// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// Code generated from animate-a-pendulum.mochi

val PI = 3.141592653589793

val L = 10.0

val G = 9.81

val dt = 0.2

val phi0 = PI / 4.0

val omega = sqrtApprox(G / L)

var t = 0.0

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun sinApprox(x: Double): Double {
    var term = x
    var sum = x
    var n = 1
    while (n <= 10) {
        val denom = ((2 * n) * (2 * n + 1)) as Double
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    }
    return sum
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun cosApprox(x: Double): Double {
    var term = 1.0
    var sum = 1.0
    var n = 1
    while (n <= 10) {
        val denom = ((2 * n - 1) * (2 * n)) as Double
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    }
    return sum
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun sqrtApprox(x: Double): Double {
    var guess = x
    var i = 0
    while (i < 10) {
        guess = (guess + x / guess) / 2.0
        i = i + 1
    }
    return guess
}

fun main() {
    for (step in 0 until 10) {
        val phi = phi0 * cosApprox(omega * t)
        val pos = ((10.0 * sinApprox(phi) + 0.5)).toInt()
        println(pos.toString())
        t = t + dt
    }
}
