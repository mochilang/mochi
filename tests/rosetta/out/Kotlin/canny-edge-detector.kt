// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from canny-edge-detector.mochi

val PI = 3.141592653589793

/**
 * Auto-generated from Mochi
 * @param img MutableList<MutableList<Double>>
 * @param k MutableList<MutableList<Double>>
 * @return MutableList<MutableList<Double>>
 */
fun conv2d(img: MutableList<MutableList<Double>>, k: MutableList<MutableList<Double>>): MutableList<MutableList<Double>> {
    val h = img.size
    val w = img[0].size
    val n = k.size
    val half = (n).toDouble() / (2).toDouble()
    var out: MutableList<MutableList<Double>> = mutableListOf<MutableList<Double>>()
    var y = 0
    while (y < h) {
        var row: MutableList<Double> = mutableListOf<Double>()
        var x = 0
        while (x < w) {
            var sum = 0.0
            var j = 0
            while (j < n) {
                var i = 0
                while (i < n) {
                    var yy = (y + j).toDouble() - half
                    if (yy < 0) {
                        yy = 0
                    }
                    if (yy >= h) {
                        yy = h - 1
                    }
                    var xx = (x + i).toDouble() - half
                    if (xx < 0) {
                        xx = 0
                    }
                    if (xx >= w) {
                        xx = w - 1
                    }
                    sum = sum + (img[yy] as MutableList<Double>)[xx] * (k[j] as MutableList<Double>)[i]
                    i = i + 1
                }
                j = j + 1
            }
            row = append(row, sum)
            x = x + 1
        }
        out = append(out, row)
        y = y + 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param img MutableList<MutableList<Double>>
 * @return MutableList<MutableList<Double>>
 */
fun gradient(img: MutableList<MutableList<Double>>): MutableList<MutableList<Double>> {
    val hx = mutableListOf(mutableListOf(-1.0, 0.0, 1.0), mutableListOf(-2.0, 0.0, 2.0), mutableListOf(-1.0, 0.0, 1.0))
    val hy = mutableListOf(mutableListOf(1.0, 2.0, 1.0), mutableListOf(0.0, 0.0, 0.0), mutableListOf(-1.0, -2.0, -1.0))
    var gx = conv2d(img, hx)
    var gy = conv2d(img, hy)
    var h = img.size
    var w = img[0].size
    var out: MutableList<MutableList<Double>> = mutableListOf<MutableList<Double>>()
    var y = 0
    while (y < h) {
        var row: MutableList<Double> = mutableListOf<Double>()
        var x = 0
        while (x < w) {
            val g = (gx[y] as MutableList<Double>)[x] * (gx[y] as MutableList<Double>)[x] + (gy[y] as MutableList<Double>)[x] * (gy[y] as MutableList<Double>)[x]
            row = append(row, g)
            x = x + 1
        }
        out = append(out, row)
        y = y + 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param g MutableList<MutableList<Double>>
 * @param t Double
 * @return MutableList<MutableList<Int>>
 */
fun threshold(g: MutableList<MutableList<Double>>, t: Double): MutableList<MutableList<Int>> {
    var h = g.size
    var w = g[0].size
    var out: MutableList<MutableList<Int>> = mutableListOf<MutableList<Int>>()
    var y = 0
    while (y < h) {
        var row: MutableList<Int> = mutableListOf<Int>()
        var x = 0
        while (x < w) {
            if ((g[y] as MutableList<Double>)[x] >= t) {
                row = append(row, 1)
            }
            else {
                row = append(row, 0)
            }
            x = x + 1
        }
        out = append(out, row)
        y = y + 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param m MutableList<MutableList<Int>>
 */
fun printMatrix(m: MutableList<MutableList<Int>>): Unit {
    var y = 0
    while (y < m.size) {
        var line = ""
        var x = 0
        while (x < m[0].size) {
            line = line + (m[y] as MutableList<Int>)[x].toString()
            if (x < m[0].size - 1) {
                line = line + " "
            }
            x = x + 1
        }
        println(line)
        y = y + 1
    }
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val img = mutableListOf(mutableListOf(0.0, 0.0, 0.0, 0.0, 0.0), mutableListOf(0.0, 255.0, 255.0, 255.0, 0.0), mutableListOf(0.0, 255.0, 255.0, 255.0, 0.0), mutableListOf(0.0, 255.0, 255.0, 255.0, 0.0), mutableListOf(0.0, 0.0, 0.0, 0.0, 0.0))
    val g = gradient(img)
    val edges = threshold(g, 1020.0 * 1020.0)
    printMatrix(edges)
}

