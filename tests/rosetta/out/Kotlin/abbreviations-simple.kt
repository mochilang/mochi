// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from abbreviations-simple.mochi

/**
 * Auto-generated from Mochi
 * @param s String
 * @return MutableList<String>
 */
fun fields(s: String): MutableList<String> {
    var words: MutableList<String> = mutableListOf<String>()
    var cur = ""
    var i = 0
    while (i < s.length) {
        val ch = s.substring(i, i + 1)
        if (ch == " " || ch == "\n" || ch == "\t") {
            if (cur.length > 0) {
                words = append(words, cur)
                cur = ""
            }
        }
        else {
            cur = cur + ch
        }
        i = i + 1
    }
    if (cur.length > 0) {
        words = append(words, cur)
    }
    return words
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param width Int
 * @return String
 */
fun padRight(s: String, width: Int): String {
    var out = s
    var i = s.length
    while (i < width) {
        out = out + " "
        i = i + 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<String>
 * @param sep String
 * @return String
 */
fun join(xs: MutableList<String>, sep: String): String {
    var res = ""
    var i = 0
    while (i < xs.size) {
        if (i > 0) {
            res = res + sep
        }
        res = res + xs[i]
        i = i + 1
    }
    return res
}

/**
 * Auto-generated from Mochi
 * @param str String
 * @return Int
 */
fun parseIntStr(str: String): Int {
    var i = 0
    var neg = false
    if (str.length > 0 && str.substring(0, 1) == "-") {
        neg = true
        i = 1
    }
    var n = 0
    val digits = mutableMapOf("0" to 0, "1" to 1, "2" to 2, "3" to 3, "4" to 4, "5" to 5, "6" to 6, "7" to 7, "8" to 8, "9" to 9)
    while (i < str.length) {
        n = n * 10 + digits[str.substring(i, i + 1)]
        i = i + 1
    }
    if (neg) {
        n = -n
    }
    return n
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @return Boolean
 */
fun isDigits(s: String): Boolean {
    if (s.length == 0) {
        return false
    }
    var i = 0
    while (i < s.length) {
        val ch = s.substring(i, i + 1)
        if (ch < "0" || ch > "9") {
            return false
        }
        i = i + 1
    }
    return true
}

/**
 * Auto-generated from Mochi
 * @param table String
 * @return MutableMap<String, Any>
 */
fun readTable(table: String): MutableMap<String, Any> {
    val toks = fields(table)
    var cmds: MutableList<String> = mutableListOf<String>()
    var mins: MutableList<Int> = mutableListOf<Int>()
    var i = 0
    while (i < toks.size) {
        val cmd = toks[i]
        var minlen = cmd.length
        i = i + 1
        if (i < toks.size && isDigits(toks[i])) {
            val num = parseIntStr(toks[i])
            if (num >= 1 && num < cmd.length) {
                minlen = num
                i = i + 1
            }
        }
        cmds = append(cmds, cmd)
        mins = append(mins, minlen)
    }
    return mutableMapOf("commands" to cmds, "mins" to mins)
}

/**
 * Auto-generated from Mochi
 * @param commands MutableList<String>
 * @param mins MutableList<Int>
 * @param words MutableList<String>
 * @return MutableList<String>
 */
fun validate(commands: MutableList<String>, mins: MutableList<Int>, words: MutableList<String>): MutableList<String> {
    var results: MutableList<String> = mutableListOf<String>()
    var wi = 0
    while (wi < words.size) {
        val w = words[wi]
        var found = false
        val wlen = w.length
        var ci = 0
        while (ci < commands.size) {
            val cmd = commands[ci]
            if (mins[ci] != 0 && wlen >= mins[ci] && wlen <= cmd.length) {
                val c = upper(cmd)
                val ww = upper(w)
                if (c.substring(0, wlen) == ww) {
                    results = append(results, c)
                    found = true
                    break
                }
            }
            ci = ci + 1
        }
        if (!found) {
            results = append(results, "*error*")
        }
        wi = wi + 1
    }
    return results
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val table = "" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 " + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate " + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 " + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load " + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 " + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 " + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left " + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 "
    val sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
    val tbl = readTable(table)
    val commands = (tbl["commands"] as Any?) as MutableList<String>
    val mins = (tbl["mins"] as Any?) as MutableList<Int>
    val words = fields(sentence)
    val results = validate(commands, mins, words)
    var out1 = "user words:"
    var k = 0
    while (k < words.size) {
        out1 = out1 + " "
        if (k < words.size - 1) {
            out1 = out1 + padRight(words[k], results[k].size)
        }
        else {
            out1 = out1 + words[k]
        }
        k = k + 1
    }
    println(out1)
    println("full words: " + join(results, " "))
}

