// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from arithmetic-derivative.mochi

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return MutableList<Int>
 */
fun primeFactors(n: Int): MutableList<Int> {
    var factors: MutableList<Int> = mutableListOf<Int>()
    var x = n
    while (x % 2 == 0) {
        factors = append(factors, 2)
        x = (((x).toDouble() / (2).toDouble())).toInt()
    }
    var p = 3
    while (p * p <= x) {
        while (x % p == 0) {
            factors = append(factors, p)
            x = (((x).toDouble() / (p).toDouble())).toInt()
        }
        p = p + 2
    }
    if (x > 1) {
        factors = append(factors, x)
    }
    return factors
}

/**
 * Auto-generated from Mochi
 * @param ch String
 * @param n Int
 * @return String
 */
fun repeat(ch: String, n: Int): String {
    var s = ""
    var i = 0
    while (i < n) {
        s = s + ch
        i = i + 1
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param n Double
 * @return Double
 */
fun D(n: Double): Double {
    if (n < 0.0) {
        return -D(-n)
    }
    if (n < 2.0) {
        return 0.0
    }
    var factors: MutableList<Int> = mutableListOf<Int>()
    if (n < 10000000000000000000.0) {
        factors = primeFactors(((n)).toInt())
    }
    else {
        val g = ((n / 100.0)).toInt()
        factors = primeFactors(g)
        factors = append(factors, 2)
        factors = append(factors, 2)
        factors = append(factors, 5)
        factors = append(factors, 5)
    }
    val c = factors.size
    if (c == 1) {
        return 1.0
    }
    if (c == 2) {
        return (factors[0] + factors[1]) as Double
    }
    val d = n / ((factors[0] as Int) as Double)
    return D(d) * ((factors[0] as Int) as Double) + d
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return String
 */
fun pad(n: Int): String {
    var s = n.toString()
    while (s.length < 4) {
        s = " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    var vals: MutableList<Int> = mutableListOf<Int>()
    var n = -99
    while (n < 101) {
        vals = append(vals, ((D(n as Double))).toInt())
        n = n + 1
    }
    var i = 0
    while (i < vals.size) {
        var line = ""
        var j = 0
        while (j < 10) {
            line = line + pad(vals[i + j])
            if (j < 9) {
                line = line + " "
            }
            j = j + 1
        }
        println(line)
        i = i + 10
    }
    var pow = 1.0
    var m = 1
    while (m < 21) {
        pow = pow * 10.0
        var exp = m.toString()
        if (exp.length < 2) {
            exp = exp + " "
        }
        var res = m.toString() + repeat("0", m - 1)
        println("D(10^" + exp + ") / 7 = " + res)
        m = m + 1
    }
}

