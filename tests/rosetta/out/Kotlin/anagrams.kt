// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from anagrams.mochi

/**
 * Auto-generated from Mochi
 * @param s String
 * @return String
 */
fun sortRunes(s: String): String {
    var arr: MutableList<String> = mutableListOf<String>()
    var i = 0
    while (i < s.length) {
        arr = append(arr, s.substring(i, i + 1))
        i = i + 1
    }
    var n = arr.size
    var m = 0
    while (m < n) {
        var j = 0
        while (j < n - 1) {
            if (arr[j] > arr[j + 1]) {
                val tmp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = tmp
            }
            j = j + 1
        }
        m = m + 1
    }
    var out = ""
    i = 0
    while (i < n) {
        out = out + arr[i]
        i = i + 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<String>
 * @return MutableList<String>
 */
fun sortStrings(xs: MutableList<String>): MutableList<String> {
    var res: MutableList<String> = mutableListOf<String>()
    var tmp = xs
    while (tmp.size > 0) {
        var min = tmp[0]
        var idx = 0
        var i = 1
        while (i < tmp.size) {
            if (tmp[i] < min) {
                min = tmp[i]
                idx = i
            }
            i = i + 1
        }
        res = append(res, min)
        var out: MutableList<String> = mutableListOf<String>()
        var j = 0
        while (j < tmp.size) {
            if (j != idx) {
                out = append(out, tmp[j])
            }
            j = j + 1
        }
        tmp = out
    }
    return res
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val words = mutableListOf("abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile")
    var groups: MutableMap<String, MutableList<String>> = mutableMapOf<String, MutableList<String>>()
    var maxLen = 0
    for (w in words) {
        val k = sortRunes(w)
        if (!(k in groups)) {
            groups[k] = mutableListOf(w)
        }
        else {
            groups[k] = append(groups[k], w)
        }
        if (groups[k].size > maxLen) {
            maxLen = groups[k].size
        }
    }
    var printed: MutableMap<String, Boolean> = mutableMapOf<String, Boolean>()
    for (w in words) {
        val k = sortRunes(w)
        if (groups[k].size == maxLen) {
            if (!(k in printed)) {
                var g = sortStrings(groups[k])
                var line = "[" + g[0]
                var i = 1
                while (i < g.size) {
                    line = line + " " + g[i]
                    i = i + 1
                }
                line = line + "]"
                println(line)
                printed[k] = true
            }
        }
    }
}

