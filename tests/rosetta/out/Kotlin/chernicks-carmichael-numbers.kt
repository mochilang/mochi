// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from chernicks-carmichael-numbers.mochi

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Boolean
 */
fun isPrime(n: Int): Boolean {
    if (n < 2) {
        return false
    }
    if (n % 2 == 0) {
        return n == 2
    }
    if (n % 3 == 0) {
        return n == 3
    }
    var d = 5
    while (d * d <= n) {
        if (n % d == 0) {
            return false
        }
        d = d + 2
        if (n % d == 0) {
            return false
        }
        d = d + 4
    }
    return true
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @return MutableList<Int>
 */
fun bigTrim(a: MutableList<Int>): MutableList<Int> {
    var n = a.size
    while (n > 1 && a[n - 1] == 0) {
        a = a.subList(0, n - 1)
        n = n - 1
    }
    return a
}

/**
 * Auto-generated from Mochi
 * @param x Int
 * @return MutableList<Int>
 */
fun bigFromInt(x: Int): MutableList<Int> {
    if (x == 0) {
        return mutableListOf(0)
    }
    var digits: MutableList<Int> = mutableListOf<Int>()
    var n = x
    while (n > 0) {
        digits = append(digits, n % 10)
        n = (n).toDouble() / (10).toDouble()
    }
    return digits
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @param m Int
 * @return MutableList<Int>
 */
fun bigMulSmall(a: MutableList<Int>, m: Int): MutableList<Int> {
    if (m == 0) {
        return mutableListOf(0)
    }
    var res: MutableList<Int> = mutableListOf<Int>()
    var carry = 0
    var i = 0
    while (i < a.size) {
        var prod = a[i] * m + carry
        res = append(res, prod % 10)
        carry = (prod).toDouble() / (10).toDouble()
        i = i + 1
    }
    while (carry > 0) {
        res = append(res, carry % 10)
        carry = (carry).toDouble() / (10).toDouble()
    }
    return bigTrim(res)
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Int>
 * @return String
 */
fun bigToString(a: MutableList<Int>): String {
    var s = ""
    var i = a.size - 1
    while (i >= 0) {
        s = s + a[i].toString()
        i = i - 1
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param k Int
 * @return Int
 */
fun pow2(k: Int): Int {
    var r = 1
    var i = 0
    while (i < k) {
        r = r * 2
        i = i + 1
    }
    return r
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @param m Int
 * @return MutableList<Int>
 */
fun ccFactors(n: Int, m: Int): MutableList<Int> {
    var p = 6 * m + 1
    if (!isPrime(p)) {
        return mutableListOf<Any?>()
    }
    var prod = bigFromInt(p)
    p = 12 * m + 1
    if (!isPrime(p)) {
        return mutableListOf<Any?>()
    }
    prod = bigMulSmall(prod, p)
    var i = 1
    while (i <= n - 2) {
        p = (pow2(i) * 9 * m) + 1
        if (!isPrime(p)) {
            return mutableListOf<Any?>()
        }
        prod = bigMulSmall(prod, p)
        i = i + 1
    }
    return prod
}

/**
 * Auto-generated from Mochi
 * @param start Int
 * @param end Int
 */
fun ccNumbers(start: Int, end: Int): Unit {
    var n = start
    while (n <= end) {
        var m = 1
        if (n > 4) {
            m = pow2(n - 4)
        }
        while (true) {
            val num = ccFactors(n, m)
            if (num.size > 0) {
                println("a(" + n.toString() + ") = " + bigToString(num))
                break
            }
            if (n <= 4) {
                m = m + 1
            }
            else {
                m = m + pow2(n - 4)
            }
        }
        n = n + 1
    }
}

fun main() {
    ccNumbers(3, 9)
}
