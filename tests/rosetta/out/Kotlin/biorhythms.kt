// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// Code generated from biorhythms.mochi

val PI: Double = 3.141592653589793

val TWO_PI: Double = 6.283185307179586

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun sinApprox(x: Double): Double {
    var term = x
    var sum = x
    var n = 1
    while (n <= 8) {
        val denom = ((2 * n) * (2 * n + 1)) as Double
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    }
    return sum
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun floor(x: Double): Double {
    var i = (x).toInt()
    if ((i as Double) > x) {
        i = i - 1
    }
    return i as Double
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun absFloat(x: Double): Double {
    if (x < 0.0) {
        return -x
    }
    return x
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return Int
 */
fun absInt(n: Int): Int {
    if (n < 0) {
        return -n
    }
    return n
}

/**
 * Auto-generated from Mochi
 * @param str String
 * @return Int
 */
fun parseIntStr(str: String): Int {
    var i = 0
    var neg = false
    if (str.length > 0 && str.substring(0, 1) == "-") {
        neg = true
        i = 1
    }
    var n = 0
    val digits = mutableMapOf("0" to 0, "1" to 1, "2" to 2, "3" to 3, "4" to 4, "5" to 5, "6" to 6, "7" to 7, "8" to 8, "9" to 9)
    while (i < str.length) {
        n = n * 10 + digits[str.substring(i, i + 1)]
        i = i + 1
    }
    if (neg) {
        n = -n
    }
    return n
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @return MutableList<Int>
 */
fun parseDate(s: String): MutableList<Int> {
    val y = parseIntStr(s.substring(0, 4))
    val m = parseIntStr(s.substring(5, 7))
    val d = parseIntStr(s.substring(8, 10))
    return mutableListOf(y, m, d)
}

/**
 * Auto-generated from Mochi
 * @param y Int
 * @return Boolean
 */
fun leap(y: Int): Boolean {
    if (y % 400 == 0) {
        return true
    }
    if (y % 100 == 0) {
        return false
    }
    return y % 4 == 0
}

/**
 * Auto-generated from Mochi
 * @param y Int
 * @param m Int
 * @return Int
 */
fun daysInMonth(y: Int, m: Int): Int {
    val feb = if (leap(y)) 29 else 28
    val lengths = mutableListOf(31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
    return lengths[m - 1]
}

/**
 * Auto-generated from Mochi
 * @param y Int
 * @param m Int
 * @param d Int
 * @param n Int
 * @return MutableList<Int>
 */
fun addDays(y: Int, m: Int, d: Int, n: Int): MutableList<Int> {
    var yy = y
    var mm = m
    var dd = d
    if (n >= 0) {
        var i = 0
        while (i < n) {
            dd = dd + 1
            if (dd > daysInMonth(yy, mm)) {
                dd = 1
                mm = mm + 1
                if (mm > 12) {
                    mm = 1
                    yy = yy + 1
                }
            }
            i = i + 1
        }
    }
    else {
        var i = 0
        while (i > n) {
            dd = dd - 1
            if (dd < 1) {
                mm = mm - 1
                if (mm < 1) {
                    mm = 12
                    yy = yy - 1
                }
                dd = daysInMonth(yy, mm)
            }
            i = i - 1
        }
    }
    return mutableListOf(yy, mm, dd)
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return String
 */
fun pad2(n: Int): String {
    if (n < 10) {
        return "0" + n.toString()
    }
    return n.toString()
}

/**
 * Auto-generated from Mochi
 * @param y Int
 * @param m Int
 * @param d Int
 * @return String
 */
fun dateString(y: Int, m: Int, d: Int): String {
    return y.toString() + "-" + pad2(m) + "-" + pad2(d)
}

/**
 * Auto-generated from Mochi
 * @param y Int
 * @param m Int
 * @param d Int
 * @return Int
 */
fun day(y: Int, m: Int, d: Int): Int {
    val part1 = 367 * y
    val part2 = ((((7 * ((((y).toDouble() + (((m + 9)).toDouble() / (12).toDouble()))).toInt()))).toDouble() / (4).toDouble())).toInt()
    val part3 = ((((275 * m)).toDouble() / (9).toDouble())).toInt()
    return part1 - part2 + part3 + d - 730530
}

/**
 * Auto-generated from Mochi
 * @param birth String
 * @param target String
 */
fun biorhythms(birth: String, target: String): Unit {
    val bparts = parseDate(birth)
    val by = bparts[0]
    val bm = bparts[1]
    val bd = bparts[2]
    val tparts = parseDate(target)
    val ty = tparts[0]
    val tm = tparts[1]
    val td = tparts[2]
    val diff = absInt(day(ty, tm, td) - day(by, bm, bd))
    println("Born " + birth + ", Target " + target)
    println("Day " + diff.toString())
    val cycles = mutableListOf("Physical day ", "Emotional day", "Mental day   ")
    val lengths = mutableListOf(23, 28, 33)
    val quadrants = mutableListOf(mutableListOf("up and rising", "peak"), mutableListOf("up but falling", "transition"), mutableListOf("down and falling", "valley"), mutableListOf("down but rising", "transition"))
    var i = 0
    while (i < 3) {
        val length = lengths[i]
        val cycle = cycles[i]
        val position = diff % length
        val quadrant = ((position * 4)).toDouble() / (length).toDouble()
        var percent = sinApprox(2.0 * PI * (position as Double) / (length as Double))
        percent = floor(percent * 1000.0) / 10.0
        var description = ""
        if (percent > 95.0) {
            description = " peak"
        }
        else
        if (percent < (-95.0)) {
            description = " valley"
        }
        else
        if (absFloat(percent) < 5.0) {
            description = " critical transition"
        }
        else {
            val daysToAdd = (quadrant + (1).toDouble()) * (length).toDouble() / (4).toDouble() - (position).toDouble()
            val res = addDays(ty, tm, td, daysToAdd)
            val ny = res[0]
            val nm = res[1]
            val nd = res[2]
            val transition = dateString(ny, nm, nd)
            val trend = (quadrants[quadrant] as MutableList<String>)[0]
            val next = (quadrants[quadrant] as MutableList<String>)[1]
            var pct = percent.toString()
            if (!contains(pct, ".")) {
                pct = pct + ".0"
            }
            description = " " + pct + "% (" + trend + ", next " + next + " " + transition + ")"
        }
        var posStr = position.toString()
        if (position < 10) {
            posStr = " " + posStr
        }
        println(cycle + posStr + " : " + description)
        i = i + 1
    }
    println("")
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val pairs = mutableListOf(mutableListOf("1943-03-09", "1972-07-11"), mutableListOf("1809-01-12", "1863-11-19"), mutableListOf("1809-02-12", "1863-11-19"))
    var idx = 0
    while (idx < pairs.size) {
        val p = pairs[idx]
        biorhythms(p[0], p[1])
        idx = idx + 1
    }
}

