// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from bioinformatics-sequence-mutation.mochi

/**
 * Auto-generated from Mochi
 * @param s Int
 * @param n Int
 * @return MutableList<Int>
 */
fun randInt(s: Int, n: Int): MutableList<Int> {
    val next = (s * 1664525 + 1013904223) % 2147483647
    return mutableListOf(next, next % n)
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param w Int
 * @return String
 */
fun padLeft(s: String, w: Int): String {
    var res = ""
    var n = w - s.length
    while (n > 0) {
        res = res + " "
        n = n - 1
    }
    return res + s
}

/**
 * Auto-generated from Mochi
 * @param s Int
 * @param le Int
 * @return MutableList<Any>
 */
fun makeSeq(s: Int, le: Int): MutableList<Any> {
    val bases = "ACGT"
    var out = ""
    var i = 0
    while (i < le) {
        var r = randInt(s, 4)
        s = r[0]
        val idx = ((r[1] as Int)).toInt()
        out = out + bases.substring(idx, idx + 1)
        i = i + 1
    }
    return mutableListOf(s, out)
}

/**
 * Auto-generated from Mochi
 * @param s Int
 * @param dna String
 * @param w MutableList<Int>
 * @return MutableList<Any>
 */
fun mutate(s: Int, dna: String, w: MutableList<Int>): MutableList<Any> {
    val bases = "ACGT"
    val le = dna.length
    var r = randInt(s, le)
    s = r[0]
    val p = ((r[1] as Int)).toInt()
    r = randInt(s, 300)
    s = r[0]
    val x = ((r[1] as Int)).toInt()
    var arr: MutableList<String> = mutableListOf<String>()
    var i = 0
    while (i < le) {
        arr = append(arr, dna.substring(i, i + 1))
        i = i + 1
    }
    if (x < w[0]) {
        r = randInt(s, 4)
        s = r[0]
        val idx = ((r[1] as Int)).toInt()
        val b = bases.substring(idx, idx + 1)
        println("  Change @" + padLeft(p.toString(), 3) + " '" + arr[p] + "' to '" + b + "'")
        arr[p] = b
    }
    else
    if (x < w[0] + w[1]) {
        println("  Delete @" + padLeft(p.toString(), 3) + " '" + arr[p] + "'")
        var j = p
        while (j < arr.size - 1) {
            arr[j] = arr[j + 1]
            j = j + 1
        }
        arr = arr.subList(0, arr.size - 1)
    }
    else {
        r = randInt(s, 4)
        s = r[0]
        val idx2 = ((r[1] as Int)).toInt()
        val b = bases.substring(idx2, idx2 + 1)
        arr = append(arr, "")
        var j = arr.size - 1
        while (j > p) {
            arr[j] = arr[j - 1]
            j = j - 1
        }
        println("  Insert @" + padLeft(p.toString(), 3) + " '" + b + "'")
        arr[p] = b
    }
    var out = ""
    i = 0
    while (i < arr.size) {
        out = out + arr[i]
        i = i + 1
    }
    return mutableListOf(s, out)
}

/**
 * Auto-generated from Mochi
 * @param dna String
 * @param rowLen Int
 */
fun prettyPrint(dna: String, rowLen: Int): Unit {
    println("SEQUENCE:")
    val le = dna.length
    var i = 0
    while (i < le) {
        var k = i + rowLen
        if (k > le) {
            k = le
        }
        println(padLeft(i.toString(), 5) + ": " + dna.substring(i, k))
        i = i + rowLen
    }
    var a = 0
    var c = 0
    var g = 0
    var t = 0
    var idx = 0
    while (idx < le) {
        val ch = dna.substring(idx, idx + 1)
        if (ch == "A") {
            a = a + 1
        }
        else {
            if (ch == "C") {
                c = c + 1
            }
            else {
                if (ch == "G") {
                    g = g + 1
                }
                else {
                    if (ch == "T") {
                        t = t + 1
                    }
                }
            }
        }
        idx = idx + 1
    }
    println("")
    println("BASE COUNT:")
    println("    A: " + padLeft(a.toString(), 3))
    println("    C: " + padLeft(c.toString(), 3))
    println("    G: " + padLeft(g.toString(), 3))
    println("    T: " + padLeft(t.toString(), 3))
    println("    ------")
    println("    Î£: " + le.toString())
    println("    ======")
}

/**
 * Auto-generated from Mochi
 * @param w MutableList<Int>
 * @return String
 */
fun wstring(w: MutableList<Int>): String {
    return "  Change: " + w[0].toString() + "\n  Delete: " + w[1].toString() + "\n  Insert: " + w[2].toString() + "\n"
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    var seed = 1
    var res = makeSeq(seed, 250)
    seed = res[0]
    var dna = res[1]!!.toString()
    prettyPrint(dna, 50)
    val muts = 10
    val w = mutableListOf(100, 100, 100)
    println("\nWEIGHTS (ex 300):")
    println(wstring(w))
    println("MUTATIONS (" + muts.toString() + "):")
    var i = 0
    while (i < muts) {
        res = mutate(seed, dna, w)
        seed = res[0]
        dna = res[1]!!.toString()
        i = i + 1
    }
    println("")
    prettyPrint(dna, 50)
}

