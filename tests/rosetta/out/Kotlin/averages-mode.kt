// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from averages-mode.mochi

var arr1 = mutableListOf(2, 7, 1, 8, 2)

var counts1: MutableMap<Int, Int> = mutableMapOf<Int, Int>()

var keys1: MutableList<Int> = mutableListOf<Int>()

var i = 0

fun main() {
    while (i < arr1.size) {
        val v = arr1[i]
        if (v in counts1) {
            counts1[v] = counts1[v] + 1
        }
        else {
            counts1[v] = 1
            keys1 = append(keys1, v)
        }
        i = i + 1
    }
    var max1 = 0
    i = 0
    while (i < keys1.size) {
        val k = keys1[i]
        val c = counts1[k]
        if (c > max1) {
            max1 = c
        }
        i = i + 1
    }
    var modes1: MutableList<Int> = mutableListOf<Int>()
    i = 0
    while (i < keys1.size) {
        val k = keys1[i]
        if (counts1[k] == max1) {
            modes1 = append(modes1, k)
        }
        i = i + 1
    }
    println(modes1.toString())
    var arr2 = mutableListOf(2, 7, 1, 8, 2, 8)
    var counts2: MutableMap<Int, Int> = mutableMapOf<Int, Int>()
    var keys2: MutableList<Int> = mutableListOf<Int>()
    i = 0
    while (i < arr2.size) {
        val v = arr2[i]
        if (v in counts2) {
            counts2[v] = counts2[v] + 1
        }
        else {
            counts2[v] = 1
            keys2 = append(keys2, v)
        }
        i = i + 1
    }
    var max2 = 0
    i = 0
    while (i < keys2.size) {
        val k = keys2[i]
        val c = counts2[k]
        if (c > max2) {
            max2 = c
        }
        i = i + 1
    }
    var modes2: MutableList<Int> = mutableListOf<Int>()
    i = 0
    while (i < keys2.size) {
        val k = keys2[i]
        if (counts2[k] == max2) {
            modes2 = append(modes2, k)
        }
        i = i + 1
    }
    println(modes2.toString())
}
