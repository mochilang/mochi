// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// Code generated from averages-median-1.mochi

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Double>
 * @return MutableList<Double>
 */
fun sortFloat(xs: MutableList<Double>): MutableList<Double> {
    var arr = xs
    var n = arr.size
    var i = 0
    while (i < n) {
        var j = 0
        while (j < n - 1) {
            if (arr[j] > arr[j + 1]) {
                val tmp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = tmp
            }
            j = j + 1
        }
        i = i + 1
    }
    return arr
}

/**
 * Auto-generated from Mochi
 * @param a MutableList<Double>
 * @return Double
 */
fun median(a: MutableList<Double>): Double {
    var arr = sortFloat(a)
    val half = (((arr.size).toDouble() / (2).toDouble())).toInt()
    var m = arr[half]
    if (arr.size % 2 == 0) {
        m = (m + arr[half - 1]) / 2.0
    }
    return m
}

fun main() {
    println(median(mutableListOf(3.0, 1.0, 4.0, 1.0)).toString())
    println(median(mutableListOf(3.0, 1.0, 4.0, 1.0, 5.0)).toString())
}
