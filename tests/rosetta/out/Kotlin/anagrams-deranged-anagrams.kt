// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from anagrams-deranged-anagrams.mochi

/**
 * Auto-generated from Mochi
 * @param s String
 * @return String
 */
fun sortRunes(s: String): String {
    var arr: MutableList<String> = mutableListOf<String>()
    var i = 0
    while (i < s.length) {
        arr = append(arr, s.substring(i, i + 1))
        i = i + 1
    }
    var n = arr.size
    var m = 0
    while (m < n) {
        var j = 0
        while (j < n - 1) {
            if (arr[j] > arr[j + 1]) {
                val tmp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = tmp
            }
            j = j + 1
        }
        m = m + 1
    }
    var out = ""
    i = 0
    while (i < n) {
        out = out + arr[i]
        i = i + 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param a String
 * @param b String
 * @return Boolean
 */
fun deranged(a: String, b: String): Boolean {
    if (a.length != b.length) {
        return false
    }
    var i = 0
    while (i < a.length) {
        if (a.substring(i, i + 1) == b.substring(i, i + 1)) {
            return false
        }
        i = i + 1
    }
    return true
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val words = mutableListOf("constitutionalism", "misconstitutional")
    var m: MutableMap<String, MutableList<String>> = mutableMapOf<String, MutableList<String>>()
    var bestLen = 0
    var w1 = ""
    var w2 = ""
    for (w in words) {
        if (w.length <= bestLen) {
            continue
        }
        val k = sortRunes(w)
        if (!(k in m)) {
            m[k] = mutableListOf(w)
            continue
        }
        for (c in m[k].keys) {
            if (deranged(w, c)) {
                bestLen = w.length
                w1 = c
                w2 = w
                break
            }
        }
        m[k] = append(m[k], w)
    }
    println(w1 + " " + w2 + " : Length " + bestLen.toString())
}

