// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// Code generated from archimedean-spiral.mochi

val PI = 3.141592653589793

val degreesIncr = 0.1 * PI / 180.0

val turns = 2.0

val stop = 360.0 * turns * 10.0 * degreesIncr

val width = 600.0

val centre = width / 2.0

val a = 1.0

val b = 20.0

var theta = 0.0

var count = 0

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun sinApprox(x: Double): Double {
    var term = x
    var sum = x
    var n = 1
    while (n <= 10) {
        val denom = ((2 * n) * (2 * n + 1)) as Double
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    }
    return sum
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun cosApprox(x: Double): Double {
    var term = 1.0
    var sum = 1.0
    var n = 1
    while (n <= 10) {
        val denom = ((2 * n - 1) * (2 * n)) as Double
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    }
    return sum
}

fun main() {
    while (theta < stop) {
        val r = a + b * theta
        val x = r * cosApprox(theta)
        val y = r * sinApprox(theta)
        if (count % 100 == 0) {
            println(centre + x.toString() + "," + centre - y.toString())
        }
        theta = theta + degreesIncr
        count = count + 1
    }
}
