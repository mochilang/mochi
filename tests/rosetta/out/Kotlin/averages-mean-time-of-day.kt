// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
// Code generated from averages-mean-time-of-day.mochi

val PI = 3.141592653589793

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun sinApprox(x: Double): Double {
    var term = x
    var sum = x
    var n = 1
    while (n <= 8) {
        val denom = ((2 * n) * (2 * n + 1)) as Double
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    }
    return sum
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun cosApprox(x: Double): Double {
    var term = 1.0
    var sum = 1.0
    var n = 1
    while (n <= 8) {
        val denom = ((2 * n - 1) * (2 * n)) as Double
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    }
    return sum
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun atanApprox(x: Double): Double {
    if (x > 1.0) {
        return PI / 2.0 - x / (x * x + 0.28)
    }
    if (x < (-1.0)) {
        return -PI / 2.0 - x / (x * x + 0.28)
    }
    return x / (1.0 + 0.28 * x * x)
}

/**
 * Auto-generated from Mochi
 * @param y Double
 * @param x Double
 * @return Double
 */
fun atan2Approx(y: Double, x: Double): Double {
    if (x > 0.0) {
        return atanApprox(y / x)
    }
    if (x < 0.0) {
        if (y >= 0.0) {
            return atanApprox(y / x) + PI
        }
        return atanApprox(y / x) - PI
    }
    if (y > 0.0) {
        return PI / 2.0
    }
    if (y < 0.0) {
        return -PI / 2.0
    }
    return 0.0
}

/**
 * Auto-generated from Mochi
 * @param ch String
 * @return Int
 */
fun digit(ch: String): Int {
    val digits = "0123456789"
    var i = 0
    while (i < digits.length) {
        if (digits.substring(i, i + 1) == ch) {
            return i
        }
        i = i + 1
    }
    return 0
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @param idx Int
 * @return Int
 */
fun parseTwo(s: String, idx: Int): Int {
    return digit(s.substring(idx, idx + 1)) * 10 + digit(s.substring(idx + 1, idx + 2))
}

/**
 * Auto-generated from Mochi
 * @param s String
 * @return Double
 */
fun parseSec(s: String): Double {
    val h = parseTwo(s, 0)
    val m = parseTwo(s, 3)
    val sec = parseTwo(s, 6)
    return ((h * 60 + m) * 60 + sec) as Double
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return String
 */
fun pad(n: Int): String {
    if (n < 10) {
        return "0" + n.toString()
    }
    return n.toString()
}

/**
 * Auto-generated from Mochi
 * @param times MutableList<String>
 * @return String
 */
fun meanTime(times: MutableList<String>): String {
    var ssum = 0.0
    var csum = 0.0
    var i = 0
    while (i < times.size) {
        val sec = parseSec(times[i])
        val ang = sec * 2.0 * PI / 86400.0
        ssum = ssum + sinApprox(ang)
        csum = csum + cosApprox(ang)
        i = i + 1
    }
    var theta = atan2Approx(ssum, csum)
    var frac = theta / (2.0 * PI)
    while (frac < 0.0) {
        frac = frac + 1.0
    }
    val total = frac * 86400.0
    val si = (total).toInt()
    val h = (((si).toDouble() / (3600).toDouble())).toInt()
    val m = ((((si % 3600)).toDouble() / (60).toDouble())).toInt()
    val s = ((si % 60)).toInt()
    return pad(h) + ":" + pad(m) + ":" + pad(s)
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val inputs = mutableListOf("23:00:17", "23:40:20", "00:12:45", "00:17:19")
    println(meanTime(inputs))
}

