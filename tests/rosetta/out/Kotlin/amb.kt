// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}
// Code generated from amb.mochi

/**
 * Auto-generated from Mochi
 * @param wordsets MutableList<MutableList<String>>
 * @param res MutableList<String>
 * @param idx Int
 * @return Boolean
 */
fun amb(wordsets: MutableList<MutableList<String>>, res: MutableList<String>, idx: Int): Boolean {
    if (idx == wordsets.size) {
        return true
    }
    var prev = ""
    if (idx > 0) {
        prev = res[idx - 1]
    }
    var i = 0
    while (i < wordsets[idx].size) {
        val w = (wordsets[idx] as MutableList<String>)[i]
        if (idx == 0 || prev.substring(prev.length - 1, prev.length) == w.substring(0, 1)) {
            res[idx] = w
            if (amb(wordsets, res, idx + 1)) {
                return true
            }
        }
        i = i + 1
    }
    return false
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val wordset = mutableListOf(mutableListOf("the", "that", "a"), mutableListOf("frog", "elephant", "thing"), mutableListOf("walked", "treaded", "grows"), mutableListOf("slowly", "quickly"))
    var res: MutableList<String> = mutableListOf<String>()
    var i = 0
    while (i < wordset.size) {
        res = append(res, "")
        i = i + 1
    }
    if (amb(wordset, res, 0)) {
        var out = "[" + res[0]
        var j = 1
        while (j < res.size) {
            out = out + " " + res[j]
            j = j + 1
        }
        out = out + "]"
        println(out)
    }
    else {
        println("No amb found")
    }
}

