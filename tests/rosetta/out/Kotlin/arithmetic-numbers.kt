// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}
// Code generated from arithmetic-numbers.mochi

/**
 * Auto-generated from Mochi
 * @param limit Int
 * @return MutableList<Int>
 */
fun sieve(limit: Int): MutableList<Int> {
    var spf: MutableList<Int> = mutableListOf<Int>()
    var i = 0
    while (i <= limit) {
        spf = append(spf, 0)
        i = i + 1
    }
    i = 2
    while (i <= limit) {
        if (spf[i] == 0) {
            spf[i] = i
            if (i * i <= limit) {
                var j = i * i
                while (j <= limit) {
                    if (spf[j] == 0) {
                        spf[j] = i
                    }
                    j = j + i
                }
            }
        }
        i = i + 1
    }
    return spf
}

/**
 * Auto-generated from Mochi
 * @param spf MutableList<Int>
 * @param limit Int
 * @return MutableList<Int>
 */
fun primesFrom(spf: MutableList<Int>, limit: Int): MutableList<Int> {
    var primes: MutableList<Int> = mutableListOf<Int>()
    var i = 3
    while (i <= limit) {
        if (spf[i] == i) {
            primes = append(primes, i)
        }
        i = i + 1
    }
    return primes
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return String
 */
fun pad3(n: Int): String {
    var s = n.toString()
    while (s.length < 3) {
        s = " " + s
    }
    return s
}

/**
 * Auto-generated from Mochi
 * @param n Int
 * @return String
 */
fun commatize(n: Int): String {
    var s = n.toString()
    var out = ""
    var i = s.length - 1
    var c = 0
    while (i >= 0) {
        out = s.substring(i, i + 1) + out
        c = c + 1
        if (c % 3 == 0 && i > 0) {
            out = "," + out
        }
        i = i - 1
    }
    return out
}

/**
 * Auto-generated from Mochi
 * @param primes MutableList<Int>
 * @param last Int
 * @param spf MutableList<Int>
 * @return Int
 */
fun primeCount(primes: MutableList<Int>, last: Int, spf: MutableList<Int>): Int {
    var lo = 0
    var hi = primes.size
    while (lo < hi) {
        var mid = ((((lo + hi)).toDouble() / (2).toDouble())).toInt()
        if (primes[mid] < last) {
            lo = mid + 1
        }
        else {
            hi = mid
        }
    }
    var count = lo + 1
    if (spf[last] != last) {
        count = count - 1
    }
    return count
}

/**
 * Auto-generated from Mochi
 * @param limit Int
 * @param spf MutableList<Int>
 * @return MutableList<Int>
 */
fun arithmeticNumbers(limit: Int, spf: MutableList<Int>): MutableList<Int> {
    var arr: MutableList<Int> = mutableListOf(1)
    var n = 3
    while (arr.size < limit) {
        if (spf[n] == n) {
            arr = append(arr, n)
        }
        else {
            var x = n
            var sigma = 1
            var tau = 1
            while (x > 1) {
                var p = spf[x]
                if (p == 0) {
                    p = x
                }
                var cnt = 0
                var power = p
                var sum = 1
                while (x % p == 0) {
                    x = (x).toDouble() / (p).toDouble()
                    cnt = cnt + 1
                    sum = sum + power
                    power = power * p
                }
                sigma = sigma * sum
                tau = tau * (cnt + 1)
            }
            if (sigma % tau == 0) {
                arr = append(arr, n)
            }
        }
        n = n + 1
    }
    return arr
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val limit = 1228663
    val spf = sieve(limit)
    val primes = primesFrom(spf, limit)
    val arr = arithmeticNumbers(1000000, spf)
    println("The first 100 arithmetic numbers are:")
    var i = 0
    while (i < 100) {
        var line = ""
        var j = 0
        while (j < 10) {
            line = line + pad3(arr[i + j])
            if (j < 9) {
                line = line + " "
            }
            j = j + 1
        }
        println(line)
        i = i + 10
    }
    for (x in mutableListOf(1000, 10000, 100000, 1000000)) {
        val last = arr[toInt(x) - 1]
        val lastc = commatize(last)
        println("\nThe " + commatize(x) + "th arithmetic number is: " + lastc)
        val pc = primeCount(primes, last, spf)
        val comp = toInt(x) - pc - 1
        println("The count of such numbers <= " + lastc + " which are composite is " + commatize(comp) + ".")
    }
}

