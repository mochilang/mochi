// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fun toBool(v: Any?): Boolean = when (v) {
    is Boolean -> v
    is Int -> v != 0
    is Double -> v != 0.0
    is String -> v.isNotEmpty()
    null -> false
    else -> true
}
// Code generated from averages-arithmetic-mean.mochi

/**
 * Auto-generated from Mochi
 * @param v MutableList<Double>
 * @return MutableMap<String, Any>
 */
fun mean(v: MutableList<Double>): MutableMap<String, Any> {
    if (v.size == 0) {
        return mutableMapOf("ok" to false)
    }
    var sum = 0.0
    var i = 0
    while (i < v.size) {
        sum = sum + v[i]
        i = i + 1
    }
    return mutableMapOf("ok" to true, "mean" to (sum / (v.size as Double)))
}

/**
 * Auto-generated from Mochi
 */
fun main(): Unit {
    val sets = mutableListOf(mutableListOf<Any?>(), mutableListOf(3.0, 1.0, 4.0, 1.0, 5.0, 9.0), mutableListOf(100000000000000000000.0, 3.0, 1.0, 4.0, 1.0, 5.0, 9.0, -100000000000000000000.0), mutableListOf(10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.11), mutableListOf(10.0, 20.0, 30.0, 40.0, 50.0, -100.0, 4.7, -1100.0))
    for (v in sets) {
        println("Vector: " + v.toString())
        val r = mean(v)
        if (toBool(r["ok"])) {
            println("Mean of " + v.size.toString() + " numbers is " + r["mean"].toString())
        }
        else {
            println("Mean undefined")
        }
        println("")
    }
}

