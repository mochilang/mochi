" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| pow result i PowN PowE main pow2 cube a fn1 fn2 |
pow := [:base :exp | result := 1.
i := 0.
[(i < (int value: exp))] whileTrue: [.
result := (result * base).
i := (i + 1).
].
.
result. ].
PowN := [:b | [:e | pow value: b value: e ]. ].
PowE := [:e | [:b | pow value: b value: e ]. ].
main := [ pow2 := PowN value: 2.
cube := PowE value: 3.
Transcript show: ((('2^8 = ') + ((pow2 value: 8 asString)))) printString; cr.
Transcript show: ((('4Â³ = ') + ((cube value: 4 asString)))) printString; cr.
a := Dictionary from:{'value'->2}.
fn1 := [:b | (a.Method) value: b ].
fn2 := [:f :b | (f.Method) value: b ].
Transcript show: ((('2 + 2 = ') + (((a.Method) value: 2 asString)))) printString; cr.
Transcript show: ((('2 + 3 = ') + ((fn1 value: 3 asString)))) printString; cr.
Transcript show: ((('2 + 4 = ') + ((fn2 value: a value: 4 asString)))) printString; cr.
Transcript show: ((('3 + 5 = ') + ((fn2 value: Dictionary from:{'value'->3} value: 5 asString)))) printString; cr. ].
main value.
