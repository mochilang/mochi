" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| sortRunes arr i n m j tmp out sortStrings res min idx main words groups maxLen w k printed g line |
sortRunes := [:s | arr := {}.
i := 0.
[(i < ((s size)))] whileTrue: [.
arr := arr copyWith: s copyFrom: (i + 1) to: (i + 1).
i := (i + 1).
].
.
n := (arr size).
m := 0.
[(m < n)] whileTrue: [.
j := 0.
[(j < ((n - 1)))] whileTrue: [.
(((arr at: j) > (arr at: (j + 1)))) ifTrue: [
tmp := arr at: j.
arr at: j put: arr at: (j + 1).
arr at: (j + 1) put: tmp.
] .
j := (j + 1).
].
.
m := (m + 1).
].
.
out := ''.
i := 0.
[(i < n)] whileTrue: [.
out := (out + (arr at: i)).
i := (i + 1).
].
.
out. ].
sortStrings := [:xs | res := {}.
tmp := xs.
[(((tmp size)) > 0)] whileTrue: [.
min := tmp at: 0.
idx := 0.
i := 1.
[(i < ((tmp size)))] whileTrue: [.
(((tmp at: i) < min)) ifTrue: [
min := tmp at: i.
idx := i.
] .
i := (i + 1).
].
.
res := res copyWith: min.
out := {}.
j := 0.
[(j < ((tmp size)))] whileTrue: [.
((j ~= idx)) ifTrue: [
out := out copyWith: tmp at: j.
] .
j := (j + 1).
].
.
tmp := out.
].
.
res. ].
main := [ words := {'abel'. 'able'. 'bale'. 'bela'. 'elba'. 'alger'. 'glare'. 'lager'. 'large'. 'regal'. 'angel'. 'angle'. 'galen'. 'glean'. 'lange'. 'caret'. 'carte'. 'cater'. 'crate'. 'trace'. 'elan'. 'lane'. 'lean'. 'lena'. 'neal'. 'evil'. 'levi'. 'live'. 'veil'. 'vile'}.
groups := Dictionary from:{}.
maxLen := 0.
words do: [:w |.
k := sortRunes value: w.
((groups includes: k) not) ifTrue: [
groups at: k put: {w}.
] ifFalse: [
groups at: k put: groups at: k copyWith: w.
].
((((groups at: k size)) > maxLen)) ifTrue: [
maxLen := (groups at: k size).
] .
].
.
printed := Dictionary from:{}.
words do: [:w |.
k := sortRunes value: w.
((((groups at: k size)) = maxLen)) ifTrue: [
((printed includes: k) not) ifTrue: [
g := sortStrings value: groups at: k.
line := ('[' + (g at: 0)).
i := 1.
[(i < ((g size)))] whileTrue: [.
line := (((line + (' '))) + (g at: i)).
i := (i + 1).
].
.
line := (line + ']').
Transcript show: (line) printString; cr.
printed at: k put: true.
] .
] .
].
. ].
main value.
