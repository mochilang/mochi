" Generated by Mochi compiler v0.10.26 on 2025-07-16T09:48:35Z
"
| abundantOdd count divisors divs divs2 i j main max n pad2 pad5 s sum sumStr tot |
Object subclass: #ContinueSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!
divisors := [:n | divs := {1}.
divs2 := {}.
i := 2.
[((i * i) <= n)] whileTrue: [
  (((n % i) = 0)) ifTrue: [
    j := (n / i) asInteger.
    divs := divs copyWith: i.
    ((i ~= j)) ifTrue: [
      divs2 := divs2 copyWith: j.
    ] .
  ] .
  i := (i + 1).
]
.
j := ((divs2 size) - 1).
[(j >= 0)] whileTrue: [
  divs := divs copyWith: divs2 at: j.
  j := (j - 1).
]
.
divs ].
sum := [:xs | tot := 0.
xs do: [:v |
  tot := (tot + v).
]
.
tot ].
sumStr := [:xs | s := ''.
i := 0.
[(i < (xs size))] whileTrue: [
  s := ((s + (xs at: i asString)) + ' + ').
  i := (i + 1).
]
.
(s copyFrom: 0 to: ((s size) - 3)) ].
pad2 := [:n | s := (n asString).
(((s size) < 2)) ifTrue: [
  (' ' + s)
] .
s ].
pad5 := [:n | s := (n asString).
[((s size) < 5)] whileTrue: [
  s := (' ' + s).
]
.
s ].
abundantOdd := [:searchFrom :countFrom :countTo :printOne | count := countFrom.
n := searchFrom.
[
  [(count < countTo)] whileTrue: [
    [
      divs := divisors value: n.
      tot := (divs inject: 0 into: [:s :x | s + x]).
      ((tot > n)) ifTrue: [
        count := (count + 1).
        ((printOne and: [(count < countTo)])) ifTrue: [
          n := (n + 2).
          ContinueSignal signal
        ] .
        s := sumStr value: divs.
        (printOne not) ifTrue: [
          Transcript show: (((((((pad2 value: count + '. ') + pad5 value: n) + ' < ') + s) + ' = ') + (tot asString))) printString; cr.
        ] ifFalse: [
          Transcript show: ((((((n asString) + ' < ') + s) + ' = ') + (tot asString))) printString; cr.
        ].
      ] .
      n := (n + 2).
    ] on: ContinueSignal do: [:ex | ]
  ]
] on: BreakSignal do: [:ex | ].
n ].
main := [ | max := 25.
Transcript show: ((('The first ' + (max asString)) + ' abundant odd numbers are:')) printString; cr.
n := abundantOdd value: 1 value: 0 value: max value: false.
Transcript show: '
The one thousandth abundant odd number is:'; cr.
abundantOdd value: n value: max value: 1000 value: true.
Transcript show: '
The first abundant odd number above one billion is:'; cr.
abundantOdd value: 1000000001 value: 0 value: 1 value: true. ].
main value.
