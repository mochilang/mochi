" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| padLeft s modPow result b e main k count n curzon50 d idx line j |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
padLeft := [:n :width | s := (n asString).
[(((s size)) < width)] whileTrue: [.
s := ((' ') + s).
].
.
s. ].
modPow := [:base :exp :mod | result := (1 % mod).
b := (base % mod).
e := exp.
[(e > 0)] whileTrue: [.
((((e % 2)) = 1)) ifTrue: [
result := (((result * b)) % mod).
] .
b := (((b * b)) % mod).
e := (e / 2).
].
.
result. ].
main := [ k := 2.
[.
[(k <= 10)] whileTrue: [.
Transcript show: ((((('The first 50 Curzon numbers using a base of ') + ((k asString)))) + (' :'))) printString; cr.
count := 0.
n := 1.
curzon50 := {}.
[.
[true] whileTrue: [.
d := (((k * n)) + 1).
(((((((modPow value: k value: n value: d) + 1)) % d)) = 0)) ifTrue: [
((count < 50)) ifTrue: [
curzon50 := curzon50 copyWith: n.
] .
count := (count + 1).
((count = 50)) ifTrue: [
idx := 0.
[(idx < ((curzon50 size)))] whileTrue: [.
line := ''.
j := 0.
[(j < 10)] whileTrue: [.
line := (((line + (padLeft value: curzon50 at: idx value: 4))) + (' ')).
idx := (idx + 1).
j := (j + 1).
].
.
Transcript show: ((line copyFrom: 0 to: (((line size)) - 1))) printString; cr.
].
.
] .
((count = 1000)) ifTrue: [
Transcript show: ((('
One thousandth: ') + ((n asString)))) printString; cr.
BreakSignal signal.
] .
] .
n := (n + 1).
].
] on: BreakSignal do: [:ex | ].
Transcript show: ''; cr.
k := (k + 2).
].
] on: BreakSignal do: [:ex | ]. ].
main value.
