" Generated by Mochi compiler v0.10.26 on 2025-07-16T09:48:36Z
"
| arr bestLen deranged i j k m main n out sortRunes tmp w1 w2 words |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!
Object subclass: #ContinueSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!
sortRunes := [:s | arr := {}.
i := 0.
[(i < (s size))] whileTrue: [
  arr := arr copyWith: s at: i.
  i := (i + 1).
]
.
n := (arr size).
m := 0.
[(m < n)] whileTrue: [
  j := 0.
  [(j < (n - 1))] whileTrue: [
    ((arr at: j > arr at: (j + 1))) ifTrue: [
      tmp := arr at: j.
      arr at: j put: arr at: (j + 1).
      arr at: (j + 1) put: tmp.
    ] .
    j := (j + 1).
  ]
  .
  m := (m + 1).
]
.
out := ''.
i := 0.
[(i < n)] whileTrue: [
  out := (out + arr at: i).
  i := (i + 1).
]
.
out ].
deranged := [:a :b | (((a size) ~= (b size))) ifTrue: [
  false
] .
i := 0.
[(i < (a size))] whileTrue: [
  ((a at: i = b at: i)) ifTrue: [
    false
  ] .
  i := (i + 1).
]
.
true ].
main := [ | words := {'constitutionalism'. 'misconstitutional'}.
m := Dictionary from: {}.
bestLen := 0.
w1 := ''.
w2 := ''.
[
  words do: [:w |
    [
      (((w size) <= bestLen)) ifTrue: [
        ContinueSignal signal
      ] .
      k := sortRunes value: w.
      ((k in m) not) ifTrue: [
        m at: k put: {w}.
        ContinueSignal signal
      ] .
      [
        m at: k do: [:c |
          (deranged value: w value: c) ifTrue: [
            bestLen := (w size).
            w1 := c.
            w2 := w.
            BreakSignal signal
          ] .
        ]
      ] on: BreakSignal do: [:ex | ].
      m at: k put: m at: k copyWith: w.
    ] on: ContinueSignal do: [:ex | ]
  ]
] on: BreakSignal do: [:ex | ].
Transcript show: (((((w1 + ' ') + w2) + ' : Length ') + (bestLen asString))) printString; cr. ].
main value.
