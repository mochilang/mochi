" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| padLeft res n indexOfFrom i containsStr sl subl distinct s found r permutations rest j subs p perm k headTailOverlap start ix deduplicate arr filtered s1 within joinAll out shortestCommonSuperstring ss shortest perms idx sup ov printCounts a c g t ch total main tests seqs scs |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
padLeft := [:s :w | res := ''.
n := (w - ((s size))).
[(n > 0)] whileTrue: [.
res := (res + (' ')).
n := (n - 1).
].
.
(res + s). ].
indexOfFrom := [:s :ch :start | i := start.
[(i < ((s size)))] whileTrue: [.
((((s copyFrom: i to: (i + 1))) = ch)) ifTrue: [
i.
] .
i := (i + 1).
].
.
-1. ].
containsStr := [:s :sub | i := 0.
sl := (s size).
subl := (sub size).
[(i <= ((sl - subl)))] whileTrue: [.
((((s copyFrom: i to: (i + subl))) = sub)) ifTrue: [
true.
] .
i := (i + 1).
].
.
false. ].
distinct := [:slist | res := {}.
[.
slist do: [:s |.
found := false.
[.
res do: [:r |.
((r = s)) ifTrue: [
found := true.
BreakSignal signal.
] .
].
] on: BreakSignal do: [:ex | ].
(found not) ifTrue: [
res := res copyWith: s.
] .
].
] on: BreakSignal do: [:ex | ].
res. ].
permutations := [:xs | ((((xs size)) <= 1)) ifTrue: [
{xs}.
] .
res := {}.
i := 0.
[(i < ((xs size)))] whileTrue: [.
rest := {}.
j := 0.
[(j < ((xs size)))] whileTrue: [.
((j ~= i)) ifTrue: [
rest := rest copyWith: xs at: j.
] .
j := (j + 1).
].
.
subs := permutations value: rest.
subs do: [:p |.
perm := {xs at: i}.
k := 0.
[(k < ((p size)))] whileTrue: [.
perm := perm copyWith: p at: k.
k := (k + 1).
].
.
res := res copyWith: perm.
].
.
i := (i + 1).
].
.
res. ].
headTailOverlap := [:s1 :s2 | start := 0.
[true] whileTrue: [.
ix := indexOfFrom value: s1 value: s2 copyFrom: (0 + 1) to: 1 value: start.
((ix = ((0 - 1)))) ifTrue: [
0.
] .
start := ix.
((((s2 copyFrom: 0 to: (((s1 size)) - start))) = ((s1 copyFrom: start to: (s1 size))))) ifTrue: [
(((s1 size)) - start).
] .
start := (start + 1).
].
. ].
deduplicate := [:slist | arr := distinct value: slist.
filtered := {}.
i := 0.
[.
[(i < ((arr size)))] whileTrue: [.
s1 := arr at: i.
within := false.
j := 0.
[.
[(j < ((arr size)))] whileTrue: [.
((((j ~= i)) and: [(containsStr value: arr at: j value: s1)])) ifTrue: [
within := true.
BreakSignal signal.
] .
j := (j + 1).
].
] on: BreakSignal do: [:ex | ].
(within not) ifTrue: [
filtered := filtered copyWith: s1.
] .
i := (i + 1).
].
] on: BreakSignal do: [:ex | ].
filtered. ].
joinAll := [:ss | out := ''.
ss do: [:s |.
out := (out + s).
].
.
out. ].
shortestCommonSuperstring := [:slist | ss := deduplicate value: slist.
shortest := joinAll value: ss.
perms := permutations value: ss.
idx := 0.
[(idx < ((perms size)))] whileTrue: [.
perm := perms at: idx.
sup := perm at: 0.
i := 0.
[(i < ((((ss size)) - 1)))] whileTrue: [.
ov := headTailOverlap value: perm at: i value: perm at: (i + 1).
sup := (sup + ((perm at: (i + 1) copyFrom: ov to: (perm at: (i + 1) size)))).
i := (i + 1).
].
.
((((sup size)) < ((shortest size)))) ifTrue: [
shortest := sup.
] .
idx := (idx + 1).
].
.
shortest. ].
printCounts := [:seq | a := 0.
c := 0.
g := 0.
t := 0.
i := 0.
[(i < ((seq size)))] whileTrue: [.
ch := (seq copyFrom: i to: (i + 1)).
((ch = 'A')) ifTrue: [
a := (a + 1).
] ifFalse: [
((ch = 'C')) ifTrue: [
c := (c + 1).
] ifFalse: [
((ch = 'G')) ifTrue: [
g := (g + 1).
] ifFalse: [
((ch = 'T')) ifTrue: [
t := (t + 1).
] .
].
].
].
i := (i + 1).
].
.
total := (seq size).
Transcript show: ((((('
Nucleotide counts for ') + seq)) + (':
'))) printString; cr.
Transcript show: (((padLeft value: 'A' value: 10) + (padLeft value: (a asString) value: 12))) printString; cr.
Transcript show: (((padLeft value: 'C' value: 10) + (padLeft value: (c asString) value: 12))) printString; cr.
Transcript show: (((padLeft value: 'G' value: 10) + (padLeft value: (g asString) value: 12))) printString; cr.
Transcript show: (((padLeft value: 'T' value: 10) + (padLeft value: (t asString) value: 12))) printString; cr.
Transcript show: (((padLeft value: 'Other' value: 10) + (padLeft value: ((total - ((((((a + c)) + g)) + t))) asString) value: 12))) printString; cr.
Transcript show: '  ____________________'; cr.
Transcript show: (((padLeft value: 'Total length' value: 14) + (padLeft value: (total asString) value: 8))) printString; cr. ].
main := [ tests := {{'TA'. 'AAG'. 'TA'. 'GAA'. 'TA'}. {'CATTAGGG'. 'ATTAG'. 'GGG'. 'TA'}. {'AAGAUGGA'. 'GGAGCGCAUC'. 'AUCGCAAUAAGGA'}. {'ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT'. 'GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT'. 'CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA'. 'TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC'. 'AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT'. 'GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC'. 'CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT'. 'TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC'. 'CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC'. 'GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT'. 'TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC'. 'CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA'. 'TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA'}}.
tests do: [:seqs |.
scs := shortestCommonSuperstring value: seqs.
printCounts value: scs.
].
. ].
main value.
