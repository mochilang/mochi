" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| b2Seg pixelFromRgb r g b newBitmap d y row x setPx cols rows fill fillRgb line dx dy sx sy err e2 bezier2 px py i fx1 fy1 fx2 fy2 fx3 fy3 c a a2 b2 c2 x0 y0 |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
b2Seg := 20.
pixelFromRgb := [:rgb | r := (((rgb / 65536)) % 256) asInteger.
g := (((rgb / 256)) % 256) asInteger.
b := (rgb % 256) asInteger.
Dictionary from:{'r'->r. 'g'->g. 'b'->b}. ].
newBitmap := [:cols :rows | d := {}.
y := 0.
[(y < rows)] whileTrue: [.
row := {}.
x := 0.
[(x < cols)] whileTrue: [.
row := row copyWith: Dictionary from:{'r'->0. 'g'->0. 'b'->0}.
x := (x + 1).
].
.
d := d copyWith: row.
y := (y + 1).
].
.
Dictionary from:{'cols'->cols. 'rows'->rows. 'data'->d}. ].
setPx := [:b :x :y :p | cols := b at: 'cols' asInteger.
rows := b at: 'rows' asInteger.
((((((((x >= 0)) and: [((x < cols))])) and: [((y >= 0))])) and: [((y < rows))])) ifTrue: [
b at: 'data' at: y at: x put: p.
] . ].
fill := [:b :p | cols := b at: 'cols' asInteger.
rows := b at: 'rows' asInteger.
y := 0.
[(y < rows)] whileTrue: [.
x := 0.
[(x < cols)] whileTrue: [.
b at: 'data' at: y at: x put: p.
x := (x + 1).
].
.
y := (y + 1).
].
. ].
fillRgb := [:b :rgb | fill value: b value: pixelFromRgb value: rgb. ].
line := [:b :x0 :y0 :x1 :y1 :p | dx := (x1 - x0).
((dx < 0)) ifTrue: [
dx := -dx.
] .
dy := (y1 - y0).
((dy < 0)) ifTrue: [
dy := -dy.
] .
sx := -1.
((x0 < x1)) ifTrue: [
sx := 1.
] .
sy := -1.
((y0 < y1)) ifTrue: [
sy := 1.
] .
err := (dx - dy).
[.
[true] whileTrue: [.
setPx value: b value: x0 value: y0 value: p.
((((x0 = x1)) and: [((y0 = y1))])) ifTrue: [
BreakSignal signal.
] .
e2 := (2 * err).
((e2 > ((0 - dy)))) ifTrue: [
err := (err - dy).
x0 := (x0 + sx).
] .
((e2 < dx)) ifTrue: [
err := (err + dx).
y0 := (y0 + sy).
] .
].
] on: BreakSignal do: [:ex | ]. ].
bezier2 := [:b :x1 :y1 :x2 :y2 :x3 :y3 :p | px := {}.
py := {}.
i := 0.
[(i <= b2Seg)] whileTrue: [.
px := px copyWith: 0.
py := py copyWith: 0.
i := (i + 1).
].
.
fx1 := x1 asFloat.
fy1 := y1 asFloat.
fx2 := x2 asFloat.
fy2 := y2 asFloat.
fx3 := x3 asFloat.
fy3 := y3 asFloat.
i := 0.
[(i <= b2Seg)] whileTrue: [.
c := ((i asFloat) / (b2Seg asFloat)).
a := (1 - c).
a2 := (a * a).
b2 := (((2 * c)) * a).
c2 := (c * c).
px at: i put: (((((a2 * fx1)) + ((b2 * fx2)))) + ((c2 * fx3))) asInteger.
py at: i put: (((((a2 * fy1)) + ((b2 * fy2)))) + ((c2 * fy3))) asInteger.
i := (i + 1).
].
.
x0 := px at: 0.
y0 := py at: 0.
i := 1.
[(i <= b2Seg)] whileTrue: [.
x := px at: i.
y := py at: i.
line value: b value: x0 value: y0 value: x value: y value: p.
x0 := x.
y0 := y.
i := (i + 1).
].
. ].
b := newBitmap value: 400 value: 300.
fillRgb value: b value: 14614575.
bezier2 value: b value: 20 value: 150 value: 500 value: -100 value: 300 value: 280 value: pixelFromRgb value: 4165615.
