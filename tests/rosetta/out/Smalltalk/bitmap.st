" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| pixelFromRgb r g b rgbFromPixel NewBitmap data row col Extent Fill y x px FillRgb SetPx SetPxRgb GetPx GetPxRgb ppmSize header pixelStr main bm c1 c2 c3 p r16 g16 b16 |
pixelFromRgb := [:c | r := (((c / 65536) asInteger) % 256).
g := (((c / 256) asInteger) % 256).
b := (c % 256).
Dictionary from:{'R'->r. 'G'->g. 'B'->b}. ].
rgbFromPixel := [:p | ((((((p at: 'R') * 65536)) + (((p at: 'G') * 256)))) + (p at: 'B')). ].
NewBitmap := [:x :y | data := {}.
row := 0.
[(row < y)] whileTrue: [.
r := {}.
col := 0.
[(col < x)] whileTrue: [.
r := r copyWith: Dictionary from:{'R'->0. 'G'->0. 'B'->0}.
col := (col + 1).
].
.
data := data copyWith: r.
row := (row + 1).
].
.
Dictionary from:{'cols'->x. 'rows'->y. 'px'->data}. ].
Extent := [:b | Dictionary from:{'cols'->(b at: 'cols'). 'rows'->(b at: 'rows')}. ].
Fill := [:b :p | y := 0.
[(y < (b at: 'rows'))] whileTrue: [.
x := 0.
[(x < (b at: 'cols'))] whileTrue: [.
px := b at: 'px'.
row := px at: y.
row at: x put: p.
px at: y put: row.
b at: 'px' put: px.
x := (x + 1).
].
.
y := (y + 1).
].
. ].
FillRgb := [:b :c | Fill value: b value: pixelFromRgb value: c. ].
SetPx := [:b :x :y :p | ((((((((x < 0)) or: [((x >= (b at: 'cols')))])) or: [((y < 0))])) or: [((y >= (b at: 'rows')))])) ifTrue: [
false.
] .
px := b at: 'px'.
row := px at: y.
row at: x put: p.
px at: y put: row.
b at: 'px' put: px.
true. ].
SetPxRgb := [:b :x :y :c | SetPx value: b value: x value: y value: pixelFromRgb value: c. ].
GetPx := [:b :x :y | ((((((((x < 0)) or: [((x >= (b at: 'cols')))])) or: [((y < 0))])) or: [((y >= (b at: 'rows')))])) ifTrue: [
Dictionary from:{'ok'->false}.
] .
row := b at: 'px' at: y.
Dictionary from:{'ok'->true. 'pixel'->(row at: x)}. ].
GetPxRgb := [:b :x :y | r := GetPx value: b value: x value: y.
(r.ok not) ifTrue: [
Dictionary from:{'ok'->false}.
] .
Dictionary from:{'ok'->true. 'rgb'->(rgbFromPixel value: r.pixel)}. ].
ppmSize := [:b | header := (((((((('P6
# Creator: Rosetta Code http://rosettacode.org/
') + ((b at: 'cols' asString)))) + (' '))) + ((b at: 'rows' asString)))) + '
255
').
(((header size)) + ((((3 * (b at: 'cols'))) * (b at: 'rows')))). ].
pixelStr := [:p | ((((((((((('{' + ((p at: 'R' asString)))) + (' '))) + ((p at: 'G' asString)))) + (' '))) + ((p at: 'B' asString)))) + '}'). ].
main := [ bm := NewBitmap value: 300 value: 240.
FillRgb value: bm value: 16711680.
SetPxRgb value: bm value: 10 value: 20 value: 255.
SetPxRgb value: bm value: 20 value: 30 value: 0.
SetPxRgb value: bm value: 30 value: 40 value: 1056816.
c1 := GetPx value: bm value: 0 value: 0.
c2 := GetPx value: bm value: 10 value: 20.
c3 := GetPx value: bm value: 30 value: 40.
Transcript show: ((((((('Image size: ') + ((bm.cols asString)))) + (' Ã— '))) + ((bm.rows asString)))) printString; cr.
Transcript show: ((((ppmSize value: bm asString)) + (' bytes when encoded as PPM.'))) printString; cr.
(c1.ok) ifTrue: [
Transcript show: ((('Pixel at (0,0) is ') + (pixelStr value: c1.pixel))) printString; cr.
] .
(c2.ok) ifTrue: [
Transcript show: ((('Pixel at (10,20) is ') + (pixelStr value: c2.pixel))) printString; cr.
] .
(c3.ok) ifTrue: [
p := c3.pixel.
r16 := (p.R * 257).
g16 := (p.G * 257).
b16 := (p.B * 257).
Transcript show: ((((((((((('Pixel at (30,40) has R=') + ((r16 asString)))) + (', G='))) + ((g16 asString)))) + (', B='))) + ((b16 asString)))) printString; cr.
] . ].
main value.
