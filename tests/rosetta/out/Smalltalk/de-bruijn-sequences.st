" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| dbRec j deBruijn digits alphabet a i seq b idx allDigits ch parseIntStr n validate le found s errs k lerr pl msg padLeft joinStr res reverse out main db dbr |
dbRec := [:k :n :t :p :a :seq | ((t > n)) ifTrue: [
((((n % p)) = 0)) ifTrue: [
j := 1.
[(j <= p)] whileTrue: [.
seq := seq copyWith: a at: j.
j := (j + 1).
].
.
] .
] ifFalse: [
a at: t put: a at: (t - p).
seq := dbRec value: k value: n value: (t + 1) value: p value: a value: seq.
j := ((a at: (t - p)) + 1).
[(j < k)] whileTrue: [.
a at: t put: j.
seq := dbRec value: k value: n value: (t + 1) value: t value: a value: seq.
j := (j + 1).
].
.
].
seq. ].
deBruijn := [:k :n | digits := '0123456789'.
alphabet := digits.
((k < 10)) ifTrue: [
alphabet := digits copyFrom: (0 + 1) to: k.
] .
a := {}.
i := 0.
[(i < ((k * n)))] whileTrue: [.
a := a copyWith: 0.
i := (i + 1).
].
.
seq := {}.
seq := dbRec value: k value: n value: 1 value: 1 value: a value: seq.
b := ''.
idx := 0.
[(idx < ((seq size)))] whileTrue: [.
b := (b + (alphabet at: seq at: idx)).
idx := (idx + 1).
].
.
b := (b + (b copyFrom: (0 + 1) to: (n - 1))).
b. ].
allDigits := [:s | i := 0.
[(i < ((s size)))] whileTrue: [.
ch := s copyFrom: (i + 1) to: (i + 1).
((((ch < '0')) or: [((ch > '9'))])) ifTrue: [
false.
] .
i := (i + 1).
].
.
true. ].
parseIntStr := [:str | n := 0.
i := 0.
[(i < ((str size)))] whileTrue: [.
n := (((n * 10)) + (str copyFrom: (i + 1) to: (i + 1) asInteger)).
i := (i + 1).
].
.
n. ].
validate := [:db | le := (db size).
found := {}.
i := 0.
[(i < 10000)] whileTrue: [.
found := found copyWith: 0.
i := (i + 1).
].
.
j := 0.
[(j < ((le - 3)))] whileTrue: [.
s := db copyFrom: (j + 1) to: (j + 4).
(allDigits value: s) ifTrue: [
n := parseIntStr value: s.
found at: n put: ((found at: n) + 1).
] .
j := (j + 1).
].
.
errs := {}.
k := 0.
[(k < 10000)] whileTrue: [.
(((found at: k) = 0)) ifTrue: [
errs := errs copyWith: (((('    PIN number ') + (padLeft value: k value: 4))) + (' missing')).
] ifFalse: [
(((found at: k) > 1)) ifTrue: [
errs := errs copyWith: (((((((('    PIN number ') + (padLeft value: k value: 4))) + (' occurs '))) + ((found at: k asString)))) + (' times')).
] .
].
k := (k + 1).
].
.
lerr := (errs size).
((lerr = 0)) ifTrue: [
Transcript show: '  No errors found'; cr.
] ifFalse: [
pl := 's'.
((lerr = 1)) ifTrue: [
pl := ''.
] .
Transcript show: ((((((((('  ') + ((lerr asString)))) + (' error'))) + pl)) + (' found:'))) printString; cr.
msg := joinStr value: errs value: '
'.
Transcript show: (msg) printString; cr.
]. ].
padLeft := [:n :width | s := (n asString).
[(((s size)) < width)] whileTrue: [.
s := ('0' + s).
].
.
s. ].
joinStr := [:xs :sep | res := ''.
i := 0.
[(i < ((xs size)))] whileTrue: [.
((i > 0)) ifTrue: [
res := (res + sep).
] .
res := (res + (xs at: i)).
i := (i + 1).
].
.
res. ].
reverse := [:s | out := ''.
i := (((s size)) - 1).
[(i >= 0)] whileTrue: [.
out := (out + (s copyFrom: (i + 1) to: (i + 1))).
i := (i - 1).
].
.
out. ].
main := [ db := deBruijn value: 10 value: 4.
le := (db size).
Transcript show: ((('The length of the de Bruijn sequence is ') + ((le asString)))) printString; cr.
Transcript show: '
The first 130 digits of the de Bruijn sequence are:'; cr.
Transcript show: (db copyFrom: (0 + 1) to: 130) printString; cr.
Transcript show: '
The last 130 digits of the de Bruijn sequence are:'; cr.
Transcript show: (db copyFrom: ((le - 130) + 1) to: db size) printString; cr.
Transcript show: '
Validating the de Bruijn sequence:'; cr.
validate value: db.
Transcript show: '
Validating the reversed de Bruijn sequence:'; cr.
dbr := reverse value: db.
validate value: dbr.
db := ((((db copyFrom: (0 + 1) to: 4443) + '.')) + (db copyFrom: (4444 + 1) to: (db size))).
Transcript show: '
Validating the overlaid de Bruijn sequence:'; cr.
validate value: db. ].
main value.
