" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| indexOf i rotate scrambleLeft scrambleRight chao left right out ch idx main plain cipher |
indexOf := [:s :ch | i := 0.
[(i < ((s size)))] whileTrue: [.
(((s copyFrom: (i + 1) to: (i + 1)) = ch)) ifTrue: [
i.
] .
i := (i + 1).
].
.
-1. ].
rotate := [:s :n | ((s copyFrom: (n + 1) to: s size) + (s copyFrom: 1 to: n)). ].
scrambleLeft := [:s | ((((((s copyFrom: (0 + 1) to: 1) + (s copyFrom: (2 + 1) to: 14))) + (s copyFrom: (1 + 1) to: 2))) + (s copyFrom: (14 + 1) to: s size)). ].
scrambleRight := [:s | ((((((((s copyFrom: (1 + 1) to: 3) + (s copyFrom: (4 + 1) to: 15))) + (s copyFrom: (3 + 1) to: 4))) + (s copyFrom: (15 + 1) to: s size))) + (s copyFrom: (0 + 1) to: 1)). ].
chao := [:text :encode | left := 'HXUCZVAMDSLKPEFJRIGTWOBNYQ'.
right := 'PTLNBQDEOYSFAVZKGJRIHWXUMC'.
out := ''.
i := 0.
[(i < ((text size)))] whileTrue: [.
ch := text copyFrom: (i + 1) to: (i + 1).
idx := 0.
(encode) ifTrue: [
idx := indexOf value: right value: ch.
out := (out + (left copyFrom: (idx + 1) to: (idx + 1))).
] ifFalse: [
idx := indexOf value: left value: ch.
out := (out + (right copyFrom: (idx + 1) to: (idx + 1))).
].
left := rotate value: left value: idx.
right := rotate value: right value: idx.
left := scrambleLeft value: left.
right := scrambleRight value: right.
i := (i + 1).
].
.
out. ].
main := [ plain := 'WELLDONEISBETTERTHANWELLSAID'.
cipher := chao value: plain value: true.
Transcript show: (plain) printString; cr.
Transcript show: (cipher) printString; cr.
Transcript show: (chao value: cipher value: false) printString; cr. ].
main value.
