" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| padLeft res n dna le i k a c g t idx ch |
padLeft := [:s :w | res := ''.
n := (w - ((s size))).
[(n > 0)] whileTrue: [.
res := (res + (' ')).
n := (n - 1).
].
.
(res + s). ].
dna := ((((((((((((((((((('' + 'CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG')) + 'CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG')) + 'AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT')) + 'GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT')) + 'CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG')) + 'TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA')) + 'TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT')) + 'CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG')) + 'TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC')) + 'GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT').
Transcript show: 'SEQUENCE:'; cr.
le := (dna size).
i := 0.
[(i < le)] whileTrue: [.
k := (i + 50).
((k > le)) ifTrue: [
k := le.
] .
Transcript show: (((((padLeft value: (i asString) value: 5) + (': '))) + (dna copyFrom: (i + 1) to: k))) printString; cr.
i := (i + 50).
].
.
a := 0.
c := 0.
g := 0.
t := 0.
idx := 0.
[(idx < le)] whileTrue: [.
ch := (dna copyFrom: idx to: (idx + 1)).
((ch = 'A')) ifTrue: [
a := (a + 1).
] ifFalse: [
((ch = 'C')) ifTrue: [
c := (c + 1).
] ifFalse: [
((ch = 'G')) ifTrue: [
g := (g + 1).
] ifFalse: [
((ch = 'T')) ifTrue: [
t := (t + 1).
] .
].
].
].
idx := (idx + 1).
].
.
Transcript show: ''; cr.
Transcript show: 'BASE COUNT:'; cr.
Transcript show: ((('    A: ') + (padLeft value: (a asString) value: 3))) printString; cr.
Transcript show: ((('    C: ') + (padLeft value: (c asString) value: 3))) printString; cr.
Transcript show: ((('    G: ') + (padLeft value: (g asString) value: 3))) printString; cr.
Transcript show: ((('    T: ') + (padLeft value: (t asString) value: 3))) printString; cr.
Transcript show: '    ------'; cr.
Transcript show: ((('    Î£: ') + ((le asString)))) printString; cr.
Transcript show: '    ======'; cr.
