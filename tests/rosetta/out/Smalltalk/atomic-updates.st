" Generated by Mochi compiler v0.10.26 on 2025-07-16T09:48:36Z
"
| a amt b1 b2 buckets dist i idx initialSum main nBuckets nTicks next r randChaos randOrder seedChaos seedOrder sum t tc0 tc1 total v v1 v2 |
randOrder := [:seed :n | next := (((seed * 1664525) + 1013904223) % 2147483647).
{next. (next % n)} ].
randChaos := [:seed :n | next := (((seed * 1103515245) + 12345) % 2147483647).
{next. (next % n)} ].
main := [ | nBuckets := 10.
initialSum := 1000.
buckets := {}.
0 to: nBuckets do: [:i |
  buckets := buckets copyWith: 0.
]
.
i := nBuckets.
dist := initialSum.
[(i > 0)] whileTrue: [
  v := (dist / i).
  i := (i - 1).
  buckets at: i put: v.
  dist := (dist - v).
]
.
tc0 := 0.
tc1 := 0.
total := 0.
nTicks := 0.
seedOrder := 1.
seedChaos := 2.
Transcript show: 'sum  ---updates---    mean  buckets'; cr.
t := 0.
[(t < 5)] whileTrue: [
  r := randOrder value: seedOrder value: nBuckets.
  seedOrder := r at: 0.
  b1 := r at: 1.
  b2 := ((b1 + 1) % nBuckets).
  v1 := buckets at: b1.
  v2 := buckets at: b2.
  ((v1 > v2)) ifTrue: [
    a := ((v1 - v2) / 2) asInteger.
    ((a > buckets at: b1)) ifTrue: [
      a := buckets at: b1.
    ] .
    buckets at: b1 put: (buckets at: b1 - a).
    buckets at: b2 put: (buckets at: b2 + a).
  ] ifFalse: [
    a := ((v2 - v1) / 2) asInteger.
    ((a > buckets at: b2)) ifTrue: [
      a := buckets at: b2.
    ] .
    buckets at: b2 put: (buckets at: b2 - a).
    buckets at: b1 put: (buckets at: b1 + a).
  ].
  tc0 := (tc0 + 1).
  r := randChaos value: seedChaos value: nBuckets.
  seedChaos := r at: 0.
  b1 := r at: 1.
  b2 := ((b1 + 1) % nBuckets).
  r := randChaos value: seedChaos value: (buckets at: b1 + 1).
  seedChaos := r at: 0.
  amt := r at: 1.
  ((amt > buckets at: b1)) ifTrue: [
    amt := buckets at: b1.
  ] .
  buckets at: b1 put: (buckets at: b1 - amt).
  buckets at: b2 put: (buckets at: b2 + amt).
  tc1 := (tc1 + 1).
  sum := 0.
  idx := 0.
  [(idx < nBuckets)] whileTrue: [
    sum := (sum + buckets at: idx).
    idx := (idx + 1).
  ]
  .
  total := ((total + tc0) + tc1).
  nTicks := (nTicks + 1).
  Transcript show: ((((((((((sum asString) + ' ') + (tc0 asString)) + ' ') + (tc1 asString)) + ' ') + ((total / nTicks) asString)) + '  ') + (buckets asString))) printString; cr.
  tc0 := 0.
  tc1 := 0.
  t := (t + 1).
]
. ].
main value.
