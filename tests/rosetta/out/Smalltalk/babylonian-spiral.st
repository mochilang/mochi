" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| push i tmp step s v it list p temp bestDot best cross dot positions pos x y dir heap nv st pad r main pts line |
push := [:h :it | h := h copyWith: it.
i := (((h size)) - 1).
[(((i > 0)) and: [(((h at: (i - 1) at: 's') > (h at: i at: 's')))])] whileTrue: [.
tmp := h at: (i - 1).
h at: (i - 1) put: h at: i.
h at: i put: tmp.
i := (i - 1).
].
.
h. ].
step := [:h :nv :dir | [(((((h size)) = 0)) or: [((((nv * nv)) <= (h at: 0 at: 's')))])] whileTrue: [.
h := push value: h value: Dictionary from:{'s'->((nv * nv)). 'a'->nv. 'b'->0}.
nv := (nv + 1).
].
.
s := h at: 0 at: 's'.
v := {}.
[(((((h size)) > 0)) and: [(((h at: 0 at: 's') = s))])] whileTrue: [.
it := h at: 0.
h := h copyFrom: (1 + 1) to: h size.
v := v copyWith: {it at: 'a'. it at: 'b'}.
(((it at: 'a') > (it at: 'b'))) ifTrue: [
h := push value: h value: Dictionary from:{'s'->(((((it at: 'a') * (it at: 'a'))) + (((((it at: 'b') + 1)) * (((it at: 'b') + 1)))))). 'a'->(it at: 'a'). 'b'->(((it at: 'b') + 1))}.
] .
].
.
list := {}.
v do: [:p |.
list := list copyWith: p.
].
.
temp := list.
temp do: [:p |.
(((p at: 0) ~= (p at: 1))) ifTrue: [
list := list copyWith: {p at: 1. p at: 0}.
] .
].
.
temp := list.
temp do: [:p |.
(((p at: 1) ~= 0)) ifTrue: [
list := list copyWith: {p at: 0. -(p at: 1)}.
] .
].
.
temp := list.
temp do: [:p |.
(((p at: 0) ~= 0)) ifTrue: [
list := list copyWith: {-(p at: 0). p at: 1}.
] .
].
.
bestDot := -999999999.
best := dir.
list do: [:p |.
cross := ((((p at: 0) * (dir at: 1))) - (((p at: 1) * (dir at: 0)))).
((cross >= 0)) ifTrue: [
dot := ((((p at: 0) * (dir at: 0))) + (((p at: 1) * (dir at: 1)))).
((dot > bestDot)) ifTrue: [
bestDot := dot.
best := p.
] .
] .
].
.
Dictionary from:{'d'->best. 'heap'->h. 'n'->nv}. ].
positions := [:n | pos := {}.
x := 0.
y := 0.
dir := {0. 1}.
heap := {}.
nv := 1.
i := 0.
[(i < n)] whileTrue: [.
pos := pos copyWith: {x. y}.
st := step value: heap value: nv value: dir.
dir := st at: 'd'.
heap := st at: 'heap'.
nv := st at: 'n' asInteger.
x := (x + (dir at: 0)).
y := (y + (dir at: 1)).
i := (i + 1).
].
.
pos. ].
pad := [:s :w | r := s.
[(((r size)) < w)] whileTrue: [.
r := (r + (' ')).
].
.
r. ].
main := [ pts := positions value: 40.
Transcript show: 'The first 40 Babylonian spiral points are:'; cr.
line := ''.
i := 0.
[(i < ((pts size)))] whileTrue: [.
p := pts at: i.
s := pad value: ((((((('(' + ((p at: 0 asString)))) + (', '))) + ((p at: 1 asString)))) + ')') value: 10.
line := (line + s).
((((((i + 1)) % 10)) = 0)) ifTrue: [
Transcript show: (line) printString; cr.
line := ''.
] .
i := (i + 1).
].
. ].
main value.
