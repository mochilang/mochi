" Generated by Mochi compiler v0.10.26 on 2025-07-16T09:50:28Z
"
| alphabet b base64Decode base64Encode bin binToInt ch chr chunk dec digits enc i idx indexOf lower msg n neg ord out pad parseIntStr toBinary upper val |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!
indexOf := [:s :ch | i := 0.
[(i < (s size))] whileTrue: [
  ((s at: i = ch)) ifTrue: [
    i
  ] .
  i := (i + 1).
]
.
-1 ].
parseIntStr := [:str | i := 0.
neg := false.
((((str size) > 0) and: [(str at: 0 = '-')])) ifTrue: [
  neg := true.
  i := 1.
] .
n := 0.
digits := Dictionary from: {'0' -> 0. '1' -> 1. '2' -> 2. '3' -> 3. '4' -> 4. '5' -> 5. '6' -> 6. '7' -> 7. '8' -> 8. '9' -> 9}.
[(i < (str size))] whileTrue: [
  n := ((n * 10) + digits at: str at: i).
  i := (i + 1).
]
.
(neg) ifTrue: [
  n := -n.
] .
n ].
ord := [:ch | upper := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
lower := 'abcdefghijklmnopqrstuvwxyz'.
idx := indexOf value: upper value: ch.
((idx >= 0)) ifTrue: [
  (65 + idx)
] .
idx := indexOf value: lower value: ch.
((idx >= 0)) ifTrue: [
  (97 + idx)
] .
(((ch >= '0') and: [(ch <= '9')])) ifTrue: [
  (48 + parseIntStr value: ch)
] .
((ch = '+')) ifTrue: [
  43
] .
((ch = '/')) ifTrue: [
  47
] .
((ch = ' ')) ifTrue: [
  32
] .
((ch = '=')) ifTrue: [
  61
] .
0 ].
chr := [:n | upper := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
lower := 'abcdefghijklmnopqrstuvwxyz'.
(((n >= 65) and: [(n < 91)])) ifTrue: [
  upper at: (n - 65)
] .
(((n >= 97) and: [(n < 123)])) ifTrue: [
  lower at: (n - 97)
] .
(((n >= 48) and: [(n < 58)])) ifTrue: [
  digits := '0123456789'.
  digits at: (n - 48)
] .
((n = 43)) ifTrue: [
  '+'
] .
((n = 47)) ifTrue: [
  '/'
] .
((n = 32)) ifTrue: [
  ' '
] .
((n = 61)) ifTrue: [
  '='
] .
'?' ].
toBinary := [:n :bits | b := ''.
val := n.
i := 0.
[(i < bits)] whileTrue: [
  b := (((val % 2) asString) + b).
  val := (val / 2) asInteger.
  i := (i + 1).
]
.
b ].
binToInt := [:bits | n := 0.
i := 0.
[(i < (bits size))] whileTrue: [
  n := ((n * 2) + parseIntStr value: bits at: i).
  i := (i + 1).
]
.
n ].
base64Encode := [:text | alphabet := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.
bin := ''.
text do: [:ch |
  bin := (bin + toBinary value: ord value: ch value: 8).
]
.
[(((bin size) % 6) ~= 0)] whileTrue: [
  bin := (bin + '0').
]
.
out := ''.
i := 0.
[(i < (bin size))] whileTrue: [
  chunk := bin at: i.
  val := binToInt value: chunk.
  out := (out + alphabet at: val).
  i := (i + 6).
]
.
pad := ((3 - ((text size) % 3)) % 3).
((pad = 1)) ifTrue: [
  out := (out at: 0 + '=').
] .
((pad = 2)) ifTrue: [
  out := (out at: 0 + '==').
] .
out ].
base64Decode := [:enc | alphabet := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.
bin := ''.
i := 0.
[
  [(i < (enc size))] whileTrue: [
    ch := enc at: i.
    ((ch = '=')) ifTrue: [
      BreakSignal signal
    ] .
    idx := indexOf value: alphabet value: ch.
    bin := (bin + toBinary value: idx value: 6).
    i := (i + 1).
  ]
] on: BreakSignal do: [:ex | ].
out := ''.
i := 0.
[((i + 8) <= (bin size))] whileTrue: [
  chunk := bin at: i.
  val := binToInt value: chunk.
  out := (out + chr value: val).
  i := (i + 8).
]
.
out ].
msg := 'Rosetta Code Base64 decode data task'.
Transcript show: (('Original : ' + msg)) printString; cr.
enc := base64Encode value: msg.
Transcript show: (('
Encoded  : ' + enc)) printString; cr.
dec := base64Decode value: enc.
Transcript show: (('
Decoded  : ' + dec)) printString; cr.
