" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| bigTrim n bigFromInt digits bigAdd res carry i av bv s bigSub borrow diff bigToString minInt cumu cache y row x val e out r line num |
bigTrim := [:a | n := (a size).
[(((n > 1)) and: [(((a at: (n - 1)) = 0))])] whileTrue: [.
a := a copyFrom: (0 + 1) to: (n - 1).
n := (n - 1).
].
.
a. ].
bigFromInt := [:x | ((x = 0)) ifTrue: [
{0}.
] .
digits := {}.
n := x.
[(n > 0)] whileTrue: [.
digits := digits copyWith: (n % 10).
n := (n / 10).
].
.
digits. ].
bigAdd := [:a :b | res := {}.
carry := 0.
i := 0.
[(((((i < ((a size)))) or: [((i < ((b size))))])) or: [((carry > 0))])] whileTrue: [.
av := 0.
((i < ((a size)))) ifTrue: [
av := a at: i.
] .
bv := 0.
((i < ((b size)))) ifTrue: [
bv := b at: i.
] .
s := (((av + bv)) + carry).
res := res copyWith: (s % 10).
carry := (s / 10).
i := (i + 1).
].
.
bigTrim value: res. ].
bigSub := [:a :b | res := {}.
borrow := 0.
i := 0.
[(i < ((a size)))] whileTrue: [.
av := a at: i.
bv := 0.
((i < ((b size)))) ifTrue: [
bv := b at: i.
] .
diff := (((av - bv)) - borrow).
((diff < 0)) ifTrue: [
diff := (diff + 10).
borrow := 1.
] ifFalse: [
borrow := 0.
].
res := res copyWith: diff.
i := (i + 1).
].
.
bigTrim value: res. ].
bigToString := [:a | s := ''.
i := (((a size)) - 1).
[(i >= 0)] whileTrue: [.
s := (s + ((a at: i asString))).
i := (i - 1).
].
.
s. ].
minInt := [:a :b | ((a < b)) ifTrue: [
a.
] ifFalse: [
b.
]. ].
cumu := [:n | cache := {{bigFromInt value: 1}}.
y := 1.
[(y <= n)] whileTrue: [.
row := {bigFromInt value: 0}.
x := 1.
[(x <= y)] whileTrue: [.
val := cache at: (y - x) at: minInt value: x value: (y - x).
row := row copyWith: bigAdd value: row at: (((row size)) - 1) value: val.
x := (x + 1).
].
.
cache := cache copyWith: row.
y := (y + 1).
].
.
cache at: n. ].
row := [:n | e := cumu value: n.
out := {}.
i := 0.
[(i < n)] whileTrue: [.
diff := bigSub value: e at: (i + 1) value: e at: i.
out := out copyWith: bigToString value: diff.
i := (i + 1).
].
.
out. ].
Transcript show: 'rows:'; cr.
x := 1.
[(x < 11)] whileTrue: [.
r := row value: x.
line := ''.
i := 0.
[(i < ((r size)))] whileTrue: [.
line := (((((line + (' '))) + (r at: i))) + (' ')).
i := (i + 1).
].
.
Transcript show: (line) printString; cr.
x := (x + 1).
].
.
Transcript show: ''; cr.
Transcript show: 'sums:'; cr.
{23. 123. 1234} do: [:num |.
r := cumu value: num.
Transcript show: ((((((num asString)) + (' '))) + (bigToString value: r at: (((r size)) - 1)))) printString; cr.
].
.
