" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| isPrime d circs isCircular nn pow f digits q fq count fd showList out i |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
isPrime := [:n | ((n < 2)) ifTrue: [
false.
] .
((((n % 2)) = 0)) ifTrue: [
(n = 2).
] .
((((n % 3)) = 0)) ifTrue: [
(n = 3).
] .
d := 5.
[(((d * d)) <= n)] whileTrue: [.
((((n % d)) = 0)) ifTrue: [
false.
] .
d := (d + 2).
((((n % d)) = 0)) ifTrue: [
false.
] .
d := (d + 4).
].
.
true. ].
circs := {}.
isCircular := [:n | nn := n.
pow := 1.
[(nn > 0)] whileTrue: [.
pow := (pow * 10).
nn := (nn / 10).
].
.
nn := n.
[.
[true] whileTrue: [.
nn := (nn * 10).
f := (nn / pow).
nn := (nn + ((f * ((1 - pow))))).
((nn = n)) ifTrue: [
BreakSignal signal.
] .
(isPrime value: nn not) ifTrue: [
false.
] .
].
] on: BreakSignal do: [:ex | ].
true. ].
Transcript show: 'The first 19 circular primes are:'; cr.
digits := {1. 3. 7. 9}.
q := {1. 2. 3. 5. 7. 9}.
fq := {1. 2. 3. 5. 7. 9}.
count := 0.
[.
[true] whileTrue: [.
f := q at: 0.
fd := fq at: 0.
(((isPrime value: f) and: [(isCircular value: f)])) ifTrue: [
circs := circs copyWith: f.
count := (count + 1).
((count = 19)) ifTrue: [
BreakSignal signal.
] .
] .
q := q copyFrom: (1 + 1) to: q size.
fq := fq copyFrom: (1 + 1) to: fq size.
((((f ~= 2)) and: [((f ~= 5))])) ifTrue: [
digits do: [:d |.
q := q copyWith: (((f * 10)) + d).
fq := fq copyWith: fd.
].
.
] .
].
] on: BreakSignal do: [:ex | ].
showList := [:xs | out := '['.
i := 0.
[(i < ((xs size)))] whileTrue: [.
out := (out + ((xs at: i asString))).
((i < ((((xs size)) - 1)))) ifTrue: [
out := (out + (', ')).
] .
i := (i + 1).
].
.
(out + ']'). ].
Transcript show: (showList value: circs) printString; cr.
Transcript show: '
The next 4 circular primes, in repunit format, are:'; cr.
Transcript show: '[R(19) R(23) R(317) R(1031)]'; cr.
Transcript show: '
The following repunits are probably circular primes:'; cr.
{5003. 9887. 15073. 25031. 35317. 49081} do: [:i |.
Transcript show: (((('R(' + ((i asString)))) + (') : true'))) printString; cr.
].
.
