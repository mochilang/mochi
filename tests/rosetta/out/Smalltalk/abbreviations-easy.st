" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| fields words cur i ch padRight out join res validate results wi w found wlen ci cmd c ww main table commands mins count j sentence out1 k |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
fields := [:s | words := {}.
cur := ''.
i := 0.
[(i < ((s size)))] whileTrue: [.
ch := (s copyFrom: i to: (i + 1)).
((((((ch = (' '))) or: [((ch = '
'))])) or: [((ch = '	'))])) ifTrue: [
((0 > 0)) ifTrue: [
words := words copyWith: cur.
cur := ''.
] .
] ifFalse: [
cur := (cur + ch).
].
i := (i + 1).
].
.
((((cur size)) > 0)) ifTrue: [
words := words copyWith: cur.
] .
words. ].
padRight := [:s :width | out := s.
i := (s size).
[(i < width)] whileTrue: [.
out := (out + (' ')).
i := (i + 1).
].
.
out. ].
join := [:xs :sep | res := ''.
i := 0.
[(i < ((xs size)))] whileTrue: [.
((i > 0)) ifTrue: [
res := (res + sep).
] .
res := (res + (xs at: i)).
i := (i + 1).
].
.
res. ].
validate := [:commands :words :mins | results := {}.
((((words size)) = 0)) ifTrue: [
results.
] .
wi := 0.
[.
[(wi < ((words size)))] whileTrue: [.
w := words at: wi.
found := false.
wlen := (w size).
ci := 0.
[.
[(ci < ((commands size)))] whileTrue: [.
cmd := commands at: ci.
(((((((mins at: ci) ~= 0)) and: [((wlen >= (mins at: ci)))])) and: [((wlen <= ((cmd size))))])) ifTrue: [
c := upper value: cmd.
ww := upper value: w.
((((c copyFrom: 0 to: wlen)) = ww)) ifTrue: [
results := results copyWith: c.
found := true.
BreakSignal signal.
] .
] .
ci := (ci + 1).
].
] on: BreakSignal do: [:ex | ].
(found not) ifTrue: [
results := results copyWith: '*error*'.
] .
wi := (wi + 1).
].
] on: BreakSignal do: [:ex | ].
results. ].
main := [ table := (((((((((((('Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy ') + ('COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find '))) + ('NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput '))) + (' Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO '))) + ('MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT '))) + ('READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT '))) + ('RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ')).
commands := fields value: table.
mins := {}.
i := 0.
[(i < ((commands size)))] whileTrue: [.
count := 0.
j := 0.
cmd := commands at: i.
[(j < ((cmd size)))] whileTrue: [.
ch := (cmd copyFrom: j to: (j + 1)).
((((ch >= 'A')) and: [((ch <= 'Z'))])) ifTrue: [
count := (count + 1).
] .
j := (j + 1).
].
.
mins := mins copyWith: count.
i := (i + 1).
].
.
sentence := 'riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin'.
words := fields value: sentence.
results := validate value: commands value: words value: mins.
out1 := 'user words:  '.
k := 0.
[(k < ((words size)))] whileTrue: [.
out1 := (((out1 + (padRight value: words at: k value: (results at: k size)))) + (' ')).
k := (k + 1).
].
.
Transcript show: (out1) printString; cr.
Transcript show: ((('full words:  ') + (join value: results value: ' '))) printString; cr. ].
main value.
