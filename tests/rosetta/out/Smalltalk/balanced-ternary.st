" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| trimLeftZeros i btString b ch btToString r d btInt n m btToInt pt btNeg btAdd btMul padLeft show l bs is main ares a cres c |
trimLeftZeros := [:s | i := 0.
[(((i < ((s size)))) and: [((((s copyFrom: i to: (i + 1))) = '0'))])] whileTrue: [.
i := (i + 1).
].
.
(s copyFrom: i to: (s size)). ].
btString := [:s | s := trimLeftZeros value: s.
b := {}.
i := (((s size)) - 1).
[(i >= 0)] whileTrue: [.
ch := (s copyFrom: i to: (i + 1)).
((ch = '+')) ifTrue: [
b := b copyWith: 1.
] ifFalse: [
((ch = '0')) ifTrue: [
b := b copyWith: 0.
] ifFalse: [
((ch = '-')) ifTrue: [
b := b copyWith: (0 - 1).
] ifFalse: [
Dictionary from:{'bt'->{}. 'ok'->false}.
].
].
].
i := (i - 1).
].
.
Dictionary from:{'bt'->b. 'ok'->true}. ].
btToString := [:b | ((((b size)) = 0)) ifTrue: [
'0'.
] .
r := ''.
i := (((b size)) - 1).
[(i >= 0)] whileTrue: [.
d := b at: i.
((d = ((0 - 1)))) ifTrue: [
r := (r + '-').
] ifFalse: [
((d = 0)) ifTrue: [
r := (r + '0').
] ifFalse: [
r := (r + '+').
].
].
i := (i - 1).
].
.
r. ].
btInt := [:i | ((i = 0)) ifTrue: [
{}.
] .
n := i.
b := {}.
[(n ~= 0)] whileTrue: [.
m := (n % 3).
n := (n / 3) asInteger.
((m = 2)) ifTrue: [
m := (0 - 1).
n := (n + 1).
] ifFalse: [
((m = ((0 - 2)))) ifTrue: [
m := 1.
n := (n - 1).
] .
].
b := b copyWith: m.
].
.
b. ].
btToInt := [:b | r := 0.
pt := 1.
i := 0.
[(i < ((b size)))] whileTrue: [.
r := (r + (((b at: i) * pt))).
pt := (pt * 3).
i := (i + 1).
].
.
r. ].
btNeg := [:b | r := {}.
i := 0.
[(i < ((b size)))] whileTrue: [.
r := r copyWith: -(b at: i).
i := (i + 1).
].
.
r. ].
btAdd := [:a :b | btInt value: ((btToInt value: a) + (btToInt value: b)). ].
btMul := [:a :b | btInt value: ((btToInt value: a) * (btToInt value: b)). ].
padLeft := [:s :w | r := s.
[(((r size)) < w)] whileTrue: [.
r := ((' ') + r).
].
.
r. ].
show := [:label :b | l := padLeft value: label value: 7.
bs := padLeft value: btToString value: b value: 12.
is := padLeft value: (btToInt value: b asString) value: 7.
Transcript show: ((((((((l + (' '))) + bs)) + (' '))) + is)) printString; cr. ].
main := [ ares := btString value: '+-0++0+'.
a := ares at: 'bt'.
b := btInt value: -436.
cres := btString value: '+-++-'.
c := cres at: 'bt'.
show value: 'a:' value: a.
show value: 'b:' value: b.
show value: 'c:' value: c.
show value: 'a(b-c):' value: btMul value: a value: btAdd value: b value: btNeg value: c. ].
main value.
