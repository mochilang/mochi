" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| square_to_maps emap dmap x row y ch remove_space s out i encrypt row0 row1 xy v res j key decrypt coords half k1 k2 idx main squareRosetta squareWikipedia textRosetta textWikipedia textTest maps |
square_to_maps := [:square | emap := Dictionary from:{}.
dmap := Dictionary from:{}.
x := 0.
[(x < ((square size)))] whileTrue: [.
row := square at: x.
y := 0.
[(y < ((row size)))] whileTrue: [.
ch := row at: y.
emap at: ch put: {x. y}.
dmap at: (((((x asString)) + ',')) + ((y asString))) put: ch.
y := (y + 1).
].
.
x := (x + 1).
].
.
Dictionary from:{'e'->emap. 'd'->dmap}. ].
remove_space := [:text :emap | s := upper value: text.
out := ''.
i := 0.
[(i < ((s size)))] whileTrue: [.
ch := s copyFrom: (i + 1) to: (i + 1).
((((ch ~= (' '))) and: [((ch in emap))])) ifTrue: [
out := (out + ch).
] .
i := (i + 1).
].
.
out. ].
encrypt := [:text :emap :dmap | text := remove_space value: text value: emap.
row0 := {}.
row1 := {}.
i := 0.
[(i < ((text size)))] whileTrue: [.
ch := text copyFrom: (i + 1) to: (i + 1).
xy := emap at: ch.
row0 := row0 copyWith: xy at: 0.
row1 := row1 copyWith: xy at: 1.
i := (i + 1).
].
.
row1 do: [:v |.
row0 := row0 copyWith: v.
].
.
res := ''.
j := 0.
[(j < ((row0 size)))] whileTrue: [.
key := (((((row0 at: j asString)) + ',')) + ((row0 at: (j + 1) asString))).
res := (res + (dmap at: key)).
j := (j + 2).
].
.
res. ].
decrypt := [:text :emap :dmap | text := remove_space value: text value: emap.
coords := {}.
i := 0.
[(i < ((text size)))] whileTrue: [.
ch := text copyFrom: (i + 1) to: (i + 1).
xy := emap at: ch.
coords := coords copyWith: xy at: 0.
coords := coords copyWith: xy at: 1.
i := (i + 1).
].
.
half := (((coords size)) / 2).
k1 := {}.
k2 := {}.
idx := 0.
[(idx < half)] whileTrue: [.
k1 := k1 copyWith: coords at: idx.
idx := (idx + 1).
].
.
[(idx < ((coords size)))] whileTrue: [.
k2 := k2 copyWith: coords at: idx.
idx := (idx + 1).
].
.
res := ''.
j := 0.
[(j < half)] whileTrue: [.
key := (((((k1 at: j asString)) + ',')) + ((k2 at: j asString))).
res := (res + (dmap at: key)).
j := (j + 1).
].
.
res. ].
main := [ squareRosetta := {{'A'. 'B'. 'C'. 'D'. 'E'}. {'F'. 'G'. 'H'. 'I'. 'K'}. {'L'. 'M'. 'N'. 'O'. 'P'}. {'Q'. 'R'. 'S'. 'T'. 'U'}. {'V'. 'W'. 'X'. 'Y'. 'Z'}. {'J'. '1'. '2'. '3'. '4'}}.
squareWikipedia := {{'B'. 'G'. 'W'. 'K'. 'Z'}. {'Q'. 'P'. 'N'. 'D'. 'S'}. {'I'. 'O'. 'A'. 'X'. 'E'}. {'F'. 'C'. 'L'. 'U'. 'M'}. {'T'. 'H'. 'Y'. 'V'. 'R'}. {'J'. '1'. '2'. '3'. '4'}}.
textRosetta := '0ATTACKATDAWN'.
textWikipedia := 'FLEEATONCE'.
textTest := 'The invasion will start on the first of January'.
maps := square_to_maps value: squareRosetta.
emap := maps at: 'e'.
dmap := maps at: 'd'.
Transcript show: 'from Rosettacode'; cr.
Transcript show: ((('original:	 ') + textRosetta)) printString; cr.
s := encrypt value: textRosetta value: emap value: dmap.
Transcript show: ((('codiert:	 ') + s)) printString; cr.
s := decrypt value: s value: emap value: dmap.
Transcript show: ((('and back:	 ') + s)) printString; cr.
maps := square_to_maps value: squareWikipedia.
emap := maps at: 'e'.
dmap := maps at: 'd'.
Transcript show: 'from Wikipedia'; cr.
Transcript show: ((('original:	 ') + textWikipedia)) printString; cr.
s := encrypt value: textWikipedia value: emap value: dmap.
Transcript show: ((('codiert:	 ') + s)) printString; cr.
s := decrypt value: s value: emap value: dmap.
Transcript show: ((('and back:	 ') + s)) printString; cr.
maps := square_to_maps value: squareWikipedia.
emap := maps at: 'e'.
dmap := maps at: 'd'.
Transcript show: 'from Rosettacode long part'; cr.
Transcript show: ((('original:	 ') + textTest)) printString; cr.
s := encrypt value: textTest value: emap value: dmap.
Transcript show: ((('codiert:	 ') + s)) printString; cr.
s := decrypt value: s value: emap value: dmap.
Transcript show: ((('and back:	 ') + s)) printString; cr. ].
main value.
