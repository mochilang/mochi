" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| PI sinApprox term sum n denom cosApprox atanApprox atan2Approx digit digits i parseTwo parseSec h m sec pad meanTime ssum csum ang theta frac total si s main inputs |
PI := 3.141592653589793.
sinApprox := [:x | term := x.
sum := x.
n := 1.
[(n <= 8)] whileTrue: [.
denom := (((2 * n)) * ((((2 * n)) + 1))) asFloat.
term := (((((-term * x)) * x)) / denom).
sum := (sum + term).
n := (n + 1).
].
.
sum. ].
cosApprox := [:x | term := 1.
sum := 1.
n := 1.
[(n <= 8)] whileTrue: [.
denom := (((((2 * n)) - 1)) * ((2 * n))) asFloat.
term := (((((-term * x)) * x)) / denom).
sum := (sum + term).
n := (n + 1).
].
.
sum. ].
atanApprox := [:x | ((x > 1)) ifTrue: [
(((PI / 2)) - ((x / ((((x * x)) + 0.28))))).
] .
((x < -1)) ifTrue: [
(((-PI / 2)) - ((x / ((((x * x)) + 0.28))))).
] .
(x / ((1 + ((((0.28 * x)) * x))))). ].
atan2Approx := [:y :x | ((x > 0)) ifTrue: [
atanApprox value: (y / x).
] .
((x < 0)) ifTrue: [
((y >= 0)) ifTrue: [
((atanApprox value: (y / x)) + PI).
] .
((atanApprox value: (y / x)) - PI).
] .
((y > 0)) ifTrue: [
(PI / 2).
] .
((y < 0)) ifTrue: [
(-PI / 2).
] .
0. ].
digit := [:ch | digits := '0123456789'.
i := 0.
[(i < 10)] whileTrue: [.
((((digits copyFrom: i to: (i + 1))) = ch)) ifTrue: [
i.
] .
i := (i + 1).
].
.
0. ].
parseTwo := [:s :idx | ((((digit value: (s copyFrom: idx to: (idx + 1))) * 10)) + (digit value: (s copyFrom: (idx + 1) to: (idx + 2)))). ].
parseSec := [:s | h := parseTwo value: s value: 0.
m := parseTwo value: s value: 3.
sec := parseTwo value: s value: 6.
(((((((h * 60)) + m)) * 60)) + sec) asFloat. ].
pad := [:n | ((n < 10)) ifTrue: [
('0' + ((n asString))).
] .
(n asString). ].
meanTime := [:times | ssum := 0.
csum := 0.
i := 0.
[(i < ((times size)))] whileTrue: [.
sec := parseSec value: times at: i.
ang := (((((sec * 2)) * PI)) / 86400).
ssum := (ssum + (sinApprox value: ang)).
csum := (csum + (cosApprox value: ang)).
i := (i + 1).
].
.
theta := atan2Approx value: ssum value: csum.
frac := (theta / ((2 * PI))).
[(frac < 0)] whileTrue: [.
frac := (frac + 1).
].
.
total := (frac * 86400).
si := total asInteger.
h := (si / 3600) asInteger.
m := (((si % 3600)) / 60) asInteger.
s := (si % 60) asInteger.
((((((((pad value: h) + (':'))) + (pad value: m))) + (':'))) + (pad value: s)). ].
main := [ inputs := {'23:00:17'. '23:40:20'. '00:12:45'. '00:17:19'}.
Transcript show: (meanTime value: inputs) printString; cr. ].
main value.
