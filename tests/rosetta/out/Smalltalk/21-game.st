" Generated by Mochi compiler v0.10.30 on 2025-07-18T17:36:02Z
"
| parseIntStr i neg n digits main total computer round done choice line num |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
Object subclass: #ContinueSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
parseIntStr := [:str | i := 0.
neg := false.
((((((str size)) > 0)) and: [(((str copyFrom: (0 + 1) to: 1) = '-'))])) ifTrue: [
neg := true.
i := 1.
] .
n := 0.
digits := Dictionary from:{'0'->0. '1'->1. '2'->2. '3'->3. '4'->4. '5'->5. '6'->6. '7'->7. '8'->8. '9'->9}.
[(i < ((str size)))] whileTrue: [.
n := (((n * 10)) + (digits at: str copyFrom: (i + 1) to: (i + 1))).
i := (i + 1).
].
.
(neg) ifTrue: [
n := -n.
] .
n. ].
main := [ total := 0.
computer := ((((now value) % 2)) = 0).
Transcript show: 'Enter q to quit at any time
'; cr.
(computer) ifTrue: [
Transcript show: 'The computer will choose first'; cr.
] ifFalse: [
Transcript show: 'You will choose first'; cr.
].
Transcript show: '

Running total is now 0

'; cr.
round := 1.
done := false.
[.
[done not] whileTrue: [.
[.
Transcript show: ((((('ROUND ') + ((round asString)))) + (':

'))) printString; cr.
i := 0.
[.
[(((i < 2)) and: [(done not)])] whileTrue: [.
[.
(computer) ifTrue: [
choice := 0.
((total < 18)) ifTrue: [
choice := ((((now value) % 3)) + 1).
] ifFalse: [
choice := (21 - total).
].
total := (total + choice).
Transcript show: ((('The computer chooses ') + ((choice asString)))) printString; cr.
Transcript show: ((('Running total is now ') + ((total asString)))) printString; cr.
((total = 21)) ifTrue: [
Transcript show: '
So, commiserations, the computer has won!'; cr.
done := true.
] .
] ifFalse: [
[.
[true] whileTrue: [.
[.
Transcript show: 'Your choice 1 to 3 : '; cr.
line := input value.
((((line = 'q')) or: [((line = 'Q'))])) ifTrue: [
Transcript show: 'OK, quitting the game'; cr.
done := true.
BreakSignal signal.
] .
num := parseIntStr value: line.
((((num < 1)) or: [((num > 3))])) ifTrue: [
((((total + num)) > 21)) ifTrue: [
Transcript show: 'Too big, try again'; cr.
] ifFalse: [
Transcript show: 'Out of range, try again'; cr.
].
ContinueSignal signal.
] .
((((total + num)) > 21)) ifTrue: [
Transcript show: 'Too big, try again'; cr.
ContinueSignal signal.
] .
total := (total + num).
Transcript show: ((('Running total is now ') + ((total asString)))) printString; cr.
BreakSignal signal.
] on: ContinueSignal do: [:ex | ].
].
] on: BreakSignal do: [:ex | ].
((total = 21)) ifTrue: [
Transcript show: '
So, congratulations, you''ve won!'; cr.
done := true.
] .
].
Transcript show: '
'; cr.
computer := computer not.
i := (i + 1).
] on: ContinueSignal do: [:ex | ].
].
] on: BreakSignal do: [:ex | ].
round := (round + 1).
] on: ContinueSignal do: [:ex | ].
].
] on: BreakSignal do: [:ex | ]. ].
main value.
