" Generated by Mochi compiler v0.10.26 on 2025-07-16T09:50:28Z
"
| bc blum counts d digits firstPrimeFactor formatFloat i idx inc indexOf isPrime j k line main need p padLeft q s |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!
isPrime := [:n | ((n < 2)) ifTrue: [
  false
] .
(((n % 2) = 0)) ifTrue: [
  (n = 2)
] .
(((n % 3) = 0)) ifTrue: [
  (n = 3)
] .
d := 5.
[((d * d) <= n)] whileTrue: [
  (((n % d) = 0)) ifTrue: [
    false
  ] .
  d := (d + 2).
  (((n % d) = 0)) ifTrue: [
    false
  ] .
  d := (d + 4).
]
.
true ].
firstPrimeFactor := [:n | ((n = 1)) ifTrue: [
  1
] .
(((n % 3) = 0)) ifTrue: [
  3
] .
(((n % 5) = 0)) ifTrue: [
  5
] .
inc := {4. 2. 4. 2. 4. 6. 2. 6}.
k := 7.
i := 0.
[((k * k) <= n)] whileTrue: [
  (((n % k) = 0)) ifTrue: [
    k
  ] .
  k := (k + inc at: i).
  i := ((i + 1) % (inc size)).
]
.
n ].
indexOf := [:s :ch | i := 0.
[(i < (s size))] whileTrue: [
  (((s copyFrom: i to: (i + 1)) = ch)) ifTrue: [
    i
  ] .
  i := (i + 1).
]
.
-1 ].
padLeft := [:n :width | s := (n asString).
[((s size) < width)] whileTrue: [
  s := (' ' + s).
]
.
s ].
formatFloat := [:f :prec | s := (f asString).
idx := indexOf value: s value: '.'.
((idx < 0)) ifTrue: [
  s
] .
need := ((idx + 1) + prec).
(((s size) > need)) ifTrue: [
  (s copyFrom: 0 to: need)
] .
s ].
main := [ | blum := {}.
counts := {0. 0. 0. 0}.
digits := {1. 3. 7. 9}.
i := 1.
bc := 0.
[
  [true] whileTrue: [
    p := firstPrimeFactor value: i.
    (((p % 4) = 3)) ifTrue: [
      q := (i / p) asInteger.
      ((((q ~= p) and: [((q % 4) = 3)]) and: [isPrime value: q])) ifTrue: [
        ((bc < 50)) ifTrue: [
          blum := blum copyWith: i.
        ] .
        d := (i % 10).
        ((d = 1)) ifTrue: [
          counts at: 0 put: (counts at: 0 + 1).
        ] ifFalse: [
          ((d = 3)) ifTrue: [
            counts at: 1 put: (counts at: 1 + 1).
          ] ifFalse: [
            ((d = 7)) ifTrue: [
              counts at: 2 put: (counts at: 2 + 1).
            ] ifFalse: [
              ((d = 9)) ifTrue: [
                counts at: 3 put: (counts at: 3 + 1).
              ] .
            ].
          ].
        ].
        bc := (bc + 1).
        ((bc = 50)) ifTrue: [
          Transcript show: 'First 50 Blum integers:'; cr.
          idx := 0.
          [(idx < 50)] whileTrue: [
            line := ''.
            j := 0.
            [(j < 10)] whileTrue: [
              line := ((line + padLeft value: blum at: idx value: 3) + ' ').
              idx := (idx + 1).
              j := (j + 1).
            ]
            .
            Transcript show: ((line copyFrom: 0 to: ((line size) - 1))) printString; cr.
          ]
          .
          BreakSignal signal
        ] .
      ] .
    ] .
    (((i % 5) = 3)) ifTrue: [
      i := (i + 4).
    ] ifFalse: [
      i := (i + 2).
    ].
  ]
] on: BreakSignal do: [:ex | ]. ].
main value.
