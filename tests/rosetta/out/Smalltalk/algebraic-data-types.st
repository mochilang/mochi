" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| node treeString m balance le ri leMap lele leleMap leri leriMap riMap rile rileMap riri ririMap ins insert t tr i |
node := [:cl :le :aa :ri | Dictionary from:{'cl'->cl. 'le'->le. 'aa'->aa. 'ri'->ri}. ].
treeString := [:t | ((t = nil)) ifTrue: [
'E'.
] .
m := t.
((((((((((((((('T(' + (m at: 'cl'))) + (', '))) + (treeString value: m at: 'le'))) + (', '))) + ((m at: 'aa' asString)))) + (', '))) + (treeString value: m at: 'ri'))) + ')'). ].
balance := [:t | ((t = nil)) ifTrue: [
t.
] .
m := t.
(((m at: 'cl') ~= 'B')) ifTrue: [
t.
] .
le := m at: 'le'.
ri := m at: 'ri'.
((le ~= nil)) ifTrue: [
leMap := le.
(((leMap at: 'cl') = 'R')) ifTrue: [
lele := leMap at: 'le'.
((lele ~= nil)) ifTrue: [
leleMap := lele.
(((leleMap at: 'cl') = 'R')) ifTrue: [
node value: 'R' value: node value: 'B' value: leleMap at: 'le' value: leleMap at: 'aa' value: leleMap at: 'ri' value: leMap at: 'aa' value: node value: 'B' value: leMap at: 'ri' value: m at: 'aa' value: ri.
] .
] .
leri := leMap at: 'ri'.
((leri ~= nil)) ifTrue: [
leriMap := leri.
(((leriMap at: 'cl') = 'R')) ifTrue: [
node value: 'R' value: node value: 'B' value: leMap at: 'le' value: leMap at: 'aa' value: leriMap at: 'le' value: leriMap at: 'aa' value: node value: 'B' value: leriMap at: 'ri' value: m at: 'aa' value: ri.
] .
] .
] .
] .
((ri ~= nil)) ifTrue: [
riMap := ri.
(((riMap at: 'cl') = 'R')) ifTrue: [
rile := riMap at: 'le'.
((rile ~= nil)) ifTrue: [
rileMap := rile.
(((rileMap at: 'cl') = 'R')) ifTrue: [
node value: 'R' value: node value: 'B' value: m at: 'le' value: m at: 'aa' value: rileMap at: 'le' value: rileMap at: 'aa' value: node value: 'B' value: rileMap at: 'ri' value: riMap at: 'aa' value: riMap at: 'ri'.
] .
] .
riri := riMap at: 'ri'.
((riri ~= nil)) ifTrue: [
ririMap := riri.
(((ririMap at: 'cl') = 'R')) ifTrue: [
node value: 'R' value: node value: 'B' value: m at: 'le' value: m at: 'aa' value: riMap at: 'le' value: riMap at: 'aa' value: node value: 'B' value: ririMap at: 'le' value: ririMap at: 'aa' value: ririMap at: 'ri'.
] .
] .
] .
] .
t. ].
ins := [:tr :x | ((tr = nil)) ifTrue: [
node value: 'R' value: nil value: x value: nil.
] .
((x < (tr at: 'aa'))) ifTrue: [
balance value: node value: tr at: 'cl' value: ins value: tr at: 'le' value: x value: tr at: 'aa' value: tr at: 'ri'.
] .
((x > (tr at: 'aa'))) ifTrue: [
balance value: node value: tr at: 'cl' value: tr at: 'le' value: tr at: 'aa' value: ins value: tr at: 'ri' value: x.
] .
tr. ].
insert := [:tr :x | t := ins value: tr value: x.
((t = nil)) ifTrue: [
nil.
] .
m := t.
node value: 'B' value: m at: 'le' value: m at: 'aa' value: m at: 'ri'. ].
tr := nil.
i := 1.
[(i <= 16)] whileTrue: [.
tr := insert value: tr value: i.
i := (i + 1).
].
.
Transcript show: (treeString value: tr) printString; cr.
