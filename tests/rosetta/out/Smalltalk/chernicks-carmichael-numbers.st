" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| isPrime d bigTrim n bigFromInt digits bigMulSmall res carry i prod bigToString s pow2 r ccFactors p ccNumbers m num |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
isPrime := [:n | ((n < 2)) ifTrue: [
false.
] .
((((n % 2)) = 0)) ifTrue: [
(n = 2).
] .
((((n % 3)) = 0)) ifTrue: [
(n = 3).
] .
d := 5.
[(((d * d)) <= n)] whileTrue: [.
((((n % d)) = 0)) ifTrue: [
false.
] .
d := (d + 2).
((((n % d)) = 0)) ifTrue: [
false.
] .
d := (d + 4).
].
.
true. ].
bigTrim := [:a | n := (a size).
[(((n > 1)) and: [(((a at: (n - 1)) = 0))])] whileTrue: [.
a := a copyFrom: (0 + 1) to: (n - 1).
n := (n - 1).
].
.
a. ].
bigFromInt := [:x | ((x = 0)) ifTrue: [
{0}.
] .
digits := {}.
n := x.
[(n > 0)] whileTrue: [.
digits := digits copyWith: (n % 10).
n := (n / 10).
].
.
digits. ].
bigMulSmall := [:a :m | ((m = 0)) ifTrue: [
{0}.
] .
res := {}.
carry := 0.
i := 0.
[(i < ((a size)))] whileTrue: [.
prod := ((((a at: i) * m)) + carry).
res := res copyWith: (prod % 10).
carry := (prod / 10).
i := (i + 1).
].
.
[(carry > 0)] whileTrue: [.
res := res copyWith: (carry % 10).
carry := (carry / 10).
].
.
bigTrim value: res. ].
bigToString := [:a | s := ''.
i := (((a size)) - 1).
[(i >= 0)] whileTrue: [.
s := (s + ((a at: i asString))).
i := (i - 1).
].
.
s. ].
pow2 := [:k | r := 1.
i := 0.
[(i < k)] whileTrue: [.
r := (r * 2).
i := (i + 1).
].
.
r. ].
ccFactors := [:n :m | p := (((6 * m)) + 1).
(isPrime value: p not) ifTrue: [
{}.
] .
prod := bigFromInt value: p.
p := (((12 * m)) + 1).
(isPrime value: p not) ifTrue: [
{}.
] .
prod := bigMulSmall value: prod value: p.
i := 1.
[(i <= ((n - 2)))] whileTrue: [.
p := ((((((pow2 value: i) * 9)) * m)) + 1).
(isPrime value: p not) ifTrue: [
{}.
] .
prod := bigMulSmall value: prod value: p.
i := (i + 1).
].
.
prod. ].
ccNumbers := [:start :end | n := start.
[.
[(n <= end)] whileTrue: [.
m := 1.
((n > 4)) ifTrue: [
m := pow2 value: (n - 4).
] .
[.
[true] whileTrue: [.
num := ccFactors value: n value: m.
((((num size)) > 0)) ifTrue: [
Transcript show: (((((('a(' + ((n asString)))) + (') = '))) + (bigToString value: num))) printString; cr.
BreakSignal signal.
] .
((n <= 4)) ifTrue: [
m := (m + 1).
] ifFalse: [
m := (m + (pow2 value: (n - 4))).
].
].
] on: BreakSignal do: [:ex | ].
n := (n + 1).
].
] on: BreakSignal do: [:ex | ]. ].
ccNumbers value: 3 value: 9.
