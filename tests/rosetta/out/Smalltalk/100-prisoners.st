" Generated by Mochi compiler v0.10.30 on 2025-07-18T17:36:01Z
"
| shuffle arr i j tmp doTrials pardoned t drawers p success found prev d this opened k n rf main trials np strat |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
shuffle := [:xs | arr := xs.
i := 99.
[(i > 0)] whileTrue: [.
j := ((now value) % ((i + 1))).
tmp := arr at: i.
arr at: i put: arr at: j.
arr at: j put: tmp.
i := (i - 1).
].
.
arr. ].
doTrials := [:trials :np :strategy | pardoned := 0.
t := 0.
[.
[(t < trials)] whileTrue: [.
drawers := {}.
i := 0.
[(i < 100)] whileTrue: [.
drawers := drawers copyWith: i.
i := (i + 1).
].
.
drawers := shuffle value: drawers.
p := 0.
success := true.
[.
[(p < np)] whileTrue: [.
found := false.
((strategy = 'optimal')) ifTrue: [
prev := p.
d := 0.
[.
[(d < 50)] whileTrue: [.
this := drawers at: prev.
((this = p)) ifTrue: [
found := true.
BreakSignal signal.
] .
prev := this.
d := (d + 1).
].
] on: BreakSignal do: [:ex | ].
] ifFalse: [
opened := {}.
k := 0.
[(k < 100)] whileTrue: [.
opened := opened copyWith: false.
k := (k + 1).
].
.
d := 0.
[.
[(d < 50)] whileTrue: [.
n := ((now value) % 100).
[opened at: n] whileTrue: [.
n := ((now value) % 100).
].
.
opened at: n put: true.
(((drawers at: n) = p)) ifTrue: [
found := true.
BreakSignal signal.
] .
d := (d + 1).
].
] on: BreakSignal do: [:ex | ].
].
(found not) ifTrue: [
success := false.
BreakSignal signal.
] .
p := (p + 1).
].
] on: BreakSignal do: [:ex | ].
(success) ifTrue: [
pardoned := (pardoned + 1).
] .
t := (t + 1).
].
] on: BreakSignal do: [:ex | ].
rf := ((((pardoned asFloat) / (trials asFloat))) * 100).
Transcript show: ((((((((((((('  strategy = ') + strategy)) + ('  pardoned = '))) + ((pardoned asString)))) + (' relative frequency = '))) + ((rf asString)))) + '%')) printString; cr. ].
main := [ trials := 1000.
{10. 100} do: [:np |.
Transcript show: ((((((((('Results from ') + ((trials asString)))) + (' trials with '))) + ((np asString)))) + (' prisoners:
'))) printString; cr.
{'random'. 'optimal'} do: [:strat |.
doTrials value: trials value: np value: strat.
].
.
].
. ].
main value.
