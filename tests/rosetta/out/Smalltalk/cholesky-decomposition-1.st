" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| sqrtApprox guess i makeSym unpackSym n ele mat idx r row c printMat line j printSym printLower choleskyLower ae le col dr dc e d ci cx demo l |
sqrtApprox := [:x | guess := x.
i := 0.
[(i < 20)] whileTrue: [.
guess := (((guess + ((x / guess)))) / 2).
i := (i + 1).
].
.
guess. ].
makeSym := [:order :elements | Dictionary from:{'order'->order. 'ele'->elements}. ].
unpackSym := [:m | n := m at: 'order'.
ele := m at: 'ele'.
mat := {}.
idx := 0.
r := 0.
[(r < n)] whileTrue: [.
row := {}.
c := 0.
[(c <= r)] whileTrue: [.
row := row copyWith: ele at: idx.
idx := (idx + 1).
c := (c + 1).
].
.
[(c < n)] whileTrue: [.
row := row copyWith: 0.
c := (c + 1).
].
.
mat := mat copyWith: row.
r := (r + 1).
].
.
r := 0.
[(r < n)] whileTrue: [.
c := (r + 1).
[(c < n)] whileTrue: [.
mat at: r at: c put: mat at: c at: r.
c := (c + 1).
].
.
r := (r + 1).
].
.
mat. ].
printMat := [:m | i := 0.
[(i < ((m size)))] whileTrue: [.
line := ''.
j := 0.
[(j < ((m at: i size)))] whileTrue: [.
line := (line + ((m at: i at: j asString))).
((j < ((((m at: i size)) - 1)))) ifTrue: [
line := (line + (' ')).
] .
j := (j + 1).
].
.
Transcript show: (line) printString; cr.
i := (i + 1).
].
. ].
printSym := [:m | printMat value: unpackSym value: m. ].
printLower := [:m | n := m at: 'order'.
ele := m at: 'ele'.
mat := {}.
idx := 0.
r := 0.
[(r < n)] whileTrue: [.
row := {}.
c := 0.
[(c <= r)] whileTrue: [.
row := row copyWith: ele at: idx.
idx := (idx + 1).
c := (c + 1).
].
.
[(c < n)] whileTrue: [.
row := row copyWith: 0.
c := (c + 1).
].
.
mat := mat copyWith: row.
r := (r + 1).
].
.
printMat value: mat. ].
choleskyLower := [:a | n := a at: 'order'.
ae := a at: 'ele'.
le := {}.
idx := 0.
[(idx < ((ae size)))] whileTrue: [.
le := le copyWith: 0.
idx := (idx + 1).
].
.
row := 1.
col := 1.
dr := 0.
dc := 0.
i := 0.
[(i < ((ae size)))] whileTrue: [.
e := ae at: i.
((i < dr)) ifTrue: [
d := (((e - (le at: i))) / (le at: dc)).
le at: i put: d.
ci := col.
cx := dc.
j := (i + 1).
[(j <= dr)] whileTrue: [.
cx := (cx + ci).
ci := (ci + 1).
le at: j put: ((le at: j) + ((d * (le at: cx)))).
j := (j + 1).
].
.
col := (col + 1).
dc := (dc + col).
] ifFalse: [
le at: i put: sqrtApprox value: (e - (le at: i)).
row := (row + 1).
dr := (dr + row).
col := 1.
dc := 0.
].
i := (i + 1).
].
.
Dictionary from:{'order'->n. 'ele'->le}. ].
demo := [:a | Transcript show: 'A:'; cr.
printSym value: a.
Transcript show: 'L:'; cr.
l := choleskyLower value: a.
printLower value: l. ].
demo value: makeSym value: 3 value: {25. 15. 18. -5. 0. 11}.
demo value: makeSym value: 4 value: {18. 22. 70. 54. 86. 174. 42. 62. 134. 106}.
