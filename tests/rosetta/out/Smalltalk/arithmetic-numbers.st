" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| sieve spf i j primesFrom primes pad3 s commatize out c primeCount lo hi mid count arithmeticNumbers arr n x sigma tau p cnt power sum main limit line last lastc pc comp |
sieve := [:limit | spf := {}.
i := 0.
[(i <= limit)] whileTrue: [.
spf := spf copyWith: 0.
i := (i + 1).
].
.
i := 2.
[(i <= limit)] whileTrue: [.
(((spf at: i) = 0)) ifTrue: [
spf at: i put: i.
((((i * i)) <= limit)) ifTrue: [
j := (i * i).
[(j <= limit)] whileTrue: [.
(((spf at: j) = 0)) ifTrue: [
spf at: j put: i.
] .
j := (j + i).
].
.
] .
] .
i := (i + 1).
].
.
spf. ].
primesFrom := [:spf :limit | primes := {}.
i := 3.
[(i <= limit)] whileTrue: [.
(((spf at: i) = i)) ifTrue: [
primes := primes copyWith: i.
] .
i := (i + 1).
].
.
primes. ].
pad3 := [:n | s := (n asString).
[(((s size)) < 3)] whileTrue: [.
s := ((' ') + s).
].
.
s. ].
commatize := [:n | s := (n asString).
out := ''.
i := (((s size)) - 1).
c := 0.
[(i >= 0)] whileTrue: [.
out := (((s copyFrom: i to: (i + 1))) + out).
c := (c + 1).
((((((c % 3)) = 0)) and: [((i > 0))])) ifTrue: [
out := (',' + out).
] .
i := (i - 1).
].
.
out. ].
primeCount := [:primes :last :spf | lo := 0.
hi := (primes size).
[(lo < hi)] whileTrue: [.
mid := (((lo + hi)) / 2) asInteger.
(((primes at: mid) < last)) ifTrue: [
lo := (mid + 1).
] ifFalse: [
hi := mid.
].
].
.
count := (lo + 1).
(((spf at: last) ~= last)) ifTrue: [
count := (count - 1).
] .
count. ].
arithmeticNumbers := [:limit :spf | arr := {1}.
n := 3.
[(1 < limit)] whileTrue: [.
(((spf at: n) = n)) ifTrue: [
arr := arr copyWith: n.
] ifFalse: [
x := n.
sigma := 1.
tau := 1.
[(x > 1)] whileTrue: [.
p := spf at: x.
((p = 0)) ifTrue: [
p := x.
] .
cnt := 0.
power := p.
sum := 1.
[(((x % p)) = 0)] whileTrue: [.
x := (x / p).
cnt := (cnt + 1).
sum := (sum + power).
power := (power * p).
].
.
sigma := (sigma * sum).
tau := (tau * ((cnt + 1))).
].
.
((((sigma % tau)) = 0)) ifTrue: [
arr := arr copyWith: n.
] .
].
n := (n + 1).
].
.
arr. ].
main := [ limit := 1228663.
spf := sieve value: limit.
primes := primesFrom value: spf value: limit.
arr := arithmeticNumbers value: 1000000 value: spf.
Transcript show: 'The first 100 arithmetic numbers are:'; cr.
i := 0.
[(i < 100)] whileTrue: [.
line := ''.
j := 0.
[(j < 10)] whileTrue: [.
line := (line + (pad3 value: arr at: (i + j))).
((j < 9)) ifTrue: [
line := (line + (' ')).
] .
j := (j + 1).
].
.
Transcript show: (line) printString; cr.
i := (i + 10).
].
.
{1000. 10000. 100000. 1000000} do: [:x |.
last := arr at: (x - 1).
lastc := commatize value: last.
Transcript show: ((((((('
The ') + (commatize value: x))) + ('th arithmetic number is: '))) + lastc)) printString; cr.
pc := primeCount value: primes value: last value: spf.
comp := (((x - pc)) - 1).
Transcript show: ((((((((('The count of such numbers <= ') + lastc)) + (' which are composite is '))) + (commatize value: comp))) + '.')) printString; cr.
].
. ].
main value.
