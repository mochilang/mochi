" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| indexOf i shuffle arr j tmp main digits pat valid guess cows bulls seen malformed cg pos |
Object subclass: #BreakSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
Object subclass: #ContinueSignal instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!.
indexOf := [:s :ch | i := 0.
[(i < ((s size)))] whileTrue: [.
((((s copyFrom: i to: (i + 1))) = ch)) ifTrue: [
i.
] .
i := (i + 1).
].
.
-1. ].
shuffle := [:xs | arr := xs.
i := (((arr size)) - 1).
[(i > 0)] whileTrue: [.
j := ((now value) % ((i + 1))).
tmp := arr at: i.
arr at: i put: arr at: j.
arr at: j put: tmp.
i := (i - 1).
].
.
arr. ].
main := [ Transcript show: 'Cows and Bulls'; cr.
Transcript show: 'Guess four digit number of unique digits in the range 1 to 9.'; cr.
Transcript show: 'A correct digit but not in the correct place is a cow.'; cr.
Transcript show: 'A correct digit in the correct place is a bull.'; cr.
digits := {'1'. '2'. '3'. '4'. '5'. '6'. '7'. '8'. '9'}.
digits := shuffle value: digits.
pat := ((((((digits at: 0) + (digits at: 1))) + (digits at: 2))) + (digits at: 3)).
valid := '123456789'.
[.
[true] whileTrue: [.
[.
Transcript show: 'Guess: '; cr.
guess := input value.
((((guess size)) ~= 4)) ifTrue: [
Transcript show: 'Please guess a four digit number.'; cr.
ContinueSignal signal.
] .
cows := 0.
bulls := 0.
seen := ''.
i := 0.
malformed := false.
[.
[(i < 4)] whileTrue: [.
cg := (guess copyFrom: i to: (i + 1)).
(((indexOf value: seen value: cg) ~= -1)) ifTrue: [
Transcript show: ((('Repeated digit: ') + cg)) printString; cr.
malformed := true.
BreakSignal signal.
] .
seen := (seen + cg).
pos := indexOf value: pat value: cg.
((pos = -1)) ifTrue: [
(((indexOf value: valid value: cg) = -1)) ifTrue: [
Transcript show: ((('Invalid digit: ') + cg)) printString; cr.
malformed := true.
BreakSignal signal.
] .
] ifFalse: [
((pos = i)) ifTrue: [
bulls := (bulls + 1).
] ifFalse: [
cows := (cows + 1).
].
].
i := (i + 1).
].
] on: BreakSignal do: [:ex | ].
(malformed) ifTrue: [
ContinueSignal signal.
] .
Transcript show: ((((((('Cows: ') + ((cows asString)))) + (', bulls: '))) + ((bulls asString)))) printString; cr.
((bulls = 4)) ifTrue: [
Transcript show: 'You got it.'; cr.
BreakSignal signal.
] .
] on: ContinueSignal do: [:ex | ].
].
] on: BreakSignal do: [:ex | ]. ].
main value.
