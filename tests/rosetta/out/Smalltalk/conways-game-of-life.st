" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| seed randN newField rows y row x setCell state nextState count dy dx newLife a i step tmp lifeString out main l |
seed := 1.
randN := [:n | seed := (((((seed * 1664525)) + 1013904223)) % 2147483647).
(seed % n). ].
newField := [:w :h | rows := {}.
y := 0.
[(y < h)] whileTrue: [.
row := {}.
x := 0.
[(x < w)] whileTrue: [.
row := row copyWith: false.
x := (x + 1).
].
.
rows := rows copyWith: row.
y := (y + 1).
].
.
Dictionary from:{'s'->rows. 'w'->w. 'h'->h}. ].
setCell := [:f :x :y :b | rows := f at: 's'.
row := rows at: y.
row at: x put: b.
rows at: y put: row.
f at: 's' put: rows. ].
state := [:f :x :y | [(y < 0)] whileTrue: [.
y := (y + (f at: 'h')).
].
.
[(x < 0)] whileTrue: [.
x := (x + (f at: 'w')).
].
.
f at: 's' at: (y % (f at: 'h')) at: (x % (f at: 'w')). ].
nextState := [:f :x :y | count := 0.
dy := -1.
[(dy <= 1)] whileTrue: [.
dx := -1.
[(dx <= 1)] whileTrue: [.
((((((dx = 0)) and: [((dy = 0))]) not) and: [(state value: f value: (x + dx) value: (y + dy))])) ifTrue: [
count := (count + 1).
] .
dx := (dx + 1).
].
.
dy := (dy + 1).
].
.
(((count = 3)) or: [((((count = 2)) and: [(state value: f value: x value: y)]))]). ].
newLife := [:w :h | a := newField value: w value: h.
i := 0.
[(i < ((((w * h)) / 2)))] whileTrue: [.
setCell value: a value: randN value: w value: randN value: h value: true.
i := (i + 1).
].
.
Dictionary from:{'a'->a. 'b'->newField value: w value: h. 'w'->w. 'h'->h}. ].
step := [:l | y := 0.
[(y < (l at: 'h'))] whileTrue: [.
x := 0.
[(x < (l at: 'w'))] whileTrue: [.
setCell value: l at: 'b' value: x value: y value: nextState value: l at: 'a' value: x value: y.
x := (x + 1).
].
.
y := (y + 1).
].
.
tmp := l at: 'a'.
l at: 'a' put: l at: 'b'.
l at: 'b' put: tmp. ].
lifeString := [:l | out := ''.
y := 0.
[(y < (l at: 'h'))] whileTrue: [.
x := 0.
[(x < (l at: 'w'))] whileTrue: [.
(state value: l at: 'a' value: x value: y) ifTrue: [
out := (out + '*').
] ifFalse: [
out := (out + (' ')).
].
x := (x + 1).
].
.
out := (out + '
').
y := (y + 1).
].
.
out. ].
main := [ l := newLife value: 80 value: 15.
i := 0.
[(i < 300)] whileTrue: [.
step value: l.
Transcript show: ''; cr.
Transcript show: (lifeString value: l) printString; cr.
i := (i + 1).
].
. ].
main value.
