" Generated by Mochi compiler v0.10.26 on 2025-07-16T09:48:36Z
"
| Insert Node Remove adjustBalance bal dir double dump dumpNode end getLink heir i indentStr insertBalance insertR line links main n nn node opp r removeBalance removeR s setLink single sp t tmp tree |
Node := [:data | Dictionary from: {'Data' -> data. 'Balance' -> 0. 'Link' -> {nil. nil}} ].
getLink := [:n :dir | n at: 'Link' at: dir ].
setLink := [:n :dir :v | links := n at: 'Link'.
links at: dir put: v.
n at: 'Link' put: links. ].
opp := [:dir | (1 - dir) ].
single := [:root :dir | tmp := getLink value: root value: opp value: dir.
setLink value: root value: opp value: dir value: getLink value: tmp value: dir.
setLink value: tmp value: dir value: root.
tmp ].
double := [:root :dir | tmp := getLink value: getLink value: root value: opp value: dir value: dir.
setLink value: getLink value: root value: opp value: dir value: dir value: getLink value: tmp value: opp value: dir.
setLink value: tmp value: opp value: dir value: getLink value: root value: opp value: dir.
setLink value: root value: opp value: dir value: tmp.
tmp := getLink value: root value: opp value: dir.
setLink value: root value: opp value: dir value: getLink value: tmp value: dir.
setLink value: tmp value: dir value: root.
tmp ].
adjustBalance := [:root :dir :bal | n := getLink value: root value: dir.
nn := getLink value: n value: opp value: dir.
((nn at: 'Balance' = 0)) ifTrue: [
  root at: 'Balance' put: 0.
  n at: 'Balance' put: 0.
] ifFalse: [
  ((nn at: 'Balance' = bal)) ifTrue: [
    root at: 'Balance' put: -bal.
    n at: 'Balance' put: 0.
  ] ifFalse: [
    root at: 'Balance' put: 0.
    n at: 'Balance' put: bal.
  ].
].
nn at: 'Balance' put: 0. ].
insertBalance := [:root :dir | n := getLink value: root value: dir.
bal := ((2 * dir) - 1).
((n at: 'Balance' = bal)) ifTrue: [
  root at: 'Balance' put: 0.
  n at: 'Balance' put: 0.
  single value: root value: opp value: dir
] .
adjustBalance value: root value: dir value: bal.
double value: root value: opp value: dir ].
insertR := [:root :data | ((root = nil)) ifTrue: [
  Dictionary from: {'node' -> Node value: data. 'done' -> false}
] .
node := root.
dir := 0.
((node at: 'Data' asInteger < data)) ifTrue: [
  dir := 1.
] .
r := insertR value: getLink value: node value: dir value: data.
setLink value: node value: dir value: r at: 'node'.
(r at: 'done') ifTrue: [
  Dictionary from: {'node' -> node. 'done' -> true}
] .
node at: 'Balance' put: (node at: 'Balance' asInteger + ((2 * dir) - 1)).
((node at: 'Balance' = 0)) ifTrue: [
  Dictionary from: {'node' -> node. 'done' -> true}
] .
(((node at: 'Balance' = 1) or: [(node at: 'Balance' = -1)])) ifTrue: [
  Dictionary from: {'node' -> node. 'done' -> false}
] .
Dictionary from: {'node' -> insertBalance value: node value: dir. 'done' -> true} ].
Insert := [:tree :data | r := insertR value: tree value: data.
r at: 'node' ].
removeBalance := [:root :dir | n := getLink value: root value: opp value: dir.
bal := ((2 * dir) - 1).
((n at: 'Balance' = -bal)) ifTrue: [
  root at: 'Balance' put: 0.
  n at: 'Balance' put: 0.
  Dictionary from: {'node' -> single value: root value: dir. 'done' -> false}
] .
((n at: 'Balance' = bal)) ifTrue: [
  adjustBalance value: root value: opp value: dir value: -bal.
  Dictionary from: {'node' -> double value: root value: dir. 'done' -> false}
] .
root at: 'Balance' put: -bal.
n at: 'Balance' put: bal.
Dictionary from: {'node' -> single value: root value: dir. 'done' -> true} ].
removeR := [:root :data | ((root = nil)) ifTrue: [
  Dictionary from: {'node' -> nil. 'done' -> false}
] .
node := root.
((node at: 'Data' asInteger = data)) ifTrue: [
  ((getLink value: node value: 0 = nil)) ifTrue: [
    Dictionary from: {'node' -> getLink value: node value: 1. 'done' -> false}
  ] .
  ((getLink value: node value: 1 = nil)) ifTrue: [
    Dictionary from: {'node' -> getLink value: node value: 0. 'done' -> false}
  ] .
  heir := getLink value: node value: 0.
  [(getLink value: heir value: 1 ~= nil)] whileTrue: [
    heir := getLink value: heir value: 1.
  ]
  .
  node at: 'Data' put: heir at: 'Data'.
  data := heir at: 'Data' asInteger.
] .
dir := 0.
((node at: 'Data' asInteger < data)) ifTrue: [
  dir := 1.
] .
r := removeR value: getLink value: node value: dir value: data.
setLink value: node value: dir value: r at: 'node'.
(r at: 'done') ifTrue: [
  Dictionary from: {'node' -> node. 'done' -> true}
] .
node at: 'Balance' put: ((node at: 'Balance' asInteger + 1) - (2 * dir)).
(((node at: 'Balance' = 1) or: [(node at: 'Balance' = -1)])) ifTrue: [
  Dictionary from: {'node' -> node. 'done' -> true}
] .
((node at: 'Balance' = 0)) ifTrue: [
  Dictionary from: {'node' -> node. 'done' -> false}
] .
removeBalance value: node value: dir ].
Remove := [:tree :data | r := removeR value: tree value: data.
r at: 'node' ].
indentStr := [:n | s := ''.
i := 0.
[(i < n)] whileTrue: [
  s := (s + ' ').
  i := (i + 1).
]
.
s ].
dumpNode := [:node :indent :comma | sp := indentStr value: indent.
((node = nil)) ifTrue: [
  line := (sp + 'null').
  (comma) ifTrue: [
    line := (line + ',').
  ] .
  Transcript show: (line) printString; cr.
] ifFalse: [
  Transcript show: ((sp + '{')) printString; cr.
  Transcript show: ((((indentStr value: (indent + 3) + '"Data": ') + (node at: 'Data' asString)) + ',')) printString; cr.
  Transcript show: ((((indentStr value: (indent + 3) + '"Balance": ') + (node at: 'Balance' asString)) + ',')) printString; cr.
  Transcript show: ((indentStr value: (indent + 3) + '"Link": [')) printString; cr.
  dumpNode value: getLink value: node value: 0 value: (indent + 6) value: true.
  dumpNode value: getLink value: node value: 1 value: (indent + 6) value: false.
  Transcript show: ((indentStr value: (indent + 3) + ']')) printString; cr.
  end := (sp + '}').
  (comma) ifTrue: [
    end := (end + ',').
  ] .
  Transcript show: (end) printString; cr.
]. ].
dump := [:node :indent | dumpNode value: node value: indent value: false. ].
main := [ | tree := nil.
Transcript show: 'Empty tree:'; cr.
dump value: tree value: 0.
Transcript show: ''; cr.
Transcript show: 'Insert test:'; cr.
tree := Insert value: tree value: 3.
tree := Insert value: tree value: 1.
tree := Insert value: tree value: 4.
tree := Insert value: tree value: 1.
tree := Insert value: tree value: 5.
dump value: tree value: 0.
Transcript show: ''; cr.
Transcript show: 'Remove test:'; cr.
tree := Remove value: tree value: 3.
tree := Remove value: tree value: 1.
t := tree.
t at: 'Balance' put: 0.
tree := t.
dump value: tree value: 0. ].
main value.
