" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| PI TWO_PI sinApprox term sum n denom floor i absFloat absInt parseIntStr neg digits parseDate y m d leap daysInMonth feb lengths addDays yy mm dd pad2 dateString day part1 part2 part3 biorhythms bparts by bm bd tparts ty tm td diff cycles quadrants length cycle position quadrant percent description daysToAdd res ny nm nd transition trend next pct posStr main pairs idx p |
PI := 3.141592653589793.
TWO_PI := 6.283185307179586.
sinApprox := [:x | term := x.
sum := x.
n := 1.
[(n <= 8)] whileTrue: [.
denom := (((2 * n)) * ((((2 * n)) + 1))) asFloat.
term := (((((-term * x)) * x)) / denom).
sum := (sum + term).
n := (n + 1).
].
.
sum. ].
floor := [:x | i := x asInteger.
(((i asFloat) > x)) ifTrue: [
i := (i - 1).
] .
i asFloat. ].
absFloat := [:x | ((x < 0)) ifTrue: [
-x.
] .
x. ].
absInt := [:n | ((n < 0)) ifTrue: [
-n.
] .
n. ].
parseIntStr := [:str | i := 0.
neg := false.
((((((str size)) > 0)) and: [(((str copyFrom: (0 + 1) to: 1) = '-'))])) ifTrue: [
neg := true.
i := 1.
] .
n := 0.
digits := Dictionary from:{'0'->0. '1'->1. '2'->2. '3'->3. '4'->4. '5'->5. '6'->6. '7'->7. '8'->8. '9'->9}.
[(i < ((str size)))] whileTrue: [.
n := (((n * 10)) + (digits at: str copyFrom: (i + 1) to: (i + 1))).
i := (i + 1).
].
.
(neg) ifTrue: [
n := -n.
] .
n. ].
parseDate := [:s | y := parseIntStr value: s copyFrom: (0 + 1) to: 4.
m := parseIntStr value: s copyFrom: (5 + 1) to: 7.
d := parseIntStr value: s copyFrom: (8 + 1) to: 10.
{y. m. d}. ].
leap := [:y | ((((y % 400)) = 0)) ifTrue: [
true.
] .
((((y % 100)) = 0)) ifTrue: [
false.
] .
(((y % 4)) = 0). ].
daysInMonth := [:y :m | feb := (leap value: y) ifTrue: [29] ifFalse: [28].
lengths := {31. feb. 31. 30. 31. 30. 31. 31. 30. 31. 30. 31}.
lengths at: (m - 1). ].
addDays := [:y :m :d :n | yy := y.
mm := m.
dd := d.
((n >= 0)) ifTrue: [
i := 0.
[(i < n)] whileTrue: [.
dd := (dd + 1).
((dd > (daysInMonth value: yy value: mm))) ifTrue: [
dd := 1.
mm := (mm + 1).
((mm > 12)) ifTrue: [
mm := 1.
yy := (yy + 1).
] .
] .
i := (i + 1).
].
.
] ifFalse: [
i := 0.
[(i > n)] whileTrue: [.
dd := (dd - 1).
((dd < 1)) ifTrue: [
mm := (mm - 1).
((mm < 1)) ifTrue: [
mm := 12.
yy := (yy - 1).
] .
dd := daysInMonth value: yy value: mm.
] .
i := (i - 1).
].
.
].
{yy. mm. dd}. ].
pad2 := [:n | ((n < 10)) ifTrue: [
('0' + ((n asString))).
] .
(n asString). ].
dateString := [:y :m :d | (((((((((y asString)) + '-')) + (pad2 value: m))) + '-')) + (pad2 value: d)). ].
day := [:y :m :d | part1 := (367 * y).
part2 := (((7 * ((y + ((((m + 9)) / 12))) asInteger))) / 4) asInteger.
part3 := (((275 * m)) / 9) asInteger.
(((((((part1 - part2)) + part3)) + d)) - 730530). ].
biorhythms := [:birth :target | bparts := parseDate value: birth.
by := bparts at: 0.
bm := bparts at: 1.
bd := bparts at: 2.
tparts := parseDate value: target.
ty := tparts at: 0.
tm := tparts at: 1.
td := tparts at: 2.
diff := absInt value: ((day value: ty value: tm value: td) - (day value: by value: bm value: bd)).
Transcript show: ((((((('Born ') + birth)) + (', Target '))) + target)) printString; cr.
Transcript show: ((('Day ') + ((diff asString)))) printString; cr.
cycles := {'Physical day '. 'Emotional day'. 'Mental day   '}.
lengths := {23. 28. 33}.
quadrants := {{'up and rising'. 'peak'}. {'up but falling'. 'transition'}. {'down and falling'. 'valley'}. {'down but rising'. 'transition'}}.
i := 0.
[(i < 3)] whileTrue: [.
length := lengths at: i.
cycle := cycles at: i.
position := (diff % length).
quadrant := (((position * 4)) / length).
percent := sinApprox value: (((((2 * PI)) * (position asFloat))) / (length asFloat)).
percent := ((floor value: (percent * 1000)) / 10).
description := ''.
((percent > 95)) ifTrue: [
description := ' peak'.
] ifFalse: [
((percent < -95)) ifTrue: [
description := ' valley'.
] ifFalse: [
(((absFloat value: percent) < 5)) ifTrue: [
description := ' critical transition'.
] ifFalse: [
daysToAdd := (((((((quadrant + 1)) * length)) / 4)) - position).
res := addDays value: ty value: tm value: td value: daysToAdd.
ny := res at: 0.
nm := res at: 1.
nd := res at: 2.
transition := dateString value: ny value: nm value: nd.
trend := quadrants at: quadrant at: 0.
next := quadrants at: quadrant at: 1.
pct := (percent asString).
(contains value: pct value: '.' not) ifTrue: [
pct := (pct + '.0').
] .
description := ((((((((((((((((' ') + pct)) + ('% ('))) + trend)) + (', next '))) + next)) + (' '))) + transition)) + ')').
].
].
].
posStr := (position asString).
((position < 10)) ifTrue: [
posStr := ((' ') + posStr).
] .
Transcript show: ((((((cycle + posStr)) + (' : '))) + description)) printString; cr.
i := (i + 1).
].
.
Transcript show: ''; cr. ].
main := [ pairs := {{'1943-03-09'. '1972-07-11'}. {'1809-01-12'. '1863-11-19'}. {'1809-02-12'. '1863-11-19'}}.
idx := 0.
[(idx < 3)] whileTrue: [.
p := pairs at: idx.
biorhythms value: p at: 0 value: p at: 1.
idx := (idx + 1).
].
. ].
main value.
