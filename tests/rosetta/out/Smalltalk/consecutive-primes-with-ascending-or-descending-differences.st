" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| primesUpTo sieve i p m res x LIMIT primes longestSeq pd longSeqs currSeq d ls diffs j k main dir |
primesUpTo := [:n | sieve := {}.
i := 0.
[(i <= n)] whileTrue: [.
sieve := sieve copyWith: true.
i := (i + 1).
].
.
p := 2.
[(((p * p)) <= n)] whileTrue: [.
(sieve at: p) ifTrue: [
m := (p * p).
[(m <= n)] whileTrue: [.
sieve at: m put: false.
m := (m + p).
].
.
] .
p := (p + 1).
].
.
res := {}.
x := 2.
[(x <= n)] whileTrue: [.
(sieve at: x) ifTrue: [
res := res copyWith: x.
] .
x := (x + 1).
].
.
res. ].
LIMIT := 999999.
primes := primesUpTo value: LIMIT.
longestSeq := [:dir | pd := 0.
longSeqs := {{2}}.
currSeq := {2}.
i := 1.
[(i < ((primes size)))] whileTrue: [.
d := ((primes at: i) - (primes at: (i - 1))).
((((((dir = 'ascending')) and: [((d <= pd))])) or: [((((dir = 'descending')) and: [((d >= pd))]))])) ifTrue: [
((1 > ((longSeqs at: 0 size)))) ifTrue: [
longSeqs := {currSeq}.
] ifFalse: [
((1 = ((longSeqs at: 0 size)))) ifTrue: [
longSeqs := longSeqs copyWith: currSeq.
] .
].
currSeq := {primes at: (i - 1). primes at: i}.
] ifFalse: [
currSeq := currSeq copyWith: primes at: i.
].
pd := d.
i := (i + 1).
].
.
((((currSeq size)) > ((longSeqs at: 0 size)))) ifTrue: [
longSeqs := {currSeq}.
] ifFalse: [
((((currSeq size)) = ((longSeqs at: 0 size)))) ifTrue: [
longSeqs := longSeqs copyWith: currSeq.
] .
].
Transcript show: ((((((((('Longest run(s) of primes with ') + dir)) + (' differences is '))) + (((longSeqs at: 0 size) asString)))) + (' :'))) printString; cr.
longSeqs do: [:ls |.
diffs := {}.
j := 1.
[(j < ((ls size)))] whileTrue: [.
diffs := diffs copyWith: ((ls at: j) - (ls at: (j - 1))).
j := (j + 1).
].
.
k := 0.
[(k < ((((ls size)) - 1)))] whileTrue: [.
Transcript show: ((((((((ls at: k asString)) + (' ('))) + ((diffs at: k asString)))) + (') '))) printString; show: ' '; show: (false) printString; cr.
k := (k + 1).
].
.
Transcript show: ((ls at: (((ls size)) - 1) asString)) printString; cr.
].
.
Transcript show: ''; cr. ].
main := [ Transcript show: 'For primes < 1 million:
'; cr.
{'ascending'. 'descending'} do: [:dir |.
longestSeq value: dir.
].
. ].
main value.
