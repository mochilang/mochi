" Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
"
| newBitmap rows y row x setPixel fillRect yy xx pad s writePPMP3 maxv p out numsize line main black white bm ppm |
newBitmap := [:w :h :c | rows := {}.
y := 0.
[(y < h)] whileTrue: [.
row := {}.
x := 0.
[(x < w)] whileTrue: [.
row := row copyWith: c.
x := (x + 1).
].
.
rows := rows copyWith: row.
y := (y + 1).
].
.
Dictionary from:{'width'->w. 'height'->h. 'pixels'->rows}. ].
setPixel := [:b :x :y :c | rows := b at: 'pixels'.
row := rows at: y.
row at: x put: c.
rows at: y put: row.
b at: 'pixels' put: rows. ].
fillRect := [:b :x :y :w :h :c | yy := y.
[(yy < ((y + h)))] whileTrue: [.
xx := x.
[(xx < ((x + w)))] whileTrue: [.
setPixel value: b value: xx value: yy value: c.
xx := (xx + 1).
].
.
yy := (yy + 1).
].
. ].
pad := [:n :width | s := (n asString).
[(((s size)) < width)] whileTrue: [.
s := ((' ') + s).
].
.
s. ].
writePPMP3 := [:b | maxv := 0.
y := 0.
[(y < (b at: 'height'))] whileTrue: [.
x := 0.
[(x < (b at: 'width'))] whileTrue: [.
p := b at: 'pixels' at: y at: x.
((p.R > maxv)) ifTrue: [
maxv := p.R.
] .
((p.G > maxv)) ifTrue: [
maxv := p.G.
] .
((p.B > maxv)) ifTrue: [
maxv := p.B.
] .
x := (x + 1).
].
.
y := (y + 1).
].
.
out := (((((((((((('P3
# generated from Bitmap.writeppmp3
') + ((b at: 'width' asString)))) + (' '))) + ((b at: 'height' asString)))) + '
')) + ((maxv asString)))) + '
').
numsize := ((maxv asString) size).
y := ((b at: 'height') - 1).
[(y >= 0)] whileTrue: [.
line := ''.
x := 0.
[(x < (b at: 'width'))] whileTrue: [.
p := b at: 'pixels' at: y at: x.
line := (((((((((((line + ('   '))) + (pad value: p.R value: numsize))) + (' '))) + (pad value: p.G value: numsize))) + (' '))) + (pad value: p.B value: numsize)).
x := (x + 1).
].
.
out := (out + line).
((y > 0)) ifTrue: [
out := (out + '
').
] ifFalse: [
out := (out + '
').
].
y := (y - 1).
].
.
out. ].
main := [ black := Dictionary from:{'R'->0. 'G'->0. 'B'->0}.
white := Dictionary from:{'R'->255. 'G'->255. 'B'->255}.
bm := newBitmap value: 4 value: 4 value: black.
fillRect value: bm value: 1 value: 0 value: 1 value: 2 value: white.
setPixel value: bm value: 3 value: 3 value: Dictionary from:{'R'->127. 'G'->0. 'B'->63}.
ppm := writePPMP3 value: bm.
Transcript show: (ppm) printString; cr. ].
main value.
