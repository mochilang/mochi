// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:10Z
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

struct Pixel {
  int R;
  int G;
  int B;
};
struct __struct1 {
  decltype(x) cols;
  decltype(y) rows;
  Pixel px;
};
struct Bitmap {
  int cols;
  int rows;
  auto px;
};

Pixel pixelFromRgb(int c) {
  auto r = ((std::stoi(((c / 65536)))) % 256);
  auto g = ((std::stoi(((c / 256)))) % 256);
  auto b = (c % 256);
  return Pixel{r, g, b};
}

int rgbFromPixel(Pixel p) { return (((p.R * 65536) + (p.G * 256)) + p.B); }

Bitmap NewBitmap(int x, int y) {
  auto data = std::vector<int>{};
  auto row = 0;
  while ((row < y)) {
    auto r = std::vector<int>{};
    auto col = 0;
    while ((col < x)) {
      r.push_back(Pixel{0, 0, 0});
      col = (col + 1);
    }
    data.push_back(r);
    row = (row + 1);
  }
  return __struct1{x, y, data};
}

auto Extent(Bitmap b) {
  return std::unordered_map<std::string, decltype(b.cols)>{
      {std::string("cols"), b.cols}, {std::string("rows"), b.rows}};
}

auto Fill(Bitmap b, Pixel p) {
  auto y = 0;
  while ((y < b.rows)) {
    auto x = 0;
    while ((x < b.cols)) {
      auto px = b.px;
      auto row = px[y];
      row[x] = p;
      px[y] = row;
      b.px = px;
      x = (x + 1);
    }
    y = (y + 1);
  }
}

auto FillRgb(Bitmap b, int c) { Fill(b, pixelFromRgb(c)); }

bool SetPx(Bitmap b, int x, int y, Pixel p) {
  if (((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows))) {
    return false;
  }
  auto px = b.px;
  auto row = px[y];
  row[x] = p;
  px[y] = row;
  b.px = px;
  return true;
}

bool SetPxRgb(Bitmap b, int x, int y, int c) {
  return SetPx(b, x, y, pixelFromRgb(c));
}

auto GetPx(Bitmap b, int x, int y) {
  if (((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows))) {
    return std::unordered_map<std::string, decltype(false)>{
        {std::string("ok"), false}};
  }
  auto row = b.px[y];
  return std::unordered_map<std::string, decltype(true)>{
      {std::string("ok"), true}, {std::string("pixel"), row[x]}};
}

auto GetPxRgb(Bitmap b, int x, int y) {
  auto r = GetPx(b, x, y);
  if ((!r.ok)) {
    return std::unordered_map<std::string, decltype(false)>{
        {std::string("ok"), false}};
  }
  return std::unordered_map<std::string, decltype(true)>{
      {std::string("ok"), true}, {std::string("rgb"), rgbFromPixel(r.pixel)}};
}

int ppmSize(Bitmap b) {
  auto header =
      ((((std::string("P6\n# Creator: Rosetta Code http://rosettacode.org/\n") +
          std::to_string(b.cols)) +
         std::string(" ")) +
        std::to_string(b.rows)) +
       std::string("\n255\n"));
  return (header.size() + ((3 * b.cols) * b.rows));
}

std::string pixelStr(Pixel p) {
  return ((((((std::string("{") + std::to_string(p.R)) + std::string(" ")) +
             std::to_string(p.G)) +
            std::string(" ")) +
           std::to_string(p.B)) +
          std::string("}"));
}

auto main() {
  auto bm = NewBitmap(300, 240);
  FillRgb(bm, 16711680);
  SetPxRgb(bm, 10, 20, 255);
  SetPxRgb(bm, 20, 30, 0);
  SetPxRgb(bm, 30, 40, 1056816);
  auto c1 = GetPx(bm, 0, 0);
  auto c2 = GetPx(bm, 10, 20);
  auto c3 = GetPx(bm, 30, 40);
  std::cout << (((std::string("Image size: ") + std::to_string(bm.cols)) +
                 std::string(" Ã— ")) +
                std::to_string(bm.rows))
            << std::endl;
  std::cout << (std::to_string(ppmSize(bm)) +
                std::string(" bytes when encoded as PPM."))
            << std::endl;
  if (c1.ok) {
    std::cout << (std::string("Pixel at (0,0) is ") + pixelStr(c1.pixel))
              << std::endl;
  }
  if (c2.ok) {
    std::cout << (std::string("Pixel at (10,20) is ") + pixelStr(c2.pixel))
              << std::endl;
  }
  if (c3.ok) {
    auto p = c3.pixel;
    auto r16 = (p.R * 257);
    auto g16 = (p.G * 257);
    auto b16 = (p.B * 257);
    std::cout
        << (((((std::string("Pixel at (30,40) has R=") + std::to_string(r16)) +
               std::string(", G=")) +
              std::to_string(g16)) +
             std::string(", B=")) +
            std::to_string(b16))
        << std::endl;
  }
}

int main() {
  main();
  return 0;
}
