// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
#include <iostream>
#include <string>
#include <vector>

std::vector<std::string> fields(std::string s) {
  std::vector<std::string> res = std::vector<>{};
  auto cur = std::string("");
  auto i = 0;
  while ((i < s.size())) {
    auto c = std::string(s).substr(i, ((i + 1)) - (i));
    if ((c == std::string(" "))) {
      if ((cur.size() > 0)) {
        res.push_back(cur);
        cur = std::string("");
      }
    } else {
      cur = (cur + c);
    }
    i = (i + 1);
  }
  if ((cur.size() > 0)) {
    res.push_back(cur);
  }
  return res;
}

bool canSpell(std::string word, std::vector<std::string> blks) {
  if ((word.size() == 0)) {
    return true;
  }
  auto c = lower(std::string(word).substr(0, (1) - (0)));
  auto i = 0;
  while ((i < blks.size())) {
    std::vector<std::string> b = blks[i];
    if (((c == lower(std::string(b).substr(0, (1) - (0)))) ||
         (c == lower(std::string(b).substr(1, (2) - (1)))))) {
      std::vector<std::string> rest = std::vector<>{};
      auto j = 0;
      while ((j < blks.size())) {
        if ((j != i)) {
          rest.push_back(blks[j]);
        }
        j = (j + 1);
      }
      if (canSpell(std::string(word).substr(1, (word.size()) - (1)), rest)) {
        return true;
      }
    }
    i = (i + 1);
  }
  return false;
}

auto newSpeller(std::string blocks) {
  auto bl = fields(blocks);
  return [=](std::string w) { return canSpell(w, bl); };
}

auto __mochi_main() {
  auto sp = newSpeller(std::string(
      "BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM"));
  for (auto word : std::vector<std::string>{
           std::string("A"), std::string("BARK"), std::string("BOOK"),
           std::string("TREAT"), std::string("COMMON"), std::string("SQUAD"),
           std::string("CONFUSE")}) {
    std::cout << ((word + std::string(" ")) + std::to_string(sp(word)))
              << std::endl;
  }
}

int main() {
  __mochi_main();
  return 0;
}
