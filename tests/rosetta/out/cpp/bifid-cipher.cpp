// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:09Z
#include <algorithm>
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

auto square_to_maps(auto square) {
  auto emap = std::unordered_map<int, int>{};
  auto dmap = std::unordered_map<int, int>{};
  auto x = 0;
  while ((x < square.size())) {
    auto row = square[x];
    auto y = 0;
    while ((y < row.size())) {
      auto ch = row[y];
      emap[ch] = std::vector<decltype(x)>{x, y};
      dmap[((std::to_string(x) + std::string(",")) + std::to_string(y))] = ch;
      y = (y + 1);
    }
    x = (x + 1);
  }
  return std::unordered_map<std::string, decltype(emap)>{
      {std::string("e"), emap}, {std::string("d"), dmap}};
}

std::string remove_space(std::string text, auto emap) {
  auto s = upper(text);
  auto out = std::string("");
  auto i = 0;
  while ((i < s.size())) {
    auto ch = std::string(s).substr(i, ((i + 1)) - (i));
    if (((ch != std::string(" ")) &&
         (std::find(emap.begin(), emap.end(), ch) != emap.end()))) {
      out = (out + ch);
    }
    i = (i + 1);
  }
  return out;
}

std::string encrypt(std::string text, auto emap, auto dmap) {
  text = remove_space(text, emap);
  auto row0 = std::vector<int>{};
  auto row1 = std::vector<int>{};
  auto i = 0;
  while ((i < text.size())) {
    auto ch = std::string(text).substr(i, ((i + 1)) - (i));
    auto xy = emap[ch];
    row0.push_back(xy[0]);
    row1.push_back(xy[1]);
    i = (i + 1);
  }
  for (auto v : row1) {
    row0.push_back(v);
  }
  auto res = std::string("");
  auto j = 0;
  while ((j < row0.size())) {
    auto key = ((std::to_string(row0[j]) + std::string(",")) +
                std::to_string(row0[(j + 1)]));
    res = (res + dmap[key]);
    j = (j + 2);
  }
  return res;
}

std::string decrypt(std::string text, auto emap, auto dmap) {
  text = remove_space(text, emap);
  auto coords = std::vector<int>{};
  auto i = 0;
  while ((i < text.size())) {
    auto ch = std::string(text).substr(i, ((i + 1)) - (i));
    auto xy = emap[ch];
    coords.push_back(xy[0]);
    coords.push_back(xy[1]);
    i = (i + 1);
  }
  auto half = (coords.size() / 2);
  auto k1 = std::vector<int>{};
  auto k2 = std::vector<int>{};
  auto idx = 0;
  while ((idx < half)) {
    k1.push_back(coords[idx]);
    idx = (idx + 1);
  }
  while ((idx < coords.size())) {
    k2.push_back(coords[idx]);
    idx = (idx + 1);
  }
  auto res = std::string("");
  auto j = 0;
  while ((j < half)) {
    auto key =
        ((std::to_string(k1[j]) + std::string(",")) + std::to_string(k2[j]));
    res = (res + dmap[key]);
    j = (j + 1);
  }
  return res;
}

auto main() {
  std::vector<std::string> squareRosetta =
      std::vector<decltype(std::vector<std::string>{
          std::string("A"), std::string("B"), std::string("C"),
          std::string("D"), std::string("E")})>{
          std::vector<std::string>{std::string("A"), std::string("B"),
                                   std::string("C"), std::string("D"),
                                   std::string("E")},
          std::vector<std::string>{std::string("F"), std::string("G"),
                                   std::string("H"), std::string("I"),
                                   std::string("K")},
          std::vector<std::string>{std::string("L"), std::string("M"),
                                   std::string("N"), std::string("O"),
                                   std::string("P")},
          std::vector<std::string>{std::string("Q"), std::string("R"),
                                   std::string("S"), std::string("T"),
                                   std::string("U")},
          std::vector<std::string>{std::string("V"), std::string("W"),
                                   std::string("X"), std::string("Y"),
                                   std::string("Z")},
          std::vector<std::string>{std::string("J"), std::string("1"),
                                   std::string("2"), std::string("3"),
                                   std::string("4")}};
  std::vector<std::string> squareWikipedia =
      std::vector<decltype(std::vector<std::string>{
          std::string("B"), std::string("G"), std::string("W"),
          std::string("K"), std::string("Z")})>{
          std::vector<std::string>{std::string("B"), std::string("G"),
                                   std::string("W"), std::string("K"),
                                   std::string("Z")},
          std::vector<std::string>{std::string("Q"), std::string("P"),
                                   std::string("N"), std::string("D"),
                                   std::string("S")},
          std::vector<std::string>{std::string("I"), std::string("O"),
                                   std::string("A"), std::string("X"),
                                   std::string("E")},
          std::vector<std::string>{std::string("F"), std::string("C"),
                                   std::string("L"), std::string("U"),
                                   std::string("M")},
          std::vector<std::string>{std::string("T"), std::string("H"),
                                   std::string("Y"), std::string("V"),
                                   std::string("R")},
          std::vector<std::string>{std::string("J"), std::string("1"),
                                   std::string("2"), std::string("3"),
                                   std::string("4")}};
  auto textRosetta = std::string("0ATTACKATDAWN");
  auto textWikipedia = std::string("FLEEATONCE");
  auto textTest =
      std::string("The invasion will start on the first of January");
  auto maps = square_to_maps(squareRosetta);
  auto emap = maps[std::string("e")];
  auto dmap = maps[std::string("d")];
  std::cout << std::string("from Rosettacode") << std::endl;
  std::cout << (std::string("original:\t ") + textRosetta) << std::endl;
  auto s = encrypt(textRosetta, emap, dmap);
  std::cout << (std::string("codiert:\t ") + s) << std::endl;
  s = decrypt(s, emap, dmap);
  std::cout << (std::string("and back:\t ") + s) << std::endl;
  maps = square_to_maps(squareWikipedia);
  emap = maps[std::string("e")];
  dmap = maps[std::string("d")];
  std::cout << std::string("from Wikipedia") << std::endl;
  std::cout << (std::string("original:\t ") + textWikipedia) << std::endl;
  s = encrypt(textWikipedia, emap, dmap);
  std::cout << (std::string("codiert:\t ") + s) << std::endl;
  s = decrypt(s, emap, dmap);
  std::cout << (std::string("and back:\t ") + s) << std::endl;
  maps = square_to_maps(squareWikipedia);
  emap = maps[std::string("e")];
  dmap = maps[std::string("d")];
  std::cout << std::string("from Rosettacode long part") << std::endl;
  std::cout << (std::string("original:\t ") + textTest) << std::endl;
  s = encrypt(textTest, emap, dmap);
  std::cout << (std::string("codiert:\t ") + s) << std::endl;
  s = decrypt(s, emap, dmap);
  std::cout << (std::string("and back:\t ") + s) << std::endl;
}

int main() {
  main();
  return 0;
}
