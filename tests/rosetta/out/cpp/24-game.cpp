// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
#include <chrono>
#include <iostream>
#include <string>
#include <vector>

template <typename T, typename U>
std::vector<T> __append(const std::vector<T> &v, const U &x) {
  auto r = v;
  r.push_back(x);
  return r;
}
> (n).count();
}
int randDigit() { return (((_now() % 9)) + 1); }

auto __mochi_main() {
  std::vector<__digits_type> digits = {};
  for (int i = 0; i < 4; i++) {
    digits.push_back(randDigit());
  }
  auto numstr = std::string("");
  for (int i = 0; i < 4; i++) {
    numstr = (numstr + std::to_string(digits[i]));
  }
  std::cout << ((std::string("Your numbers: ") + numstr) + std::string("\n"))
            << std::endl;
  std::cout << std::string("Enter RPN: ") << std::endl;
  auto expr = input();
  if ((expr.size() != 7)) {
    std::cout << std::string("invalid. expression length must be 7. (4 "
                             "numbers, 3 operators, no spaces)")
              << std::endl;
    return;
  }
  std::vector<__stack_type> stack = {};
  auto i = 0;
  auto valid = true;
  while ((i < expr.size())) {
    auto ch = std::string(expr).substr(i, ((i + 1)) - (i));
    if (((ch >= std::string("0")) && (ch <= std::string("9")))) {
      if ((digits.size() == 0)) {
        std::cout << std::string("too many numbers.") << std::endl;
        return;
      }
      auto j = 0;
      while ((digits[j] != (int(ch) - int(std::string("0"))))) {
        j = (j + 1);
        if ((j == digits.size())) {
          std::cout << std::string("wrong numbers.") << std::endl;
          return;
        }
      }
      digits = (([&](auto v) {
                  return std::vector<std::decay_t<decltype(digits[0])>>(
                      v.begin() + 0, v.begin() + j);
                })(digits) +
                ([&](auto v) {
                  return std::vector<std::decay_t<decltype(digits[0])>>(
                      v.begin() + (j + 1), v.begin() + digits.size());
                })(digits));
      stack.push_back(float((int(ch) - int(std::string("0")))));
    } else {
      if ((stack.size() < 2)) {
        std::cout << std::string("invalid expression syntax.") << std::endl;
        valid = false;
        break;
      }
      auto b = stack[(stack.size() - 1)];
      auto a = stack[(stack.size() - 2)];
      if ((ch == std::string("+"))) {
        stack[(stack.size() - 2)] = (a + b);
      }
      stack = ([&](auto v) {
        return std::vector<std::decay_t<decltype(stack[0])>>(
            v.begin() + 0, v.begin() + (stack.size() - 1));
      })(stack);
    }
    i = (i + 1);
  }
  if (valid) {
    if ((abs((stack[0] - 24)) > 1e-06)) {
      std::cout << ((std::string("incorrect. ") + std::to_string(stack[0])) +
                    std::string(" != 24"))
                << std::endl;
    } else {
      std::cout << std::string("correct.") << std::endl;
    }
  }
}

int main() {
  __mochi_main();
  return 0;
}
