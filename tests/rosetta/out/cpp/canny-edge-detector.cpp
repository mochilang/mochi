// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:12Z
#include <iostream>
#include <string>
#include <vector>

auto PI = 3.141592653589793;

auto conv2d(auto img, auto k) {
  auto h = img.size();
  auto w = img[0].size();
  auto n = k.size();
  auto half = (n / 2);
  auto out = std::vector<int>{};
  auto y = 0;
  while ((y < h)) {
    auto row = std::vector<int>{};
    auto x = 0;
    while ((x < w)) {
      auto sum = 0;
      auto j = 0;
      while ((j < n)) {
        auto i = 0;
        while ((i < n)) {
          auto yy = ((y + j) - half);
          if ((yy < 0)) {
            yy = 0;
          }
          if ((yy >= h)) {
            yy = (h - 1);
          }
          auto xx = ((x + i) - half);
          if ((xx < 0)) {
            xx = 0;
          }
          if ((xx >= w)) {
            xx = (w - 1);
          }
          sum = (sum + (img[yy][xx] * k[j][i]));
          i = (i + 1);
        }
        j = (j + 1);
      }
      row.push_back(sum);
      x = (x + 1);
    }
    out.push_back(row);
    y = (y + 1);
  }
  return out;
}

auto gradient(auto img) {
  auto hx = std::vector<decltype(std::vector<int>{-1, 0, 1})>{
      std::vector<int>{-1, 0, 1}, std::vector<int>{-2, 0, 2},
      std::vector<int>{-1, 0, 1}};
  auto hy = std::vector<decltype(std::vector<int>{1, 2, 1})>{
      std::vector<int>{1, 2, 1}, std::vector<int>{0, 0, 0},
      std::vector<int>{-1, -2, -1}};
  auto gx = conv2d(img, hx);
  auto gy = conv2d(img, hy);
  auto h = img.size();
  auto w = img[0].size();
  auto out = std::vector<int>{};
  auto y = 0;
  while ((y < h)) {
    auto row = std::vector<int>{};
    auto x = 0;
    while ((x < w)) {
      auto g = ((gx[y][x] * gx[y][x]) + (gy[y][x] * gy[y][x]));
      row.push_back(g);
      x = (x + 1);
    }
    out.push_back(row);
    y = (y + 1);
  }
  return out;
}

auto threshold(auto g, float t) {
  auto h = g.size();
  auto w = g[0].size();
  auto out = std::vector<int>{};
  auto y = 0;
  while ((y < h)) {
    auto row = std::vector<int>{};
    auto x = 0;
    while ((x < w)) {
      if ((g[y][x] >= t)) {
        row.push_back(1);
      } else {
        row.push_back(0);
      }
      x = (x + 1);
    }
    out.push_back(row);
    y = (y + 1);
  }
  return out;
}

auto printMatrix(auto m) {
  auto y = 0;
  while ((y < m.size())) {
    auto line = std::string("");
    auto x = 0;
    while ((x < m[0].size())) {
      line = (line + std::to_string(m[y][x]));
      if ((x < (m[0].size() - 1))) {
        line = (line + std::string(" "));
      }
      x = (x + 1);
    }
    std::cout << line << std::endl;
    y = (y + 1);
  }
}

auto main() {
  auto img = std::vector<decltype(std::vector<int>{0, 0, 0, 0, 0})>{
      std::vector<int>{0, 0, 0, 0, 0}, std::vector<int>{0, 255, 255, 255, 0},
      std::vector<int>{0, 255, 255, 255, 0},
      std::vector<int>{0, 255, 255, 255, 0}, std::vector<int>{0, 0, 0, 0, 0}};
  auto g = gradient(img);
  auto edges = threshold(g, 1040400);
  printMatrix(edges);
}

int main() {
  main();
  return 0;
}
