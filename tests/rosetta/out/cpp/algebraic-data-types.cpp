// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:05Z
#include <iostream>
#include <string>
#include <unordered_map>

auto node(std::string cl, any le, int aa, any ri) {
  return std::unordered_map<std::string, decltype(cl)>{{std::string("cl"), cl},
                                                       {std::string("le"), le},
                                                       {std::string("aa"), aa},
                                                       {std::string("ri"), ri}};
}

std::string treeString(any t) {
  if ((t == nullptr)) {
    return std::string("E");
  }
  auto m = t;
  return (
      (((((((std::string("T(") + m[std::string("cl")]) + std::string(", ")) +
           treeString(m[std::string("le")])) +
          std::string(", ")) +
         std::to_string(m[std::string("aa")])) +
        std::string(", ")) +
       treeString(m[std::string("ri")])) +
      std::string(")"));
}

any balance(any t) {
  if ((t == nullptr)) {
    return t;
  }
  auto m = t;
  if ((m[std::string("cl")] != std::string("B"))) {
    return t;
  }
  auto le = m[std::string("le")];
  auto ri = m[std::string("ri")];
  if ((le != nullptr)) {
    auto leMap = le;
    if ((leMap[std::string("cl")] == std::string("R"))) {
      auto lele = leMap[std::string("le")];
      if ((lele != nullptr)) {
        auto leleMap = lele;
        if ((leleMap[std::string("cl")] == std::string("R"))) {
          return node(std::string("R"),
                      node(std::string("B"), leleMap[std::string("le")],
                           leleMap[std::string("aa")],
                           leleMap[std::string("ri")]),
                      leMap[std::string("aa")],
                      node(std::string("B"), leMap[std::string("ri")],
                           m[std::string("aa")], ri));
        }
      }
      auto leri = leMap[std::string("ri")];
      if ((leri != nullptr)) {
        auto leriMap = leri;
        if ((leriMap[std::string("cl")] == std::string("R"))) {
          return node(std::string("R"),
                      node(std::string("B"), leMap[std::string("le")],
                           leMap[std::string("aa")],
                           leriMap[std::string("le")]),
                      leriMap[std::string("aa")],
                      node(std::string("B"), leriMap[std::string("ri")],
                           m[std::string("aa")], ri));
        }
      }
    }
  }
  if ((ri != nullptr)) {
    auto riMap = ri;
    if ((riMap[std::string("cl")] == std::string("R"))) {
      auto rile = riMap[std::string("le")];
      if ((rile != nullptr)) {
        auto rileMap = rile;
        if ((rileMap[std::string("cl")] == std::string("R"))) {
          return node(std::string("R"),
                      node(std::string("B"), m[std::string("le")],
                           m[std::string("aa")], rileMap[std::string("le")]),
                      rileMap[std::string("aa")],
                      node(std::string("B"), rileMap[std::string("ri")],
                           riMap[std::string("aa")], riMap[std::string("ri")]));
        }
      }
      auto riri = riMap[std::string("ri")];
      if ((riri != nullptr)) {
        auto ririMap = riri;
        if ((ririMap[std::string("cl")] == std::string("R"))) {
          return node(std::string("R"),
                      node(std::string("B"), m[std::string("le")],
                           m[std::string("aa")], riMap[std::string("le")]),
                      riMap[std::string("aa")],
                      node(std::string("B"), ririMap[std::string("le")],
                           ririMap[std::string("aa")],
                           ririMap[std::string("ri")]));
        }
      }
    }
  }
  return t;
}

any ins(any tr, int x) {
  if ((tr == nullptr)) {
    return node(std::string("R"), nullptr, x, nullptr);
  }
  if ((x < tr[std::string("aa")])) {
    return balance(node(tr[std::string("cl")], ins(tr[std::string("le")], x),
                        tr[std::string("aa")], tr[std::string("ri")]));
  }
  if ((x > tr[std::string("aa")])) {
    return balance(node(tr[std::string("cl")], tr[std::string("le")],
                        tr[std::string("aa")], ins(tr[std::string("ri")], x)));
  }
  return tr;
}

any insert(any tr, int x) {
  auto t = ins(tr, x);
  if ((t == nullptr)) {
    return nullptr;
  }
  auto m = t;
  return node(std::string("B"), m[std::string("le")], m[std::string("aa")],
              m[std::string("ri")]);
}

int main() {
  any tr = nullptr;
  auto i = 1;
  while ((i <= 16)) {
    tr = insert(tr, i);
    i = (i + 1);
  }
  std::cout << treeString(tr) << std::endl;
  return 0;
}
