// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:09Z
#include <iostream>
#include <string>
#include <vector>

auto randInt(int s, int n) {
  auto next = ((((s * 1664525) + 1013904223)) % 2147483647);
  return std::vector<decltype(next)>{next, (next % n)};
}

std::string padLeft(std::string s, int w) {
  auto res = std::string("");
  auto n = (w - s.size());
  while ((n > 0)) {
    res = (res + std::string(" "));
    n = (n - 1);
  }
  return (res + s);
}

auto makeSeq(int s, int le) {
  auto bases = std::string("ACGT");
  auto out = std::string("");
  auto i = 0;
  while ((i < le)) {
    auto r = randInt(s, 4);
    s = r[0];
    auto idx = std::stoi(r[1]);
    out = (out + std::string(bases).substr(idx, ((idx + 1)) - (idx)));
    i = (i + 1);
  }
  return std::vector<decltype(s)>{s, out};
}

auto mutate(int s, std::string dna, auto w) {
  auto bases = std::string("ACGT");
  auto le = dna.size();
  auto r = randInt(s, le);
  s = r[0];
  auto p = std::stoi(r[1]);
  r = randInt(s, 300);
  s = r[0];
  auto x = std::stoi(r[1]);
  auto arr = std::vector<int>{};
  auto i = 0;
  while ((i < le)) {
    arr.push_back(std::string(dna).substr(i, ((i + 1)) - (i)));
    i = (i + 1);
  }
  if ((x < w[0])) {
    r = randInt(s, 4);
    s = r[0];
    auto idx = std::stoi(r[1]);
    auto b = std::string(bases).substr(idx, ((idx + 1)) - (idx));
    std::cout
        << ((((((std::string("  Change @") + padLeft(std::to_string(p), 3)) +
                std::string(" '")) +
               arr[p]) +
              std::string("' to '")) +
             b) +
            std::string("'"))
        << std::endl;
    arr[p] = b;
  }
  auto out = std::string("");
  i = 0;
  while ((i < arr.size())) {
    out = (out + arr[i]);
    i = (i + 1);
  }
  return std::vector<decltype(s)>{s, out};
}

auto prettyPrint(std::string dna, int rowLen) {
  std::cout << std::string("SEQUENCE:") << std::endl;
  auto le = dna.size();
  auto i = 0;
  while ((i < le)) {
    auto k = (i + rowLen);
    if ((k > le)) {
      k = le;
    }
    std::cout << ((padLeft(std::to_string(i), 5) + std::string(": ")) +
                  std::string(dna).substr(i, (k) - (i)))
              << std::endl;
    i = (i + rowLen);
  }
  auto a = 0;
  auto c = 0;
  auto g = 0;
  auto t = 0;
  auto idx = 0;
  while ((idx < le)) {
    auto ch = std::string(dna).substr(idx, ((idx + 1)) - (idx));
    if ((ch == std::string("A"))) {
      a = (a + 1);
    } else {
      if ((ch == std::string("C"))) {
        c = (c + 1);
      } else {
        if ((ch == std::string("G"))) {
          g = (g + 1);
        } else {
          if ((ch == std::string("T"))) {
            t = (t + 1);
          }
        }
      }
    }
    idx = (idx + 1);
  }
  std::cout << std::string("") << std::endl;
  std::cout << std::string("BASE COUNT:") << std::endl;
  std::cout << (std::string("    A: ") + padLeft(std::to_string(a), 3))
            << std::endl;
  std::cout << (std::string("    C: ") + padLeft(std::to_string(c), 3))
            << std::endl;
  std::cout << (std::string("    G: ") + padLeft(std::to_string(g), 3))
            << std::endl;
  std::cout << (std::string("    T: ") + padLeft(std::to_string(t), 3))
            << std::endl;
  std::cout << std::string("    ------") << std::endl;
  std::cout << (std::string("    Î£: ") + std::to_string(le)) << std::endl;
  std::cout << std::string("    ======") << std::endl;
}

std::string wstring(auto w) {
  return ((((((std::string("  Change: ") + std::to_string(w[0])) +
              std::string("\n  Delete: ")) +
             std::to_string(w[1])) +
            std::string("\n  Insert: ")) +
           std::to_string(w[2])) +
          std::string("\n"));
}

auto main() {
  auto seed = 1;
  auto res = makeSeq(seed, 250);
  seed = res[0];
  auto dna = std::to_string(res[1]);
  prettyPrint(dna, 50);
  auto muts = 10;
  std::vector<int> w = {100, 100, 100};
  std::cout << std::string("\nWEIGHTS (ex 300):") << std::endl;
  std::cout << wstring(w) << std::endl;
  std::cout << ((std::string("MUTATIONS (") + std::to_string(muts)) +
                std::string("):"))
            << std::endl;
  auto i = 0;
  while ((i < muts)) {
    res = mutate(seed, dna, w);
    seed = res[0];
    dna = std::to_string(res[1]);
    i = (i + 1);
  }
  std::cout << std::string("") << std::endl;
  prettyPrint(dna, 50);
}

int main() {
  main();
  return 0;
}
