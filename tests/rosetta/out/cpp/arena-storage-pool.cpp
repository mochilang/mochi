// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:07Z
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T, typename U>
std::vector<T> __append(const std::vector<T> &v, const U &x) {
  auto r = v;
  r.push_back(x);
  return r;
}
auto poolPut(auto p, int x) { return __append(p, x); }

auto poolGet(auto p) {
  if ((p.size() == 0)) {
    std::cout << std::string("pool empty") << std::endl;
    return std::unordered_map<std::string, decltype(p)>{
        {std::string("pool"), p}, {std::string("val"), 0}};
  }
  auto idx = (p.size() - 1);
  auto v = p[idx];
  p = std::string(p).substr(0, (idx) - (0));
  return std::unordered_map<std::string, std::string>{{std::string("pool"), p},
                                                      {std::string("val"), v}};
}

auto clearPool(auto p) { return std::vector<int>{}; }

auto main() {
  auto pool = std::vector<int>{};
  auto i = 1;
  auto j = 2;
  std::cout << std::to_string((i + j)) << std::endl;
  pool = poolPut(pool, i);
  pool = poolPut(pool, j);
  i = 0;
  j = 0;
  auto res1 = poolGet(pool);
  pool = res1[std::string("pool")];
  i = std::stoi(res1[std::string("val")]);
  auto res2 = poolGet(pool);
  pool = res2[std::string("pool")];
  j = std::stoi(res2[std::string("val")]);
  i = 4;
  j = 5;
  std::cout << std::to_string((i + j)) << std::endl;
  pool = poolPut(pool, i);
  pool = poolPut(pool, j);
  i = 0;
  j = 0;
  pool = clearPool(pool);
  auto res3 = poolGet(pool);
  pool = res3[std::string("pool")];
  i = std::stoi(res3[std::string("val")]);
  auto res4 = poolGet(pool);
  pool = res4[std::string("pool")];
  j = std::stoi(res4[std::string("val")]);
  i = 7;
  j = 8;
  std::cout << std::to_string((i + j)) << std::endl;
}

int main() {
  main();
  return 0;
}
