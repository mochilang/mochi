// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:08Z
#include <iostream>
#include <string>
#include <vector>

auto randOrder(int seed, int n) {
  auto next = ((((seed * 1664525) + 1013904223)) % 2147483647);
  return std::vector<decltype(next)>{next, (next % n)};
}

auto randChaos(int seed, int n) {
  auto next = ((((seed * 1103515245) + 12345)) % 2147483647);
  return std::vector<decltype(next)>{next, (next % n)};
}

auto main() {
  auto nBuckets = 10;
  auto initialSum = 1000;
  auto buckets = std::vector<int>{};
  for (int i = 0; i < nBuckets; i++) {
    buckets.push_back(0);
  }
  auto i = nBuckets;
  auto dist = initialSum;
  while ((i > 0)) {
    auto v = (dist / i);
    i = (i - 1);
    buckets[i] = v;
    dist = (dist - v);
  }
  auto tc0 = 0;
  auto tc1 = 0;
  auto total = 0;
  auto nTicks = 0;
  auto seedOrder = 1;
  auto seedChaos = 2;
  std::cout << std::string("sum  ---updates---    mean  buckets") << std::endl;
  auto t = 0;
  while ((t < 5)) {
    auto r = randOrder(seedOrder, nBuckets);
    seedOrder = r[0];
    auto b1 = r[1];
    auto b2 = (((b1 + 1)) % nBuckets);
    auto v1 = buckets[b1];
    auto v2 = buckets[b2];
    if ((v1 > v2)) {
      auto a = std::stoi(((((v1 - v2)) / 2)));
      if ((a > buckets[b1])) {
        a = buckets[b1];
      }
      buckets[b1] = (buckets[b1] - a);
      buckets[b2] = (buckets[b2] + a);
    } else {
      auto a = std::stoi(((((v2 - v1)) / 2)));
      if ((a > buckets[b2])) {
        a = buckets[b2];
      }
      buckets[b2] = (buckets[b2] - a);
      buckets[b1] = (buckets[b1] + a);
    }
    tc0 = (tc0 + 1);
    r = randChaos(seedChaos, nBuckets);
    seedChaos = r[0];
    b1 = r[1];
    b2 = (((b1 + 1)) % nBuckets);
    r = randChaos(seedChaos, (buckets[b1] + 1));
    seedChaos = r[0];
    auto amt = r[1];
    if ((amt > buckets[b1])) {
      amt = buckets[b1];
    }
    buckets[b1] = (buckets[b1] - amt);
    buckets[b2] = (buckets[b2] + amt);
    tc1 = (tc1 + 1);
    auto sum = 0;
    auto idx = 0;
    while ((idx < nBuckets)) {
      sum = (sum + buckets[idx]);
      idx = (idx + 1);
    }
    total = ((total + tc0) + tc1);
    nTicks = (nTicks + 1);
    std::cout << ((((((((std::to_string(sum) + std::string(" ")) +
                        std::to_string(tc0)) +
                       std::string(" ")) +
                      std::to_string(tc1)) +
                     std::string(" ")) +
                    std::to_string((total / nTicks))) +
                   std::string("  ")) +
                  std::to_string(buckets))
              << std::endl;
    tc0 = 0;
    tc1 = 0;
    t = (t + 1);
  }
}

int main() {
  main();
  return 0;
}
