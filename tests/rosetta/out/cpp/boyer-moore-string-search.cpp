// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:10Z
#include <iostream>
#include <string>
#include <vector>

int indexOfStr(std::string h, std::string n) {
  auto hlen = h.size();
  auto nlen = n.size();
  if ((nlen == 0)) {
    return 0;
  }
  auto i = 0;
  while ((i <= (hlen - nlen))) {
    if ((std::string(h).substr(i, ((i + nlen)) - (i)) == n)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}

int stringSearchSingle(std::string h, std::string n) {
  return indexOfStr(h, n);
}

auto stringSearch(std::string h, std::string n) {
  auto result = std::vector<int>{};
  auto start = 0;
  auto hlen = h.size();
  auto nlen = n.size();
  while ((start < hlen)) {
    auto idx = indexOfStr(std::string(h).substr(start, (hlen) - (start)), n);
    if ((idx >= 0)) {
      result.push_back((start + idx));
      start = ((start + idx) + nlen);
    } else {
      break;
    }
  }
  return result;
}

std::string display(auto nums) {
  auto s = std::string("[");
  auto i = 0;
  while ((i < nums.size())) {
    if ((i > 0)) {
      s = (s + std::string(", "));
    }
    s = (s + std::to_string(nums[i]));
    i = (i + 1);
  }
  s = (s + std::string("]"));
  return s;
}

auto main() {
  std::vector<std::string> texts = {
      std::string("GCTAGCTCTACGAGTCTA"),
      std::string("GGCTATAATGCGTA"),
      std::string("there would have been a time for such a word"),
      std::string("needle need noodle needle"),
      std::string("DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociat"
                  "edmachinecodeandassemblylanguages"),
      std::string("Nearby farms grew an acre of alfalfa on the dairy's behalf, "
                  "with bales of that alfalfa exchanged for milk.")};
  std::vector<std::string> patterns = {
      std::string("TCTA"),   std::string("TAATAAA"), std::string("word"),
      std::string("needle"), std::string("and"),     std::string("alfalfa")};
  auto i = 0;
  while ((i < texts.size())) {
    std::cout << (((std::string("text") + std::to_string((i + 1))) +
                   std::string(" = ")) +
                  texts[i])
              << std::endl;
    i = (i + 1);
  }
  std::cout << std::string("") << std::endl;
  auto j = 0;
  while ((j < texts.size())) {
    auto idxs = stringSearch(texts[j], patterns[j]);
    std::cout << (((((std::string("Found \"") + patterns[j]) +
                     std::string("\" in 'text")) +
                    std::to_string((j + 1))) +
                   std::string("' at indexes ")) +
                  display(idxs))
              << std::endl;
    j = (j + 1);
  }
}

int main() {
  main();
  return 0;
}
