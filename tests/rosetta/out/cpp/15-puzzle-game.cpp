// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
#include <any>
#include <chrono>
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}
inline std::string __any_str(const std::any &a) {
  if (a.type() == typeid(int))
    return std::to_string(std::any_cast<int>(a));
  if (a.type() == typeid(double))
    return std::to_string(std::any_cast<double>(a));
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) ? "true" : "false";
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a);
  return "";
}

inline long long _now() {
  auto n = std::chrono::system_clock::now().time_since_epoch();
  return std::chrono::duration_cast<std::chrono::nanoseconds>(n).count();
}
std::vector<int> board = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0};
std::vector<int> solved = {1, 2,  3,  4,  5,  6,  7,  8,
                           9, 10, 11, 12, 13, 14, 15, 0};
auto empty = 15;
auto moves = 0;
auto quit = false;

int randMove() { return (_now() % 4); }

bool isSolved() {
  auto i = 0;
  while ((i < 16)) {
    if ((board[i] != solved[i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}

auto isValidMove(int m) {
  if ((m == 0)) {
    return std::unordered_map<std::string, std::any>{
        {std::string("idx"), (empty - 4)},
        {std::string("ok"), ((empty / 4) > 0)}};
  }
  if ((m == 1)) {
    return std::unordered_map<std::string, std::any>{
        {std::string("idx"), (empty + 4)},
        {std::string("ok"), ((empty / 4) < 3)}};
  }
  if ((m == 2)) {
    return std::unordered_map<std::string, std::any>{
        {std::string("idx"), (empty + 1)},
        {std::string("ok"), ((empty % 4) < 3)}};
  }
  if ((m == 3)) {
    return std::unordered_map<std::string, std::any>{
        {std::string("idx"), (empty - 1)},
        {std::string("ok"), ((empty % 4) > 0)}};
  }
  return std::unordered_map<std::string, std::any>{{std::string("idx"), 0},
                                                   {std::string("ok"), false}};
}

bool doMove(int m) {
  auto r = isValidMove(m);
  if ((!std::any_cast<bool>(r[std::string("ok")]))) {
    return false;
  }
  auto i = empty;
  auto j = int(r[std::string("idx")]);
  std::vector<int> tmp = board[i];
  board[i] = board[j];
  board[j] = tmp;
  empty = j;
  moves = (moves + 1);
  return true;
}

auto shuffle(int n) {
  auto i = 0;
  while (((i < n) || isSolved())) {
    if (doMove(randMove())) {
      i = (i + 1);
    }
  }
}

auto printBoard() {
  auto line = std::string("");
  auto i = 0;
  while ((i < 16)) {
    std::vector<int> val = board[i];
    if ((val == 0)) {
      line = (line + std::string("  ."));
    } else {
      auto s = std::to_string(val);
      if ((val < 10)) {
        line = ((line + std::string("  ")) + s);
      } else {
        line = ((line + std::string(" ")) + s);
      }
    }
    if (((i % 4) == 3)) {
      std::cout << line << std::endl;
      line = std::string("");
    }
    i = (i + 1);
  }
}

auto playOneMove() {
  while (true) {
    std::cout << ((std::string("Enter move #") + std::to_string((moves + 1))) +
                  std::string(" (U, D, L, R, or Q): "))
              << std::endl;
    auto s = input();
    if ((s == std::string(""))) {
      continue;
    }
    auto c = std::string(s).substr(0, (1) - (0));
    auto m = 0;
    if (((c == std::string("U")) || (c == std::string("u")))) {
      m = 0;
    }
    if ((!doMove(m))) {
      std::cout << std::string("That is not a valid move at the moment.")
                << std::endl;
      continue;
    }
    return;
  }
}

auto play() {
  std::cout << std::string("Starting board:") << std::endl;
  while (((!quit) && (isSolved() == false))) {
    std::cout << std::string("") << std::endl;
    printBoard();
    playOneMove();
  }
  if (isSolved()) {
    std::cout << ((std::string("You solved the puzzle in ") +
                   std::to_string(moves)) +
                  std::string(" moves."))
              << std::endl;
  }
}

auto __mochi_main() {
  shuffle(50);
  play();
}

int main() {
  __mochi_main();
  return 0;
}
