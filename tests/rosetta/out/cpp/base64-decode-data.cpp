// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:09Z
#include <iostream>
#include <string>
#include <unordered_map>

int indexOf(std::string s, std::string ch) {
  auto i = 0;
  while ((i < s.size())) {
    if ((s[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}

int parseIntStr(std::string str) {
  auto i = 0;
  auto neg = false;
  if (((str.size() > 0) && (str[0] == std::string("-")))) {
    neg = true;
    i = 1;
  }
  auto n = 0;
  auto digits = std::unordered_map<std::string, decltype(0)>{
      {std::string("0"), 0}, {std::string("1"), 1}, {std::string("2"), 2},
      {std::string("3"), 3}, {std::string("4"), 4}, {std::string("5"), 5},
      {std::string("6"), 6}, {std::string("7"), 7}, {std::string("8"), 8},
      {std::string("9"), 9}};
  while ((i < str.size())) {
    n = ((n * 10) + digits[str[i]]);
    i = (i + 1);
  }
  if (neg) {
    n = (-n);
  }
  return n;
}

int ord(std::string ch) {
  auto upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  auto lower = std::string("abcdefghijklmnopqrstuvwxyz");
  auto idx = indexOf(upper, ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  idx = indexOf(lower, ch);
  if ((idx >= 0)) {
    return (97 + idx);
  }
  if (((ch >= std::string("0")) && (ch <= std::string("9")))) {
    return (48 + parseIntStr(ch));
  }
  if ((ch == std::string("+"))) {
    return 43;
  }
  if ((ch == std::string("/"))) {
    return 47;
  }
  if ((ch == std::string(" "))) {
    return 32;
  }
  if ((ch == std::string("="))) {
    return 61;
  }
  return 0;
}

std::string chr(int n) {
  auto upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  auto lower = std::string("abcdefghijklmnopqrstuvwxyz");
  if (((n >= 65) && (n < 91))) {
    return std::string(upper).substr((n - 65), ((n - 64)) - ((n - 65)));
  }
  if (((n >= 97) && (n < 123))) {
    return std::string(lower).substr((n - 97), ((n - 96)) - ((n - 97)));
  }
  if (((n >= 48) && (n < 58))) {
    auto digits = std::string("0123456789");
    return std::string(digits).substr((n - 48), ((n - 47)) - ((n - 48)));
  }
  if ((n == 43)) {
    return std::string("+");
  }
  if ((n == 47)) {
    return std::string("/");
  }
  if ((n == 32)) {
    return std::string(" ");
  }
  if ((n == 61)) {
    return std::string("=");
  }
  return std::string("?");
}

std::string toBinary(int n, int bits) {
  auto b = std::string("");
  auto val = n;
  auto i = 0;
  while ((i < bits)) {
    b = (std::to_string((val % 2)) + b);
    val = std::stoi(((val / 2)));
    i = (i + 1);
  }
  return b;
}

int binToInt(std::string bits) {
  auto n = 0;
  auto i = 0;
  while ((i < bits.size())) {
    n = ((n * 2) + parseIntStr(std::string(bits).substr(i, ((i + 1)) - (i))));
    i = (i + 1);
  }
  return n;
}

std::string base64Encode(std::string text) {
  auto alphabet = std::string(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
  auto bin = std::string("");
  for (auto ch : text) {
    bin = (bin + toBinary(ord(ch), 8));
  }
  while (((bin.size() % 6) != 0)) {
    bin = (bin + std::string("0"));
  }
  auto out = std::string("");
  auto i = 0;
  while ((i < bin.size())) {
    auto chunk = std::string(bin).substr(i, ((i + 6)) - (i));
    auto val = binToInt(chunk);
    out = (out + std::string(alphabet).substr(val, ((val + 1)) - (val)));
    i = (i + 6);
  }
  auto pad = (((3 - ((text.size() % 3)))) % 3);
  if ((pad == 1)) {
    out = std::string(out).substr(0, ((out.size() - 1)) - (0) "=");
  }
  if ((pad == 2)) {
    out = std::string(out).substr(0, ((out.size() - 2)) - (0) "==");
  }
  return out;
}

std::string base64Decode(std::string enc) {
  auto alphabet = std::string(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
  auto bin = std::string("");
  auto i = 0;
  while ((i < enc.size())) {
    auto ch = enc[i];
    if ((ch == std::string("="))) {
      break;
    }
    auto idx = indexOf(alphabet, ch);
    bin = (bin + toBinary(idx, 6));
    i = (i + 1);
  }
  auto out = std::string("");
  i = 0;
  while (((i + 8) <= bin.size())) {
    auto chunk = std::string(bin).substr(i, ((i + 8)) - (i));
    auto val = binToInt(chunk);
    out = (out + chr(val));
    i = (i + 8);
  }
  return out;
}

int main() {
  auto msg = std::string("Rosetta Code Base64 decode data task");
  std::cout << (std::string("Original : ") + msg) << std::endl;
  auto enc = base64Encode(msg);
  std::cout << (std::string("\nEncoded  : ") + enc) << std::endl;
  auto dec = base64Decode(enc);
  std::cout << (std::string("\nDecoded  : ") + dec) << std::endl;
  return 0;
}
