// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:14Z
#include <iostream>
#include <string>
#include <vector>

struct Birthday {
  int month;
  int day;
};

bool monthUnique(Birthday b, auto list) {
  auto c = 0;
  for (auto x : list) {
    if ((x.month == b.month)) {
      c = (c + 1);
    }
  }
  return (c == 1);
}

bool dayUnique(Birthday b, auto list) {
  auto c = 0;
  for (auto x : list) {
    if ((x.day == b.day)) {
      c = (c + 1);
    }
  }
  return (c == 1);
}

bool monthWithUniqueDay(Birthday b, auto list) {
  for (auto x : list) {
    if (((x.month == b.month) && dayUnique(x, list))) {
      return true;
    }
  }
  return false;
}

std::string bstr(Birthday b) {
  std::vector<std::string> months = {
      std::string(""),          std::string("January"), std::string("February"),
      std::string("March"),     std::string("April"),   std::string("May"),
      std::string("June"),      std::string("July"),    std::string("August"),
      std::string("September"), std::string("October"), std::string("November"),
      std::string("December")};
  return ((months[b.month] + std::string(" ")) + std::to_string(b.day));
}

int main() {
  auto choices = std::vector<Birthday>{
      Birthday{5, 15}, Birthday{5, 16}, Birthday{5, 19}, Birthday{6, 17},
      Birthday{6, 18}, Birthday{7, 14}, Birthday{7, 16}, Birthday{8, 14},
      Birthday{8, 15}, Birthday{8, 17}};
  auto filtered = std::vector<int>{};
  for (auto bd : choices) {
    if ((!monthUnique(bd, choices))) {
      filtered.push_back(bd);
    }
  }
  auto filtered2 = std::vector<int>{};
  for (auto bd : filtered) {
    if ((!monthWithUniqueDay(bd, filtered))) {
      filtered2.push_back(bd);
    }
  }
  auto filtered3 = std::vector<int>{};
  for (auto bd : filtered2) {
    if (dayUnique(bd, filtered2)) {
      filtered3.push_back(bd);
    }
  }
  auto filtered4 = std::vector<int>{};
  for (auto bd : filtered3) {
    if (monthUnique(bd, filtered3)) {
      filtered4.push_back(bd);
    }
  }
  if ((filtered4.size() == 1)) {
    std::cout << (std::string("Cheryl's birthday is ") + bstr(filtered4[0]))
              << std::endl;
  } else {
    std::cout << std::string("Something went wrong!") << std::endl;
  }
  return 0;
}
