// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:09Z
#include <iostream>
#include <string>
#include <vector>

std::string padLeft(std::string s, int w) {
  auto res = std::string("");
  auto n = (w - s.size());
  while ((n > 0)) {
    res = (res + std::string(" "));
    n = (n - 1);
  }
  return (res + s);
}

int indexOfFrom(std::string s, std::string ch, int start) {
  auto i = start;
  while ((i < s.size())) {
    if ((std::string(s).substr(i, ((i + 1)) - (i)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}

bool containsStr(std::string s, std::string sub) {
  auto i = 0;
  auto sl = s.size();
  auto subl = sub.size();
  while ((i <= (sl - subl))) {
    if ((std::string(s).substr(i, ((i + subl)) - (i)) == sub)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}

auto distinct(auto slist) {
  auto res = std::vector<int>{};
  for (auto s : slist) {
    auto found = false;
    for (auto r : res) {
      if ((r == s)) {
        found = true;
        break;
      }
    }
    if ((!found)) {
      res.push_back(s);
    }
  }
  return res;
}

auto permutations(auto xs) {
  if ((xs.size() <= 1)) {
    return std::vector<decltype(xs)>{xs};
  }
  auto res = std::vector<int>{};
  auto i = 0;
  while ((i < xs.size())) {
    auto rest = std::vector<int>{};
    auto j = 0;
    while ((j < xs.size())) {
      if ((j != i)) {
        rest.push_back(xs[j]);
      }
      j = (j + 1);
    }
    auto subs = permutations(rest);
    for (auto p : subs) {
      auto perm = std::vector<decltype(xs[i])>{xs[i]};
      auto k = 0;
      while ((k < p.size())) {
        perm.push_back(p[k]);
        k = (k + 1);
      }
      res.push_back(perm);
    }
    i = (i + 1);
  }
  return res;
}

int headTailOverlap(std::string s1, std::string s2) {
  auto start = 0;
  while (true) {
    auto ix = indexOfFrom(s1, std::string(s2).substr(0, (1) - (0)), start);
    if ((ix == -1)) {
      return 0;
    }
    start = ix;
    if ((std::string(s2).substr(0, ((s1.size() - start)) - (0)) ==
         std::string(s1).substr(start, (s1.size()) - (start)))) {
      return (s1.size() - start);
    }
    start = (start + 1);
  }
}

auto deduplicate(auto slist) {
  auto arr = distinct(slist);
  auto filtered = std::vector<int>{};
  auto i = 0;
  while ((i < arr.size())) {
    auto s1 = arr[i];
    auto within = false;
    auto j = 0;
    while ((j < arr.size())) {
      if (((j != i) && containsStr(arr[j], s1))) {
        within = true;
        break;
      }
      j = (j + 1);
    }
    if ((!within)) {
      filtered.push_back(s1);
    }
    i = (i + 1);
  }
  return filtered;
}

std::string joinAll(auto ss) {
  auto out = std::string("");
  for (auto s : ss) {
    out = (out + s);
  }
  return out;
}

std::string shortestCommonSuperstring(auto slist) {
  auto ss = deduplicate(slist);
  auto shortest = joinAll(ss);
  auto perms = permutations(ss);
  auto idx = 0;
  while ((idx < perms.size())) {
    auto perm = perms[idx];
    auto sup = perm[0];
    auto i = 0;
    while ((i < (ss.size() - 1))) {
      auto ov = headTailOverlap(perm[i], perm[(i + 1)]);
      sup = (sup + std::string(perm[(i + 1)])
                       .substr(ov, (perm[(i + 1)].size()) - (ov)));
      i = (i + 1);
    }
    if ((sup.size() < shortest.size())) {
      shortest = sup;
    }
    idx = (idx + 1);
  }
  return shortest;
}

auto printCounts(std::string seq) {
  auto a = 0;
  auto c = 0;
  auto g = 0;
  auto t = 0;
  auto i = 0;
  while ((i < seq.size())) {
    auto ch = std::string(seq).substr(i, ((i + 1)) - (i));
    if ((ch == std::string("A"))) {
      a = (a + 1);
    } else {
      if ((ch == std::string("C"))) {
        c = (c + 1);
      } else {
        if ((ch == std::string("G"))) {
          g = (g + 1);
        } else {
          if ((ch == std::string("T"))) {
            t = (t + 1);
          }
        }
      }
    }
    i = (i + 1);
  }
  auto total = seq.size();
  std::cout << ((std::string("\nNucleotide counts for ") + seq) +
                std::string(":\n"))
            << std::endl;
  std::cout << (padLeft(std::string("A"), 10) + padLeft(std::to_string(a), 12))
            << std::endl;
  std::cout << (padLeft(std::string("C"), 10) + padLeft(std::to_string(c), 12))
            << std::endl;
  std::cout << (padLeft(std::string("G"), 10) + padLeft(std::to_string(g), 12))
            << std::endl;
  std::cout << (padLeft(std::string("T"), 10) + padLeft(std::to_string(t), 12))
            << std::endl;
  std::cout << (padLeft(std::string("Other"), 10) +
                padLeft(std::to_string((total - ((((a + c) + g) + t)))), 12))
            << std::endl;
  std::cout << std::string("  ____________________") << std::endl;
  std::cout << (padLeft(std::string("Total length"), 14) +
                padLeft(std::to_string(total), 8))
            << std::endl;
}

auto main() {
  auto tests = std::vector<decltype(std::vector<std::string>{
      std::string("TA"), std::string("AAG"), std::string("TA"),
      std::string("GAA"), std::string("TA")})>{
      std::vector<std::string>{std::string("TA"), std::string("AAG"),
                               std::string("TA"), std::string("GAA"),
                               std::string("TA")},
      std::vector<std::string>{std::string("CATTAGGG"), std::string("ATTAG"),
                               std::string("GGG"), std::string("TA")},
      std::vector<std::string>{std::string("AAGAUGGA"),
                               std::string("GGAGCGCAUC"),
                               std::string("AUCGCAAUAAGGA")},
      std::vector<std::string>{
          std::string("ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACG"
                      "TCGGGAGTGGTATTAT"),
          std::string("GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCAT"
                      "TTGATGGGACGTTTCGTCGACAAAGT"),
          std::string("CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTC"
                      "TTTTAGTACGTCGGGAGTGGTATTATA"),
          std::string("TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGG"
                      "TCAAGATGGAGCGCATC"),
          std::string("AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAG"
                      "TAACGGCTACCGTCTT"),
          std::string("GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGT"
                      "TTCGAGAGTAACGGCTACCGTC"),
          std::string("CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCT"
                      "TATAACACTATGTTCT"),
          std::string("TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGG"
                      "TCAAGATGGAGCGCATC"),
          std::string(
              "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC"),
          std::string("GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAG"
                      "TCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT"),
          std::string("TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCA"
                      "AGATGGAGCGCATC"),
          std::string("CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTC"
                      "TTTTAGTACGTCGGGAGTGGTATTATA"),
          std::string("TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGAC"
                      "GGGGTGGTCGATTCTGAGGACAAAGGTCAAGA")}};
  for (auto seqs : tests) {
    auto scs = shortestCommonSuperstring(seqs);
    printCounts(scs);
  }
}

int main() {
  main();
  return 0;
}
