// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:10Z
#include <iostream>
#include <string>

int toUnsigned16(int n) {
  auto u = n;
  if ((u < 0)) {
    u = (u + 65536);
  }
  return (u % 65536);
}

std::string bin16(int n) {
  auto u = toUnsigned16(n);
  auto bits = std::string("");
  auto mask = 32768;
  for (int i = 0; i < 16; i++) {
    if ((u >= mask)) {
      bits = (bits + std::string("1"));
      u = (u - mask);
    } else {
      bits = (bits + std::string("0"));
    }
    mask = std::stoi(((mask / 2)));
  }
  return bits;
}

int bit_and(int a, int b) {
  auto ua = toUnsigned16(a);
  auto ub = toUnsigned16(b);
  auto res = 0;
  auto bit = 1;
  for (int i = 0; i < 16; i++) {
    if ((((ua % 2) == 1) && ((ub % 2) == 1))) {
      res = (res + bit);
    }
    ua = std::stoi(((ua / 2)));
    ub = std::stoi(((ub / 2)));
    bit = (bit * 2);
  }
  return res;
}

int bit_or(int a, int b) {
  auto ua = toUnsigned16(a);
  auto ub = toUnsigned16(b);
  auto res = 0;
  auto bit = 1;
  for (int i = 0; i < 16; i++) {
    if ((((ua % 2) == 1) || ((ub % 2) == 1))) {
      res = (res + bit);
    }
    ua = std::stoi(((ua / 2)));
    ub = std::stoi(((ub / 2)));
    bit = (bit * 2);
  }
  return res;
}

int bit_xor(int a, int b) {
  auto ua = toUnsigned16(a);
  auto ub = toUnsigned16(b);
  auto res = 0;
  auto bit = 1;
  for (int i = 0; i < 16; i++) {
    auto abit = (ua % 2);
    auto bbit = (ub % 2);
    if (((((abit == 1) && (bbit == 0))) || (((abit == 0) && (bbit == 1))))) {
      res = (res + bit);
    }
    ua = std::stoi(((ua / 2)));
    ub = std::stoi(((ub / 2)));
    bit = (bit * 2);
  }
  return res;
}

int bit_not(int a) {
  auto ua = toUnsigned16(a);
  return (65535 - ua);
}

int shl(int a, int b) {
  auto ua = toUnsigned16(a);
  auto i = 0;
  while ((i < b)) {
    ua = (((ua * 2)) % 65536);
    i = (i + 1);
  }
  return ua;
}

int shr(int a, int b) {
  auto ua = toUnsigned16(a);
  auto i = 0;
  while ((i < b)) {
    ua = std::stoi(((ua / 2)));
    i = (i + 1);
  }
  return ua;
}

int las(int a, int b) { return shl(a, b); }

int ras(int a, int b) {
  auto val = a;
  auto i = 0;
  while ((i < b)) {
    if ((val >= 0)) {
      val = std::stoi(((val / 2)));
    } else {
      val = std::stoi(((((val - 1)) / 2)));
    }
    i = (i + 1);
  }
  return toUnsigned16(val);
}

int rol(int a, int b) {
  auto ua = toUnsigned16(a);
  auto left = shl(ua, b);
  auto right = shr(ua, (16 - b));
  return toUnsigned16((left + right));
}

int ror(int a, int b) {
  auto ua = toUnsigned16(a);
  auto right = shr(ua, b);
  auto left = shl(ua, (16 - b));
  return toUnsigned16((left + right));
}

auto bitwise(int a, int b) {
  std::cout << (std::string("a:   ") + bin16(a)) << std::endl;
  std::cout << (std::string("b:   ") + bin16(b)) << std::endl;
  std::cout << (std::string("and: ") + bin16(bit_and(a, b))) << std::endl;
  std::cout << (std::string("or:  ") + bin16(bit_or(a, b))) << std::endl;
  std::cout << (std::string("xor: ") + bin16(bit_xor(a, b))) << std::endl;
  std::cout << (std::string("not: ") + bin16(bit_not(a))) << std::endl;
  if ((b < 0)) {
    std::cout << std::string(
                     "Right operand is negative, but all shifts require an "
                     "unsigned right operand (shift distance).")
              << std::endl;
    return nullptr;
  }
  std::cout << (std::string("shl: ") + bin16(shl(a, b))) << std::endl;
  std::cout << (std::string("shr: ") + bin16(shr(a, b))) << std::endl;
  std::cout << (std::string("las: ") + bin16(las(a, b))) << std::endl;
  std::cout << (std::string("ras: ") + bin16(ras(a, b))) << std::endl;
  std::cout << (std::string("rol: ") + bin16(rol(a, b))) << std::endl;
  std::cout << (std::string("ror: ") + bin16(ror(a, b))) << std::endl;
}

int main() {
  bitwise(-460, 6);
  return 0;
}
