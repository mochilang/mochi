// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:10Z
#include <iostream>
#include <string>
#include <vector>

bool isPrime(int n) {
  if ((n < 2)) {
    return false;
  }
  if (((n % 2) == 0)) {
    return (n == 2);
  }
  if (((n % 3) == 0)) {
    return (n == 3);
  }
  auto d = 5;
  while (((d * d) <= n)) {
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 2);
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 4);
  }
  return true;
}

int firstPrimeFactor(int n) {
  if ((n == 1)) {
    return 1;
  }
  if (((n % 3) == 0)) {
    return 3;
  }
  if (((n % 5) == 0)) {
    return 5;
  }
  std::vector<int> inc = {4, 2, 4, 2, 4, 6, 2, 6};
  auto k = 7;
  auto i = 0;
  while (((k * k) <= n)) {
    if (((n % k) == 0)) {
      return k;
    }
    k = (k + inc[i]);
    i = (((i + 1)) % inc.size());
  }
  return n;
}

int indexOf(std::string s, std::string ch) {
  auto i = 0;
  while ((i < s.size())) {
    if ((std::string(s).substr(i, ((i + 1)) - (i)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}

std::string padLeft(int n, int width) {
  auto s = std::to_string(n);
  while ((s.size() < width)) {
    s = (std::string(" ") + s);
  }
  return s;
}

std::string formatFloat(float f, int prec) {
  auto s = std::to_string(f);
  auto idx = indexOf(s, std::string("."));
  if ((idx < 0)) {
    return s;
  }
  auto need = ((idx + 1) + prec);
  if ((s.size() > need)) {
    return std::string(s).substr(0, (need) - (0));
  }
  return s;
}

auto main() {
  auto blum = std::vector<int>{};
  std::vector<int> counts = {0, 0, 0, 0};
  std::vector<int> digits = {1, 3, 7, 9};
  auto i = 1;
  auto bc = 0;
  while (true) {
    auto p = firstPrimeFactor(i);
    if (((p % 4) == 3)) {
      auto q = std::stoi(((i / p)));
      if ((((q != p) && ((q % 4) == 3)) && isPrime(q))) {
        if ((bc < 50)) {
          blum.push_back(i);
        }
        auto d = (i % 10);
        if ((d == 1)) {
          counts[0] = (counts[0] + 1);
        }
        bc = (bc + 1);
        if ((bc == 50)) {
          std::cout << std::string("First 50 Blum integers:") << std::endl;
          auto idx = 0;
          while ((idx < 50)) {
            auto line = std::string("");
            auto j = 0;
            while ((j < 10)) {
              line = ((line + padLeft(blum[idx], 3)) + std::string(" "));
              idx = (idx + 1);
              j = (j + 1);
            }
            std::cout << std::string(line).substr(0, ((line.size() - 1)) - (0))
                      << std::endl;
          }
          break;
        }
      }
    }
    if (((i % 5) == 3)) {
      i = (i + 4);
    } else {
      i = (i + 2);
    }
  }
}

int main() {
  main();
  return 0;
}
