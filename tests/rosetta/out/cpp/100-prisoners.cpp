// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
#include <chrono>
#include <iostream>
#include <string>
#include <vector>

inline long long _now() {
  auto n = std::chrono::system_clock::now().time_since_epoch();
  return std::chrono::duration_cast<std::chrono::nanoseconds>(n).count();
}
std::vector<int> shuffle(std::vector<int> xs) {
  std::vector<int> arr = xs;
  auto i = 99;
  while ((i > 0)) {
    auto j = (_now() % ((i + 1)));
    std::vector<int> tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
    i = (i - 1);
  }
  return arr;
}

auto doTrials(int trials, int np, std::string strategy) {
  auto pardoned = 0;
  auto t = 0;
  while ((t < trials)) {
    std::vector<int> drawers = std::vector<>{};
    auto i = 0;
    while ((i < 100)) {
      drawers.push_back(i);
      i = (i + 1);
    }
    drawers = shuffle(drawers);
    auto p = 0;
    auto success = true;
    while ((p < np)) {
      auto found = false;
      if ((strategy == std::string("optimal"))) {
        auto prev = p;
        auto d = 0;
        while ((d < 50)) {
          std::vector<int> _this = drawers[prev];
          if ((_this == p)) {
            found = true;
            break;
          }
          prev = _this;
          d = (d + 1);
        }
      } else {
        std::vector<bool> opened = std::vector<>{};
        auto k = 0;
        while ((k < 100)) {
          opened.push_back(false);
          k = (k + 1);
        }
        auto d = 0;
        while ((d < 50)) {
          auto n = (_now() % 100);
          while (opened[n]) {
            n = (_now() % 100);
          }
          opened[n] = true;
          if ((drawers[n] == p)) {
            found = true;
            break;
          }
          d = (d + 1);
        }
      }
      if ((!found)) {
        success = false;
        break;
      }
      p = (p + 1);
    }
    if (success) {
      pardoned = (pardoned + 1);
    }
    t = (t + 1);
  }
  auto rf = (((pardoned) / (trials)) * 100);
  std::cout << ((((((std::string("  strategy = ") + strategy) +
                    std::string("  pardoned = ")) +
                   std::to_string(pardoned)) +
                  std::string(" relative frequency = ")) +
                 std::to_string(rf)) +
                std::string("%"))
            << std::endl;
}

auto __mochi_main() {
  auto trials = 1000;
  for (auto np : std::vector<int>{10, 100}) {
    std::cout << ((((std::string("Results from ") + std::to_string(trials)) +
                    std::string(" trials with ")) +
                   std::to_string(np)) +
                  std::string(" prisoners:\n"))
              << std::endl;
    for (auto strat : std::vector<std::string>{std::string("random"),
                                               std::string("optimal")}) {
      doTrials(trials, np, strat);
    }
  }
}

int main() {
  __mochi_main();
  return 0;
}
