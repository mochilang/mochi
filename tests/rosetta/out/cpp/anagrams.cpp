// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:06Z
#include <algorithm>
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T, typename U>
std::vector<T> __append(const std::vector<T> &v, const U &x) {
  auto r = v;
  r.push_back(x);
  return r;
}
std::string sortRunes(std::string s) {
  auto arr = std::vector<int>{};
  auto i = 0;
  while ((i < s.size())) {
    arr.push_back(std::string(s).substr(i, ((i + 1)) - (i)));
    i = (i + 1);
  }
  auto n = arr.size();
  auto m = 0;
  while ((m < n)) {
    auto j = 0;
    while ((j < (n - 1))) {
      if ((arr[j] > arr[(j + 1)])) {
        auto tmp = arr[j];
        arr[j] = arr[(j + 1)];
        arr[(j + 1)] = tmp;
      }
      j = (j + 1);
    }
    m = (m + 1);
  }
  auto out = std::string("");
  i = 0;
  while ((i < n)) {
    out = (out + arr[i]);
    i = (i + 1);
  }
  return out;
}

auto sortStrings(auto xs) {
  auto res = std::vector<int>{};
  auto tmp = xs;
  while ((tmp.size() > 0)) {
    auto min = tmp[0];
    auto idx = 0;
    auto i = 1;
    while ((i < tmp.size())) {
      if ((tmp[i] < min)) {
        min = tmp[i];
        idx = i;
      }
      i = (i + 1);
    }
    res.push_back(min);
    auto out = std::vector<int>{};
    auto j = 0;
    while ((j < tmp.size())) {
      if ((j != idx)) {
        out.push_back(tmp[j]);
      }
      j = (j + 1);
    }
    tmp = out;
  }
  return res;
}

auto main() {
  std::vector<std::string> words = {
      std::string("abel"),  std::string("able"),  std::string("bale"),
      std::string("bela"),  std::string("elba"),  std::string("alger"),
      std::string("glare"), std::string("lager"), std::string("large"),
      std::string("regal"), std::string("angel"), std::string("angle"),
      std::string("galen"), std::string("glean"), std::string("lange"),
      std::string("caret"), std::string("carte"), std::string("cater"),
      std::string("crate"), std::string("trace"), std::string("elan"),
      std::string("lane"),  std::string("lean"),  std::string("lena"),
      std::string("neal"),  std::string("evil"),  std::string("levi"),
      std::string("live"),  std::string("veil"),  std::string("vile")};
  auto groups = std::unordered_map<int, int>{};
  auto maxLen = 0;
  for (auto w : words) {
    auto k = sortRunes(w);
    if ((!((std::find(groups.begin(), groups.end(), k) != groups.end())))) {
      groups[k] = std::vector<decltype(w)>{w};
    } else {
      groups[k] = __append(groups[k], w);
    }
    if ((groups[k].size() > maxLen)) {
      maxLen = groups[k].size();
    }
  }
  auto printed = std::unordered_map<int, int>{};
  for (auto w : words) {
    auto k = sortRunes(w);
    if ((groups[k].size() == maxLen)) {
      if ((!((std::find(printed.begin(), printed.end(), k) !=
              printed.end())))) {
        auto g = sortStrings(groups[k]);
        auto line = (std::string("[") + g[0]);
        auto i = 1;
        while ((i < g.size())) {
          line = ((line + std::string(" ")) + g[i]);
          i = (i + 1);
        }
        line = (line + std::string("]"));
        std::cout << line << std::endl;
        printed[k] = true;
      }
    }
  }
}

int main() {
  main();
  return 0;
}
