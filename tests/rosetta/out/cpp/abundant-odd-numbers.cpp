// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:04Z
#include <iostream>
#include <numeric>
#include <string>
#include <vector>

auto divisors(int n) {
  auto divs = std::vector<int>{1};
  auto divs2 = std::vector<int>{};
  auto i = 2;
  while (((i * i) <= n)) {
    if (((n % i) == 0)) {
      auto j = std::stoi(((n / i)));
      divs.push_back(i);
      if ((i != j)) {
        divs2.push_back(j);
      }
    }
    i = (i + 1);
  }
  auto j = (divs2.size() - 1);
  while ((j >= 0)) {
    divs.push_back(divs2[j]);
    j = (j - 1);
  }
  return divs;
}

int sum(auto xs) {
  auto tot = 0;
  for (auto v : xs) {
    tot = (tot + v);
  }
  return tot;
}

std::string sumStr(auto xs) {
  auto s = std::string("");
  auto i = 0;
  while ((i < xs.size())) {
    s = ((s + std::to_string(xs[i])) + std::string(" + "));
    i = (i + 1);
  }
  return std::string(s).substr(0, ((s.size() - 3)) - (0));
}

std::string pad2(int n) {
  auto s = std::to_string(n);
  if ((s.size() < 2)) {
    return (std::string(" ") + s);
  }
  return s;
}

std::string pad5(int n) {
  auto s = std::to_string(n);
  while ((s.size() < 5)) {
    s = (std::string(" ") + s);
  }
  return s;
}

int abundantOdd(int searchFrom, int countFrom, int countTo, bool printOne) {
  auto count = countFrom;
  auto n = searchFrom;
  while ((count < countTo)) {
    auto divs = divisors(n);
    auto tot = ([&](auto v) {
      return std::accumulate(v.begin(), v.end(), 0.0);
    })(divs);
    if ((tot > n)) {
      count = (count + 1);
      if ((printOne && (count < countTo))) {
        n = (n + 2);
        continue;
      }
      auto s = sumStr(divs);
      if ((!printOne)) {
        std::cout << ((((((pad2(count) + std::string(". ")) + pad5(n)) +
                         std::string(" < ")) +
                        s) +
                       std::string(" = ")) +
                      std::to_string(tot))
                  << std::endl;
      } else {
        std::cout << ((((std::to_string(n) + std::string(" < ")) + s) +
                       std::string(" = ")) +
                      std::to_string(tot))
                  << std::endl;
      }
    }
    n = (n + 2);
  }
  return n;
}

auto main() {
  auto max = 25;
  std::cout << ((std::string("The first ") + std::to_string(max)) +
                std::string(" abundant odd numbers are:"))
            << std::endl;
  auto n = abundantOdd(1, 0, max, false);
  std::cout << std::string("\nThe one thousandth abundant odd number is:")
            << std::endl;
  abundantOdd(n, max, 1000, true);
  std::cout << std::string(
                   "\nThe first abundant odd number above one billion is:")
            << std::endl;
  abundantOdd(1000000001, 0, 1, true);
}

int main() {
  main();
  return 0;
}
