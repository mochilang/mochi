// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:05Z
#include <algorithm>
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T, typename U>
std::vector<T> __append(const std::vector<T> &v, const U &x) {
  auto r = v;
  r.push_back(x);
  return r;
}
std::string sortRunes(std::string s) {
  auto arr = std::vector<int>{};
  auto i = 0;
  while ((i < s.size())) {
    arr.push_back(std::string(s).substr(i, ((i + 1)) - (i)));
    i = (i + 1);
  }
  auto n = arr.size();
  auto m = 0;
  while ((m < n)) {
    auto j = 0;
    while ((j < (n - 1))) {
      if ((arr[j] > arr[(j + 1)])) {
        auto tmp = arr[j];
        arr[j] = arr[(j + 1)];
        arr[(j + 1)] = tmp;
      }
      j = (j + 1);
    }
    m = (m + 1);
  }
  auto out = std::string("");
  i = 0;
  while ((i < n)) {
    out = (out + arr[i]);
    i = (i + 1);
  }
  return out;
}

bool deranged(std::string a, std::string b) {
  if ((a.size() != b.size())) {
    return false;
  }
  auto i = 0;
  while ((i < a.size())) {
    if ((std::string(a).substr(i, ((i + 1)) - (i)) ==
         std::string(b).substr(i, ((i + 1)) - (i)))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}

auto main() {
  std::vector<std::string> words = {std::string("constitutionalism"),
                                    std::string("misconstitutional")};
  auto m = std::unordered_map<int, int>{};
  auto bestLen = 0;
  auto w1 = std::string("");
  auto w2 = std::string("");
  for (auto w : words) {
    if ((w.size() <= bestLen)) {
      continue;
    }
    auto k = sortRunes(w);
    if ((!((std::find(m.begin(), m.end(), k) != m.end())))) {
      m[k] = std::vector<decltype(w)>{w};
      continue;
    }
    for (auto c : m[k]) {
      if (deranged(w, c)) {
        bestLen = w.size();
        w1 = c;
        w2 = w;
        break;
      }
    }
    m[k] = __append(m[k], w);
  }
  std::cout << ((((w1 + std::string(" ")) + w2) + std::string(" : Length ")) +
                std::to_string(bestLen))
            << std::endl;
}

int main() {
  main();
  return 0;
}
