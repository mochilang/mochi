// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:10Z
#include <iostream>
#include <string>
#include <vector>

struct Colour {
  int R;
  int G;
  int B;
};
struct Bitmap {
  int width;
  int height;
  auto pixels;
};

Bitmap newBitmap(int w, int h, Colour c) {
  auto rows = std::vector<int>{};
  auto y = 0;
  while ((y < h)) {
    auto row = std::vector<int>{};
    auto x = 0;
    while ((x < w)) {
      row.push_back(c);
      x = (x + 1);
    }
    rows.push_back(row);
    y = (y + 1);
  }
  return Bitmap{w, h, rows};
}

auto setPixel(Bitmap b, int x, int y, Colour c) {
  auto rows = b.pixels;
  auto row = rows[y];
  row[x] = c;
  rows[y] = row;
  b.pixels = rows;
}

auto fillRect(Bitmap b, int x, int y, int w, int h, Colour c) {
  auto yy = y;
  while ((yy < (y + h))) {
    auto xx = x;
    while ((xx < (x + w))) {
      setPixel(b, xx, yy, c);
      xx = (xx + 1);
    }
    yy = (yy + 1);
  }
}

std::string pad(int n, int width) {
  auto s = std::to_string(n);
  while ((s.size() < width)) {
    s = (std::string(" ") + s);
  }
  return s;
}

std::string writePPMP3(Bitmap b) {
  auto maxv = 0;
  auto y = 0;
  while ((y < b.height)) {
    auto x = 0;
    while ((x < b.width)) {
      auto p = b.pixels[y][x];
      if ((p.R > maxv)) {
        maxv = p.R;
      }
      if ((p.G > maxv)) {
        maxv = p.G;
      }
      if ((p.B > maxv)) {
        maxv = p.B;
      }
      x = (x + 1);
    }
    y = (y + 1);
  }
  auto out = ((((((std::string("P3\n# generated from Bitmap.writeppmp3\n") +
                   std::to_string(b.width)) +
                  std::string(" ")) +
                 std::to_string(b.height)) +
                std::string("\n")) +
               std::to_string(maxv)) +
              std::string("\n"));
  auto numsize = std::to_string(maxv).size();
  y = (b.height - 1);
  while ((y >= 0)) {
    auto line = std::string("");
    auto x = 0;
    while ((x < b.width)) {
      auto p = b.pixels[y][x];
      line = ((((((line + std::string("   ")) + pad(p.R, numsize)) +
                 std::string(" ")) +
                pad(p.G, numsize)) +
               std::string(" ")) +
              pad(p.B, numsize));
      x = (x + 1);
    }
    out = (out + line);
    if ((y > 0)) {
      out = (out + std::string("\n"));
    } else {
      out = (out + std::string("\n"));
    }
    y = (y - 1);
  }
  return out;
}

auto main() {
  auto black = Colour{0, 0, 0};
  auto white = Colour{255, 255, 255};
  auto bm = newBitmap(4, 4, black);
  fillRect(bm, 1, 0, 1, 2, white);
  setPixel(bm, 3, 3, Colour{127, 0, 63});
  auto ppm = writePPMP3(bm);
  std::cout << ppm << std::endl;
}

int main() {
  main();
  return 0;
}
