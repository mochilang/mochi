// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:14Z
#include <iostream>
#include <string>
#include <vector>

bool isPrime(int n) {
  if ((n < 2)) {
    return false;
  }
  if (((n % 2) == 0)) {
    return (n == 2);
  }
  if (((n % 3) == 0)) {
    return (n == 3);
  }
  auto d = 5;
  while (((d * d) <= n)) {
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 2);
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 4);
  }
  return true;
}

auto bigTrim(auto a) {
  auto n = ((int)a.size());
  while (((n > 1) && (a[(n - 1)] == 0))) {
    a = std::string(a).substr(0, ((n - 1)) - (0));
    n = (n - 1);
  }
  return a;
}

auto bigFromInt(int x) {
  if ((x == 0)) {
    return std::vector<int>{0};
  }
  auto digits = std::vector<int>{};
  auto n = x;
  while ((n > 0)) {
    digits.push_back((n % 10));
    n = (n / 10);
  }
  return digits;
}

auto bigMulSmall(auto a, int m) {
  if ((m == 0)) {
    return std::vector<int>{0};
  }
  auto res = std::vector<int>{};
  auto carry = 0;
  auto i = 0;
  while ((i < ((int)a.size()))) {
    auto prod = ((a[i] * m) + carry);
    res.push_back((prod % 10));
    carry = (prod / 10);
    i = (i + 1);
  }
  while ((carry > 0)) {
    res.push_back((carry % 10));
    carry = (carry / 10);
  }
  return bigTrim(res);
}

std::string bigToString(auto a) {
  auto s = std::string("");
  auto i = (((int)a.size()) - 1);
  while ((i >= 0)) {
    s = (s + std::to_string(a[i]));
    i = (i - 1);
  }
  return s;
}

int pow2(int k) {
  auto r = 1;
  auto i = 0;
  while ((i < k)) {
    r = (r * 2);
    i = (i + 1);
  }
  return r;
}

auto ccFactors(int n, int m) {
  auto p = ((6 * m) + 1);
  if ((!isPrime(p))) {
    return std::vector<int>{};
  }
  auto prod = bigFromInt(p);
  p = ((12 * m) + 1);
  if ((!isPrime(p))) {
    return std::vector<int>{};
  }
  prod = bigMulSmall(prod, p);
  auto i = 1;
  while ((i <= (n - 2))) {
    p = ((((pow2(i) * 9) * m)) + 1);
    if ((!isPrime(p))) {
      return std::vector<int>{};
    }
    prod = bigMulSmall(prod, p);
    i = (i + 1);
  }
  return prod;
}

auto ccNumbers(int start, int end) {
  auto n = start;
  while ((n <= end)) {
    auto m = 1;
    if ((n > 4)) {
      m = pow2((n - 4));
    }
    while (true) {
      auto num = ccFactors(n, m);
      if ((((int)num.size()) > 0)) {
        std::cout << (((std::string("a(") + std::to_string(n)) +
                       std::string(") = ")) +
                      bigToString(num))
                  << std::endl;
        break;
      }
      if ((n <= 4)) {
        m = (m + 1);
      } else {
        m = (m + pow2((n - 4)));
      }
    }
    n = (n + 1);
  }
}

int main() {
  ccNumbers(3, 9);
  return 0;
}
