// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:09Z
#include <iostream>
#include <string>
#include <vector>

int nextRand(int seed) {
  return ((((seed * 1664525) + 1013904223)) % 2147483647);
}

auto shuffleChars(std::string s, int seed) {
  auto chars = std::vector<int>{};
  auto i = 0;
  while ((i < s.size())) {
    chars.push_back(std::string(s).substr(i, ((i + 1)) - (i)));
    i = (i + 1);
  }
  auto sd = seed;
  auto idx = (chars.size() - 1);
  while ((idx > 0)) {
    sd = nextRand(sd);
    auto j = (sd % ((idx + 1)));
    auto tmp = chars[idx];
    chars[idx] = chars[j];
    chars[j] = tmp;
    idx = (idx - 1);
  }
  auto res = std::string("");
  i = 0;
  while ((i < chars.size())) {
    res = (res + chars[i]);
    i = (i + 1);
  }
  return std::vector<decltype(res)>{res, sd};
}

auto bestShuffle(std::string s, int seed) {
  auto r = shuffleChars(s, seed);
  auto t = r[0];
  auto sd = r[1];
  auto arr = std::vector<int>{};
  auto i = 0;
  while ((i < t.size())) {
    arr.push_back(std::string(t).substr(i, ((i + 1)) - (i)));
    i = (i + 1);
  }
  i = 0;
  while ((i < arr.size())) {
    auto j = 0;
    while ((j < arr.size())) {
      if ((((i != j) &&
            (arr[i] != std::string(s).substr(j, ((j + 1)) - (j)))) &&
           (arr[j] != std::string(s).substr(i, ((i + 1)) - (i))))) {
        auto tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
        break;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  auto count = 0;
  i = 0;
  while ((i < arr.size())) {
    if ((arr[i] == std::string(s).substr(i, ((i + 1)) - (i)))) {
      count = (count + 1);
    }
    i = (i + 1);
  }
  auto out = std::string("");
  i = 0;
  while ((i < arr.size())) {
    out = (out + arr[i]);
    i = (i + 1);
  }
  return std::vector<decltype(out)>{out, sd, count};
}

auto main() {
  std::vector<std::string> ts = {
      std::string("abracadabra"), std::string("seesaw"), std::string("elk"),
      std::string("grrrrrr"),     std::string("up"),     std::string("a")};
  auto seed = 1;
  auto i = 0;
  while ((i < ts.size())) {
    auto r = bestShuffle(ts[i], seed);
    auto shuf = r[0];
    seed = r[1];
    auto cnt = r[2];
    std::cout << (((((ts[i] + std::string(" -> ")) + shuf) +
                    std::string(" (")) +
                   std::to_string(cnt)) +
                  std::string(")"))
              << std::endl;
    i = (i + 1);
  }
}

int main() {
  main();
  return 0;
}
