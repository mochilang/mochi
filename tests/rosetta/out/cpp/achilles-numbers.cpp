// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:05Z
#include <algorithm>
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

int pow10(int exp) {
  auto n = 1;
  auto i = 0;
  while ((i < exp)) {
    n = (n * 10);
    i = (i + 1);
  }
  return n;
}

int totient(int n) {
  auto tot = n;
  auto nn = n;
  auto i = 2;
  while (((i * i) <= nn)) {
    if (((nn % i) == 0)) {
      while (((nn % i) == 0)) {
        nn = (nn / i);
      }
      tot = (tot - (tot / i));
    }
    if ((i == 2)) {
      i = 1;
    }
    i = (i + 2);
  }
  if ((nn > 1)) {
    tot = (tot - (tot / nn));
  }
  return tot;
}

auto getPerfectPowers(int maxExp) {
  auto upper = pow10(maxExp);
  auto i = 2;
  while (((i * i) < upper)) {
    auto p = (i * i);
    while (true) {
      p = (p * i);
      if ((p >= upper)) {
        break;
      }
      pps[p] = true;
    }
    i = (i + 1);
  }
}

auto getAchilles(int minExp, int maxExp) {
  auto lower = pow10(minExp);
  auto upper = pow10(maxExp);
  auto achilles = std::unordered_map<int, int>{};
  auto b = 1;
  while ((((b * b) * b) < upper)) {
    auto b3 = ((b * b) * b);
    auto a = 1;
    while (true) {
      auto p = ((b3 * a) * a);
      if ((p >= upper)) {
        break;
      }
      if ((p >= lower)) {
        if ((!((std::find(pps.begin(), pps.end(), p) != pps.end())))) {
          achilles[p] = true;
        }
      }
      a = (a + 1);
    }
    b = (b + 1);
  }
  return achilles;
}

auto sortInts(auto xs) {
  auto res = std::vector<int>{};
  auto tmp = xs;
  while ((tmp.size() > 0)) {
    auto min = tmp[0];
    auto idx = 0;
    auto i = 1;
    while ((i < tmp.size())) {
      if ((tmp[i] < min)) {
        min = tmp[i];
        idx = i;
      }
      i = (i + 1);
    }
    res = (res + std::vector<decltype(min)>{min});
    auto out = std::vector<int>{};
    auto j = 0;
    while ((j < tmp.size())) {
      if ((j != idx)) {
        out = (out + std::vector<decltype(tmp[j])>{tmp[j]});
      }
      j = (j + 1);
    }
    tmp = out;
  }
  return res;
}

std::string pad(int n, int width) {
  auto s = std::to_string(n);
  while ((s.size() < width)) {
    s = (std::string(" ") + s);
  }
  return s;
}

auto main() {
  auto maxDigits = 15;
  getPerfectPowers(maxDigits);
  auto achSet = getAchilles(1, 5);
  auto ach = std::vector<int>{};
  for (auto k : achSet.keys()) {
    ach = (ach + std::vector<decltype(k)>{k});
  }
  ach = sortInts(ach);
  std::cout << std::string("First 50 Achilles numbers:") << std::endl;
  auto i = 0;
  while ((i < 50)) {
    auto line = std::string("");
    auto j = 0;
    while ((j < 10)) {
      line = (line + pad(ach[i], 4));
      if ((j < 9)) {
        line = (line + std::string(" "));
      }
      i = (i + 1);
      j = (j + 1);
    }
    std::cout << line << std::endl;
  }
  std::cout << std::string("\nFirst 30 strong Achilles numbers:") << std::endl;
  auto strong = std::vector<int>{};
  auto count = 0;
  auto idx = 0;
  while ((count < 30)) {
    auto tot = totient(ach[idx]);
    if ((std::find(achSet.begin(), achSet.end(), tot) != achSet.end())) {
      strong = (strong + std::vector<decltype(ach[idx])>{ach[idx]});
      count = (count + 1);
    }
    idx = (idx + 1);
  }
  i = 0;
  while ((i < 30)) {
    auto line = std::string("");
    auto j = 0;
    while ((j < 10)) {
      line = (line + pad(strong[i], 5));
      if ((j < 9)) {
        line = (line + std::string(" "));
      }
      i = (i + 1);
      j = (j + 1);
    }
    std::cout << line << std::endl;
  }
  std::cout << std::string("\nNumber of Achilles numbers with:") << std::endl;
  std::vector<int> counts = {1,      12,      47,      192,     664,
                             2242,   7395,    24008,   77330,   247449,
                             788855, 2508051, 7960336, 25235383};
  auto d = 2;
  while ((d <= maxDigits)) {
    auto c = counts[(d - 2)];
    std::cout << ((pad(d, 2) + std::string(" digits: ")) + std::to_string(c))
              << std::endl;
    d = (d + 1);
  }
}

int main() {
  auto pps = std::unordered_map<int, int>{};
  main();
  return 0;
}
