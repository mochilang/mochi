// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:14Z
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T, typename U>
std::vector<T> __append(const std::vector<T> &v, const U &x) {
  auto r = v;
  r.push_back(x);
  return r;
}
std::string join(auto xs, std::string sep) {
  auto res = std::string("");
  auto i = 0;
  while ((i < xs.size())) {
    if ((i > 0)) {
      res = (res + sep);
    }
    res = (res + xs[i]);
    i = (i + 1);
  }
  return res;
}

int parseIntStr(std::string str) {
  auto i = 0;
  auto neg = false;
  if (((str.size() > 0) &&
       (std::string(str).substr(0, (1) - (0)) == std::string("-")))) {
    neg = true;
    i = 1;
  }
  auto n = 0;
  auto digits = std::unordered_map<std::string, decltype(0)>{
      {std::string("0"), 0}, {std::string("1"), 1}, {std::string("2"), 2},
      {std::string("3"), 3}, {std::string("4"), 4}, {std::string("5"), 5},
      {std::string("6"), 6}, {std::string("7"), 7}, {std::string("8"), 8},
      {std::string("9"), 9}};
  while ((i < str.size())) {
    n = ((n * 10) + digits[std::string(str).substr(i, ((i + 1)) - (i))]);
    i = (i + 1);
  }
  if (neg) {
    n = (-n);
  }
  return n;
}

int main() {
  auto rows = std::vector<decltype(std::vector<std::string>{
      std::string("A"), std::string("B"), std::string("C")})>{
      std::vector<std::string>{std::string("A"), std::string("B"),
                               std::string("C")},
      std::vector<std::string>{std::string("1"), std::string("2"),
                               std::string("3")},
      std::vector<std::string>{std::string("4"), std::string("5"),
                               std::string("6")},
      std::vector<std::string>{std::string("7"), std::string("8"),
                               std::string("9")}};
  rows[0] = __append(rows[0], std::string("SUM"));
  auto i = 1;
  while ((i < rows.size())) {
    auto sum = 0;
    for (auto s : rows[i]) {
      sum = (sum + parseIntStr(s));
    }
    rows[i] = __append(rows[i], std::to_string(sum));
    i = (i + 1);
  }
  for (auto r : rows) {
    std::cout << join(r, std::string(",")) << std::endl;
  }
  return 0;
}
