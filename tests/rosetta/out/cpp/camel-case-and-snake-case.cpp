// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:12Z
#include <iostream>
#include <string>
#include <vector>

std::string trimSpace(std::string s) {
  auto start = 0;
  while (((start < s.size()) &&
          (std::string(s).substr(start, ((start + 1)) - (start)) ==
           std::string(" ")))) {
    start = (start + 1);
  }
  auto end = s.size();
  while (((end > start) &&
          (std::string(s).substr((end - 1), (end) - ((end - 1))) ==
           std::string(" ")))) {
    end = (end - 1);
  }
  return std::string(s).substr(start, (end) - (start));
}

bool isUpper(std::string ch) {
  return ((ch >= std::string("A")) && (ch <= std::string("Z")));
}

std::string padLeft(std::string s, int w) {
  auto res = std::string("");
  auto n = (w - s.size());
  while ((n > 0)) {
    res = (res + std::string(" "));
    n = (n - 1);
  }
  return (res + s);
}

std::string snakeToCamel(std::string s) {
  s = trimSpace(s);
  auto out = std::string("");
  auto up = false;
  auto i = 0;
  while ((i < s.size())) {
    auto ch = std::string(s).substr(i, ((i + 1)) - (i));
    if (((((ch == std::string("_")) || (ch == std::string("-"))) ||
          (ch == std::string(" "))) ||
         (ch == std::string(".")))) {
      up = true;
      i = (i + 1);
      continue;
    }
    if ((i == 0)) {
      out = (out + lower(ch));
      up = false;
      i = (i + 1);
      continue;
    }
    if (up) {
      out = (out + upper(ch));
      up = false;
    } else {
      out = (out + ch);
    }
    i = (i + 1);
  }
  return out;
}

std::string camelToSnake(std::string s) {
  s = trimSpace(s);
  auto out = std::string("");
  auto prevUnd = false;
  auto i = 0;
  while ((i < s.size())) {
    auto ch = std::string(s).substr(i, ((i + 1)) - (i));
    if ((((ch == std::string(" ")) || (ch == std::string("-"))) ||
         (ch == std::string(".")))) {
      if (((!prevUnd) && (out.size() > 0))) {
        out = (out + std::string("_"));
        prevUnd = true;
      }
      i = (i + 1);
      continue;
    }
    if ((ch == std::string("_"))) {
      if (((!prevUnd) && (out.size() > 0))) {
        out = (out + std::string("_"));
        prevUnd = true;
      }
      i = (i + 1);
      continue;
    }
    if (isUpper(ch)) {
      if (((i > 0) && ((!prevUnd)))) {
        out = (out + std::string("_"));
      }
      out = (out + lower(ch));
      prevUnd = false;
    } else {
      out = (out + lower(ch));
      prevUnd = false;
    }
    i = (i + 1);
  }
  auto start = 0;
  while (((start < out.size()) &&
          (std::string(out).substr(start, ((start + 1)) - (start)) ==
           std::string("_")))) {
    start = (start + 1);
  }
  auto end = out.size();
  while (((end > start) &&
          (std::string(out).substr((end - 1), (end) - ((end - 1))) ==
           std::string("_")))) {
    end = (end - 1);
  }
  out = std::string(out).substr(start, (end) - (start));
  auto res = std::string("");
  auto j = 0;
  auto lastUnd = false;
  while ((j < out.size())) {
    auto c = std::string(out).substr(j, ((j + 1)) - (j));
    if ((c == std::string("_"))) {
      if ((!lastUnd)) {
        res = (res + c);
      }
      lastUnd = true;
    } else {
      res = (res + c);
      lastUnd = false;
    }
    j = (j + 1);
  }
  return res;
}

auto main() {
  std::vector<std::string> samples = {
      std::string("snakeCase"),
      std::string("snake_case"),
      std::string("snake-case"),
      std::string("snake case"),
      std::string("snake CASE"),
      std::string("snake.case"),
      std::string("variable_10_case"),
      std::string("variable10Case"),
      std::string("É›rgo rE tHis"),
      std::string("hurry-up-joe!"),
      std::string("c://my-docs/happy_Flag-Day/12.doc"),
      std::string(" spaces ")};
  std::cout << std::string("=== To snake_case ===") << std::endl;
  for (auto s : samples) {
    std::cout << ((padLeft(s, 34) + std::string(" => ")) + camelToSnake(s))
              << std::endl;
  }
  std::cout << std::string("") << std::endl;
  std::cout << std::string("=== To camelCase ===") << std::endl;
  for (auto s : samples) {
    std::cout << ((padLeft(s, 34) + std::string(" => ")) + snakeToCamel(s))
              << std::endl;
  }
}

int main() {
  main();
  return 0;
}
