// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:08Z
#include <iostream>
#include <string>
#include <vector>

float absf(float x) {
  if ((x < 0)) {
    return (-x);
  }
  return x;
}

float floorf(float x) { return (std::stoi(x)); }

int indexOf(std::string s, std::string ch) {
  auto i = 0;
  while ((i < s.size())) {
    if ((std::string(s).substr(i, ((i + 1)) - (i)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}

std::string fmtF(float x) {
  auto y = (floorf(((x * 10000) + 0.5)) / 10000);
  auto s = std::to_string(y);
  auto dot = indexOf(s, std::string("."));
  if ((dot == -1)) {
    s = (s + std::string(".0000"));
  } else {
    auto decs = ((s.size() - dot) - 1);
    if ((decs > 4)) {
      s = std::string(s).substr(0, ((dot + 5)) - (0));
    } else {
      while ((decs < 4)) {
        s = (s + std::string("0"));
        decs = (decs + 1);
      }
    }
  }
  return s;
}

std::string padInt(int n, int width) {
  auto s = std::to_string(n);
  while ((s.size() < width)) {
    s = (std::string(" ") + s);
  }
  return s;
}

std::string padFloat(float x, int width) {
  auto s = fmtF(x);
  while ((s.size() < width)) {
    s = (std::string(" ") + s);
  }
  return s;
}

float avgLen(int n) {
  auto tests = 10000;
  auto sum = 0;
  auto seed = 1;
  auto t = 0;
  while ((t < tests)) {
    auto visited = std::vector<int>{};
    auto i = 0;
    while ((i < n)) {
      visited.push_back(false);
      i = (i + 1);
    }
    auto x = 0;
    while ((!visited[x])) {
      visited[x] = true;
      sum = (sum + 1);
      seed = ((((seed * 1664525) + 1013904223)) % 2147483647);
      x = (seed % n);
    }
    t = (t + 1);
  }
  return ((sum) / tests);
}

float ana(int n) {
  auto nn = n;
  auto term = 1;
  auto sum = 1;
  auto i = (nn - 1);
  while ((i >= 1)) {
    term = (term * ((i / nn)));
    sum = (sum + term);
    i = (i - 1);
  }
  return sum;
}

auto main() {
  auto nmax = 20;
  std::cout << std::string(" N    average    analytical    (error)")
            << std::endl;
  std::cout << std::string("===  =========  ============  =========")
            << std::endl;
  auto n = 1;
  while ((n <= nmax)) {
    auto a = avgLen(n);
    auto b = ana(n);
    auto err = ((absf((a - b)) / b) * 100);
    auto line = (((((((padInt(n, 3) + std::string("  ")) + padFloat(a, 9)) +
                     std::string("  ")) +
                    padFloat(b, 12)) +
                   std::string("  (")) +
                  padFloat(err, 6)) +
                 std::string("%)"));
    std::cout << line << std::endl;
    n = (n + 1);
  }
}

int main() {
  main();
  return 0;
}
