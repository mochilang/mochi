// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:13Z
#include <iostream>
#include <string>

int indexOf(std::string s, std::string ch) {
  auto i = 0;
  while ((i < s.size())) {
    if ((std::string(s).substr(i, ((i + 1)) - (i)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}

std::string rotate(std::string s, int n) {
  return std::string(s).substr(n, (s.size()) - (n)s).substr(0, (n) - (0));
}

std::string scrambleLeft(std::string s) {
  return std::string(s)
      .substr(0, (1) - (0)s)
      .substr(2, (14) - (2)s)
      .substr(1, (2) - (1)s)
      .substr(14, (s.size()) - (14));
}

std::string scrambleRight(std::string s) {
  return std::string(s)
      .substr(1, (3) - (1)s)
      .substr(4, (15) - (4)s)
      .substr(3, (4) - (3)s)
      .substr(15, (s.size()) - (15)s)
      .substr(0, (1) - (0));
}

std::string chao(std::string text, bool encode) {
  auto left = std::string("HXUCZVAMDSLKPEFJRIGTWOBNYQ");
  auto right = std::string("PTLNBQDEOYSFAVZKGJRIHWXUMC");
  auto out = std::string("");
  auto i = 0;
  while ((i < text.size())) {
    auto ch = std::string(text).substr(i, ((i + 1)) - (i));
    auto idx = 0;
    if (encode) {
      idx = indexOf(right, ch);
      out = (out + std::string(left).substr(idx, ((idx + 1)) - (idx)));
    } else {
      idx = indexOf(left, ch);
      out = (out + std::string(right).substr(idx, ((idx + 1)) - (idx)));
    }
    left = rotate(left, idx);
    right = rotate(right, idx);
    left = scrambleLeft(left);
    right = scrambleRight(right);
    i = (i + 1);
  }
  return out;
}

auto main() {
  auto plain = std::string("WELLDONEISBETTERTHANWELLSAID");
  auto cipher = chao(plain, true);
  std::cout << plain << std::endl;
  std::cout << cipher << std::endl;
  std::cout << chao(cipher, false) << std::endl;
}

int main() {
  main();
  return 0;
}
