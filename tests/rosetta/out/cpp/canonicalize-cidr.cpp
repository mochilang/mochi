// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:12Z
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

auto split(std::string s, std::string sep) {
  auto parts = std::vector<int>{};
  auto cur = std::string("");
  auto i = 0;
  while ((i < s.size())) {
    if ((((sep.size() > 0) && ((i + sep.size()) <= s.size())) &&
         (std::string(s).substr(i, ((i + sep.size())) - (i)) == sep))) {
      parts.push_back(cur);
      cur = std::string("");
      i = (i + sep.size());
    } else {
      cur = (cur + std::string(s).substr(i, ((i + 1)) - (i)));
      i = (i + 1);
    }
  }
  parts.push_back(cur);
  return parts;
}

std::string join(auto xs, std::string sep) {
  auto res = std::string("");
  auto i = 0;
  while ((i < xs.size())) {
    if ((i > 0)) {
      res = (res + sep);
    }
    res = (res + xs[i]);
    i = (i + 1);
  }
  return res;
}

std::string repeat(std::string ch, int n) {
  auto out = std::string("");
  auto i = 0;
  while ((i < n)) {
    out = (out + ch);
    i = (i + 1);
  }
  return out;
}

int parseIntStr(std::string str) {
  auto i = 0;
  auto neg = false;
  if (((str.size() > 0) &&
       (std::string(str).substr(0, (1) - (0)) == std::string("-")))) {
    neg = true;
    i = 1;
  }
  auto n = 0;
  auto digits = std::unordered_map<std::string, decltype(0)>{
      {std::string("0"), 0}, {std::string("1"), 1}, {std::string("2"), 2},
      {std::string("3"), 3}, {std::string("4"), 4}, {std::string("5"), 5},
      {std::string("6"), 6}, {std::string("7"), 7}, {std::string("8"), 8},
      {std::string("9"), 9}};
  while ((i < str.size())) {
    n = ((n * 10) + digits[std::string(str).substr(i, ((i + 1)) - (i))]);
    i = (i + 1);
  }
  if (neg) {
    n = (-n);
  }
  return n;
}

std::string toBinary(int n, int bits) {
  auto b = std::string("");
  auto val = n;
  auto i = 0;
  while ((i < bits)) {
    b = (std::to_string((val % 2)) + b);
    val = std::stoi(((val / 2)));
    i = (i + 1);
  }
  return b;
}

int binToInt(std::string bits) {
  auto n = 0;
  auto i = 0;
  while ((i < bits.size())) {
    n = ((n * 2) + parseIntStr(std::string(bits).substr(i, ((i + 1)) - (i))));
    i = (i + 1);
  }
  return n;
}

std::string padRight(std::string s, int width) {
  auto out = s;
  while ((out.size() < width)) {
    out = (out + std::string(" "));
  }
  return out;
}

std::string canonicalize(std::string cidr) {
  auto parts = split(cidr, std::string("/"));
  auto dotted = parts[0];
  auto size = parseIntStr(parts[1]);
  auto binParts = std::vector<int>{};
  for (auto p : split(dotted, std::string("."))) {
    binParts.push_back(toBinary(parseIntStr(p), 8));
  }
  auto binary = join(binParts, std::string(""));
  binary = (std::string(binary).substr(0, (size) - (0)) +
            repeat(std::string("0"), (32 - size)));
  auto canonParts = std::vector<int>{};
  auto i = 0;
  while ((i < binary.size())) {
    canonParts.push_back(std::to_string(
        binToInt(std::string(binary).substr(i, ((i + 8)) - (i)))));
    i = (i + 8);
  }
  return ((join(canonParts, std::string(".")) + std::string("/")) + parts[1]);
}

int main() {
  std::vector<std::string> tests = {
      std::string("87.70.141.1/22"),   std::string("36.18.154.103/12"),
      std::string("62.62.197.11/29"),  std::string("67.137.119.181/4"),
      std::string("161.214.74.21/24"), std::string("184.232.176.184/18")};
  for (auto t : tests) {
    std::cout << ((padRight(t, 18) + std::string(" -> ")) + canonicalize(t))
              << std::endl;
  }
  return 0;
}
