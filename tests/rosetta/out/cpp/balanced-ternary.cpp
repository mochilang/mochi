// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:09Z
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

std::string trimLeftZeros(std::string s) {
  auto i = 0;
  while (((i < s.size()) &&
          (std::string(s).substr(i, ((i + 1)) - (i)) == std::string("0")))) {
    i = (i + 1);
  }
  return std::string(s).substr(i, (s.size()) - (i));
}

auto btString(std::string s) {
  s = trimLeftZeros(s);
  auto b = std::vector<int>{};
  auto i = (s.size() - 1);
  while ((i >= 0)) {
    auto ch = std::string(s).substr(i, ((i + 1)) - (i));
    if ((ch == std::string("+"))) {
      b.push_back(1);
    } else {
      if ((ch == std::string("0"))) {
        b.push_back(0);
      } else {
        if ((ch == std::string("-"))) {
          b.push_back(-1);
        } else {
          return std::unordered_map<std::string, decltype(std::vector<int>{})>{
              {std::string("bt"), std::vector<int>{}},
              {std::string("ok"), false}};
        }
      }
    }
    i = (i - 1);
  }
  return std::unordered_map<std::string, decltype(b)>{
      {std::string("bt"), b}, {std::string("ok"), true}};
}

std::string btToString(auto b) {
  if ((b.size() == 0)) {
    return std::string("0");
  }
  auto r = std::string("");
  auto i = (b.size() - 1);
  while ((i >= 0)) {
    auto d = b[i];
    if ((d == -1)) {
      r = (r + std::string("-"));
    } else {
      if ((d == 0)) {
        r = (r + std::string("0"));
      } else {
        r = (r + std::string("+"));
      }
    }
    i = (i - 1);
  }
  return r;
}

auto btInt(int i) {
  if ((i == 0)) {
    return std::vector<int>{};
  }
  auto n = i;
  auto b = std::vector<int>{};
  while ((n != 0)) {
    auto m = (n % 3);
    n = std::stoi(((n / 3)));
    if ((m == 2)) {
      m = -1;
      n = (n + 1);
    } else {
      if ((m == -2)) {
        m = 1;
        n = (n - 1);
      }
    }
    b.push_back(m);
  }
  return b;
}

int btToInt(auto b) {
  auto r = 0;
  auto pt = 1;
  auto i = 0;
  while ((i < b.size())) {
    r = (r + (b[i] * pt));
    pt = (pt * 3);
    i = (i + 1);
  }
  return r;
}

auto btNeg(auto b) {
  auto r = std::vector<int>{};
  auto i = 0;
  while ((i < b.size())) {
    r.push_back((-b[i]));
    i = (i + 1);
  }
  return r;
}

auto btAdd(auto a, auto b) { return btInt((btToInt(a) + btToInt(b))); }

auto btMul(auto a, auto b) { return btInt((btToInt(a) * btToInt(b))); }

std::string padLeft(std::string s, int w) {
  auto r = s;
  while ((r.size() < w)) {
    r = (std::string(" ") + r);
  }
  return r;
}

auto show(std::string label, auto b) {
  auto l = padLeft(label, 7);
  auto bs = padLeft(btToString(b), 12);
  auto is = padLeft(std::to_string(btToInt(b)), 7);
  std::cout << ((((l + std::string(" ")) + bs) + std::string(" ")) + is)
            << std::endl;
}

auto main() {
  auto ares = btString(std::string("+-0++0+"));
  auto a = ares[std::string("bt")];
  auto b = btInt(-436);
  auto cres = btString(std::string("+-++-"));
  auto c = cres[std::string("bt")];
  show(std::string("a:"), a);
  show(std::string("b:"), b);
  show(std::string("c:"), c);
  show(std::string("a(b-c):"), btMul(a, btAdd(b, btNeg(c))));
}

int main() {
  main();
  return 0;
}
