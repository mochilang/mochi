// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:11Z
#include <iostream>
#include <string>
#include <vector>

int indexOf(std::string s, std::string ch) {
  auto i = 0;
  while ((i < s.size())) {
    if ((std::string(s).substr(i, ((i + 1)) - (i)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}

int ord(std::string ch) {
  auto upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  auto lower = std::string("abcdefghijklmnopqrstuvwxyz");
  auto idx = indexOf(upper, ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  idx = indexOf(lower, ch);
  if ((idx >= 0)) {
    return (97 + idx);
  }
  return 0;
}

std::string chr(int n) {
  auto upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  auto lower = std::string("abcdefghijklmnopqrstuvwxyz");
  if (((n >= 65) && (n < 91))) {
    return std::string(upper).substr((n - 65), ((n - 64)) - ((n - 65)));
  }
  if (((n >= 97) && (n < 123))) {
    return std::string(lower).substr((n - 97), ((n - 96)) - ((n - 97)));
  }
  return std::string("?");
}

std::string shiftRune(std::string r, int k) {
  if (((r >= std::string("a")) && (r <= std::string("z")))) {
    return chr(((((((ord(r) - 97) + k)) % 26)) + 97));
  }
  if (((r >= std::string("A")) && (r <= std::string("Z")))) {
    return chr(((((((ord(r) - 65) + k)) % 26)) + 65));
  }
  return r;
}

std::string encipher(std::string s, int k) {
  auto out = std::string("");
  auto i = 0;
  while ((i < s.size())) {
    out = (out + shiftRune(std::string(s).substr(i, ((i + 1)) - (i)), k));
    i = (i + 1);
  }
  return out;
}

std::string decipher(std::string s, int k) {
  return encipher(s, (((26 - (k % 26))) % 26));
}

auto main() {
  auto pt = std::string("The five boxing wizards jump quickly");
  std::cout << (std::string("Plaintext: ") + pt) << std::endl;
  for (auto key : std::vector<int>{0, 1, 7, 25, 26}) {
    if (((key < 1) || (key > 25))) {
      std::cout << ((std::string("Key ") + std::to_string(key)) +
                    std::string(" invalid"))
                << std::endl;
      continue;
    }
    auto ct = encipher(pt, key);
    std::cout << (std::string("Key ") + std::to_string(key)) << std::endl;
    std::cout << (std::string("  Enciphered: ") + ct) << std::endl;
    std::cout << (std::string("  Deciphered: ") + decipher(ct, key))
              << std::endl;
  }
}

int main() {
  main();
  return 0;
}
