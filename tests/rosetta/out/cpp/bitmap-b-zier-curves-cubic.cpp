// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:10Z
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

struct Pixel {
  int r;
  int g;
  int b;
};
auto b3Seg = 30;

Pixel pixelFromRgb(int rgb) {
  auto r = std::stoi(((((rgb / 65536)) % 256)));
  auto g = std::stoi(((((rgb / 256)) % 256)));
  auto b = std::stoi(((rgb % 256)));
  return Pixel{r, g, b};
}

auto newBitmap(int cols, int rows) {
  auto d = std::vector<int>{};
  auto y = 0;
  while ((y < rows)) {
    auto row = std::vector<int>{};
    auto x = 0;
    while ((x < cols)) {
      row.push_back(Pixel{0, 0, 0});
      x = (x + 1);
    }
    d.push_back(row);
    y = (y + 1);
  }
  return std::unordered_map<std::string, decltype(cols)>{
      {std::string("cols"), cols},
      {std::string("rows"), rows},
      {std::string("data"), d}};
}

auto setPx(auto b, int x, int y, Pixel p) {
  auto cols = std::stoi(b[std::string("cols")]);
  auto rows = std::stoi(b[std::string("rows")]);
  if (((((x >= 0) && (x < cols)) && (y >= 0)) && (y < rows))) {
    b[std::string("data")][y][x] = p;
  }
}

auto fill(auto b, Pixel p) {
  auto cols = std::stoi(b[std::string("cols")]);
  auto rows = std::stoi(b[std::string("rows")]);
  auto y = 0;
  while ((y < rows)) {
    auto x = 0;
    while ((x < cols)) {
      b[std::string("data")][y][x] = p;
      x = (x + 1);
    }
    y = (y + 1);
  }
}

auto fillRgb(auto b, int rgb) { fill(b, pixelFromRgb(rgb)); }

auto line(auto b, int x0, int y0, int x1, int y1, Pixel p) {
  auto dx = (x1 - x0);
  if ((dx < 0)) {
    dx = (-dx);
  }
  auto dy = (y1 - y0);
  if ((dy < 0)) {
    dy = (-dy);
  }
  auto sx = -1;
  if ((x0 < x1)) {
    sx = 1;
  }
  auto sy = -1;
  if ((y0 < y1)) {
    sy = 1;
  }
  auto err = (dx - dy);
  while (true) {
    setPx(b, x0, y0, p);
    if (((x0 == x1) && (y0 == y1))) {
      break;
    }
    auto e2 = (2 * err);
    if ((e2 > ((0 - dy)))) {
      err = (err - dy);
      x0 = (x0 + sx);
    }
    if ((e2 < dx)) {
      err = (err + dx);
      y0 = (y0 + sy);
    }
  }
}

auto bezier3(auto b, int x1, int y1, int x2, int y2, int x3, int y3, int x4,
             int y4, Pixel p) {
  auto px = std::vector<int>{};
  auto py = std::vector<int>{};
  auto i = 0;
  while ((i <= b3Seg)) {
    px.push_back(0);
    py.push_back(0);
    i = (i + 1);
  }
  auto fx1 = x1;
  auto fy1 = y1;
  auto fx2 = x2;
  auto fy2 = y2;
  auto fx3 = x3;
  auto fy3 = y3;
  auto fx4 = x4;
  auto fy4 = y4;
  i = 0;
  while ((i <= b3Seg)) {
    auto d = ((i) / (b3Seg));
    auto a = (1 - d);
    auto bcoef = (a * a);
    auto ccoef = (d * d);
    auto a2 = (a * bcoef);
    auto b2 = ((3 * bcoef) * d);
    auto c2 = ((3 * a) * ccoef);
    auto d2 = (ccoef * d);
    px[i] =
        std::stoi((((((a2 * fx1) + (b2 * fx2)) + (c2 * fx3)) + (d2 * fx4))));
    py[i] =
        std::stoi((((((a2 * fy1) + (b2 * fy2)) + (c2 * fy3)) + (d2 * fy4))));
    i = (i + 1);
  }
  auto x0 = px[0];
  auto y0 = py[0];
  i = 1;
  while ((i <= b3Seg)) {
    auto x = px[i];
    auto y = py[i];
    line(b, x0, y0, x, y, p);
    x0 = x;
    y0 = y;
    i = (i + 1);
  }
}

int main() {
  auto b = newBitmap(400, 300);
  fillRgb(b, 16773055);
  bezier3(b, 20, 200, 700, 50, -300, 50, 380, 150, pixelFromRgb(4165615));
  return 0;
}
