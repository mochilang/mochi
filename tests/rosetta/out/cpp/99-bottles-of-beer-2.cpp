// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <string>
#include <vector>

auto fields(std::string s) {
  auto words = std::vector<int>{};
  auto cur = std::string("");
  auto i = 0;
  while ((i < s.size())) {
    auto ch = std::string(s).substr(i, ((i + 1)) - (i));
    if ((((ch == std::string(" ")) || (ch == std::string("\n"))) ||
         (ch == std::string("\t")))) {
      if ((cur.size() > 0)) {
        words.push_back(cur);
        cur = std::string("");
      }
    } else {
      cur = (cur + ch);
    }
    i = (i + 1);
  }
  if ((cur.size() > 0)) {
    words.push_back(cur);
  }
  return words;
}

std::string join(auto xs, std::string sep) {
  auto res = std::string("");
  auto i = 0;
  while ((i < xs.size())) {
    if ((i > 0)) {
      res = (res + sep);
    }
    res = (res + xs[i]);
    i = (i + 1);
  }
  return res;
}

std::string numberName(int n) {
  std::vector<std::string> small = {
      std::string("no"),       std::string("one"),
      std::string("two"),      std::string("three"),
      std::string("four"),     std::string("five"),
      std::string("six"),      std::string("seven"),
      std::string("eight"),    std::string("nine"),
      std::string("ten"),      std::string("eleven"),
      std::string("twelve"),   std::string("thirteen"),
      std::string("fourteen"), std::string("fifteen"),
      std::string("sixteen"),  std::string("seventeen"),
      std::string("eighteen"), std::string("nineteen")};
  std::vector<std::string> tens = {
      std::string("ones"),   std::string("ten"),     std::string("twenty"),
      std::string("thirty"), std::string("forty"),   std::string("fifty"),
      std::string("sixty"),  std::string("seventy"), std::string("eighty"),
      std::string("ninety")};
  if ((n < 0)) {
    return std::string("");
  }
  if ((n < 20)) {
    return small[n];
  }
  if ((n < 100)) {
    auto t = tens[std::stoi(((n / 10)))];
    auto s = (n % 10);
    if ((s > 0)) {
      t = ((t + std::string(" ")) + small[s]);
    }
    return t;
  }
  return std::string("");
}

std::string pluralizeFirst(std::string s, int n) {
  if ((n == 1)) {
    return s;
  }
  auto w = fields(s);
  if ((w.size() > 0)) {
    w[0] = (w[0] + std::string("s"));
  }
  return join(w, std::string(" "));
}

int randInt(int seed, int n) {
  auto next = ((((seed * 1664525) + 1013904223)) % 2147483647);
  return (next % n);
}

std::string slur(std::string p, int d) {
  if ((p.size() <= 2)) {
    return p;
  }
  auto a = std::vector<int>{};
  auto i = 1;
  while ((i < (p.size() - 1))) {
    a.push_back(std::string(p).substr(i, ((i + 1)) - (i)));
    i = (i + 1);
  }
  auto idx = (a.size() - 1);
  auto seed = d;
  while ((idx >= 1)) {
    seed = ((((seed * 1664525) + 1013904223)) % 2147483647);
    if (((seed % 100) >= d)) {
      auto j = (seed % ((idx + 1)));
      auto tmp = a[idx];
      a[idx] = a[j];
      a[j] = tmp;
    }
    idx = (idx - 1);
  }
  auto s = std::string(p).substr(0, (1) - (0));
  auto k = 0;
  while ((k < a.size())) {
    s = (s + a[k]);
    k = (k + 1);
  }
  s = (s +
       std::string(p).substr((p.size() - 1), (p.size()) - ((p.size() - 1))));
  auto w = fields(s);
  return join(w, std::string(" "));
}

auto main() {
  auto i = 99;
  while ((i > 0)) {
    std::cout << ((((slur(numberName(i), i) + std::string(" ")) +
                    pluralizeFirst(slur(std::string("bottle of"), i), i)) +
                   std::string(" ")) +
                  slur(std::string("beer on the wall"), i))
              << std::endl;
    std::cout << ((((slur(numberName(i), i) + std::string(" ")) +
                    pluralizeFirst(slur(std::string("bottle of"), i), i)) +
                   std::string(" ")) +
                  slur(std::string("beer"), i))
              << std::endl;
    std::cout << ((((slur(std::string("take one"), i) + std::string(" ")) +
                    slur(std::string("down"), i)) +
                   std::string(" ")) +
                  slur(std::string("pass it around"), i))
              << std::endl;
    std::cout << ((((slur(numberName((i - 1)), i) + std::string(" ")) +
                    pluralizeFirst(slur(std::string("bottle of"), i),
                                   (i - 1))) +
                   std::string(" ")) +
                  slur(std::string("beer on the wall"), i))
              << std::endl;
    i = (i - 1);
  }
}

int main() {
  main();
  return 0;
}
