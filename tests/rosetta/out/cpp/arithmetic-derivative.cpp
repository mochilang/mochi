// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:07Z
#include <iostream>
#include <string>
#include <vector>

auto primeFactors(int n) {
  auto factors = std::vector<int>{};
  auto x = n;
  while (((x % 2) == 0)) {
    factors.push_back(2);
    x = std::stoi(((x / 2)));
  }
  auto p = 3;
  while (((p * p) <= x)) {
    while (((x % p) == 0)) {
      factors.push_back(p);
      x = std::stoi(((x / p)));
    }
    p = (p + 2);
  }
  if ((x > 1)) {
    factors.push_back(x);
  }
  return factors;
}

std::string repeat(std::string ch, int n) {
  auto s = std::string("");
  auto i = 0;
  while ((i < n)) {
    s = (s + ch);
    i = (i + 1);
  }
  return s;
}

float D(float n) {
  if ((n < 0)) {
    return (-D((-n)));
  }
  if ((n < 2)) {
    return 0;
  }
  auto factors = std::vector<int>{};
  if ((n < 1e+19)) {
    factors = primeFactors(std::stoi((n)));
  } else {
    auto g = std::stoi(((n / 100)));
    factors = primeFactors(g);
    factors.push_back(2);
    factors.push_back(2);
    factors.push_back(5);
    factors.push_back(5);
  }
  auto c = factors.size();
  if ((c == 1)) {
    return 1;
  }
  if ((c == 2)) {
    return ((factors[0] + factors[1]));
  }
  auto d = (n / (factors[0]));
  return ((D(d) * (factors[0])) + d);
}

std::string pad(int n) {
  auto s = std::to_string(n);
  while ((s.size() < 4)) {
    s = (std::string(" ") + s);
  }
  return s;
}

auto main() {
  auto vals = std::vector<int>{};
  auto n = -99;
  while ((n < 101)) {
    vals.push_back(std::stoi((D(n))));
    n = (n + 1);
  }
  auto i = 0;
  while ((i < vals.size())) {
    auto line = std::string("");
    auto j = 0;
    while ((j < 10)) {
      line = (line + pad(vals[(i + j)]));
      if ((j < 9)) {
        line = (line + std::string(" "));
      }
      j = (j + 1);
    }
    std::cout << line << std::endl;
    i = (i + 10);
  }
  auto pow = 1;
  auto m = 1;
  while ((m < 21)) {
    pow = (pow * 10);
    auto exp = std::to_string(m);
    if ((exp.size() < 2)) {
      exp = (exp + std::string(" "));
    }
    auto res = (std::to_string(m) + repeat(std::string("0"), (m - 1)));
    std::cout << (((std::string("D(10^") + exp) + std::string(") / 7 = ")) +
                  res)
              << std::endl;
    m = (m + 1);
  }
}

int main() {
  main();
  return 0;
}
