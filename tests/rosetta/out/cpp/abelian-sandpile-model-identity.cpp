// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <string>
#include <vector>

auto neighborsList() {
  return std::vector<decltype(std::vector<int>{1, 3})>{
      std::vector<int>{1, 3},       std::vector<int>{0, 2, 4},
      std::vector<int>{1, 5},       std::vector<int>{0, 4, 6},
      std::vector<int>{1, 3, 5, 7}, std::vector<int>{2, 4, 8},
      std::vector<int>{3, 7},       std::vector<int>{4, 6, 8},
      std::vector<int>{5, 7}};
}

auto plus(auto a, auto b) {
  auto res = std::vector<int>{};
  auto i = 0;
  while ((i < a.size())) {
    res.push_back((a[i] + b[i]));
    i = (i + 1);
  }
  return res;
}

bool isStable(auto p) {
  for (auto v : p) {
    if ((v > 3)) {
      return false;
    }
  }
  return true;
}

int topple(auto p) {
  auto neighbors = neighborsList();
  auto i = 0;
  while ((i < p.size())) {
    if ((p[i] > 3)) {
      p[i] = (p[i] - 4);
      auto nbs = neighbors[i];
      for (auto j : nbs) {
        p[j] = (p[j] + 1);
      }
      return 0;
    }
    i = (i + 1);
  }
  return 0;
}

std::string pileString(auto p) {
  auto s = std::string("");
  auto r = 0;
  while ((r < 3)) {
    auto c = 0;
    while ((c < 3)) {
      s = ((s + std::to_string(p[((3 * r) + c)])) + std::string(" "));
      c = (c + 1);
    }
    s = (s + std::string("\n"));
    r = (r + 1);
  }
  return s;
}

int main() {
  std::cout << std::string("Avalanche of topplings:\n") << std::endl;
  std::vector<int> s4 = {4, 3, 3, 3, 1, 2, 0, 2, 3};
  std::cout << pileString(s4) << std::endl;
  while ((!isStable(s4))) {
    topple(s4);
    std::cout << pileString(s4) << std::endl;
  }
  std::cout << std::string("Commutative additions:\n") << std::endl;
  std::vector<int> s1 = {1, 2, 0, 2, 1, 1, 0, 1, 3};
  std::vector<int> s2 = {2, 1, 3, 1, 0, 1, 0, 1, 0};
  auto s3_a = plus(s1, s2);
  while ((!isStable(s3_a))) {
    topple(s3_a);
  }
  auto s3_b = plus(s2, s1);
  while ((!isStable(s3_b))) {
    topple(s3_b);
  }
  std::cout << ((((pileString(s1) + std::string("\nplus\n\n")) +
                  pileString(s2)) +
                 std::string("\nequals\n\n")) +
                pileString(s3_a))
            << std::endl;
  std::cout << (((((std::string("and\n\n") + pileString(s2)) +
                   std::string("\nplus\n\n")) +
                  pileString(s1)) +
                 std::string("\nalso equals\n\n")) +
                pileString(s3_b))
            << std::endl;
  std::cout << std::string("Addition of identity sandpile:\n") << std::endl;
  std::vector<int> s3 = {3, 3, 3, 3, 3, 3, 3, 3, 3};
  std::vector<int> s3_id = {2, 1, 2, 1, 0, 1, 2, 1, 2};
  auto s4b = plus(s3, s3_id);
  while ((!isStable(s4b))) {
    topple(s4b);
  }
  std::cout << ((((pileString(s3) + std::string("\nplus\n\n")) +
                  pileString(s3_id)) +
                 std::string("\nequals\n\n")) +
                pileString(s4b))
            << std::endl;
  std::cout << std::string("Addition of identities:\n") << std::endl;
  auto s5 = plus(s3_id, s3_id);
  while ((!isStable(s5))) {
    topple(s5);
  }
  std::cout << ((((pileString(s3_id) + std::string("\nplus\n\n")) +
                  pileString(s3_id)) +
                 std::string("\nequals\n\n")) +
                pileString(s5))
            << std::endl;
  return 0;
}
