// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:09Z
#include <iostream>
#include <string>
#include <vector>

float floorf(float x) { return (std::stoi(x)); }

int indexOf(std::string s, std::string ch) {
  auto i = 0;
  while ((i < s.size())) {
    if ((std::string(s).substr(i, ((i + 1)) - (i)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}

std::string fmtF3(float x) {
  auto y = (floorf(((x * 1000) + 0.5)) / 1000);
  auto s = std::to_string(y);
  auto dot = indexOf(s, std::string("."));
  if ((dot == -1)) {
    s = (s + std::string(".000"));
  } else {
    auto decs = ((s.size() - dot) - 1);
    if ((decs > 3)) {
      s = std::string(s).substr(0, ((dot + 4)) - (0));
    } else {
      while ((decs < 3)) {
        s = (s + std::string("0"));
        decs = (decs + 1);
      }
    }
  }
  return s;
}

std::string padFloat3(float x, int width) {
  auto s = fmtF3(x);
  while ((s.size() < width)) {
    s = (std::string(" ") + s);
  }
  return s;
}

auto fib1000() {
  auto a = 0;
  auto b = 1;
  auto res = std::vector<int>{};
  auto i = 0;
  while ((i < 1000)) {
    res.push_back(b);
    auto t = b;
    b = (b + a);
    a = t;
    i = (i + 1);
  }
  return res;
}

int leadingDigit(float x) {
  if ((x < 0)) {
    x = (-x);
  }
  while ((x >= 10)) {
    x = (x / 10);
  }
  while (((x > 0) && (x < 1))) {
    x = (x * 10);
  }
  return std::stoi(x);
}

auto show(auto nums, std::string title) {
  std::vector<int> counts = {0, 0, 0, 0, 0, 0, 0, 0, 0};
  for (auto n : nums) {
    auto d = leadingDigit(n);
    if (((d >= 1) && (d <= 9))) {
      counts[(d - 1)] = (counts[(d - 1)] + 1);
    }
  }
  std::vector<double> preds = {0.301, 0.176, 0.125, 0.097, 0.079,
                               0.067, 0.058, 0.051, 0.046};
  auto total = nums.size();
  std::cout << title << std::endl;
  std::cout << std::string("Digit  Observed  Predicted") << std::endl;
  auto i = 0;
  while ((i < 9)) {
    auto obs = ((counts[i]) / (total));
    auto line =
        (((((std::string("  ") + std::to_string((i + 1))) + std::string("  ")) +
           padFloat3(obs, 9)) +
          std::string("  ")) +
         padFloat3(preds[i], 8));
    std::cout << line << std::endl;
    i = (i + 1);
  }
}

auto main() { show(fib1000(), std::string("First 1000 Fibonacci numbers")); }

int main() {
  main();
  return 0;
}
