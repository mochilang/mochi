// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:07Z
#include <iostream>
#include <string>
#include <vector>

auto sieve(int limit) {
  auto spf = std::vector<int>{};
  auto i = 0;
  while ((i <= limit)) {
    spf.push_back(0);
    i = (i + 1);
  }
  i = 2;
  while ((i <= limit)) {
    if ((spf[i] == 0)) {
      spf[i] = i;
      if (((i * i) <= limit)) {
        auto j = (i * i);
        while ((j <= limit)) {
          if ((spf[j] == 0)) {
            spf[j] = i;
          }
          j = (j + i);
        }
      }
    }
    i = (i + 1);
  }
  return spf;
}

auto primesFrom(auto spf, int limit) {
  auto primes = std::vector<int>{};
  auto i = 3;
  while ((i <= limit)) {
    if ((spf[i] == i)) {
      primes.push_back(i);
    }
    i = (i + 1);
  }
  return primes;
}

std::string pad3(int n) {
  auto s = std::to_string(n);
  while ((s.size() < 3)) {
    s = (std::string(" ") + s);
  }
  return s;
}

std::string commatize(int n) {
  auto s = std::to_string(n);
  auto out = std::string("");
  auto i = (s.size() - 1);
  auto c = 0;
  while ((i >= 0)) {
    out = (std::string(s).substr(i, ((i + 1)) - (i)) + out);
    c = (c + 1);
    if ((((c % 3) == 0) && (i > 0))) {
      out = (std::string(",") + out);
    }
    i = (i - 1);
  }
  return out;
}

int primeCount(auto primes, int last, auto spf) {
  auto lo = 0;
  auto hi = primes.size();
  while ((lo < hi)) {
    auto mid = std::stoi(((((lo + hi)) / 2)));
    if ((primes[mid] < last)) {
      lo = (mid + 1);
    } else {
      hi = mid;
    }
  }
  auto count = (lo + 1);
  if ((spf[last] != last)) {
    count = (count - 1);
  }
  return count;
}

auto arithmeticNumbers(int limit, auto spf) {
  auto arr = std::vector<int>{1};
  auto n = 3;
  while ((arr.size() < limit)) {
    if ((spf[n] == n)) {
      arr.push_back(n);
    } else {
      auto x = n;
      auto sigma = 1;
      auto tau = 1;
      while ((x > 1)) {
        auto p = spf[x];
        if ((p == 0)) {
          p = x;
        }
        auto cnt = 0;
        auto power = p;
        auto sum = 1;
        while (((x % p) == 0)) {
          x = (x / p);
          cnt = (cnt + 1);
          sum = (sum + power);
          power = (power * p);
        }
        sigma = (sigma * sum);
        tau = (tau * ((cnt + 1)));
      }
      if (((sigma % tau) == 0)) {
        arr.push_back(n);
      }
    }
    n = (n + 1);
  }
  return arr;
}

auto main() {
  auto limit = 1228663;
  auto spf = sieve(limit);
  auto primes = primesFrom(spf, limit);
  auto arr = arithmeticNumbers(1000000, spf);
  std::cout << std::string("The first 100 arithmetic numbers are:")
            << std::endl;
  auto i = 0;
  while ((i < 100)) {
    auto line = std::string("");
    auto j = 0;
    while ((j < 10)) {
      line = (line + pad3(arr[(i + j)]));
      if ((j < 9)) {
        line = (line + std::string(" "));
      }
      j = (j + 1);
    }
    std::cout << line << std::endl;
    i = (i + 10);
  }
  for (auto x : std::vector<int>{1000, 10000, 100000, 1000000}) {
    auto last = arr[(x - 1)];
    auto lastc = commatize(last);
    std::cout << (((std::string("\nThe ") + commatize(x)) +
                   std::string("th arithmetic number is: ")) +
                  lastc)
              << std::endl;
    auto pc = primeCount(primes, last, spf);
    auto comp = ((x - pc) - 1);
    std::cout << ((((std::string("The count of such numbers <= ") + lastc) +
                    std::string(" which are composite is ")) +
                   commatize(comp)) +
                  std::string("."))
              << std::endl;
  }
}

int main() {
  main();
  return 0;
}
