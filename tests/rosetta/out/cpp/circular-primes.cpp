// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:14Z
#include <iostream>
#include <string>
#include <vector>

bool isPrime(int n) {
  if ((n < 2)) {
    return false;
  }
  if (((n % 2) == 0)) {
    return (n == 2);
  }
  if (((n % 3) == 0)) {
    return (n == 3);
  }
  auto d = 5;
  while (((d * d) <= n)) {
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 2);
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 4);
  }
  return true;
}

bool isCircular(int n) {
  auto nn = n;
  auto pow = 1;
  while ((nn > 0)) {
    pow = (pow * 10);
    nn = (nn / 10);
  }
  nn = n;
  while (true) {
    nn = (nn * 10);
    auto f = (nn / pow);
    nn = (nn + (f * ((1 - pow))));
    if ((nn == n)) {
      break;
    }
    if ((!isPrime(nn))) {
      return false;
    }
  }
  return true;
}

std::string showList(auto xs) {
  auto out = std::string("[");
  auto i = 0;
  while ((i < xs.size())) {
    out = (out + std::to_string(xs[i]));
    if ((i < (xs.size() - 1))) {
      out = (out + std::string(", "));
    }
    i = (i + 1);
  }
  return (out + std::string("]"));
}

int main() {
  auto circs = std::vector<int>{};
  std::cout << std::string("The first 19 circular primes are:") << std::endl;
  std::vector<int> digits = {1, 3, 7, 9};
  std::vector<int> q = {1, 2, 3, 5, 7, 9};
  std::vector<int> fq = {1, 2, 3, 5, 7, 9};
  auto count = 0;
  while (true) {
    auto f = q[0];
    auto fd = fq[0];
    if ((isPrime(f) && isCircular(f))) {
      circs.push_back(f);
      count = (count + 1);
      if ((count == 19)) {
        break;
      }
    }
    q = ([&](auto v) {
      return std::vector<decltype(q[0])>(v.begin() + 1, v.begin() + q.size());
    })(q);
    fq = ([&](auto v) {
      return std::vector<decltype(fq[0])>(v.begin() + 1, v.begin() + fq.size());
    })(fq);
    if (((f != 2) && (f != 5))) {
      for (auto d : digits) {
        q.push_back(((f * 10) + d));
        fq.push_back(fd);
      }
    }
  }
  std::cout << showList(circs) << std::endl;
  std::cout << std::string(
                   "\nThe next 4 circular primes, in repunit format, are:")
            << std::endl;
  std::cout << std::string("[R(19) R(23) R(317) R(1031)]") << std::endl;
  std::cout << std::string(
                   "\nThe following repunits are probably circular primes:")
            << std::endl;
  for (auto i : std::vector<int>{5003, 9887, 15073, 25031, 35317, 49081}) {
    std::cout << ((std::string("R(") + std::to_string(i)) +
                  std::string(") : true"))
              << std::endl;
  }
  return 0;
}
