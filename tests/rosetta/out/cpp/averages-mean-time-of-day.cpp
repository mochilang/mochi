// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:08Z
#include <iostream>
#include <string>
#include <vector>

auto PI = 3.141592653589793;

float sinApprox(float x) {
  auto term = x;
  auto sum = x;
  auto n = 1;
  while ((n <= 8)) {
    auto denom = ((((2 * n)) * (((2 * n) + 1))));
    term = ((((-term) * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}

float cosApprox(float x) {
  auto term = 1;
  auto sum = 1;
  auto n = 1;
  while ((n <= 8)) {
    auto denom = (((((2 * n) - 1)) * ((2 * n))));
    term = ((((-term) * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}

float atanApprox(float x) {
  if ((x > 1)) {
    return ((PI / 2) - (x / (((x * x) + 0.28))));
  }
  if ((x < (-1))) {
    return (((-PI) / 2) - (x / (((x * x) + 0.28))));
  }
  return (x / ((1 + ((0.28 * x) * x))));
}

float atan2Approx(float y, float x) {
  if ((x > 0)) {
    return atanApprox((y / x));
  }
  if ((x < 0)) {
    if ((y >= 0)) {
      return (atanApprox((y / x)) + PI);
    }
    return (atanApprox((y / x)) - PI);
  }
  if ((y > 0)) {
    return (PI / 2);
  }
  if ((y < 0)) {
    return ((-PI) / 2);
  }
  return 0;
}

int digit(std::string ch) {
  auto digits = std::string("0123456789");
  auto i = 0;
  while ((i < digits.size())) {
    if ((std::string(digits).substr(i, ((i + 1)) - (i)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return 0;
}

int parseTwo(std::string s, int idx) {
  return ((digit(std::string(s).substr(idx, ((idx + 1)) - (idx))) * 10) +
          digit(std::string(s).substr((idx + 1), ((idx + 2)) - ((idx + 1)))));
}

float parseSec(std::string s) {
  auto h = parseTwo(s, 0);
  auto m = parseTwo(s, 3);
  auto sec = parseTwo(s, 6);
  return ((((((h * 60) + m)) * 60) + sec));
}

std::string pad(int n) {
  if ((n < 10)) {
    return (std::string("0") + std::to_string(n));
  }
  return std::to_string(n);
}

std::string meanTime(auto times) {
  auto ssum = 0;
  auto csum = 0;
  auto i = 0;
  while ((i < times.size())) {
    auto sec = parseSec(times[i]);
    auto ang = (((sec * 2) * PI) / 86400);
    ssum = (ssum + sinApprox(ang));
    csum = (csum + cosApprox(ang));
    i = (i + 1);
  }
  auto theta = atan2Approx(ssum, csum);
  auto frac = (theta / ((2 * PI)));
  while ((frac < 0)) {
    frac = (frac + 1);
  }
  auto total = (frac * 86400);
  auto si = std::stoi(total);
  auto h = std::stoi(((si / 3600)));
  auto m = std::stoi(((((si % 3600)) / 60)));
  auto s = std::stoi(((si % 60)));
  return ((((pad(h) + std::string(":")) + pad(m)) + std::string(":")) + pad(s));
}

auto main() {
  std::vector<std::string> inputs = {
      std::string("23:00:17"), std::string("23:40:20"), std::string("00:12:45"),
      std::string("00:17:19")};
  std::cout << meanTime(inputs) << std::endl;
}

int main() {
  main();
  return 0;
}
