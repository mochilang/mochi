// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:05Z
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

auto split(std::string s, std::string sep) {
  auto parts = std::vector<int>{};
  auto cur = std::string("");
  auto i = 0;
  while ((i < s.size())) {
    if ((((sep.size() > 0) && ((i + sep.size()) <= s.size())) &&
         (std::string(s).substr(i, ((i + sep.size())) - (i)) == sep))) {
      parts.push_back(cur);
      cur = std::string("");
      i = (i + sep.size());
    } else {
      cur = (cur + std::string(s).substr(i, ((i + 1)) - (i)));
      i = (i + 1);
    }
  }
  parts.push_back(cur);
  return parts;
}

auto rstripEmpty(auto words) {
  auto n = words.size();
  while (((n > 0) && (words[(n - 1)] == std::string("")))) {
    n = (n - 1);
  }
  return std::string(words).substr(0, (n) - (0));
}

std::string spaces(int n) {
  auto out = std::string("");
  auto i = 0;
  while ((i < n)) {
    out = (out + std::string(" "));
    i = (i + 1);
  }
  return out;
}

std::string pad(std::string word, int width, int align) {
  auto diff = (width - word.size());
  if ((align == 0)) {
    return (word + spaces(diff));
  }
  if ((align == 2)) {
    return (spaces(diff) + word);
  }
  auto left = std::stoi(((diff / 2)));
  auto right = (diff - left);
  return ((spaces(left) + word) + spaces(right));
}

auto newFormatter(std::string text) {
  auto lines = split(text, std::string("\n"));
  auto fmtLines = std::vector<int>{};
  auto width = std::vector<int>{};
  auto i = 0;
  while ((i < lines.size())) {
    if ((lines[i].size() == 0)) {
      i = (i + 1);
      continue;
    }
    auto words = rstripEmpty(split(lines[i], std::string("$")));
    fmtLines.push_back(words);
    auto j = 0;
    while ((j < words.size())) {
      auto wlen = words[j].size();
      if ((j == width.size())) {
        width.push_back(wlen);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return std::unordered_map<std::string, decltype(fmtLines)>{
      {std::string("text"), fmtLines}, {std::string("width"), width}};
}

auto printFmt(auto f, int align) {
  auto lines = f[std::string("text")];
  auto width = f[std::string("width")];
  auto i = 0;
  while ((i < lines.size())) {
    auto words = lines[i];
    auto line = std::string("");
    auto j = 0;
    while ((j < words.size())) {
      line = ((line + pad(words[j], width[j], align)) + std::string(" "));
      j = (j + 1);
    }
    std::cout << line << std::endl;
    i = (i + 1);
  }
  std::cout << std::string("") << std::endl;
}

int main() {
  auto text = std::string(
      "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n"
      "are$delineated$by$a$single$'dollar'$character,$write$a$program\n"
      "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n"
      "column$are$separated$by$at$least$one$space.\n"
      "Further,$allow$for$each$word$in$a$column$to$be$either$left\n"
      "justified,$right$justified,$or$center$justified$within$its$column.");
  auto f = newFormatter(text);
  printFmt(f, 0);
  printFmt(f, 1);
  printFmt(f, 2);
  return 0;
}
