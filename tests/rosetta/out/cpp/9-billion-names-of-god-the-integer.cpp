// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <string>
#include <vector>

auto bigTrim(auto a) {
  auto n = ((int)a.size());
  while (((n > 1) && (a[(n - 1)] == 0))) {
    a = std::string(a).substr(0, ((n - 1)) - (0));
    n = (n - 1);
  }
  return a;
}

auto bigFromInt(int x) {
  if ((x == 0)) {
    return std::vector<int>{0};
  }
  auto digits = std::vector<int>{};
  auto n = x;
  while ((n > 0)) {
    digits.push_back((n % 10));
    n = (n / 10);
  }
  return digits;
}

auto bigAdd(auto a, auto b) {
  auto res = std::vector<int>{};
  auto carry = 0;
  auto i = 0;
  while ((((i < ((int)a.size())) || (i < ((int)b.size()))) || (carry > 0))) {
    auto av = 0;
    if ((i < ((int)a.size()))) {
      av = a[i];
    }
    auto bv = 0;
    if ((i < ((int)b.size()))) {
      bv = b[i];
    }
    auto s = ((av + bv) + carry);
    res.push_back((s % 10));
    carry = (s / 10);
    i = (i + 1);
  }
  return bigTrim(res);
}

auto bigSub(auto a, auto b) {
  auto res = std::vector<int>{};
  auto borrow = 0;
  auto i = 0;
  while ((i < ((int)a.size()))) {
    auto av = a[i];
    auto bv = 0;
    if ((i < ((int)b.size()))) {
      bv = b[i];
    }
    auto diff = ((av - bv) - borrow);
    if ((diff < 0)) {
      diff = (diff + 10);
      borrow = 1;
    } else {
      borrow = 0;
    }
    res.push_back(diff);
    i = (i + 1);
  }
  return bigTrim(res);
}

std::string bigToString(auto a) {
  auto s = std::string("");
  auto i = (((int)a.size()) - 1);
  while ((i >= 0)) {
    s = (s + std::to_string(a[i]));
    i = (i - 1);
  }
  return s;
}

int minInt(int a, int b) {
  if ((a < b)) {
    return a;
  } else {
    return b;
  }
}

auto cumu(int n) {
  auto cache = std::vector<decltype(std::vector<decltype(bigFromInt(1))>{
      bigFromInt(1)})>{std::vector<decltype(bigFromInt(1))>{bigFromInt(1)}};
  auto y = 1;
  while ((y <= n)) {
    auto row = std::vector<decltype(bigFromInt(0))>{bigFromInt(0)};
    auto x = 1;
    while ((x <= y)) {
      auto val = cache[(y - x)][minInt(x, (y - x))];
      row.push_back(bigAdd(row[(((int)row.size()) - 1)], val));
      x = (x + 1);
    }
    cache.push_back(row);
    y = (y + 1);
  }
  return cache[n];
}

auto row(int n) {
  auto e = cumu(n);
  auto out = std::vector<int>{};
  auto i = 0;
  while ((i < n)) {
    auto diff = bigSub(e[(i + 1)], e[i]);
    out.push_back(bigToString(diff));
    i = (i + 1);
  }
  return out;
}

int main() {
  std::cout << std::string("rows:") << std::endl;
  auto x = 1;
  while ((x < 11)) {
    auto r = row(x);
    auto line = std::string("");
    auto i = 0;
    while ((i < ((int)r.size()))) {
      line = (((line + std::string(" ")) + r[i]) + std::string(" "));
      i = (i + 1);
    }
    std::cout << line << std::endl;
    x = (x + 1);
  }
  std::cout << std::string("") << std::endl;
  std::cout << std::string("sums:") << std::endl;
  for (auto num : std::vector<int>{23, 123, 1234}) {
    auto r = cumu(num);
    std::cout << ((std::to_string(num) + std::string(" ")) +
                  bigToString(r[(((int)r.size()) - 1)]))
              << std::endl;
  }
  return 0;
}
