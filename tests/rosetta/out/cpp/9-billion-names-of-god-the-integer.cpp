// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
#include <any>
#include <iostream>
#include <string>
#include <vector>

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}
inline std::string __any_str(const std::any &a) {
  if (a.type() == typeid(int))
    return std::to_string(std::any_cast<int>(a));
  if (a.type() == typeid(double))
    return std::to_string(std::any_cast<double>(a));
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) ? "true" : "false";
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a);
  return "";
}

std::vector<int> bigTrim(std::vector<int> a) {
  auto n = ((int)a.size());
  while (((n > 1) && (a[(n - 1)] == 0))) {
    a = ([&](auto v) {
      return std::vector<std::decay_t<decltype(a[0])>>(v.begin() + 0,
                                                       v.begin() + (n - 1));
    })(a);
    n = (n - 1);
  }
  return a;
}

std::vector<int> bigFromInt(int x) {
  if ((x == 0)) {
    return std::vector<int>{0};
  }
  std::vector<int> digits = std::vector<>{};
  auto n = x;
  while ((n > 0)) {
    digits.push_back((n % 10));
    n = (n / 10);
  }
  return digits;
}

std::vector<int> bigAdd(std::vector<int> a, std::vector<int> b) {
  std::vector<int> res = std::vector<>{};
  auto carry = 0;
  auto i = 0;
  while ((((i < ((int)a.size())) || (i < ((int)b.size()))) || (carry > 0))) {
    auto av = 0;
    if ((i < ((int)a.size()))) {
      av = a[i];
    }
    auto bv = 0;
    if ((i < ((int)b.size()))) {
      bv = b[i];
    }
    auto s = ((av + bv) + carry);
    res.push_back((s % 10));
    carry = (s / 10);
    i = (i + 1);
  }
  return bigTrim(res);
}

std::vector<int> bigSub(std::vector<int> a, std::vector<int> b) {
  std::vector<int> res = std::vector<>{};
  auto borrow = 0;
  auto i = 0;
  while ((i < ((int)a.size()))) {
    std::vector<int> av = a[i];
    auto bv = 0;
    if ((i < ((int)b.size()))) {
      bv = b[i];
    }
    auto diff = ((av - bv) - borrow);
    if ((diff < 0)) {
      diff = (diff + 10);
      borrow = 1;
    } else {
      borrow = 0;
    }
    res.push_back(diff);
    i = (i + 1);
  }
  return bigTrim(res);
}

std::string bigToString(std::vector<int> a) {
  auto s = std::string("");
  auto i = (((int)a.size()) - 1);
  while ((i >= 0)) {
    s = (s + std::to_string(a[i]));
    i = (i - 1);
  }
  return s;
}

int minInt(int a, int b) {
  if ((a < b)) {
    return a;
  } else {
    return b;
  }
}

std::vector<std::vector<int>> cumu(int n) {
  std::vector<std::vector<std::vector<int>>> cache =
      std::vector<std::vector<std::any>>{std::vector<std::any>{bigFromInt(1)}};
  auto y = 1;
  while ((y <= n)) {
    std::vector<std::vector<int>> row = std::vector<std::any>{bigFromInt(0)};
    auto x = 1;
    while ((x <= y)) {
      std::vector<std::vector<std::any>> val =
          cache[(y - x)][minInt(x, (y - x))];
      row.push_back(bigAdd(row[(((int)row.size()) - 1)], val));
      x = (x + 1);
    }
    cache.push_back(row);
    y = (y + 1);
  }
  return cache[n];
}

std::vector<std::string> row(int n) {
  auto e = cumu(n);
  std::vector<std::string> out = std::vector<>{};
  auto i = 0;
  while ((i < n)) {
    auto diff = bigSub(e[(i + 1)], e[i]);
    out.push_back(bigToString(diff));
    i = (i + 1);
  }
  return out;
}

int main() {
  std::cout << std::string("rows:") << std::endl;
  auto x = 1;
  while ((x < 11)) {
    auto r = row(x);
    auto line = std::string("");
    auto i = 0;
    while ((i < ((int)r.size()))) {
      line = (((line + std::string(" ")) + r[i]) + std::string(" "));
      i = (i + 1);
    }
    std::cout << line << std::endl;
    x = (x + 1);
  }
  std::cout << std::string("") << std::endl;
  std::cout << std::string("sums:") << std::endl;
  for (auto num : std::vector<int>{23, 123, 1234}) {
    auto r = cumu(num);
    std::cout << ((std::to_string(num) + std::string(" ")) +
                  bigToString(r[(((int)r.size()) - 1)]))
              << std::endl;
  }
  return 0;
}
