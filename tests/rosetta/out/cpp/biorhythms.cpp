// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:10Z
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

float PI = 3.141592653589793;
float TWO_PI = 6.283185307179586;

float sinApprox(float x) {
  auto term = x;
  auto sum = x;
  auto n = 1;
  while ((n <= 8)) {
    auto denom = ((((2 * n)) * (((2 * n) + 1))));
    term = ((((-term) * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}

float floor(float x) {
  auto i = std::stoi(x);
  if (((i) > x)) {
    i = (i - 1);
  }
  return i;
}

float absFloat(float x) {
  if ((x < 0)) {
    return (-x);
  }
  return x;
}

int absInt(int n) {
  if ((n < 0)) {
    return (-n);
  }
  return n;
}

int parseIntStr(std::string str) {
  auto i = 0;
  auto neg = false;
  if (((str.size() > 0) &&
       (std::string(str).substr(0, (1) - (0)) == std::string("-")))) {
    neg = true;
    i = 1;
  }
  auto n = 0;
  auto digits = std::unordered_map<std::string, decltype(0)>{
      {std::string("0"), 0}, {std::string("1"), 1}, {std::string("2"), 2},
      {std::string("3"), 3}, {std::string("4"), 4}, {std::string("5"), 5},
      {std::string("6"), 6}, {std::string("7"), 7}, {std::string("8"), 8},
      {std::string("9"), 9}};
  while ((i < str.size())) {
    n = ((n * 10) + digits[std::string(str).substr(i, ((i + 1)) - (i))]);
    i = (i + 1);
  }
  if (neg) {
    n = (-n);
  }
  return n;
}

auto parseDate(std::string s) {
  auto y = parseIntStr(std::string(s).substr(0, (4) - (0)));
  auto m = parseIntStr(std::string(s).substr(5, (7) - (5)));
  auto d = parseIntStr(std::string(s).substr(8, (10) - (8)));
  return std::vector<decltype(y)>{y, m, d};
}

bool leap(int y) {
  if (((y % 400) == 0)) {
    return true;
  }
  if (((y % 100) == 0)) {
    return false;
  }
  return ((y % 4) == 0);
}

int daysInMonth(int y, int m) {
  auto feb = (leap(y) ? 29 : 28);
  std::vector<int> lengths = {31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  return lengths[(m - 1)];
}

auto addDays(int y, int m, int d, int n) {
  auto yy = y;
  auto mm = m;
  auto dd = d;
  if ((n >= 0)) {
    auto i = 0;
    while ((i < n)) {
      dd = (dd + 1);
      if ((dd > daysInMonth(yy, mm))) {
        dd = 1;
        mm = (mm + 1);
        if ((mm > 12)) {
          mm = 1;
          yy = (yy + 1);
        }
      }
      i = (i + 1);
    }
  } else {
    auto i = 0;
    while ((i > n)) {
      dd = (dd - 1);
      if ((dd < 1)) {
        mm = (mm - 1);
        if ((mm < 1)) {
          mm = 12;
          yy = (yy - 1);
        }
        dd = daysInMonth(yy, mm);
      }
      i = (i - 1);
    }
  }
  return std::vector<decltype(yy)>{yy, mm, dd};
}

std::string pad2(int n) {
  if ((n < 10)) {
    return (std::string("0") + std::to_string(n));
  }
  return std::to_string(n);
}

std::string dateString(int y, int m, int d) {
  return (
      (((std::to_string(y) + std::string("-")) + pad2(m)) + std::string("-")) +
      pad2(d));
}

int day(int y, int m, int d) {
  auto part1 = (367 * y);
  auto part2 =
      std::stoi(((((7 * (std::stoi(((y + ((((m + 9)) / 12)))))))) / 4)));
  auto part3 = std::stoi(((((275 * m)) / 9)));
  return ((((part1 - part2) + part3) + d) - 730530);
}

auto biorhythms(std::string birth, std::string target) {
  auto bparts = parseDate(birth);
  auto by = bparts[0];
  auto bm = bparts[1];
  auto bd = bparts[2];
  auto tparts = parseDate(target);
  auto ty = tparts[0];
  auto tm = tparts[1];
  auto td = tparts[2];
  auto diff = absInt((day(ty, tm, td) - day(by, bm, bd)));
  std::cout << (((std::string("Born ") + birth) + std::string(", Target ")) +
                target)
            << std::endl;
  std::cout << (std::string("Day ") + std::to_string(diff)) << std::endl;
  std::vector<std::string> cycles = {std::string("Physical day "),
                                     std::string("Emotional day"),
                                     std::string("Mental day   ")};
  std::vector<int> lengths = {23, 28, 33};
  std::vector<std::string> quadrants =
      std::vector<decltype(std::vector<std::string>{
          std::string("up and rising"), std::string("peak")})>{
          std::vector<std::string>{std::string("up and rising"),
                                   std::string("peak")},
          std::vector<std::string>{std::string("up but falling"),
                                   std::string("transition")},
          std::vector<std::string>{std::string("down and falling"),
                                   std::string("valley")},
          std::vector<std::string>{std::string("down but rising"),
                                   std::string("transition")}};
  auto i = 0;
  while ((i < 3)) {
    auto length = lengths[i];
    auto cycle = cycles[i];
    auto position = (diff % length);
    auto quadrant = (((position * 4)) / length);
    auto percent = sinApprox((((2 * PI) * (position)) / (length)));
    percent = (floor((percent * 1000)) / 10);
    auto description = std::string("");
    if ((percent > 95)) {
      description = std::string(" peak");
    }
    auto posStr = std::to_string(position);
    if ((position < 10)) {
      posStr = (std::string(" ") + posStr);
    }
    std::cout << (((cycle + posStr) + std::string(" : ")) + description)
              << std::endl;
    i = (i + 1);
  }
  std::cout << std::string("") << std::endl;
}

auto main() {
  std::vector<std::string> pairs =
      std::vector<decltype(std::vector<std::string>{
          std::string("1943-03-09"), std::string("1972-07-11")})>{
          std::vector<std::string>{std::string("1943-03-09"),
                                   std::string("1972-07-11")},
          std::vector<std::string>{std::string("1809-01-12"),
                                   std::string("1863-11-19")},
          std::vector<std::string>{std::string("1809-02-12"),
                                   std::string("1863-11-19")}};
  auto idx = 0;
  while ((idx < pairs.size())) {
    auto p = pairs[idx];
    biorhythms(p[0], p[1]);
    idx = (idx + 1);
  }
}

int main() {
  main();
  return 0;
}
