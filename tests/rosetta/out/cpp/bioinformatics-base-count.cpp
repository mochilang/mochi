// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:09Z
#include <iostream>
#include <string>

std::string padLeft(std::string s, int w) {
  auto res = std::string("");
  auto n = (w - s.size());
  while ((n > 0)) {
    res = (res + std::string(" "));
    n = (n - 1);
  }
  return (res + s);
}

int main() {
  auto dna = std::string(""
                         "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG"
                         "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG"
                         "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT"
                         "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT"
                         "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG"
                         "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"
                         "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT"
                         "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG"
                         "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC"
                         "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT");
  std::cout << std::string("SEQUENCE:") << std::endl;
  auto le = dna.size();
  auto i = 0;
  while ((i < le)) {
    auto k = (i + 50);
    if ((k > le)) {
      k = le;
    }
    std::cout << ((padLeft(std::to_string(i), 5) + std::string(": ")) +
                  std::string(dna).substr(i, (k) - (i)))
              << std::endl;
    i = (i + 50);
  }
  auto a = 0;
  auto c = 0;
  auto g = 0;
  auto t = 0;
  auto idx = 0;
  while ((idx < le)) {
    auto ch = std::string(dna).substr(idx, ((idx + 1)) - (idx));
    if ((ch == std::string("A"))) {
      a = (a + 1);
    } else {
      if ((ch == std::string("C"))) {
        c = (c + 1);
      } else {
        if ((ch == std::string("G"))) {
          g = (g + 1);
        } else {
          if ((ch == std::string("T"))) {
            t = (t + 1);
          }
        }
      }
    }
    idx = (idx + 1);
  }
  std::cout << std::string("") << std::endl;
  std::cout << std::string("BASE COUNT:") << std::endl;
  std::cout << (std::string("    A: ") + padLeft(std::to_string(a), 3))
            << std::endl;
  std::cout << (std::string("    C: ") + padLeft(std::to_string(c), 3))
            << std::endl;
  std::cout << (std::string("    G: ") + padLeft(std::to_string(g), 3))
            << std::endl;
  std::cout << (std::string("    T: ") + padLeft(std::to_string(t), 3))
            << std::endl;
  std::cout << std::string("    ------") << std::endl;
  std::cout << (std::string("    Î£: ") + std::to_string(le)) << std::endl;
  std::cout << std::string("    ======") << std::endl;
  return 0;
}
