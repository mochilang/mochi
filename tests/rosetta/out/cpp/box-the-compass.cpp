// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:10Z
#include <iostream>
#include <string>
#include <vector>

std::string padLeft(std::string s, int w) {
  auto res = std::string("");
  auto n = (w - s.size());
  while ((n > 0)) {
    res = (res + std::string(" "));
    n = (n - 1);
  }
  return (res + s);
}

std::string padRight(std::string s, int w) {
  auto out = s;
  auto i = s.size();
  while ((i < w)) {
    out = (out + std::string(" "));
    i = (i + 1);
  }
  return out;
}

int indexOf(std::string s, std::string ch) {
  auto i = 0;
  while ((i < s.size())) {
    if ((std::string(s).substr(i, ((i + 1)) - (i)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}

std::string format2(float f) {
  auto s = std::to_string(f);
  auto idx = indexOf(s, std::string("."));
  if ((idx < 0)) {
    s = (s + std::string(".00"));
  } else {
    auto need = (idx + 3);
    if ((s.size() > need)) {
      s = std::string(s).substr(0, (need) - (0));
    } else {
      while ((s.size() < need)) {
        s = (s + std::string("0"));
      }
    }
  }
  return s;
}

int cpx(float h) {
  auto x = std::stoi(((((h / 11.25)) + 0.5)));
  x = (x % 32);
  if ((x < 0)) {
    x = (x + 32);
  }
  return x;
}

std::string degrees2compasspoint(float h) { return compassPoint[cpx(h)]; }

int main() {
  std::vector<std::string> compassPoint = {std::string("North"),
                                           std::string("North by east"),
                                           std::string("North-northeast"),
                                           std::string("Northeast by north"),
                                           std::string("Northeast"),
                                           std::string("Northeast by east"),
                                           std::string("East-northeast"),
                                           std::string("East by north"),
                                           std::string("East"),
                                           std::string("East by south"),
                                           std::string("East-southeast"),
                                           std::string("Southeast by east"),
                                           std::string("Southeast"),
                                           std::string("Southeast by south"),
                                           std::string("South-southeast"),
                                           std::string("South by east"),
                                           std::string("South"),
                                           std::string("South by west"),
                                           std::string("South-southwest"),
                                           std::string("Southwest by south"),
                                           std::string("Southwest"),
                                           std::string("Southwest by west"),
                                           std::string("West-southwest"),
                                           std::string("West by south"),
                                           std::string("West"),
                                           std::string("West by north"),
                                           std::string("West-northwest"),
                                           std::string("Northwest by west"),
                                           std::string("Northwest"),
                                           std::string("Northwest by north"),
                                           std::string("North-northwest"),
                                           std::string("North by west")};
  std::vector<int> headings = {
      0,      16.87,  16.88,  33.75,  50.62,  50.63,  67.5,   84.37,  84.38,
      101.25, 118.12, 118.13, 135,    151.87, 151.88, 168.75, 185.62, 185.63,
      202.5,  219.37, 219.38, 236.25, 253.12, 253.13, 270,    286.87, 286.88,
      303.75, 320.62, 320.63, 337.5,  354.37, 354.38};
  std::cout << std::string("Index  Compass point         Degree") << std::endl;
  auto i = 0;
  while ((i < headings.size())) {
    auto h = headings[i];
    auto idx = ((i % 32) + 1);
    auto cp = degrees2compasspoint(h);
    std::cout << (((((padLeft(std::to_string(idx), 4) + std::string("   ")) +
                     padRight(cp, 19)) +
                    std::string(" ")) +
                   format2(h)) +
                  std::string("Â°"))
              << std::endl;
    i = (i + 1);
  }
  return 0;
}
