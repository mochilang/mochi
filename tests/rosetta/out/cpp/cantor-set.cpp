// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:12Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

auto width = 81;
auto height = 5;
auto lines = std::vector<int>{};

std::string setChar(std::string s, int idx, std::string ch) {
  return ((std::string(s).substr(0, (idx) - (0)) + ch) +
          std::string(s).substr((idx + 1), (s.size()) - ((idx + 1))));
}

int main() {
  for (int i = 0; i < height; i++) {
    auto row = std::string("");
    auto j = 0;
    while ((j < width)) {
      row = (row + std::string("*"));
      j = (j + 1);
    }
    lines.push_back(row);
  }
  auto stack =
      std::vector<decltype(std::unordered_map<std::string, decltype(0)>{
          {std::string("start"), 0},
          {std::string("len"), width},
          {std::string("index"), 1}})>{
          std::unordered_map<std::string, decltype(0)>{
              {std::string("start"), 0},
              {std::string("len"), width},
              {std::string("index"), 1}}};
  while ((stack.size() > 0)) {
    auto frame = stack[(stack.size() - 1)];
    stack = std::string(stack).substr(0, ((stack.size() - 1)) - (0));
    auto start = frame[std::string("start")];
    auto lenSeg = frame[std::string("len")];
    auto index = frame[std::string("index")];
    auto seg = std::stoi(((lenSeg / 3)));
    if ((seg == 0)) {
      continue;
    }
    auto i = index;
    while ((i < height)) {
      auto j = (start + seg);
      while ((j < (start + (2 * seg)))) {
        lines[i] = setChar(lines[i], j, std::string(" "));
        j = (j + 1);
      }
      i = (i + 1);
    }
    stack.push_back(std::unordered_map<std::string, decltype(start)>{
        {std::string("start"), start},
        {std::string("len"), seg},
        {std::string("index"), (index + 1)}});
    stack.push_back(
        std::unordered_map<std::string, decltype((start + (seg * 2)))>{
            {std::string("start"), (start + (seg * 2))},
            {std::string("len"), seg},
            {std::string("index"), (index + 1)}});
  }
  for (auto line : lines) {
    __json(line);
    std::cout << std::endl;
  }
  return 0;
}
