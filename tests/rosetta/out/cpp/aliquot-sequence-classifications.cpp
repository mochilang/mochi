// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:05Z
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

auto THRESHOLD = 140737488355328;

int indexOf(auto xs, int value) {
  auto i = 0;
  while ((i < xs.size())) {
    if ((xs[i] == value)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}

bool contains(auto xs, int value) { return (indexOf(xs, value) != -1); }

int maxOf(int a, int b) {
  if ((a > b)) {
    return a;
  } else {
    return b;
  }
}

int intSqrt(int n) {
  if ((n == 0)) {
    return 0;
  }
  auto x = n;
  auto y = (((x + 1)) / 2);
  while ((y < x)) {
    x = y;
    y = (((x + (n / x))) / 2);
  }
  return x;
}

int sumProperDivisors(int n) {
  if ((n < 2)) {
    return 0;
  }
  auto sqrt = intSqrt(n);
  auto sum = 1;
  auto i = 2;
  while ((i <= sqrt)) {
    if (((n % i) == 0)) {
      sum = ((sum + i) + (n / i));
    }
    i = (i + 1);
  }
  if (((sqrt * sqrt) == n)) {
    sum = (sum - sqrt);
  }
  return sum;
}

auto classifySequence(int k) {
  auto last = k;
  auto seq = std::vector<decltype(k)>{k};
  while (true) {
    last = sumProperDivisors(last);
    seq.push_back(last);
    auto n = seq.size();
    auto aliquot = std::string("");
    if ((last == 0)) {
      aliquot = std::string("Terminating");
    }
    if ((aliquot != std::string(""))) {
      return std::unordered_map<std::string, decltype(seq)>{
          {std::string("seq"), seq}, {std::string("aliquot"), aliquot}};
    }
  }
  return std::unordered_map<std::string, decltype(seq)>{
      {std::string("seq"), seq}, {std::string("aliquot"), std::string("")}};
}

std::string padLeft(int n, int w) {
  auto s = std::to_string(n);
  while ((s.size() < w)) {
    s = (std::string(" ") + s);
  }
  return s;
}

std::string padRight(std::string s, int w) {
  auto r = s;
  while ((r.size() < w)) {
    r = (r + std::string(" "));
  }
  return r;
}

std::string joinWithCommas(auto seq) {
  auto s = std::string("[");
  auto i = 0;
  while ((i < seq.size())) {
    s = (s + std::to_string(seq[i]));
    if ((i < (seq.size() - 1))) {
      s = (s + std::string(", "));
    }
    i = (i + 1);
  }
  s = (s + std::string("]"));
  return s;
}

auto main() {
  std::cout << std::string("Aliquot classifications - periods for "
                           "Sociable/Cyclic in square brackets:\n")
            << std::endl;
  auto k = 1;
  while ((k <= 10)) {
    auto res = classifySequence(k);
    std::cout << ((((padLeft(k, 2) + std::string(": ")) +
                    padRight(std::to_string(res[std::string("aliquot")]), 15)) +
                   std::string(" ")) +
                  joinWithCommas(res[std::string("seq")]))
              << std::endl;
    k = (k + 1);
  }
  std::cout << std::string("") << std::endl;
  std::vector<int> s = {11,      12,  28,  496, 220,  1184, 12496,
                        1264460, 790, 909, 562, 1064, 1488};
  auto i = 0;
  while ((i < s.size())) {
    auto val = s[i];
    auto res = classifySequence(val);
    std::cout << ((((padLeft(val, 7) + std::string(": ")) +
                    padRight(std::to_string(res[std::string("aliquot")]), 15)) +
                   std::string(" ")) +
                  joinWithCommas(res[std::string("seq")]))
              << std::endl;
    i = (i + 1);
  }
  std::cout << std::string("") << std::endl;
  auto big = 15355717786080;
  auto r = classifySequence(big);
  std::cout << ((((std::to_string(big) + std::string(": ")) +
                  padRight(std::to_string(r[std::string("aliquot")]), 15)) +
                 std::string(" ")) +
                joinWithCommas(r[std::string("seq")]))
            << std::endl;
}

int main() {
  main();
  return 0;
}
