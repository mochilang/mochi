// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:21:05Z
#include <iostream>
#include <string>

bool isPrime(int n) {
  if ((n < 2)) {
    return false;
  }
  if (((n % 2) == 0)) {
    return (n == 2);
  }
  if (((n % 3) == 0)) {
    return (n == 3);
  }
  auto d = 5;
  while (((d * d) <= n)) {
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 2);
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 4);
  }
  return true;
}

int sumDigits(int n) {
  auto s = 0;
  auto x = n;
  while ((x > 0)) {
    s = (s + (x % 10));
    x = std::stoi(((x / 10)));
  }
  return s;
}

std::string pad(int n) {
  if ((n < 10)) {
    return (std::string("  ") + std::to_string(n));
  }
  if ((n < 100)) {
    return (std::string(" ") + std::to_string(n));
  }
  return std::to_string(n);
}

auto main() {
  std::cout << std::string("Additive primes less than 500:") << std::endl;
  auto count = 0;
  auto line = std::string("");
  auto lineCount = 0;
  auto i = 2;
  while ((i < 500)) {
    if ((isPrime(i) && isPrime(sumDigits(i)))) {
      count = (count + 1);
      line = ((line + pad(i)) + std::string("  "));
      lineCount = (lineCount + 1);
      if ((lineCount == 10)) {
        std::cout << std::string(line).substr(0, ((line.size() - 2)) - (0))
                  << std::endl;
        line = std::string("");
        lineCount = 0;
      }
    }
    if ((i > 2)) {
      i = (i + 2);
    } else {
      i = (i + 1);
    }
  }
  if ((lineCount > 0)) {
    std::cout << std::string(line).substr(0, ((line.size() - 2)) - (0))
              << std::endl;
  }
  std::cout << (std::to_string(count) + std::string(" additive primes found."))
            << std::endl;
}

int main() {
  main();
  return 0;
}
