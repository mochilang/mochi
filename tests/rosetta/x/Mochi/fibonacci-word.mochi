fun entropy(s: string): float {
  var counts: map<string,int> = {}
  var i = 0
  while i < len(s) {
    let ch = substring(s, i, i+1)
    if ch in counts { counts[ch] = counts[ch] + 1 } else { counts[ch] = 1 }
    i = i + 1
  }
  var hm = 0.0
  for k in keys(counts) {
    let c = counts[k] as float
    hm = hm + c * (math.log(c) / math.log(2.0))
  }
  let l = len(s) as float
  return (math.log(l) / math.log(2.0)) - hm / l
}
fun fibonacciWord(n: int): string {
  var a = "1"
  var b = "0"
  var i = 1
  while i < n {
    let tmp = b
    b = b + a
    a = tmp
    i = i + 1
  }
  return a
}
fun main() {
  print(pad("N",3) + pad("Length",9) + "  Entropy      Word")
  var n = 1
  while n < 10 {
    let s = fibonacciWord(n)
    print(pad(str(n),3) + pad(str(len(s)),9) + "  " + fmt(entropy(s)) + "  " + s)
    n = n + 1
  }
  while n <= 37 {
    let s = fibonacciWord(n)
    print(pad(str(n),3) + pad(str(len(s)),9) + "  " + fmt(entropy(s)))
    n = n + 1
  }
}
fun pad(s: string, w: int): string { var t=s; while len(t)<w { t=" "+t }; return t }
fun fmt(x: float): string { var y = floorf(x*100000000.0+0.5)/100000000.0; var s=str(y); var dot=indexOf(s,"."); if dot==0-1 { s=s+".00000000" } else { var d=len(s)-dot-1; while d<8 { s=s+"0"; d=d+1 } } return s }
fun floorf(x: float): float { let y = x as int; return y as float }
fun indexOf(s: string, ch: string): int { var i=0; while i<len(s){ if substring(s,i,i+1)==ch {return i} i=i+1 } return 0-1 }
main()
