// Mochi version of Rosetta "Compiler/virtual machine interpreter" task
// Implements a small stack-based VM able to run the program from codegen.txt.

fun parseIntStr(str: string): int {
  var i = 0
  var neg = false
  if len(str) > 0 && str[0:1] == "-" {
    neg = true
    i = 1
  }
  var n = 0
  let digits = {
    "0": 0, "1": 1, "2": 2, "3": 3, "4": 4,
    "5": 5, "6": 6, "7": 7, "8": 8, "9": 9,
  }
  while i < len(str) {
    n = n * 10 + digits[str[i:i+1]]
    i = i + 1
  }
  if neg { n = -n }
  return n
}

fun fields(s: string): list<string> {
  var words: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = substring(s, i, i+1)
    if ch == " " || ch == "\t" || ch == "\n" {
      if len(cur) > 0 {
        words = append(words, cur)
        cur = ""
      }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 { words = append(words, cur) }
  return words
}

fun unescape(s: string): string {
  var out = ""
  var i = 0
  while i < len(s) {
    if s[i:i+1] == "\\" && i+1 < len(s) {
      let c = s[i+1:i+2]
      if c == "n" {
        out = out + "\n"
        i = i + 2
        continue
      } else if c == "\\" {
        out = out + "\\"
        i = i + 2
        continue
      }
    }
    out = out + s[i:i+1]
    i = i + 1
  }
  return out
}

fun parseProgram(src: string): map<string, any> {
  let lines = split(src, "\n")
  let header = fields(lines[0])
  let dataSize = parseIntStr(header[1])
  let nStrings = parseIntStr(header[3])
  var stringPool: list<string> = []
  var i = 1
  while i <= nStrings {
    let s = lines[i]
    if len(s) > 0 {
      stringPool = append(stringPool, unescape(s[1:len(s)-1]))
    }
    i = i + 1
  }
  var code: list<map<string, any>> = []
  var addrMap: map<int, int> = {}
  while i < len(lines) {
    let line = trim(lines[i])
    if len(line) == 0 { break }
    let parts = fields(line)
    let addr = parseIntStr(parts[0])
    let op = parts[1]
    var arg = 0
    if op == "push" {
      arg = parseIntStr(parts[2])
    } else if op == "fetch" || op == "store" {
      arg = parseIntStr(parts[2][1:len(parts[2])-1])
    } else if op == "jmp" || op == "jz" {
      arg = parseIntStr(parts[3])
    }
    code = append(code, {"addr": addr, "op": op, "arg": arg})
    addrMap[addr] = len(code) - 1
    i = i + 1
  }
  return {"dataSize": dataSize, "strings": stringPool, "code": code, "addrMap": addrMap}
}

fun runVM(prog: map<string, any>) {
  var data: list<int> = []
  var i = 0
  while i < prog["dataSize"] {
    data = append(data, 0)
    i = i + 1
  }
  var stack: list<int> = []
  var pc = 0
  let code = prog["code"]
  let addrMap = prog["addrMap"]
  let pool = prog["strings"]
  while pc < len(code) {
    let inst = code[pc]
    let op = inst["op"]
    let arg = inst["arg"]
    if op == "push" {
      stack = append(stack, arg)
      pc = pc + 1
      continue
    }
    if op == "store" {
      data[arg] = stack[len(stack)-1]
      stack = slice(stack, 0, len(stack)-1)
      pc = pc + 1
      continue
    }
    if op == "fetch" {
      stack = append(stack, data[arg])
      pc = pc + 1
      continue
    }
    if op == "add" {
      stack[len(stack)-2] = stack[len(stack)-2] + stack[len(stack)-1]
      stack = slice(stack, 0, len(stack)-1)
      pc = pc + 1
      continue
    }
    if op == "lt" {
      var v = 0
      if stack[len(stack)-2] < stack[len(stack)-1] { v = 1 }
      stack[len(stack)-2] = v
      stack = slice(stack, 0, len(stack)-1)
      pc = pc + 1
      continue
    }
    if op == "jz" {
      let v = stack[len(stack)-1]
      stack = slice(stack, 0, len(stack)-1)
      if v == 0 {
        pc = addrMap[arg]
      } else {
        pc = pc + 1
      }
      continue
    }
    if op == "jmp" {
      pc = addrMap[arg]
      continue
    }
    if op == "prts" {
      print(pool[stack[len(stack)-1]])
      stack = slice(stack, 0, len(stack)-1)
      pc = pc + 1
      continue
    }
    if op == "prti" {
      print(str(stack[len(stack)-1]))
      stack = slice(stack, 0, len(stack)-1)
      pc = pc + 1
      continue
    }
    if op == "halt" {
      break
    }
    pc = pc + 1
  }
}

fun trim(s: string): string {
  var start = 0
  while start < len(s) && (s[start:start+1] == " " || s[start:start+1] == "\t") { start = start + 1 }
  var end = len(s)
  while end > start && (s[end-1:end] == " " || s[end-1:end] == "\t") { end = end - 1 }
  return substring(s, start, end)
}

fun split(s: string, sep: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    if len(sep) > 0 && i+len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
      parts = append(parts, cur)
      cur = ""
      i = i + len(sep)
    } else {
      cur = cur + substring(s, i, i+1)
      i = i + 1
    }
  }
  parts = append(parts, cur)
  return parts
}

fun main() {
  let programText =
    "Datasize: 1 Strings: 2\n" +
    "\"count is: \"\n" +
    "\"\\n\"\n" +
    "    0 push  1\n" +
    "    5 store [0]\n" +
    "   10 fetch [0]\n" +
    "   15 push  10\n" +
    "   20 lt\n" +
    "   21 jz     (43) 65\n" +
    "   26 push  0\n" +
    "   31 prts\n" +
    "   32 fetch [0]\n" +
    "   37 prti\n" +
    "   38 push  1\n" +
    "   43 prts\n" +
    "   44 fetch [0]\n" +
    "   49 push  1\n" +
    "   54 add\n" +
    "   55 store [0]\n" +
    "   60 jmp    (-51) 10\n" +
    "   65 halt\n"
  let prog = parseProgram(programText)
  runVM(prog)
}

main()
