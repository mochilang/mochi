// Mochi implementation of Rosetta "Balanced ternary" task
// Translated from Go version in tests/rosetta/x/Go/balanced-ternary.go

fun trimLeftZeros(s: string): string {
  var i = 0
  while i < len(s) && substring(s, i, i+1) == "0" {
    i = i + 1
  }
  return substring(s, i, len(s))
}

fun btString(s: string): map<string, any> {
  s = trimLeftZeros(s)
  var b: list<int> = []
  var i = len(s) - 1
  while i >= 0 {
    let ch = substring(s, i, i+1)
    if ch == "+" {
      b = append(b, 1)
    } else {
      if ch == "0" {
        b = append(b, 0)
      } else {
        if ch == "-" {
          b = append(b, 0 - 1)
        } else {
          return {"bt": [], "ok": false}
        }
      }
    }
    i = i - 1
  }
  return {"bt": b, "ok": true}
}

fun btToString(b: list<int>): string {
  if len(b) == 0 { return "0" }
  var r = ""
  var i = len(b) - 1
  while i >= 0 {
    let d = b[i]
    if d == 0 - 1 {
      r = r + "-"
    } else {
      if d == 0 {
        r = r + "0"
      } else {
        r = r + "+"
      }
    }
    i = i - 1
  }
  return r
}

fun btInt(i: int): list<int> {
  if i == 0 { return [] }
  var n = i
  var b: list<int> = []
  while n != 0 {
    var m = n % 3
    n = (n / 3) as int
    if m == 2 {
      m = 0 - 1
      n = n + 1
    } else {
      if m == 0 - 2 {
        m = 1
        n = n - 1
      }
    }
    b = append(b, m)
  }
  return b
}

fun btToInt(b: list<int>): int {
  var r = 0
  var pt = 1
  var i = 0
  while i < len(b) {
    r = r + b[i] * pt
    pt = pt * 3
    i = i + 1
  }
  return r
}

fun btNeg(b: list<int>): list<int> {
  var r: list<int> = []
  var i = 0
  while i < len(b) {
    r = append(r, -b[i])
    i = i + 1
  }
  return r
}

fun btAdd(a: list<int>, b: list<int>): list<int> {
  return btInt(btToInt(a) + btToInt(b))
}

fun btMul(a: list<int>, b: list<int>): list<int> {
  return btInt(btToInt(a) * btToInt(b))
}

fun padLeft(s: string, w: int): string {
  var r = s
  while len(r) < w { r = " " + r }
  return r
}

fun show(label: string, b: list<int>) {
  let l = padLeft(label, 7)
  let bs = padLeft(btToString(b), 12)
  let is = padLeft(str(btToInt(b)), 7)
  print(l + " " + bs + " " + is)
}

fun main() {
  let ares = btString("+-0++0+")
  let a = ares["bt"]
  let b = btInt(-436)
  let cres = btString("+-++-")
  let c = cres["bt"]
  show("a:", a)
  show("b:", b)
  show("c:", c)
  show("a(b-c):", btMul(a, btAdd(b, btNeg(c))))
}

main()
