# Mochi translation of Rosetta "Determine if two triangles overlap"
# Translated from Go version in tests/rosetta/x/Go/determine-if-two-triangles-overlap.go

type Point {
  x: float
  y: float
}

type Triangle {
  p1: Point
  p2: Point
  p3: Point
}

fun fmt1(f: float): string {
  var s = str(f)
  let idx = indexOf(s, ".")
  if idx < 0 {
    s = s + ".0"
  } else {
    var need = idx + 2
    if len(s) > need {
      s = substring(s, 0, need)
    } else {
      while len(s) < need {
        s = s + "0"
      }
    }
  }
  return s
}

fun pointStr(p: Point): string {
  return "(" + fmt1(p.x) + ", " + fmt1(p.y) + ")"
}

fun triangleStr(t: Triangle): string {
  return "Triangle " + pointStr(t.p1) + ", " + pointStr(t.p2) + ", " + pointStr(t.p3)
}

fun orient(a: Point, b: Point, c: Point): float {
  return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)
}

fun pointInTri(p: Point, t: Triangle, onBoundary: bool): bool {
  let d1 = orient(p, t.p1, t.p2)
  let d2 = orient(p, t.p2, t.p3)
  let d3 = orient(p, t.p3, t.p1)
  var hasNeg = d1 < 0.0 || d2 < 0.0 || d3 < 0.0
  var hasPos = d1 > 0.0 || d2 > 0.0 || d3 > 0.0
  if onBoundary {
    return !(hasNeg && hasPos)
  }
  return !(hasNeg && hasPos) && d1 != 0.0 && d2 != 0.0 && d3 != 0.0
}

fun edgeCheck(a0: Point, a1: Point, bs: list<Point>, onBoundary: bool): bool {
  let d0 = orient(a0, a1, bs[0])
  let d1 = orient(a0, a1, bs[1])
  let d2 = orient(a0, a1, bs[2])
  if onBoundary {
    return d0 <= 0.0 && d1 <= 0.0 && d2 <= 0.0
  }
  return d0 < 0.0 && d1 < 0.0 && d2 < 0.0
}

fun triTri2D(t1: Triangle, t2: Triangle, onBoundary: bool): bool {
  let a = [t1.p1, t1.p2, t1.p3]
  let b = [t2.p1, t2.p2, t2.p3]
  var i = 0
  while i < 3 {
    let j = (i + 1) % 3
    if edgeCheck(a[i], a[j], b, onBoundary) {
      return false
    }
    i = i + 1
  }
  i = 0
  while i < 3 {
    let j = (i + 1) % 3
    if edgeCheck(b[i], b[j], a, onBoundary) {
      return false
    }
    i = i + 1
  }
  return true
}

fun iff(cond: bool, a: string, b: string): string { if cond { return a } else { return b } }

fun main() {
  var t1 = Triangle{ p1: Point{x:0.0, y:0.0}, p2: Point{x:5.0, y:0.0}, p3: Point{x:0.0, y:5.0} }
  var t2 = Triangle{ p1: Point{x:0.0, y:0.0}, p2: Point{x:5.0, y:0.0}, p3: Point{x:0.0, y:6.0} }
  print(triangleStr(t1) + " and")
  print(triangleStr(t2))
  var overlapping = triTri2D(t1, t2, true)
  print(iff(overlapping, "overlap", "do not overlap"))
  print("")

  t1 = Triangle{ p1: Point{x:0.0, y:0.0}, p2: Point{x:0.0, y:5.0}, p3: Point{x:5.0, y:0.0} }
  t2 = t1
  print(triangleStr(t1) + " and")
  print(triangleStr(t2))
  overlapping = triTri2D(t1, t2, true)
  print(iff(overlapping, "overlap (reversed)", "do not overlap"))
  print("")

  t1 = Triangle{ p1: Point{x:0.0, y:0.0}, p2: Point{x:5.0, y:0.0}, p3: Point{x:0.0, y:5.0} }
  t2 = Triangle{ p1: Point{x: -10.0, y: 0.0}, p2: Point{x: -5.0, y: 0.0}, p3: Point{x: -1.0, y: 6.0} }
  print(triangleStr(t1) + " and")
  print(triangleStr(t2))
  overlapping = triTri2D(t1, t2, true)
  print(iff(overlapping, "overlap", "do not overlap"))
  print("")

  t1.p3 = Point{x:2.5, y:5.0}
  t2 = Triangle{ p1: Point{x:0.0, y:4.0}, p2: Point{x:2.5, y: -1.0}, p3: Point{x:5.0, y:4.0} }
  print(triangleStr(t1) + " and")
  print(triangleStr(t2))
  overlapping = triTri2D(t1, t2, true)
  print(iff(overlapping, "overlap", "do not overlap"))
  print("")

  t1 = Triangle{ p1: Point{x:0.0, y:0.0}, p2: Point{x:1.0, y:1.0}, p3: Point{x:0.0, y:2.0} }
  t2 = Triangle{ p1: Point{x:2.0, y:1.0}, p2: Point{x:3.0, y:0.0}, p3: Point{x:3.0, y:2.0} }
  print(triangleStr(t1) + " and")
  print(triangleStr(t2))
  overlapping = triTri2D(t1, t2, true)
  print(iff(overlapping, "overlap", "do not overlap"))
  print("")

  t2 = Triangle{ p1: Point{x:2.0, y:1.0}, p2: Point{x:3.0, y: -2.0}, p3: Point{x:3.0, y:4.0} }
  print(triangleStr(t1) + " and")
  print(triangleStr(t2))
  overlapping = triTri2D(t1, t2, true)
  print(iff(overlapping, "overlap", "do not overlap"))
  print("")

  t1 = Triangle{ p1: Point{x:0.0, y:0.0}, p2: Point{x:1.0, y:0.0}, p3: Point{x:0.0, y:1.0} }
  t2 = Triangle{ p1: Point{x:1.0, y:0.0}, p2: Point{x:2.0, y:0.0}, p3: Point{x:1.0, y:1.1} }
  print(triangleStr(t1) + " and")
  print(triangleStr(t2))
  print("which have only a single corner in contact, if boundary points collide")
  overlapping = triTri2D(t1, t2, true)
  print(iff(overlapping, "overlap", "do not overlap"))
  print("")

  print(triangleStr(t1) + " and")
  print(triangleStr(t2))
  print("which have only a single corner in contact, if boundary points do not collide")
  overlapping = triTri2D(t1, t2, false)
  print(iff(overlapping, "overlap", "do not overlap"))
}

main()
