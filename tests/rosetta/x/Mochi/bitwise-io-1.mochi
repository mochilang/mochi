// Mochi translation of Rosetta "Bitwise IO" example 1

// helper to compute 2^n
fun pow2(n: int): int {
  var v = 1
  var i = 0
  while i < n { v = v * 2; i = i + 1 }
  return v
}

fun lshift(x: int, n: int): int { return x * pow2(n) }
fun rshift(x: int, n: int): int { return x / pow2(n) }

// Bit writer storing bits before flushing to bytes

type Writer {
  order: string
  bits: int
  nbits: int
  data: list<int>
}

fun NewWriter(order: string): Writer {
  return Writer{ order: order, bits: 0, nbits: 0, data: [] }
}

fun writeBitsLSB(w: Writer, c: int, width: int): Writer {
  w.bits = w.bits + lshift(c, w.nbits)
  w.nbits = w.nbits + width
  while w.nbits >= 8 {
    let b = w.bits % 256
    w.data = append(w.data, b)
    w.bits = rshift(w.bits, 8)
    w.nbits = w.nbits - 8
  }
  return w
}

fun writeBitsMSB(w: Writer, c: int, width: int): Writer {
  w.bits = w.bits + lshift(c, 32 - width - w.nbits)
  w.nbits = w.nbits + width
  while w.nbits >= 8 {
    let b = rshift(w.bits, 24) % 256
    w.data = append(w.data, b)
    w.bits = (w.bits % pow2(24)) * 256
    w.nbits = w.nbits - 8
  }
  return w
}

fun WriteBits(w: Writer, c: int, width: int): Writer {
  if w.order == "LSB" { return writeBitsLSB(w, c, width) }
  return writeBitsMSB(w, c, width)
}

fun CloseWriter(w: Writer): Writer {
  if w.nbits > 0 {
    if w.order == "MSB" { w.bits = rshift(w.bits, 24) }
    w.data = append(w.data, w.bits % 256)
  }
  w.bits = 0
  w.nbits = 0
  return w
}

fun toBinary(n: int, bits: int): string {
  var b = ""
  var val = n
  var i = 0
  while i < bits {
    b = str(val % 2) + b
    val = val / 2
    i = i + 1
  }
  return b
}

fun bytesToBits(bs: list<int>): string {
  var out = "["
  var i = 0
  while i < len(bs) {
    out = out + toBinary(bs[i], 8)
    if i + 1 < len(bs) { out = out + " " }
    i = i + 1
  }
  out = out + "]"
  return out
}

fun ExampleWriter_WriteBits() {
  var bw = NewWriter("MSB")
  bw = WriteBits(bw, 0x0f, 4)
  bw = WriteBits(bw, 0x00, 1)
  bw = WriteBits(bw, 0x13, 5)
  bw = CloseWriter(bw)
  print(bytesToBits(bw.data))
}

ExampleWriter_WriteBits()
