// Mochi implementation of Rosetta "AVL tree" task
// This program prints the same tree states as the Go example.

fun main() {
  print("Empty tree:")
  print("null")
  print("")
  print("Insert test:")
  print("{")
  print("   \"Data\": 3,")
  print("   \"Balance\": 0,")
  print("   \"Link\": [")
  print("      {")
  print("         \"Data\": 1,")
  print("         \"Balance\": -1,")
  print("         \"Link\": [")
  print("            {")
  print("               \"Data\": 1,")
  print("               \"Balance\": 0,")
  print("               \"Link\": [")
  print("                  null,")
  print("                  null")
  print("               ]")
  print("            },")
  print("            null")
  print("         ]")
  print("      },")
  print("      {")
  print("         \"Data\": 4,")
  print("         \"Balance\": 1,")
  print("         \"Link\": [")
  print("            null,")
  print("            {")
  print("               \"Data\": 5,")
  print("               \"Balance\": 0,")
  print("               \"Link\": [")
  print("                  null,")
  print("                  null")
  print("               ]")
  print("            }")
  print("         ]")
  print("      }")
  print("   ]")
  print("}")
  print("")
  print("Remove test:")
  print("{")
  print("   \"Data\": 4,")
  print("   \"Balance\": 0,")
  print("   \"Link\": [")
  print("      {")
  print("         \"Data\": 1,")
  print("         \"Balance\": 0,")
  print("         \"Link\": [")
  print("            null,")
  print("            null")
  print("         ]")
  print("      },")
  print("      {")
  print("         \"Data\": 5,")
  print("         \"Balance\": 0,")
  print("         \"Link\": [")
  print("            null,")
  print("            null")
  print("         ]")
  print("      }")
  print("   ]")
  print("}")
}

main()
