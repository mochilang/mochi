// Mochi implementation of Rosetta task "Chernick's Carmichael numbers"
// Ported from Go version in tests/rosetta/x/Go/chernicks-carmichael-numbers-1.go

// Simple primality test
fun isPrime(n: int): bool {
  if n < 2 { return false }
  if n % 2 == 0 { return n == 2 }
  if n % 3 == 0 { return n == 3 }
  var d = 5
  while d * d <= n {
    if n % d == 0 { return false }
    d = d + 2
    if n % d == 0 { return false }
    d = d + 4
  }
  return true
}

// ---- basic big integer utilities using base 10 digits ----
fun bigTrim(a: list<int>): list<int> {
  var n = count(a)
  while n > 1 && a[n-1] == 0 {
    a = a[0:n-1]
    n = n - 1
  }
  return a
}

fun bigFromInt(x: int): list<int> {
  if x == 0 { return [0] }
  var digits: list<int> = []
  var n = x
  while n > 0 {
    digits = append(digits, n % 10)
    n = n / 10
  }
  return digits
}

fun bigMulSmall(a: list<int>, m: int): list<int> {
  if m == 0 { return [0] }
  var res: list<int> = []
  var carry = 0
  var i = 0
  while i < count(a) {
    var prod = a[i] * m + carry
    res = append(res, prod % 10)
    carry = prod / 10
    i = i + 1
  }
  while carry > 0 {
    res = append(res, carry % 10)
    carry = carry / 10
  }
  return bigTrim(res)
}

fun bigToString(a: list<int>): string {
  var s = ""
  var i = count(a) - 1
  while i >= 0 {
    s = s + str(a[i])
    i = i - 1
  }
  return s
}

// returns product if all factors are prime, otherwise empty list
fun pow2(k: int): int {
  var r = 1
  var i = 0
  while i < k {
    r = r * 2
    i = i + 1
  }
  return r
}

fun ccFactors(n: int, m: int): list<int> {
  var p = 6 * m + 1
  if !isPrime(p) { return [] }
  var prod = bigFromInt(p)
  p = 12 * m + 1
  if !isPrime(p) { return [] }
  prod = bigMulSmall(prod, p)
  var i = 1
  while i <= n - 2 {
    p = (pow2(i) * 9 * m) + 1
    if !isPrime(p) { return [] }
    prod = bigMulSmall(prod, p)
    i = i + 1
  }
  return prod
}

fun ccNumbers(start: int, end: int) {
  var n = start
  while n <= end {
    var m = 1
    if n > 4 { m = pow2(n - 4) }
    while true {
      let num = ccFactors(n, m)
      if count(num) > 0 {
        print("a(" + str(n) + ") = " + bigToString(num))
        break
      }
      if n <= 4 { m = m + 1 } else { m = m + pow2(n - 4) }
    }
    n = n + 1
  }
}

ccNumbers(3, 9)
