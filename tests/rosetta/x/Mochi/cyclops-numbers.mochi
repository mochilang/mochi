// Mochi implementation of Rosetta "Cyclops numbers" task
// Translated from Go version in tests/rosetta/x/Go/cyclops-numbers.go

fun digits(n: int): list<int> {
  if n == 0 { return [0] }
  var rev: list<int> = []
  var x = n
  while x > 0 {
    rev = append(rev, x % 10)
    x = (x / 10) as int
  }
  var out: list<int> = []
  var i = len(rev) - 1
  while i >= 0 {
    out = append(out, rev[i])
    i = i - 1
  }
  return out
}

fun commatize(n: int): string {
  var s = str(n)
  var out = ""
  var i = len(s)
  while i > 3 {
    out = "," + s[i-3:i] + out
    i = i - 3
  }
  out = s[0:i] + out
  return out
}

fun isPrime(n: int): bool {
  if n < 2 { return false }
  if n % 2 == 0 { return n == 2 }
  if n % 3 == 0 { return n == 3 }
  var d = 5
  while d * d <= n {
    if n % d == 0 { return false }
    d = d + 2
    if n % d == 0 { return false }
    d = d + 4
  }
  return true
}

fun split(s: string, sep: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    if i + len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
      parts = append(parts, cur)
      cur = ""
      i = i + len(sep)
    } else {
      cur = cur + s[i:i+1]
      i = i + 1
    }
  }
  parts = append(parts, cur)
  return parts
}

fun parseIntStr(str: string): int {
  var i = 0
  var neg = false
  if len(str) > 0 && str[0:1] == "-" {
    neg = true
    i = 1
  }
  var n = 0
  let digits = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  }
  while i < len(str) {
    n = n * 10 + digits[str[i:i+1]]
    i = i + 1
  }
  if neg { n = -n }
  return n
}

fun reverseStr(s: string): string {
  var out = ""
  var i = len(s) - 1
  while i >= 0 {
    out = out + s[i:i+1]
    i = i - 1
  }
  return out
}

fun pad(s: string, w: int): string {
  var out = s
  while len(out) < w { out = " " + out }
  return out
}

fun findFirst(list: list<int>): list<int> {
  var i = 0
  while i < len(list) {
    if list[i] > 10000000 { return [list[i], i] }
    i = i + 1
  }
  return [-1, -1]
}

fun main() {
  let ranges = [[0,0],[101,909],[11011,99099],[1110111,9990999],[111101111,119101111]]
  var cyclops: list<int> = []
  for r in ranges {
    let start = r[0]
    let end = r[1]
    let numDigits = len(str(start))
    let center = numDigits / 2
    var i = start
    while i <= end {
      let ds = digits(i)
      if ds[center] == 0 {
        var count = 0
        for d in ds { if d == 0 { count = count + 1 } }
        if count == 1 { cyclops = append(cyclops, i) }
      }
      i = i + 1
    }
  }
  print("The first 50 cyclops numbers are:")
  var idx = 0
  while idx < 50 {
    print(pad(commatize(cyclops[idx]), 6) + " ")
    idx = idx + 1
    if idx % 10 == 0 { print("\n") }
  }
  let fi = findFirst(cyclops)
  print("\nFirst such number > 10 million is " + commatize(fi[0]) + " at zero-based index " + commatize(fi[1]))

  var primes: list<int> = []
  for n in cyclops { if isPrime(n) { primes = append(primes, n) } }
  print("\n\nThe first 50 prime cyclops numbers are:")
  idx = 0
  while idx < 50 {
    print(pad(commatize(primes[idx]), 6) + " ")
    idx = idx + 1
    if idx % 10 == 0 { print("\n") }
  }
  let fp = findFirst(primes)
  print("\nFirst such number > 10 million is " + commatize(fp[0]) + " at zero-based index " + commatize(fp[1]))

  var bpcyclops: list<int> = []
  var ppcyclops: list<int> = []
  for p in primes {
    let ps = str(p)
    let splitp = split(ps, "0")
    let noMiddle = parseIntStr(splitp[0] + splitp[1])
    if isPrime(noMiddle) { bpcyclops = append(bpcyclops, p) }
    if ps == reverseStr(ps) { ppcyclops = append(ppcyclops, p) }
  }
  print("\n\nThe first 50 blind prime cyclops numbers are:")
  idx = 0
  while idx < 50 {
    print(pad(commatize(bpcyclops[idx]), 6) + " ")
    idx = idx + 1
    if idx % 10 == 0 { print("\n") }
  }
  let fb = findFirst(bpcyclops)
  print("\nFirst such number > 10 million is " + commatize(fb[0]) + " at zero-based index " + commatize(fb[1]))

  print("\n\nThe first 50 palindromic prime cyclops numbers are:")
  idx = 0
  while idx < 50 {
    print(pad(commatize(ppcyclops[idx]), 9) + " ")
    idx = idx + 1
    if idx % 8 == 0 { print("\n") }
  }
  let fpp = findFirst(ppcyclops)
  print("\n\nFirst such number > 10 million is " + commatize(fpp[0]) + " at zero-based index " + commatize(fpp[1]))
}

