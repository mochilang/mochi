// Mochi implementation of Rosetta "Bioinformatics base count" task
// Simplified to avoid sorting by counting specific bases

fun padLeft(s: string, w: int): string {
  var res = ""
  var n = w - len(s)
  while n > 0 {
    res = res + " "
    n = n - 1
  }
  return res + s
}

let dna = "" +
  "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG" +
  "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG" +
  "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT" +
  "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT" +
  "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG" +
  "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA" +
  "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT" +
  "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG" +
  "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC" +
  "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT"

print("SEQUENCE:")
let le = len(dna)
var i = 0
while i < le {
  var k = i + 50
  if k > le { k = le }
  print(padLeft(str(i), 5) + ": " + dna[i:k])
  i = i + 50
}

var a = 0
var c = 0
var g = 0
var t = 0
var idx = 0
while idx < le {
  let ch = substring(dna, idx, idx + 1)
  if ch == "A" {
    a = a + 1
  } else {
    if ch == "C" {
      c = c + 1
    } else {
      if ch == "G" {
        g = g + 1
      } else {
        if ch == "T" {
          t = t + 1
        }
      }
    }
  }
  idx = idx + 1
}

print("")
print("BASE COUNT:")
print("    A: " + padLeft(str(a), 3))
print("    C: " + padLeft(str(c), 3))
print("    G: " + padLeft(str(g), 3))
print("    T: " + padLeft(str(t), 3))
print("    ------")
print("    Î£: " + str(le))
print("    ======")
