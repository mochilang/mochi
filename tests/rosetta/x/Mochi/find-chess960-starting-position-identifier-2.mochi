// Alternative Mochi implementation of finding Chess960 starting position identifier
var g2lMap: map<string, string> = {
  "♜": "R", "♞": "N", "♝": "B", "♛": "Q", "♚": "K",
  "♖": "R", "♘": "N", "♗": "B", "♕": "Q", "♔": "K"
}
var names: map<string, string> = {"R": "rook", "N": "knight", "B": "bishop", "Q": "queen", "K": "king"}
var ntable: map<string, int> = {"01":0, "02":1, "03":2, "04":3, "12":4, "13":5, "14":6, "23":7, "24":8, "34":9}

fun indexOf(s: string, sub: string): int {
  var i = 0
  while i <= len(s) - len(sub) {
    if substring(s, i, i + len(sub)) == sub { return i }
    i = i + 1
  }
  return -1
}

fun removeChar(s: string, ch: string): string {
  var res = ""
  var i = 0
  while i < len(s) {
    let c = substring(s, i, i+1)
    if c != ch { res = res + c }
    i = i + 1
  }
  return res
}

fun g2l(pieces: string): string {
  var res = ""
  var i = 0
  while i < len(pieces) {
    let ch = substring(pieces, i, i+1)
    res = res + g2lMap[ch]
    i = i + 1
  }
  return res
}

fun countChar(s: string, ch: string): int {
  var c = 0
  var i = 0
  while i < len(s) {
    if substring(s, i, i+1) == ch { c = c + 1 }
    i = i + 1
  }
  return c
}

fun spid(pieces: string): int {
  pieces = g2l(pieces)
  if len(pieces) != 8 { return -1 }

  for one in ["K", "Q"] {
    if countChar(pieces, one) != 1 { return -1 }
  }
  for two in ["R", "N", "B"] {
    if countChar(pieces, two) != 2 { return -1 }
  }

  let r1 = indexOf(pieces, "R")
  let r2 = indexOf(substring(pieces, r1+1, len(pieces)), "R") + r1 + 1
  let k  = indexOf(pieces, "K")
  if k < r1 || k > r2 { return -1 }

  let b1 = indexOf(pieces, "B")
  let b2 = indexOf(substring(pieces, b1+1, len(pieces)), "B") + b1 + 1
  if (b2 - b1) % 2 == 0 { return -1 }

  var piecesN = removeChar(removeChar(pieces, "Q"), "B")
  let n1 = indexOf(piecesN, "N")
  let n2 = indexOf(substring(piecesN, n1+1, len(piecesN)), "N") + n1 + 1
  let N = ntable[str(n1) + str(n2)]

  var piecesQ = removeChar(pieces, "B")
  let Q = indexOf(piecesQ, "Q")

  var D = indexOf("0246", str(b1))
  var L = indexOf("1357", str(b2))
  if D == (0 - 1) {
    D = indexOf("0246", str(b2))
    L = indexOf("1357", str(b1))
  }

  return 96*N + 16*Q + 4*D + L
}

fun main() {
  for pieces in ["♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"] {
    print(pieces + " or " + g2l(pieces) + " has SP-ID of " + str(spid(pieces)))
  }
}

main()
