// Mochi translation of Rosetta "Align columns" task
// Mirrors the logic of tests/rosetta/x/Go/align-columns.go

fun split(s: string, sep: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    if len(sep) > 0 && i+len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
      parts = append(parts, cur)
      cur = ""
      i = i + len(sep)
    } else {
      cur = cur + substring(s, i, i+1)
      i = i + 1
    }
  }
  parts = append(parts, cur)
  return parts
}

fun rstripEmpty(words: list<string>): list<string> {
  var n = len(words)
  while n > 0 && words[n-1] == "" {
    n = n - 1
  }
  return words[:n]
}

fun spaces(n: int): string {
  var out = ""
  var i = 0
  while i < n {
    out = out + " "
    i = i + 1
  }
  return out
}

fun pad(word: string, width: int, align: int): string {
  let diff = width - len(word)
  if align == 0 { // left
    return word + spaces(diff)
  }
  if align == 2 { // right
    return spaces(diff) + word
  }
  var left = (diff / 2) as int
  var right = diff - left
  return spaces(left) + word + spaces(right)
}

fun newFormatter(text: string): map<string, any> {
  var lines = split(text, "\n")
  var fmtLines: list<list<string>> = []
  var width: list<int> = []
  var i = 0
  while i < len(lines) {
    if len(lines[i]) == 0 {
      i = i + 1
      continue
    }
    var words = rstripEmpty(split(lines[i], "$"))
    fmtLines = append(fmtLines, words)
    var j = 0
    while j < len(words) {
      let wlen = len(words[j])
      if j == len(width) {
        width = append(width, wlen)
      } else if wlen > width[j] {
        width[j] = wlen
      }
      j = j + 1
    }
    i = i + 1
  }
  return {"text": fmtLines, "width": width}
}

fun printFmt(f: map<string, any>, align: int) {
  let lines = f["text"] as list<list<string>>
  let width = f["width"] as list<int>
  var i = 0
  while i < len(lines) {
    let words = lines[i]
    var line = ""
    var j = 0
    while j < len(words) {
      line = line + pad(words[j], width[j], align) + " "
      j = j + 1
    }
    print(line)
    i = i + 1
  }
  print("")
}

let text =
  "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" +
  "are$delineated$by$a$single$'dollar'$character,$write$a$program\n" +
  "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n" +
  "column$are$separated$by$at$least$one$space.\n" +
  "Further,$allow$for$each$word$in$a$column$to$be$either$left\n" +
  "justified,$right$justified,$or$center$justified$within$its$column."

let f = newFormatter(text)
printFmt(f, 0)
printFmt(f, 1)
printFmt(f, 2)
