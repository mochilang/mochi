// Mochi implementation of Rosetta "Display a linear combination" task
// Translated from Go version in tests/rosetta/x/Go/display-a-linear-combination.go

fun padRight(s: string, w: int): string {
  var r = s
  while len(r) < w {
    r = r + " "
  }
  return r
}

fun linearCombo(c: list<int>): string {
  var out = ""
  var i = 0
  while i < len(c) {
    let n = c[i]
    if n != 0 {
      var op = ""
      if n < 0 && len(out) == 0 {
        op = "-"
      } else if n < 0 {
        op = " - "
      } else if n > 0 && len(out) == 0 {
        op = ""
      } else {
        op = " + "
      }
      var av = n
      if av < 0 {
        av = -av
      }
      var coeff = str(av) + "*"
      if av == 1 {
        coeff = ""
      }
      out = out + op + coeff + "e(" + str(i + 1) + ")"
    }
    i = i + 1
  }
  if len(out) == 0 {
    return "0"
  }
  return out
}

fun main() {
  let combos = [
    [1, 2, 3],
    [0, 1, 2, 3],
    [1, 0, 3, 4],
    [1, 2, 0],
    [0, 0, 0],
    [0],
    [1, 1, 1],
    [-1, -1, -1],
    [-1, -2, 0, -3],
    [-1],
  ]
  var idx = 0
  while idx < len(combos) {
    let c = combos[idx]
    // Format list as Go does: [1, 2, 3]
    var t = "["
    var j = 0
    while j < len(c) {
      t = t + str(c[j])
      if j < len(c) - 1 {
        t = t + ", "
      }
      j = j + 1
    }
    t = t + "]"
    let lc = linearCombo(c)
    print(padRight(t, 15) + "  ->  " + lc)
    idx = idx + 1
  }
}

main()
