import go "strings" as strings auto

// Result represents a single field parsed from the diagram
 type Result {
  name: string,
  size: int,
  start: int,
  end: int,
 }

fun validate(diagram: string): list<string> {
  var lines: list<string> = []
  for line in strings.Split(diagram, "\n") {
    let trimmed = strings.TrimSpace(line)
    if trimmed != "" {
      lines = lines + [trimmed]
    }
  }
  return lines
}

fun decode(lines: list<string>): list<Result> {
  print("Name     Bits  Start  End")
  print("=======  ====  =====  ===")
  var results: list<Result> = []
  var start = 0
  let width = len(lines[0])
  var i = 0
  while i < len(lines) {
    if i % 2 == 1 {
      let inner = lines[i][1:width-1]
      for part in strings.Split(inner, "|") {
        let size = (len(part) + 1) / 3
        let name = strings.TrimSpace(part)
        let r = Result { name: name, size: size, start: start, end: start + size - 1 }
        results = results + [r]
        print(name, size, start, start + size - 1)
        start = start + size
      }
    }
    i = i + 1
  }
  return results
}

fun hexDigitBits(ch: string): string {
  let c = strings.ToLower(ch)
  if c == "0" { return "0000" }
  if c == "1" { return "0001" }
  if c == "2" { return "0010" }
  if c == "3" { return "0011" }
  if c == "4" { return "0100" }
  if c == "5" { return "0101" }
  if c == "6" { return "0110" }
  if c == "7" { return "0111" }
  if c == "8" { return "1000" }
  if c == "9" { return "1001" }
  if c == "a" { return "1010" }
  if c == "b" { return "1011" }
  if c == "c" { return "1100" }
  if c == "d" { return "1101" }
  if c == "e" { return "1110" }
  if c == "f" { return "1111" }
  return ""
}

fun hex2bin(hex: string): string {
  var res = ""
  var i = 0
  while i < len(hex) {
    res = res + hexDigitBits(hex[i])
    i = i + 1
  }
  return res
}

fun unpack(results: list<Result>, hex: string) {
  print("\nTest string in hex:")
  print(hex)
  print("\nTest string in binary:")
  let bin = hex2bin(hex)
  print(bin)
  print("\nUnpacked:\n")
  print("Name     Size  Bit pattern")
  print("=======  ====  ================")
  for r in results {
    print(r.name, r.size, bin[r.start:r.end+1])
  }
}

fun main() {
  let diagram =
        "        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n" +
        "         |                      ID                       |\n" +
        "        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n" +
        "        |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |\n" +
        "        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n" +
        "        |                    QDCOUNT                    |\n" +
        "        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n" +
        "\n" +
        "        |                    ANCOUNT                    |\n" +
        "        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n" +
        "        |                    NSCOUNT                    |\n" +
        "        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n" +
        "        |                    ARCOUNT                    |\n" +
        "        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n"
  let lines = validate(diagram)
  print("Diagram after trimming whitespace and removal of blank lines:\n")
  for line in lines { print(line) }
  print("\nDecoded:\n")
  let results = decode(lines)
  let hex = "78477bbf5496e12e1bf169a4"
  unpack(results, hex)
}

main()
