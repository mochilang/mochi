// Mochi implementation of Rosetta "Function frequency" task
// Counts function call frequency in a Go source file.

fun join(xs: list<string>, sep: string): string {
  var res = ""
  var i = 0
  while i < len(xs) {
    if i > 0 { res = res + sep }
    res = res + xs[i]
    i = i + 1
  }
  return res
}

fun sortPairs(xs: list<map<string, any>>): list<map<string, any>> {
  var arr = xs
  var i = 1
  while i < len(arr) {
    var j = i
    while j > 0 && (arr[j-1]["count"] as int) < (arr[j]["count"] as int) {
      let tmp = arr[j-1]
      arr[j-1] = arr[j]
      arr[j] = tmp
      j = j - 1
    }
    i = i + 1
  }
  return arr
}

fun isAlphaNumDot(ch: string): bool {
  return (ch >= "A" && ch <= "Z") || (ch >= "a" && ch <= "z") || (ch >= "0" && ch <= "9") || ch == "_" || ch == "."
}

fun main() {
  // Go source file lines without build tags
  let srcLines = [
"package main",
"",
"import (",
"    \"fmt\"",
"    \"go/ast\"",
"    \"go/parser\"",
"    \"go/token\"",
"    \"io/ioutil\"",
"    \"os\"",
"    \"sort\"",
")",
"",
"func main() {",
"    if len(os.Args) != 2 {",
"        fmt.Println(\"usage ff <go source filename>\")",
"        return",
"    }",
"    src, err := ioutil.ReadFile(os.Args[1])",
"    if err != nil {",
"        fmt.Println(err)",
"        return",
"    }",
"    fs := token.NewFileSet()",
"    a, err := parser.ParseFile(fs, os.Args[1], src, 0)",
"    if err != nil {",
"        fmt.Println(err)",
"        return",
"    }",
"    f := fs.File(a.Pos())",
"    m := make(map[string]int)",
"    ast.Inspect(a, func(n ast.Node) bool {",
"        if ce, ok := n.(*ast.CallExpr); ok {",
"            start := f.Offset(ce.Pos())",
"            end := f.Offset(ce.Lparen)",
"            m[string(src[start:end])]++",
"        }",
"        return true",
"    })",
"    cs := make(calls, 0, len(m))",
"    for k, v := range m {",
"        cs = append(cs, &call{k, v})",
"    }",
"    sort.Sort(cs)",
"    for i, c := range cs {",
"        fmt.Printf(\"%-20s %4d\\n\", c.expr, c.count)",
"        if i == 9 {",
"            break",
"        }",
"    }",
"}",
"",
"type call struct {",
"    expr  string",
"    count int",
"}",
"type calls []*call",
"",
"func (c calls) Len() int           { return len(c) }",
"func (c calls) Swap(i, j int)      { c[i], c[j] = c[j], c[i] }",
"func (c calls) Less(i, j int) bool { return c[i].count > c[j].count }",
  ]
  let src = join(srcLines, "\n")
  
  var freq: map<string, int> = {}
  var i = 0
  var order: list<string> = []
  while i < len(src) {
    let ch = substring(src, i, i+1)
    if (ch >= "A" && ch <= "Z") || (ch >= "a" && ch <= "z") || ch == "_" {
      var j = i + 1
      while j < len(src) && isAlphaNumDot(substring(src, j, j+1)) {
        j = j + 1
      }
      let token = substring(src, i, j)
      var k = j
      while k < len(src) {
        let cc = substring(src, k, k+1)
        if cc == " " || cc == "\t" || cc == "\n" || cc == "\r" { k = k + 1 } else { break }
      }
      if k < len(src) && substring(src, k, k+1) == "(" {
        var p = i - 1
        while p >= 0 && (substring(src, p, p+1) == " " || substring(src, p, p+1) == "\t") { p = p - 1 }
        var skip = false
        if p >= 3 {
          let before = substring(src, p-3, p+1)
          if before == "func" { skip = true }
        }
          if !skip {
            if token in freq { freq[token] = freq[token] + 1 } else { freq[token] = 1; order = append(order, token) }
          }
      }
      i = j
    } else {
      i = i + 1
    }
  }

  var pairs: list<map<string, any>> = []
  for t in order {
    pairs = append(pairs, {"expr": t, "count": freq[t]})
  }
  pairs = sortPairs(pairs)

  var idx = 0
  while idx < len(pairs) && idx < 10 {
    let p = pairs[idx]
    print(p["expr"] + " " + str(p["count"]))
    idx = idx + 1
  }
}

main()
