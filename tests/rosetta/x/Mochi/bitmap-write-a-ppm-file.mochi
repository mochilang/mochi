// Mochi implementation for Bitmap-Write-a-PPM-file

type Colour {
  R: int
  G: int
  B: int
}

type Bitmap {
  width: int
  height: int
  pixels: list<list<Colour>>
}

fun newBitmap(w: int, h: int, c: Colour): Bitmap {
  var rows: list<list<Colour>> = []
  var y = 0
  while y < h {
    var row: list<Colour> = []
    var x = 0
    while x < w {
      row = append(row, c)
      x = x + 1
    }
    rows = append(rows, row)
    y = y + 1
  }
  return Bitmap{width: w, height: h, pixels: rows}
}

fun setPixel(b: Bitmap, x: int, y: int, c: Colour) {
  var rows = b.pixels
  var row = rows[y]
  row[x] = c
  rows[y] = row
  b.pixels = rows
}

fun fillRect(b: Bitmap, x: int, y: int, w: int, h: int, c: Colour) {
  var yy = y
  while yy < y + h {
    var xx = x
    while xx < x + w {
      setPixel(b, xx, yy, c)
      xx = xx + 1
    }
    yy = yy + 1
  }
}

fun pad(n: int, width: int): string {
  var s = str(n)
  while len(s) < width { s = " " + s }
  return s
}

fun writePPMP3(b: Bitmap): string {
  var maxv = 0
  var y = 0
  while y < b.height {
    var x = 0
    while x < b.width {
      let p = b.pixels[y][x]
      if p.R > maxv { maxv = p.R }
      if p.G > maxv { maxv = p.G }
      if p.B > maxv { maxv = p.B }
      x = x + 1
    }
    y = y + 1
  }
  var out = "P3\n# generated from Bitmap.writeppmp3\n" + str(b.width) + " " + str(b.height) + "\n" + str(maxv) + "\n"
  var numsize = len(str(maxv))
  y = b.height - 1
  while y >= 0 {
    var line = ""
    var x = 0
    while x < b.width {
      let p = b.pixels[y][x]
      line = line + "   " + pad(p.R, numsize) + " " + pad(p.G, numsize) + " " + pad(p.B, numsize)
      x = x + 1
    }
    out = out + line
    if y > 0 { out = out + "\n" } else { out = out + "\n" }
    y = y - 1
  }
  return out
}

fun main() {
  let black = Colour{R:0,G:0,B:0}
  let white = Colour{R:255,G:255,B:255}
  var bm = newBitmap(4,4, black)
  fillRect(bm, 1, 0, 1, 2, white)
  setPixel(bm, 3, 3, Colour{R:127,G:0,B:63})
  let ppm = writePPMP3(bm)
  print(ppm)
}

main()
