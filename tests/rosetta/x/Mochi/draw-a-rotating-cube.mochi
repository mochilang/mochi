// Mochi implementation of Rosetta "Draw a rotating cube" task
// Generates a simple ASCII animation using basic trigonometry.

let PI: float = 3.141592653589793
let TWO_PI: float = 6.283185307179586

fun _mod(x: float, m: float): float {
  return x - ((x / m) as int as float) * m
}

fun _sin(x: float): float {
  let y = _mod(x + PI, TWO_PI) - PI
  let y2 = y * y
  let y3 = y2 * y
  let y5 = y3 * y2
  let y7 = y5 * y2
  return y - y3/6.0 + y5/120.0 - y7/5040.0
}

fun _cos(x: float): float {
  let y = _mod(x + PI, TWO_PI) - PI
  let y2 = y * y
  let y4 = y2 * y2
  let y6 = y4 * y2
  return 1.0 - y2/2.0 + y4/24.0 - y6/720.0
}

type Point3 { x: float, y: float, z: float }
type Point2 { x: int, y: int }

let nodes: list<Point3> = [
  Point3{ x: -1.0, y: -1.0, z: -1.0 },
  Point3{ x: -1.0, y: -1.0, z: 1.0 },
  Point3{ x: -1.0, y: 1.0, z: -1.0 },
  Point3{ x: -1.0, y: 1.0, z: 1.0 },
  Point3{ x: 1.0, y: -1.0, z: -1.0 },
  Point3{ x: 1.0, y: -1.0, z: 1.0 },
  Point3{ x: 1.0, y: 1.0, z: -1.0 },
  Point3{ x: 1.0, y: 1.0, z: 1.0 },
]

let edges: list<list<int>> = [
  [0,1],[1,3],[3,2],[2,0],
  [4,5],[5,7],[7,6],[6,4],
  [0,4],[1,5],[2,6],[3,7],
]

fun rotate(p: Point3, ax: float, ay: float): Point3 {
  let sinx = _sin(ax)
  let cosx = _cos(ax)
  let siny = _sin(ay)
  let cosy = _cos(ay)
  let x1 = p.x
  let y1 = p.y*cosx - p.z*sinx
  let z1 = p.y*sinx + p.z*cosx
  let x2 = x1*cosy + z1*siny
  let z2 = -x1*siny + z1*cosy
  return Point3{ x: x2, y: y1, z: z2 }
}

let width = 40
let height = 20
let distance = 3.0
let scale = 8.0

fun project(p: Point3): Point2 {
  let factor = scale / (p.z + distance)
  let x = (p.x * factor) as int + width/2
  let y = (-p.y * factor) as int + height/2
  return Point2{ x: x, y: y }
}

fun clearGrid(): list<list<string>> {
  var g: list<list<string>> = []
  var y = 0
  while y < height {
    var row: list<string> = []
    var x = 0
    while x < width {
      row = append(row, " ")
      x = x + 1
    }
    g = append(g, row)
    y = y + 1
  }
  return g
}

fun drawPoint(g: list<list<string>>, x: int, y: int, ch: string) {
  if x >= 0 && x < width && y >= 0 && y < height {
    var row = g[y]
    row[x] = ch
    g[y] = row
  }
}

fun bresenham(x0:int,y0:int,x1:int,y1:int,g:list<list<string>>,ch:string) {
  var dx = x1 - x0
  if dx < 0 { dx = -dx }
  var dy = y1 - y0
  if dy < 0 { dy = -dy }
  var sx = -1
  if x0 < x1 { sx = 1 }
  var sy = -1
  if y0 < y1 { sy = 1 }
  var err = dx - dy
  while true {
    drawPoint(g, x0, y0, ch)
    if x0 == x1 && y0 == y1 { break }
    var e2 = 2*err
    if e2 > (-dy) {
      err = err - dy
      x0 = x0 + sx
    }
    if e2 < dx {
      err = err + dx
      y0 = y0 + sy
    }
  }
}

fun render(g:list<list<string>>): string {
  var out = ""
  var y = 0
  while y < height {
    var line = ""
    var x = 0
    while x < width {
      line = line + g[y][x]
      x = x + 1
    }
    out = out + line + "\n"
    y = y + 1
  }
  return out
}

fun main() {
  var f = 0
  while f < 10 {
    var grid = clearGrid()
    var rot: list<Point2> = []
    var i = 0
    var ay = (PI/4.0) + (f as float)*PI/10.0
    while i < len(nodes) {
      let p = rotate(nodes[i], PI/4.0, ay)
      let pp = project(p)
      rot = append(rot, pp)
      i = i + 1
    }
    var e = 0
   while e < len(edges) {
     let a = edges[e][0]
     let b = edges[e][1]
     let p1 = rot[a]
     let p2 = rot[b]
     bresenham(p1.x, p1.y, p2.x, p2.y, grid, "#")
     e = e + 1
   }
    print(render(grid))
    f = f + 1
  }
}

main()
