// Mochi implementation of the Barnsley fern fractal
// Generates an ASCII representation similar to the Go version which
// outputs a PNG image. We keep the algorithm deterministic for testing.

let xMin = -2.1820
let xMax = 2.6558
let yMin = 0.0
let yMax = 9.9983

let width = 60
let nIter = 10000

let dx = xMax - xMin
let dy = yMax - yMin
let height = (width * dy / dx) as int

var grid: list<list<string>> = []
var row = 0
while row < height {
  var line: list<string> = []
  var col = 0
  while col < width {
    line = append(line, " ")
    col = col + 1
  }
  grid = append(grid, line)
  row = row + 1
}

var seed = 1
fun randInt(s: int, n: int): list<int> {
  let next = (s * 1664525 + 1013904223) % 2147483647
  return [next, next % n]
}

var x = 0.0
var y = 0.0

// initial plot
var ix = ((width as float) * (x - xMin) / dx) as int
var iy = ((height as float) * (yMax - y) / dy) as int
if ix >= 0 && ix < width && iy >= 0 && iy < height {
  grid[iy][ix] = "*"
}

var i = 0
while i < nIter {
  var res = randInt(seed, 100)
  seed = res[0]
  let r = res[1]
  if r < 85 {
    let nx = 0.85 * x + 0.04 * y
    let ny = -0.04 * x + 0.85 * y + 1.6
    x = nx
    y = ny
  } else if r < 92 {
    let nx = 0.2 * x - 0.26 * y
    let ny = 0.23 * x + 0.22 * y + 1.6
    x = nx
    y = ny
  } else if r < 99 {
    let nx = -0.15 * x + 0.28 * y
    let ny = 0.26 * x + 0.24 * y + 0.44
    x = nx
    y = ny
  } else {
    x = 0.0
    y = 0.16 * y
  }
  ix = ((width as float) * (x - xMin) / dx) as int
  iy = ((height as float) * (yMax - y) / dy) as int
  if ix >= 0 && ix < width && iy >= 0 && iy < height {
    grid[iy][ix] = "*"
  }
  i = i + 1
}

row = 0
while row < height {
  var line = ""
  var col = 0
  while col < width {
    line = line + grid[row][col]
    col = col + 1
  }
  print(line)
  row = row + 1
}
