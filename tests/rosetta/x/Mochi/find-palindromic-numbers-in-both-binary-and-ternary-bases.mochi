// Mochi implementation of palindromic numbers in both binary and ternary bases
// Translated from Go version

fun toBase(n: int, b: int): string {
  if n == 0 { return "0" }
  var s = ""
  var x = n
  while x > 0 {
    s = str(x % b) + s
    x = (x / b) as int
  }
  return s
}

fun parseIntStr(str: string): int {
  var i = 0
  var neg = false
  if len(str) > 0 && str[0] == "-" {
    neg = true
    i = 1
  }
  var n = 0
  while i < len(str) {
    n = n * 10 + (str[i:i+1] as int) - ("0" as int)
    i = i + 1
  }
  if neg { n = -n }
  return n
}

fun parseIntBase(s: string, b: int): int {
  var n = 0
  var i = 0
  while i < len(s) {
    n = n * b + parseIntStr(s[i:i+1])
    i = i + 1
  }
  return n
}

fun reverseStr(s: string): string {
  var out = ""
  var i = len(s) - 1
  while i >= 0 {
    out = out + s[i:i+1]
    i = i - 1
  }
  return out
}

fun isPalindrome(s: string): bool { return s == reverseStr(s) }

fun isPalindromeBin(n: int): bool {
  let b = toBase(n, 2)
  return isPalindrome(b)
}

fun myMin(a: int, b: int): int { if a < b { return a } return b }
fun myMax(a: int, b: int): int { if a > b { return a } return b }

fun reverse3(n: int): int {
  var x = 0
  var y = n
  while y != 0 {
    x = x * 3 + (y % 3)
    y = (y / 3) as int
  }
  return x
}

fun show(n: int) {
  print("Decimal : " + str(n))
  print("Binary  : " + toBase(n,2))
  print("Ternary : " + toBase(n,3))
  print("")
}

fun main() {
  print("The first 6 numbers which are palindromic in both binary and ternary are :\n")
  show(0)
  var count = 1
  var lo = 0
  var hi = 1
  var pow2 = 1
  var pow3 = 1
  while true {
    var i = lo
    while i < hi {
      var n = (i*3 + 1) * pow3 + reverse3(i)
      if isPalindromeBin(n) {
        show(n)
        count = count + 1
        if count >= 6 { return }
      }
      i = i + 1
    }
    if i == pow3 {
      pow3 = pow3 * 3
    } else {
      pow2 = pow2 * 4
    }
    while true {
      while pow2 <= pow3 { pow2 = pow2 * 4 }
      var lo2 = ((pow2 / pow3 - 1) / 3) as int
      var hi2 = ((pow2 * 2 / pow3 - 1) / 3) as int + 1
      var lo3 = (pow3 / 3) as int
      var hi3 = pow3
      if lo2 >= hi3 {
        pow3 = pow3 * 3
      } else if lo3 >= hi2 {
        pow2 = pow2 * 4
      } else {
        lo = myMax(lo2, lo3)
        hi = myMin(hi2, hi3)
        break
      }
    }
  }
}

main()
