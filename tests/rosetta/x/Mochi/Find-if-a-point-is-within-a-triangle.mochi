fun sign(px: float, py: float, ax: float, ay: float, bx: float, by: float): float {
  return (px - bx) * (ay - by) - (ax - bx) * (py - by)
}

fun pointInTriangle(px: float, py: float,
                    ax: float, ay: float,
                    bx: float, by: float,
                    cx: float, cy: float): bool {
  let d1 = sign(px, py, ax, ay, bx, by)
  let d2 = sign(px, py, bx, by, cx, cy)
  let d3 = sign(px, py, cx, cy, ax, ay)
  let hasNeg = d1 < 0.0 || d2 < 0.0 || d3 < 0.0
  let hasPos = d1 > 0.0 || d2 > 0.0 || d3 > 0.0
  return !(hasNeg && hasPos)
}

// triangle 1
let points = [[0.0, 0.0], [0.0, 1.0], [3.0, 1.0]]
let tri1 = [[3.0/2.0, 12.0/5.0], [51.0/10.0, -31.0/10.0], [-19.0/5.0, 1.2]]
print("Triangle is", tri1)
var ax = tri1[0][0]
var ay = tri1[0][1]
var bx = tri1[1][0]
var by = tri1[1][1]
var cx = tri1[2][0]
var cy = tri1[2][1]
for p in points {
  let inside = pointInTriangle(p[0], p[1], ax, ay, bx, by, cx, cy)
  print("Point", p, "is within triangle?", inside)
}
print("")

// triangle 2
let tri2 = [[1.0/10.0, 1.0/9.0], [100.0/8.0, 100.0/3.0], [100.0/4.0, 100.0/9.0]]
print("Triangle is", tri2)
ax = tri2[0][0]
ay = tri2[0][1]
bx = tri2[1][0]
by = tri2[1][1]
cx = tri2[2][0]
cy = tri2[2][1]
let x = ax + (3.0/7.0) * (bx - ax)
let y = ay + (3.0/7.0) * (by - ay)
let pt = [x, y]
var inside = pointInTriangle(x, y, ax, ay, bx, by, cx, cy)
print("Point", pt, "is within triangle ?", inside)
print("")

// triangle 3
let tri3 = [[1.0/10.0, 1.0/9.0], [100.0/8.0, 100.0/3.0], [-100.0/8.0, 100.0/6.0]]
print("Triangle is", tri3)
cx = tri3[2][0]
cy = tri3[2][1]
inside = pointInTriangle(x, y, ax, ay, bx, by, cx, cy)
print("Point", pt, "is within triangle ?", inside)

