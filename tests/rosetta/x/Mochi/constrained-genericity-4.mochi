// Mochi translation of Rosetta "Constrained genericity" example 4
// Demonstrates using the interface and concrete type.

// Interface
 type Eatable {
  fun eat()
 }

// Container type
 type Foodbox = list<Eatable>

// Concrete type implementing Eatable
 type PeelFirst {
  value: string

  fun eat() {
    // peel code goes here
    print("mm, that " + value + " was good!")
  }
 }

 fun main() {
  var fb: Foodbox = [
    PeelFirst{ value: "banana" },
    PeelFirst{ value: "mango" }
  ]
  var f0 = fb[0]
  f0.eat()
 }

 main()
