// Mochi implementation of Rosetta "Averages/Median" task (variant 2)
// Uses a selection algorithm to avoid full sorting.

fun sel(list: list<float>, k: int): float {
  var i = 0
  while i <= k {
    var minIndex = i
    var j = i + 1
    while j < len(list) {
      if list[j] < list[minIndex] {
        minIndex = j
      }
      j = j + 1
    }
    let tmp = list[i]
    list[i] = list[minIndex]
    list[minIndex] = tmp
    i = i + 1
  }
  return list[k]
}

fun median(a: list<float>): float {
  var arr = a
  let half = (len(arr) / 2) as int
  let med = sel(arr, half)
  if len(arr) % 2 == 0 {
    return (med + arr[half-1]) / 2.0
  }
  return med
}

print(str(median([3.0, 1.0, 4.0, 1.0])))
print(str(median([3.0, 1.0, 4.0, 1.0, 5.0])))
