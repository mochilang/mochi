// Mochi implementation of the Flipping Bits Game
// Generates a random target board and a shuffled board, then
// solves it using row/column flips.

fun randInt(seed: int, n: int): list<int> {
  let next = (seed * 1664525 + 1013904223) % 2147483647
  return [next, next % n]
}

fun newBoard(n: int, seed: int): list<any> {
  var board: list<list<int>> = []
  var s = seed
  var i = 0
  while i < n {
    var row: list<int> = []
    var j = 0
    while j < n {
      var r = randInt(s, 2)
      s = r[0]
      row = append(row, r[1])
      j = j + 1
    }
    board = append(board, row)
    i = i + 1
  }
  return [board, s]
}

fun copyBoard(b: list<list<int>>): list<list<int>> {
  var nb: list<list<int>> = []
  var i = 0
  while i < len(b) {
    var row: list<int> = []
    var j = 0
    while j < len(b[i]) {
      row = append(row, b[i][j])
      j = j + 1
    }
    nb = append(nb, row)
    i = i + 1
  }
  return nb
}

fun flipRow(b: list<list<int>>, r: int): list<list<int>> {
  var j = 0
  while j < len(b[r]) {
    b[r][j] = 1 - b[r][j]
    j = j + 1
  }
  return b
}

fun flipCol(b: list<list<int>>, c: int): list<list<int>> {
  var i = 0
  while i < len(b) {
    b[i][c] = 1 - b[i][c]
    i = i + 1
  }
  return b
}

fun boardsEqual(a: list<list<int>>, b: list<list<int>>): bool {
  var i = 0
  while i < len(a) {
    var j = 0
    while j < len(a[i]) {
      if a[i][j] != b[i][j] { return false }
      j = j + 1
    }
    i = i + 1
  }
  return true
}

fun shuffleBoard(b: list<list<int>>, seed: int): list<any> {
  var s = seed
  var n = len(b)
  var k = 0
  while k < 2 * n {
    var r = randInt(s, n)
    s = r[0]
    let idx = r[1] as int
    if k % 2 == 0 {
      b = flipRow(b, idx)
    } else {
      b = flipCol(b, idx)
    }
    k = k + 1
  }
  return [b, s]
}

fun solve(board: list<list<int>>, target: list<list<int>>): map<string, list<int>> {
  let n = len(board)
  var row: list<int> = []
  var col: list<int> = []
  var i = 0
  while i < n {
    let diff = if board[i][0] != target[i][0] { 1 } else { 0 }
    row = append(row, diff)
    i = i + 1
  }
  var j = 0
  while j < n {
    let diff = if board[0][j] != target[0][j] { 1 } else { 0 }
    let val = (diff + row[0]) % 2
    col = append(col, val)
    j = j + 1
  }
  return { "row": row, "col": col }
}

fun applySolution(b: list<list<int>>, sol: map<string, list<int>>): list<any> {
  var board = b
  var moves = 0
  var i = 0
  while i < len(sol["row"]) {
    if sol["row"][i] == 1 {
      board = flipRow(board, i)
      moves = moves + 1
    }
    i = i + 1
  }
  var j = 0
  while j < len(sol["col"]) {
    if sol["col"][j] == 1 {
      board = flipCol(board, j)
      moves = moves + 1
    }
    j = j + 1
  }
  return [board, moves]
}

fun printBoard(b: list<list<int>>) {
  var i = 0
  while i < len(b) {
    var line = ""
    var j = 0
    while j < len(b[i]) {
      line = line + str(b[i][j])
      if j < len(b[i]) - 1 { line = line + " " }
      j = j + 1
    }
    print(line)
    i = i + 1
  }
}

fun main() {
  let n = 3
  var seed = 1
  var res = newBoard(n, seed)
  var target = res[0] as list<list<int>>
  seed = res[1] as int
  var board = copyBoard(target)

  while true {
    var sres = shuffleBoard(copyBoard(board), seed)
    board = sres[0] as list<list<int>>
    seed = sres[1] as int
    if !boardsEqual(board, target) { break }
  }

  print("Target:")
  printBoard(target)
  print("Board:")
  printBoard(board)

  let sol = solve(board, target)
  var ares = applySolution(board, sol)
  board = ares[0] as list<list<int>>
  let moves = ares[1] as int

  print("Solved:")
  printBoard(board)
  print("Moves: " + str(moves))
}

main()
