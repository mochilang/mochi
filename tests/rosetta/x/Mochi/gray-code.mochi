fun xor(a: int, b: int): int {
  var res = 0
  var bit = 1
  var x = a
  var y = b
  while x > 0 || y > 0 {
    if ((x % 2 + y % 2) % 2 == 1) { res = res + bit }
    x = x / 2
    y = y / 2
    bit = bit * 2
  }
  return res
}

fun enc(b: int): int { return xor(b, b / 2) }

fun dec(g: int): int {
  var b = 0
  var x = g
  while x > 0 {
    b = xor(b, x)
    x = x / 2
  }
  return b
}

fun binary(n: int): string {
  if n == 0 { return "0" }
  var s = ""
  var x = n
  while x > 0 {
    if x % 2 == 1 { s = "1" + s } else { s = "0" + s }
    x = x / 2
  }
  return s
}

fun pad5(s: string): string {
  var p = s
  while len(p) < 5 { p = "0" + p }
  return p
}

fun main() {
  print("decimal  binary   gray    decoded")
  var b = 0
  while b < 32 {
    let g = enc(b)
    let d = dec(g)
    print("  " + pad5(binary(b)) + "   " + pad5(binary(g)) + "   " + pad5(binary(d)) + "  " + str(d))
    b = b + 1
  }
}

main()
