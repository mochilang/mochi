// Mochi implementation of Rosetta "Bioinformatics/Sequence mutation" task
// Deterministic version using a simple linear congruential generator


fun randInt(s: int, n: int): list<int> {
  let next = (s * 1664525 + 1013904223) % 2147483647
  return [next, next % n]
}

fun padLeft(s: string, w: int): string {
  var res = ""
  var n = w - len(s)
  while n > 0 {
    res = res + " "
    n = n - 1
  }
  return res + s
}

fun makeSeq(s: int, le: int): list<any> {
  let bases = "ACGT"
  var out = ""
  var i = 0
  while i < le {
    var r = randInt(s, 4)
    s = r[0]
    let idx = r[1] as int
    out = out + substring(bases, idx, idx + 1)
    i = i + 1
  }
  return [s, out]
}

fun mutate(s: int, dna: string, w: list<int>): list<any> {
  let bases = "ACGT"
  let le = len(dna)
  var r = randInt(s, le)
  s = r[0]
  let p = r[1] as int
  r = randInt(s, 300)
  s = r[0]
  let x = r[1] as int

  var arr: list<string> = []
  var i = 0
  while i < le {
    arr = append(arr, substring(dna, i, i+1))
    i = i + 1
  }

  if x < w[0] {
    r = randInt(s, 4)
    s = r[0]
    let idx = r[1] as int
    let b = substring(bases, idx, idx+1)
    print("  Change @" + padLeft(str(p), 3) + " '" + arr[p] + "' to '" + b + "'")
    arr[p] = b
  } else if x < w[0] + w[1] {
    print("  Delete @" + padLeft(str(p), 3) + " '" + arr[p] + "'")
    var j = p
    while j < len(arr) - 1 {
      arr[j] = arr[j+1]
      j = j + 1
    }
    arr = arr[0:len(arr)-1]
  } else {
    r = randInt(s, 4)
    s = r[0]
    let idx2 = r[1] as int
    let b = substring(bases, idx2, idx2+1)
    arr = append(arr, "")
    var j = len(arr) - 1
    while j > p {
      arr[j] = arr[j-1]
      j = j - 1
    }
    print("  Insert @" + padLeft(str(p), 3) + " '" + b + "'")
    arr[p] = b
  }

  var out = ""
  i = 0
  while i < len(arr) {
    out = out + arr[i]
    i = i + 1
  }
  return [s, out]
}

fun prettyPrint(dna: string, rowLen: int) {
  print("SEQUENCE:")
  let le = len(dna)
  var i = 0
  while i < le {
    var k = i + rowLen
    if k > le { k = le }
    print(padLeft(str(i), 5) + ": " + dna[i:k])
    i = i + rowLen
  }
  var a = 0
  var c = 0
  var g = 0
  var t = 0
  var idx = 0
  while idx < le {
    let ch = substring(dna, idx, idx+1)
    if ch == "A" { a = a + 1 } else {
      if ch == "C" { c = c + 1 } else {
        if ch == "G" { g = g + 1 } else {
          if ch == "T" { t = t + 1 }
        }
      }
    }
    idx = idx + 1
  }
  print("")
  print("BASE COUNT:")
  print("    A: " + padLeft(str(a), 3))
  print("    C: " + padLeft(str(c), 3))
  print("    G: " + padLeft(str(g), 3))
  print("    T: " + padLeft(str(t), 3))
  print("    ------")
  print("    Î£: " + str(le))
  print("    ======")
}

fun wstring(w: list<int>): string {
  return "  Change: " + str(w[0]) + "\n  Delete: " + str(w[1]) + "\n  Insert: " + str(w[2]) + "\n"
}

fun main() {
  var seed = 1
  var res = makeSeq(seed, 250)
  seed = res[0]
  var dna = res[1] as string
  prettyPrint(dna, 50)
  let muts = 10
  let w = [100, 100, 100]
  print("\nWEIGHTS (ex 300):")
  print(wstring(w))
  print("MUTATIONS (" + str(muts) + "):")
  var i = 0
  while i < muts {
    res = mutate(seed, dna, w)
    seed = res[0]
    dna = res[1] as string
    i = i + 1
  }
  print("")
  prettyPrint(dna, 50)
}

main()
