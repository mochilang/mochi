fun main() {
  let INF = 1000000000
  let n = 4
  var dist: list<list<int>> = []
  var next: list<list<int>> = []
  var i: int = 0
  while i < n {
    var row: list<int> = []
    var nrow: list<int> = []
    var j: int = 0
    while j < n {
      if i == j { row = append(row, 0) } else { row = append(row, INF) }
      nrow = append(nrow, 0 - 1)
      j = j + 1
    }
    dist = append(dist, row)
    next = append(next, nrow)
    i = i + 1
  }
  dist[0][2] = -2
  next[0][2] = 2
  dist[2][3] = 2
  next[2][3] = 3
  dist[3][1] = -1
  next[3][1] = 1
  dist[1][0] = 4
  next[1][0] = 0
  dist[1][2] = 3
  next[1][2] = 2
  var k: int = 0
  while k < n {
    var i: int = 0
    while i < n {
      var j: int = 0
      while j < n {
        if dist[i][k] < INF && dist[k][j] < INF {
          let alt = dist[i][k] + dist[k][j]
          if alt < dist[i][j] {
            dist[i][j] = alt
            next[i][j] = next[i][k]
          }
        }
        j = j + 1
      }
      i = i + 1
    }
    k = k + 1
  }
  fun path(u:int, v:int): list<int> {
    var ui:int = u - 1
    var vi:int = v - 1
    if next[ui][vi] == 0 - 1 { return [] }
    var p:list<int> = [u]
    var cur:int = ui
    while cur != vi {
      cur = next[cur][vi]
      p = append(p, cur + 1)
    }
    return p
  }
  fun pathStr(p:list<int>): string {
    var s=""
    var first = true
    var idx:int = 0
    while idx < len(p) {
      let x = p[idx]
      if !first { s = s + " -> " }
      s = s + str(x)
      first = false
      idx = idx + 1
    }
    return s
  }
  print("pair\tdist\tpath")
  var a:int = 0
  while a < n {
    var b:int = 0
    while b < n {
      if a != b {
        print(str(a+1) + " -> " + str(b+1) + "\t" + str(dist[a][b]) + "\t" + pathStr(path(a+1,b+1)))
      }
      b = b + 1
    }
    a = a + 1
  }
}
main()
