fun floorf(x: float): float { let y = x as int; return y as float }
fun indexOf(s: string, ch: string): int { var i=0; while i < len(s) { if substring(s,i,i+1)==ch { return i } i=i+1 } return 0 - 1 }
fun fmt8(x: float): string {
  var y = floorf(x * 100000000.0 + 0.5) / 100000000.0
  var s = str(y)
  var dot = indexOf(s, ".")
  if dot == 0 - 1 { s = s + ".00000000" }
  else {
    var decs = len(s) - dot - 1
    while decs < 8 { s = s + "0"; decs = decs + 1 }
  }
  return s
}

fun pad2(x: int): string { var s = str(x); if len(s) < 2 { s = " " + s }; return s }

fun main() {
  let maxIt = 13
  let maxItJ = 10
  var a1 = 1.0
  var a2 = 0.0
  var d1 = 3.2
  print(" i       d")
  var i = 2
  while i <= maxIt {
    var a = a1 + (a1 - a2) / d1
    var j = 1
    while j <= maxItJ {
      var x = 0.0
      var y = 0.0
      var k = 1
      let limit = pow_int(2, i)
      while k <= limit {
        y = 1.0 - 2.0*y*x
        x = a - x*x
        k = k + 1
      }
      a = a - x / y
      j = j + 1
    }
    var d = (a1 - a2) / (a - a1)
    print(pad2(i) + "    " + fmt8(d))
    d1 = d
    a2 = a1
    a1 = a
    i = i + 1
  }
}

fun pow_int(base: int, exp: int): int {
  var r = 1
  var b = base
  var e = exp
  while e > 0 {
    if e % 2 == 1 { r = r * b }
    b = b * b
    e = (e / 2) as int
  }
  return r
}

main()
