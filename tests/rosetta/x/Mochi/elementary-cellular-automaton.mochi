fun bitAt(x: int, idx: int): int {
  var v = x
  var i = 0
  while i < idx {
    v = (v / 2) as int
    i = i + 1
  }
  return v % 2
}

fun outputState(state: string) {
  var line = ""
  var i = 0
  while i < len(state) {
    if state[i:i+1] == "1" { line = line + "#" } else { line = line + " " }
    i = i + 1
  }
  print(line)
}

fun step(state: string, r: int): string {
  let cells = len(state)
  var out = ""
  var i = 0
  while i < cells {
    let l = state[(i - 1 + cells) % cells:(i - 1 + cells) % cells + 1]
    let c = state[i:i+1]
    let rt = state[(i + 1) % cells:(i + 1) % cells + 1]
    var idx = 0
    if l == "1" { idx = idx + 4 }
    if c == "1" { idx = idx + 2 }
    if rt == "1" { idx = idx + 1 }
    if bitAt(r, idx) == 1 { out = out + "1" } else { out = out + "0" }
    i = i + 1
  }
  return out
}

fun elem(r: int, cells: int, generations: int, state: string) {
  outputState(state)
  var g = 0
  var s = state
  while g < generations {
    s = step(s, r)
    outputState(s)
    g = g + 1
  }
}

fun randInit(cells: int, seed: int): string {
  var s = ""
  var val = seed
  var i = 0
  while i < cells {
    val = (val * 1664525 + 1013904223) % 2147483647
    if val % 2 == 0 { s = s + "0" } else { s = s + "1" }
    i = i + 1
  }
  return s
}

fun singleInit(cells: int): string {
  var s = ""
  var i = 0
  while i < cells {
    if i == cells / 2 { s = s + "1" } else { s = s + "0" }
    i = i + 1
  }
  return s
}

fun main() {
  let cells = 20
  let generations = 9
  print("Single 1, rule 90:")
  var state = singleInit(cells)
  elem(90, cells, generations, state)
  print("Random intial state, rule 30:")
  state = randInit(cells, 3)
  elem(30, cells, generations, state)
}

main()
