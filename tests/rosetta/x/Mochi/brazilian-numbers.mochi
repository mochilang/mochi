// Mochi implementation of Rosetta "Brazilian numbers" task
// Translated from Go version in tests/rosetta/x/Go/brazilian-numbers-1.go

fun sameDigits(n: int, b: int): bool {
  var f = n % b
  n = (n / b) as int
  while n > 0 {
    if n % b != f {
      return false
    }
    n = (n / b) as int
  }
  return true
}

fun isBrazilian(n: int): bool {
  if n < 7 {
    return false
  }
  if n % 2 == 0 && n >= 8 {
    return true
  }
  var b = 2
  while b < n - 1 {
    if sameDigits(n, b) {
      return true
    }
    b = b + 1
  }
  return false
}

fun isPrime(n: int): bool {
  if n < 2 {
    return false
  }
  if n % 2 == 0 {
    return n == 2
  }
  if n % 3 == 0 {
    return n == 3
  }
  var d = 5
  while d * d <= n {
    if n % d == 0 {
      return false
    }
    d = d + 2
    if n % d == 0 {
      return false
    }
    d = d + 4
  }
  return true
}

fun main() {
  var kinds = [" ", " odd ", " prime "]
  for kind in kinds {
    print("First 20" + kind + "Brazilian numbers:")
    var c = 0
    var n = 7
    while true {
      if isBrazilian(n) {
        print(str(n) + " ")
        c = c + 1
        if c == 20 {
          print("\n")
          break
        }
      }
      if kind == " " {
        n = n + 1
      } else if kind == " odd " {
        n = n + 2
      } else { // prime
        while true {
          n = n + 2
          if isPrime(n) {
            break
          }
        }
      }
    }
  }

  var n = 7
  var c = 0
  while c < 100000 {
    if isBrazilian(n) {
      c = c + 1
    }
    n = n + 1
  }
  print("The 100,000th Brazilian number: " + str(n - 1))
}

main()
