// Simulation of window management actions in Mochi

type Window {
  x: int
  y: int
  w: int
  h: int
  maximized: bool
  iconified: bool
  visible: bool
  shifted: bool
}

fun showState(w: Window, label: string) {
  print(label + ": pos=(" + str(w.x) + "," + str(w.y) + ") size=(" + str(w.w) + "x" + str(w.h) + ") max=" + str(w.maximized) + " icon=" + str(w.iconified) + " visible=" + str(w.visible))
}

fun maximize(w: Window): Window {
  w.maximized = true
  w.w = 800
  w.h = 600
  return w
}

fun unmaximize(w: Window): Window {
  w.maximized = false
  w.w = 640
  w.h = 480
  return w
}

fun iconify(w: Window): Window {
  w.iconified = true
  w.visible = false
  return w
}

fun deiconify(w: Window): Window {
  w.iconified = false
  w.visible = true
  return w
}

fun hide(w: Window): Window {
  w.visible = false
  return w
}

fun showWindow(w: Window): Window {
  w.visible = true
  return w
}

fun move(w: Window): Window {
  if w.shifted {
    w.x = w.x - 10
    w.y = w.y - 10
  } else {
    w.x = w.x + 10
    w.y = w.y + 10
  }
  w.shifted = !w.shifted
  return w
}

fun main() {
  var win = Window{ x: 100, y: 100, w: 640, h: 480, maximized: false, iconified: false, visible: true, shifted: false }
  showState(win, "Start")
  win = maximize(win)
  showState(win, "Maximize")
  win = unmaximize(win)
  showState(win, "Unmaximize")
  win = iconify(win)
  showState(win, "Iconify")
  win = deiconify(win)
  showState(win, "Deiconify")
  win = hide(win)
  showState(win, "Hide")
  win = showWindow(win)
  showState(win, "Show")
  win = move(win)
  showState(win, "Move")
}

main()
