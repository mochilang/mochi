# Mochi implementation of the Rosetta "Fractal tree" task
# Draws a simple ASCII fractal tree using recursion and Bresenham lines

let PI: float = 3.141592653589793

fun _mod(x: float, m: float): float {
  return x - ((x / m) as int as float) * m
}

fun _sin(x: float): float {
  let y = _mod(x + PI, 2.0 * PI) - PI
  let y2 = y * y
  let y3 = y2 * y
  let y5 = y3 * y2
  let y7 = y5 * y2
  return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0
}

fun _cos(x: float): float {
  let y = _mod(x + PI, 2.0 * PI) - PI
  let y2 = y * y
  let y4 = y2 * y2
  let y6 = y4 * y2
  return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0
}

let width = 80
let height = 40
let depth = 6
let angle = 12.0
let length = 12.0
let frac = 0.8

fun clearGrid(): list<list<string>> {
  var g: list<list<string>> = []
  var y = 0
  while y < height {
    var row: list<string> = []
    var x = 0
    while x < width {
      row = append(row, " ")
      x = x + 1
    }
    g = append(g, row)
    y = y + 1
  }
  return g
}

fun drawPoint(g: list<list<string>>, x: int, y: int) {
  if x >= 0 && x < width && y >= 0 && y < height {
    var row = g[y]
    row[x] = "#"
    g[y] = row
  }
}

fun bresenham(x0:int,y0:int,x1:int,y1:int,g:list<list<string>>) {
  var dx = x1 - x0
  if dx < 0 { dx = -dx }
  var dy = y1 - y0
  if dy < 0 { dy = -dy }
  var sx = -1
  if x0 < x1 { sx = 1 }
  var sy = -1
  if y0 < y1 { sy = 1 }
  var err = dx - dy
  while true {
    drawPoint(g, x0, y0)
    if x0 == x1 && y0 == y1 { break }
    var e2 = 2 * err
    if e2 > (-dy) {
      err = err - dy
      x0 = x0 + sx
    }
    if e2 < dx {
      err = err + dx
      y0 = y0 + sy
    }
  }
}

fun ftree(g: list<list<string>>, x: float, y: float, dist: float, dir: float, d: int) {
  let rad = dir * PI / 180.0
  let x2 = x + dist * _sin(rad)
  let y2 = y - dist * _cos(rad)
  bresenham(x as int, y as int, x2 as int, y2 as int, g)
  if d > 0 {
    ftree(g, x2, y2, dist * frac, dir - angle, d - 1)
    ftree(g, x2, y2, dist * frac, dir + angle, d - 1)
  }
}

fun render(g: list<list<string>>): string {
  var out = ""
  var y = 0
  while y < height {
    var line = ""
    var x = 0
    while x < width {
      line = line + g[y][x]
      x = x + 1
    }
    out = out + line
    if y < height - 1 { out = out + "\n" }
    y = y + 1
  }
  return out
}

fun main() {
  var grid = clearGrid()
  ftree(grid, (width/2) as float, (height-1) as float, length, 0.0, depth)
  print(render(grid))
}

main()
