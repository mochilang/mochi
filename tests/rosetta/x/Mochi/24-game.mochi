// Mochi implementation of Rosetta "24 game" task
// Generates four random digits 1-9 and asks for an RPN expression
// using those digits to make the value 24.

fun randDigit(): int { return (now() % 9) + 1 }

fun main() {
  var digits = []
  for i in 0..4 {
    digits = append(digits, randDigit())
  }

  var numstr = ""
  for i in 0..4 {
    numstr = numstr + str(digits[i])
  }
  print("Your numbers: " + numstr + "\n")
  print("Enter RPN: ")
  var expr = input()
  if len(expr) != 7 {
    print("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
    return
  }

  var stack = []
  var i = 0
  var valid = true
  while i < len(expr) {
    let ch = substring(expr, i, i+1)
    if ch >= "0" && ch <= "9" {
      if len(digits) == 0 {
        print("too many numbers.")
        return
      }
      var j = 0
      while digits[j] != int(ch) - int("0") {
        j = j + 1
        if j == len(digits) {
          print("wrong numbers.")
          return
        }
      }
      digits = digits[:j] + digits[j+1:]
      stack = append(stack, float(int(ch) - int("0")))
    } else {
      if len(stack) < 2 {
        print("invalid expression syntax.")
        valid = false
        break
      }
      var b = stack[len(stack)-1]
      var a = stack[len(stack)-2]
      if ch == "+" {
        stack[len(stack)-2] = a + b
      } else if ch == "-" {
        stack[len(stack)-2] = a - b
      } else if ch == "*" {
        stack[len(stack)-2] = a * b
      } else if ch == "/" {
        stack[len(stack)-2] = a / b
      } else {
        print(ch + " invalid.")
        valid = false
        break
      }
      stack = stack[:len(stack)-1]
    }
    i = i + 1
  }

  if valid {
    if abs(stack[0] - 24.0) > 0.000001 {
      print("incorrect. " + str(stack[0]) + " != 24")
    } else {
      print("correct.")
    }
  }
}

main()
