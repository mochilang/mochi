// Mochi translation of Rosetta "Elementary cellular automaton - Infinite length" task

fun pow2(n: int): int {
  var p = 1
  var i = 0
  while i < n { p = p * 2; i = i + 1 }
  return p
}

fun btoi(b: bool): int { if b { return 1 }; return 0 }

fun addNoCells(cells: string): string {
  var l = "O"
  var r = "O"
  if substring(cells, 0, 1) == "O" { l = "." }
  if substring(cells, len(cells)-1, len(cells)) == "O" { r = "." }
  cells = l + cells + r
  cells = l + cells + r
  return cells
}

fun step(cells: string, ruleVal: int): string {
  var newCells = ""
  var i = 0
  while i < len(cells) - 2 {
    var bin = 0
    var b = 2
    var n = i
    while n < i + 3 {
      bin = bin + btoi(substring(cells, n, n+1) == "O") * pow2(b)
      b = b - 1
      n = n + 1
    }
    var a = "."
    if ((ruleVal / pow2(bin)) % 2 == 1) { a = "O" }
    newCells = newCells + a
    i = i + 1
  }
  return newCells
}

fun repeat(ch: string, n: int): string {
  var s = ""
  var i = 0
  while i < n { s = s + ch; i = i + 1 }
  return s
}

fun evolve(l: int, ruleVal: int) {
  print(" Rule #" + str(ruleVal) + ":")
  var cells = "O"
  var x = 0
  while x < l {
    cells = addNoCells(cells)
    var width = 40 + (len(cells) / 2)
    var spaces = repeat(" ", width - len(cells))
    print(spaces + cells)
    cells = step(cells, ruleVal)
    x = x + 1
  }
}

fun main() {
  for r in [90, 30] { evolve(25, r); print("") }
}

main()

