fun isPrime(n: int): bool {
  if n < 2 { return false }
  if n % 2 == 0 { return n == 2 }
  if n % 3 == 0 { return n == 3 }
  var d = 5
  while d * d <= n {
    if n % d == 0 { return false }
    d = d + 2
    if n % d == 0 { return false }
    d = d + 4
  }
  return true
}

fun firstPrimeFactor(n: int): int {
  if n == 1 { return 1 }
  if n % 3 == 0 { return 3 }
  if n % 5 == 0 { return 5 }
  var inc = [4,2,4,2,4,6,2,6]
  var k = 7
  var i = 0
  while k * k <= n {
    if n % k == 0 { return k }
    k = k + inc[i]
    i = (i + 1) % len(inc)
  }
  return n
}

fun indexOf(s: string, ch: string): int {
  var i = 0
  while i < len(s) {
    if substring(s, i, i+1) == ch { return i }
    i = i + 1
  }
  return -1
}

fun padLeft(n: int, width: int): string {
  var s = str(n)
  while len(s) < width {
    s = " " + s
  }
  return s
}

fun formatFloat(f: float, prec: int): string {
  let s = str(f)
  let idx = indexOf(s, ".")
  if idx < 0 { return s }
  let need = idx + 1 + prec
  if len(s) > need { return substring(s, 0, need) }
  return s
}

fun main() {
  var blum: list<int> = []
  var counts = [0,0,0,0]
  var digits = [1,3,7,9]
  var i = 1
  var bc = 0
  while true {
    let p = firstPrimeFactor(i)
    if p % 4 == 3 {
      let q = (i / p) as int
      if q != p && q % 4 == 3 && isPrime(q) {
        if bc < 50 { blum = append(blum, i) }
        let d = i % 10
        if d == 1 { counts[0] = counts[0] + 1 }
        else if d == 3 { counts[1] = counts[1] + 1 }
        else if d == 7 { counts[2] = counts[2] + 1 }
        else if d == 9 { counts[3] = counts[3] + 1 }
        bc = bc + 1
        if bc == 50 {
          print("First 50 Blum integers:")
          var idx = 0
          while idx < 50 {
            var line = ""
            var j = 0
            while j < 10 {
              line = line + padLeft(blum[idx],3) + " "
              idx = idx + 1
              j = j + 1
            }
            print(substring(line,0,len(line)-1))
          }
          break
        }
      }
    }
    if i % 5 == 3 { i = i + 4 } else { i = i + 2 }
  }
}

main()
