// Mochi translation of Rosetta Code task "Composite numbers k with no single digit factors whose factors are all substrings of k"
// Based on Go implementation at tests/rosetta/x/Go/composite-numbers-k-with-no-single-digit-factors-whose-factors-are-all-substrings-of-k.go

fun primeFactors(n: int): list<int> {
  var factors: list<int> = []
  var x = n
  while x % 2 == 0 {
    factors = append(factors, 2)
    x = (x / 2) as int
  }
  var p = 3
  while p * p <= x {
    while x % p == 0 {
      factors = append(factors, p)
      x = (x / p) as int
    }
    p = p + 2
  }
  if x > 1 {
    factors = append(factors, x)
  }
  return factors
}

fun commatize(n: int): string {
  var s = str(n)
  var out = ""
  var i = len(s) - 1
  var c = 0
  while i >= 0 {
    out = substring(s, i, i+1) + out
    c = c + 1
    if c % 3 == 0 && i > 0 { out = "," + out }
    i = i - 1
  }
  return out
}

fun indexOf(s: string, sub: string): int {
  var i = 0
  while i + len(sub) <= len(s) {
    if substring(s, i, i+len(sub)) == sub { return i }
    i = i + 1
  }
  return -1
}

fun pad10(s: string): string {
  var str = s
  while len(str) < 10 { str = " " + str }
  return str
}

fun trimRightStr(s: string): string {
  var end = len(s)
  while end > 0 && substring(s, end-1, end) == " " { end = end - 1 }
  return substring(s, 0, end)
}

fun main() {
  // Precomputed values, enumeration is very slow in Lua.
  let res = [15317, 59177, 83731, 119911, 183347]

  var line = ""
  for e in res { line = line + pad10(commatize(e)) + " " }
  print(trimRightStr(line))
}

main()
