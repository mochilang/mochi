fun contains(xs: list<int>, n: int): bool {
  var i = 0
  while i < len(xs) {
    if xs[i] == n { return true }
    i = i + 1
  }
  return false
}

fun gcd(a: int, b: int): int {
  var x = a
  var y = b
  while y != 0 {
    let t = x % y
    x = y
    y = t
  }
  if x < 0 { x = -x }
  return x
}

fun sortInts(xs: list<int>): list<int> {
  var arr = xs
  var n = len(arr)
  var i = 0
  while i < n {
    var j = 0
    while j < n - 1 {
      if arr[j] > arr[j+1] {
        let tmp = arr[j]
        arr[j] = arr[j+1]
        arr[j+1] = tmp
      }
      j = j + 1
    }
    i = i + 1
  }
  return arr
}

fun areSame(s: list<int>, t: list<int>): bool {
  if len(s) != len(t) { return false }
  var a = sortInts(s)
  var b = sortInts(t)
  var i = 0
  while i < len(a) {
    if a[i] != b[i] { return false }
    i = i + 1
  }
  return true
}

fun printSlice(start: int, seq: list<int>) {
  var first: list<int> = []
  var i = 0
  while i < 30 {
    first = append(first, seq[i])
    i = i + 1
  }
  var pad = ""
  if start < 10 { pad = " " }
  print("EKG(" + pad + str(start) + "): " + str(first))
}

fun main() {
  let limit = 100
  let starts = [2, 5, 7, 9, 10]
  var ekg: list<list<int>> = []
  var s = 0
  while s < len(starts) {
    var seq: list<int> = [1, starts[s]]
    var n = 2
    while n < limit {
      var i = 2
      var done = false
      while !done {
        if !contains(seq, i) && gcd(seq[n-1], i) > 1 {
          seq = append(seq, i)
          done = true
        }
        i = i + 1
      }
      n = n + 1
    }
    ekg = append(ekg, seq)
    printSlice(starts[s], seq)
    s = s + 1
  }

  var i = 2
  var found = false
  while i < limit {
    if ekg[1][i] == ekg[2][i] && areSame(ekg[1][:i], ekg[2][:i]) {
      print("\nEKG(5) and EKG(7) converge at term " + str(i+1))
      found = true
      break
    }
    i = i + 1
  }
  if !found {
    print("\nEKG5(5) and EKG(7) do not converge within " + str(limit) + " terms")
  }
}

main()
