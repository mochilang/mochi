func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun commatize(n: int): string {
func commatize (regs=21)
  // var s = str(n)
  Str          r1, r0
  Move         r2, r1
  // var i = len(s) - 3
  Len          r3, r2
  Const        r4, 3
  SubInt       r5, r3, r4
  Move         r6, r5
L1:
  // while i >= 1 {
  Const        r7, 1
  LessEqInt    r8, r7, r6
  JumpIfFalse  r8, L0
  // s = s[0:i] + "," + s[i:len(s)]
  Const        r10, 0
  Move         r9, r10
  Move         r11, r6
  Slice        r12, r2, r9, r11
  Const        r13, ","
  Add          r14, r12, r13
  Move         r15, r6
  Len          r17, r2
  Move         r16, r17
  Slice        r18, r2, r15, r16
  Add          r19, r14, r18
  Move         r2, r19
  // i = i - 3
  Const        r4, 3
  SubInt       r20, r6, r4
  Move         r6, r20
  // while i >= 1 {
  Jump         L1
L0:
  // return s
  Return       r2

  // fun primeSieve(n: int): list<bool> {
func primeSieve (regs=22)
  // var sieve: list<bool> = []
  Const        r1, []
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L1:
  // while i <= n {
  LessEq       r5, r4, r0
  JumpIfFalse  r5, L0
  // sieve = append(sieve, false)
  Const        r6, false
  Append       r7, r2, r6
  Move         r2, r7
  // i = i + 1
  Const        r8, 1
  AddInt       r9, r4, r8
  Move         r4, r9
  // while i <= n {
  Jump         L1
L0:
  // sieve[0] = true
  Const        r10, true
  Const        r3, 0
  SetIndex     r2, r3, r10
  // sieve[1] = true
  Const        r10, true
  Const        r8, 1
  SetIndex     r2, r8, r10
  // var p = 2
  Const        r11, 2
  Move         r12, r11
L5:
  // while p * p <= n {
  MulInt       r13, r12, r12
  LessEq       r14, r13, r0
  JumpIfFalse  r14, L2
  // if !sieve[p] {
  Index        r15, r2, r12
  Not          r16, r15
  JumpIfFalse  r16, L3
  // var m = p * p
  MulInt       r17, r12, r12
  Move         r18, r17
L4:
  // while m <= n {
  LessEq       r19, r18, r0
  JumpIfFalse  r19, L3
  // sieve[m] = true
  Const        r10, true
  SetIndex     r2, r18, r10
  // m = m + p
  AddInt       r20, r18, r12
  Move         r18, r20
  // while m <= n {
  Jump         L4
L3:
  // p = p + 1
  Const        r8, 1
  AddInt       r21, r12, r8
  Move         r12, r21
  // while p * p <= n {
  Jump         L5
L2:
  // return sieve
  Return       r2

  // fun search(xs: list<int>, target: int): int {
func search (regs=15)
  // var low = 0
  Const        r2, 0
  Move         r3, r2
  // var high = len(xs)
  Len          r4, r0
  Move         r5, r4
L2:
  // while low < high {
  LessInt      r6, r3, r5
  JumpIfFalse  r6, L0
  // var mid = (low + high) / 2
  AddInt       r7, r3, r5
  Const        r8, 2
  DivInt       r9, r7, r8
  Move         r10, r9
  // if xs[mid] < target {
  Index        r11, r0, r10
  Less         r12, r11, r1
  JumpIfFalse  r12, L1
  // low = mid + 1
  Const        r13, 1
  AddInt       r14, r10, r13
  Move         r3, r14
  // if xs[mid] < target {
  Jump         L2
L1:
  // high = mid
  Move         r5, r10
  // while low < high {
  Jump         L2
L0:
  // return low
  Return       r3

  // fun main() {
func main (regs=67)
  // let limit = 45000
  Const        r0, 45000
  Move         r1, r0
  // let compMap = primeSieve(limit)
  Move         r2, r1
  Call         r3, primeSieve, r2
  Move         r4, r3
  // var compSums: list<int> = []
  Const        r5, []
  Move         r6, r5
  // var primeSums: list<int> = []
  Const        r5, []
  Move         r7, r5
  // var csum = 0
  Const        r8, 0
  Move         r9, r8
  // var psum = 0
  Const        r8, 0
  Move         r10, r8
  // var i = 2
  Const        r11, 2
  Move         r12, r11
L3:
  // while i <= limit {
  LessEqInt    r13, r12, r1
  JumpIfFalse  r13, L0
  // if compMap[i] {
  Index        r14, r4, r12
  JumpIfFalse  r14, L1
  // csum = csum + i
  AddInt       r15, r9, r12
  Move         r9, r15
  // compSums = append(compSums, csum)
  Append       r16, r6, r9
  Move         r6, r16
  // if compMap[i] {
  Jump         L2
L1:
  // psum = psum + i
  AddInt       r17, r10, r12
  Move         r10, r17
  // primeSums = append(primeSums, psum)
  Append       r18, r7, r10
  Move         r7, r18
L2:
  // i = i + 1
  Const        r19, 1
  AddInt       r20, r12, r19
  Move         r12, r20
  // while i <= limit {
  Jump         L3
L0:
  // print("Sum        | Prime Index | Composite Index")
  Const        r21, "Sum        | Prime Index | Composite Index"
  Print        r21
  // print("------------------------------------------")
  Const        r22, "------------------------------------------"
  Print        r22
  // var idx = 0
  Const        r8, 0
  Move         r23, r8
L7:
  // while idx < len(primeSums) {
  Len          r24, r7
  LessInt      r25, r23, r24
  JumpIfFalse  r25, L4
  // let s = primeSums[idx]
  Index        r26, r7, r23
  Move         r27, r26
  // let j = search(compSums, s)
  Move         r28, r6
  Move         r29, r27
  Call2        r30, search, r28, r29
  Move         r31, r30
  // if j < len(compSums) && compSums[j] == s {
  Len          r32, r6
  Less         r33, r31, r32
  Index        r34, r6, r31
  Equal        r35, r34, r27
  Move         r36, r33
  JumpIfFalse  r36, L5
  Move         r36, r35
L5:
  JumpIfFalse  r36, L6
  // let sumStr = commatize(s).padStart(10, " ")
  Move         r37, r27
  Call         r38, commatize, r37
  Const        r41, 10
  Move         r39, r41
  Const        r42, " "
  Move         r40, r42
  CallV        r43, r38, 2, r39
  Move         r44, r43
  // let piStr = commatize(idx + 1).padStart(11, " ")
  Const        r19, 1
  AddInt       r46, r23, r19
  Move         r45, r46
  Call         r47, commatize, r45
  Const        r50, 11
  Move         r48, r50
  Const        r42, " "
  Move         r49, r42
  CallV        r51, r47, 2, r48
  Move         r52, r51
  // let ciStr = commatize(j + 1).padStart(15, " ")
  Const        r19, 1
  Add          r54, r31, r19
  Move         r53, r54
  Call         r55, commatize, r53
  Const        r58, 15
  Move         r56, r58
  Const        r42, " "
  Move         r57, r42
  CallV        r59, r55, 2, r56
  Move         r60, r59
  // print(sumStr + " | " + piStr + " | " + ciStr)
  Const        r61, " | "
  Add          r62, r44, r61
  Add          r63, r62, r52
  Const        r61, " | "
  Add          r64, r63, r61
  Add          r65, r64, r60
  Print        r65
L6:
  // idx = idx + 1
  Const        r19, 1
  AddInt       r66, r23, r19
  Move         r23, r66
  // while idx < len(primeSums) {
  Jump         L7
L4:
  Return       r0
