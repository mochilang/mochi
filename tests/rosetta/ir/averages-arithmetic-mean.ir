func main (regs=1)
  Return       r0

  // fun mean(v: list<float>): map<string, any> {
func mean (regs=25)
  // if len(v) == 0 { return {"ok": false} }
  Len          r1, r0
  Const        r2, 0
  EqualInt     r3, r1, r2
  JumpIfFalse  r3, L0
  Const        r4, {"ok": false}
  Return       r4
L0:
  // var sum = 0.0
  Const        r5, 0.0
  Move         r6, r5
  // var i = 0
  Const        r2, 0
  Move         r7, r2
L2:
  // while i < len(v) {
  Len          r8, r0
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L1
  // sum = sum + v[i]
  Index        r10, r0, r7
  AddFloat     r11, r6, r10
  Move         r6, r11
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r7, r12
  Move         r7, r13
  // while i < len(v) {
  Jump         L2
L1:
  // return {"ok": true, "mean": sum / (len(v) as float)}
  Const        r14, "ok"
  Const        r15, true
  Const        r16, "mean"
  Len          r17, r0
  Cast         r18, r17, float
  DivFloat     r19, r6, r18
  Move         r20, r14
  Move         r21, r15
  Move         r22, r16
  Move         r23, r19
  MakeMap      r24, 2, r20
  Return       r24

  // fun main() {
func main (regs=31)
  // let sets = [
  Const        r0, [[], [3.0, 1.0, 4.0, 1.0, 5.0, 9.0], [100000000000000000000.0, 3.0, 1.0, 4.0, 1.0, 5.0, 9.0, -100000000000000000000.0], [10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.11], [10.0, 20.0, 30.0, 40.0, 50.0, -100.0, 4.7, -1100.0]]
  Move         r1, r0
  // for v in sets {
  Const        r2, [[], [3.0, 1.0, 4.0, 1.0, 5.0, 9.0], [100000000000000000000.0, 3.0, 1.0, 4.0, 1.0, 5.0, 9.0, -100000000000000000000.0], [10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.11], [10.0, 20.0, 30.0, 40.0, 50.0, -100.0, 4.7, -1100.0]]
  IterPrep     r3, r2
  Len          r4, r3
  Const        r5, 0
L3:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // print("Vector: " + str(v))
  Const        r9, "Vector: "
  Str          r10, r8
  Add          r11, r9, r10
  Print        r11
  // let r = mean(v)
  Move         r12, r8
  Call         r13, mean, r12
  Move         r14, r13
  // if r["ok"] {
  Const        r15, "ok"
  Index        r16, r14, r15
  JumpIfFalse  r16, L1
  // print("Mean of " + str(len(v)) + " numbers is " + str(r["mean"]))
  Const        r17, "Mean of "
  Len          r18, r8
  Str          r19, r18
  Add          r20, r17, r19
  Const        r21, " numbers is "
  Add          r22, r20, r21
  Const        r23, "mean"
  Index        r24, r14, r23
  Str          r25, r24
  Add          r26, r22, r25
  Print        r26
  // if r["ok"] {
  Jump         L2
L1:
  // print("Mean undefined")
  Const        r27, "Mean undefined"
  Print        r27
L2:
  // print("")
  Const        r28, ""
  Print        r28
  // for v in sets {
  Const        r29, 1
  AddInt       r30, r5, r29
  Move         r5, r30
  Jump         L3
L0:
  Return       r0
