func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun bitAt(x: int, idx: int): int {
func bitAt (regs=12)
  // var v = x
  Move         r2, r0
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L1:
  // while i < idx {
  Less         r5, r4, r1
  JumpIfFalse  r5, L0
  // v = (v / 2) as int
  Const        r6, 2
  Div          r7, r2, r6
  Cast         r8, r7, int
  Move         r2, r8
  // i = i + 1
  Const        r9, 1
  AddInt       r10, r4, r9
  Move         r4, r10
  // while i < idx {
  Jump         L1
L0:
  // return v % 2
  Const        r6, 2
  Mod          r11, r2, r6
  Return       r11

  // fun outputState(state: string) {
func outputState (regs=19)
  // var line = ""
  Const        r1, ""
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L3:
  // while i < len(state) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // if state[i:i+1] == "1" { line = line + "#" } else { line = line + " " }
  Move         r7, r4
  Const        r9, 1
  AddInt       r10, r4, r9
  Move         r8, r10
  Slice        r11, r0, r7, r8
  Const        r12, "1"
  Equal        r13, r11, r12
  JumpIfFalse  r13, L1
  Const        r14, "#"
  Add          r15, r2, r14
  Move         r2, r15
  Jump         L2
L1:
  Const        r16, " "
  Add          r17, r2, r16
  Move         r2, r17
L2:
  // i = i + 1
  Const        r9, 1
  AddInt       r18, r4, r9
  Move         r4, r18
  // while i < len(state) {
  Jump         L3
L0:
  // print(line)
  Print        r2
  Return       r0

  // fun step(state: string, r: int): string {
func step (regs=53)
  // let cells = len(state)
  Len          r2, r0
  Move         r3, r2
  // var out = ""
  Const        r4, ""
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L6:
  // while i < cells {
  LessInt      r8, r7, r3
  JumpIfFalse  r8, L0
  // let l = state[(i - 1 + cells) % cells:(i - 1 + cells) % cells + 1]
  Const        r10, 1
  SubInt       r11, r7, r10
  AddInt       r12, r11, r3
  ModInt       r13, r12, r3
  Move         r9, r13
  Const        r10, 1
  SubInt       r15, r7, r10
  AddInt       r16, r15, r3
  ModInt       r17, r16, r3
  Const        r10, 1
  AddInt       r18, r17, r10
  Move         r14, r18
  Slice        r19, r0, r9, r14
  Move         r20, r19
  // let c = state[i:i+1]
  Move         r21, r7
  Const        r10, 1
  AddInt       r23, r7, r10
  Move         r22, r23
  Slice        r24, r0, r21, r22
  Move         r25, r24
  // let rt = state[(i + 1) % cells:(i + 1) % cells + 1]
  Const        r10, 1
  AddInt       r27, r7, r10
  ModInt       r28, r27, r3
  Move         r26, r28
  Const        r10, 1
  AddInt       r30, r7, r10
  ModInt       r31, r30, r3
  Const        r10, 1
  AddInt       r32, r31, r10
  Move         r29, r32
  Slice        r33, r0, r26, r29
  Move         r34, r33
  // var idx = 0
  Const        r6, 0
  Move         r35, r6
  // if l == "1" { idx = idx + 4 }
  Const        r36, "1"
  Equal        r37, r20, r36
  JumpIfFalse  r37, L1
  Const        r38, 4
  AddInt       r39, r35, r38
  Move         r35, r39
L1:
  // if c == "1" { idx = idx + 2 }
  Const        r36, "1"
  Equal        r40, r25, r36
  JumpIfFalse  r40, L2
  Const        r41, 2
  AddInt       r42, r35, r41
  Move         r35, r42
L2:
  // if rt == "1" { idx = idx + 1 }
  Const        r36, "1"
  Equal        r43, r34, r36
  JumpIfFalse  r43, L3
  Const        r10, 1
  AddInt       r44, r35, r10
  Move         r35, r44
L3:
  // if bitAt(r, idx) == 1 { out = out + "1" } else { out = out + "0" }
  Move         r45, r1
  Move         r46, r35
  Call2        r47, bitAt, r45, r46
  Const        r10, 1
  Equal        r48, r47, r10
  JumpIfFalse  r48, L4
  Const        r36, "1"
  Add          r49, r5, r36
  Move         r5, r49
  Jump         L5
L4:
  Const        r50, "0"
  Add          r51, r5, r50
  Move         r5, r51
L5:
  // i = i + 1
  Const        r10, 1
  AddInt       r52, r7, r10
  Move         r7, r52
  // while i < cells {
  Jump         L6
L0:
  // return out
  Return       r5

  // fun elem(r: int, cells: int, generations: int, state: string) {
func elem (regs=17)
  // outputState(state)
  Move         r4, r3
  Call         r5, outputState, r4
  // var g = 0
  Const        r6, 0
  Move         r7, r6
  // var s = state
  Move         r8, r3
L1:
  // while g < generations {
  Less         r9, r7, r2
  JumpIfFalse  r9, L0
  // s = step(s, r)
  Move         r10, r8
  Move         r11, r0
  Call2        r12, step, r10, r11
  Move         r8, r12
  // outputState(s)
  Move         r13, r8
  Call         r14, outputState, r13
  // g = g + 1
  Const        r15, 1
  AddInt       r16, r7, r15
  Move         r7, r16
  // while g < generations {
  Jump         L1
L0:
  Return       r0

  // fun randInit(cells: int, seed: int): string {
func randInit (regs=23)
  // var s = ""
  Const        r2, ""
  Move         r3, r2
  // var val = seed
  Move         r4, r1
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L3:
  // while i < cells {
  Less         r7, r6, r0
  JumpIfFalse  r7, L0
  // val = (val * 1664525 + 1013904223) % 2147483647
  Const        r8, 1664525
  Mul          r9, r4, r8
  Const        r10, 1013904223
  Add          r11, r9, r10
  Const        r12, 2147483647
  Mod          r13, r11, r12
  Move         r4, r13
  // if val % 2 == 0 { s = s + "0" } else { s = s + "1" }
  Const        r14, 2
  Mod          r15, r4, r14
  Const        r5, 0
  Equal        r16, r15, r5
  JumpIfFalse  r16, L1
  Const        r17, "0"
  Add          r18, r3, r17
  Move         r3, r18
  Jump         L2
L1:
  Const        r19, "1"
  Add          r20, r3, r19
  Move         r3, r20
L2:
  // i = i + 1
  Const        r21, 1
  AddInt       r22, r6, r21
  Move         r6, r22
  // while i < cells {
  Jump         L3
L0:
  // return s
  Return       r3

  // fun singleInit(cells: int): string {
func singleInit (regs=15)
  // var s = ""
  Const        r1, ""
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L3:
  // while i < cells {
  Less         r5, r4, r0
  JumpIfFalse  r5, L0
  // if i == cells / 2 { s = s + "1" } else { s = s + "0" }
  Const        r6, 2
  Div          r7, r0, r6
  Equal        r8, r4, r7
  JumpIfFalse  r8, L1
  Const        r9, "1"
  Add          r10, r2, r9
  Move         r2, r10
  Jump         L2
L1:
  Const        r11, "0"
  Add          r12, r2, r11
  Move         r2, r12
L2:
  // i = i + 1
  Const        r13, 1
  AddInt       r14, r4, r13
  Move         r4, r14
  // while i < cells {
  Jump         L3
L0:
  // return s
  Return       r2

  // fun main() {
func main (regs=25)
  // let cells = 20
  Const        r0, 20
  Move         r1, r0
  // let generations = 9
  Const        r2, 9
  Move         r3, r2
  // print("Single 1, rule 90:")
  Const        r4, "Single 1, rule 90:"
  Print        r4
  // var state = singleInit(cells)
  Move         r5, r1
  Call         r6, singleInit, r5
  Move         r7, r6
  // elem(90, cells, generations, state)
  Const        r12, 90
  Move         r8, r12
  Move         r9, r1
  Move         r10, r3
  Move         r11, r7
  Call         r13, elem, r8, r9, r10, r11
  // print("Random intial state, rule 30:")
  Const        r14, "Random intial state, rule 30:"
  Print        r14
  // state = randInit(cells, 3)
  Move         r15, r1
  Const        r17, 3
  Move         r16, r17
  Call2        r18, randInit, r15, r16
  Move         r7, r18
  // elem(30, cells, generations, state)
  Const        r23, 30
  Move         r19, r23
  Move         r20, r1
  Move         r21, r3
  Move         r22, r7
  Call         r24, elem, r19, r20, r21, r22
  Return       r0
