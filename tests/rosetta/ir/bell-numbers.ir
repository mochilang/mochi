func main (regs=1)
  Return       r0

  // fun bellTriangle(n: int): list<list<bigint>> {
func bellTriangle (regs=35)
  // var tri: list<list<bigint>> = []
  Const        r1, []
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L3:
  // while i < n {
  Less         r5, r4, r0
  JumpIfFalse  r5, L0
  // var row: list<bigint> = []
  Const        r1, []
  Move         r6, r1
  // var j = 0
  Const        r3, 0
  Move         r7, r3
L2:
  // while j < i {
  LessInt      r8, r7, r4
  JumpIfFalse  r8, L1
  // row = append(row, 0 as bigint)
  Const        r3, 0
  Append       r9, r6, r3
  Move         r6, r9
  // j = j + 1
  Const        r10, 1
  AddInt       r11, r7, r10
  Move         r7, r11
  // while j < i {
  Jump         L2
L1:
  // tri = append(tri, row)
  Append       r12, r2, r6
  Move         r2, r12
  // i = i + 1
  Const        r10, 1
  AddInt       r13, r4, r10
  Move         r4, r13
  // while i < n {
  Jump         L3
L0:
  // tri[1][0] = 1
  Const        r10, 1
  Index        r14, r2, r10
  Const        r10, 1
  Const        r3, 0
  SetIndex     r14, r3, r10
  // i = 2
  Const        r15, 2
  Move         r4, r15
L7:
  // while i < n {
  Less         r16, r4, r0
  JumpIfFalse  r16, L4
  // tri[i][0] = tri[i-1][i-2]
  Index        r17, r2, r4
  Const        r10, 1
  SubInt       r18, r4, r10
  Index        r19, r2, r18
  Const        r15, 2
  SubInt       r20, r4, r15
  Index        r21, r19, r20
  Const        r3, 0
  SetIndex     r17, r3, r21
  // var j = 1
  Const        r10, 1
  Move         r22, r10
L6:
  // while j < i {
  LessInt      r23, r22, r4
  JumpIfFalse  r23, L5
  // tri[i][j] = tri[i][j-1] + tri[i-1][j-1]
  Index        r24, r2, r4
  Index        r25, r2, r4
  Const        r10, 1
  SubInt       r26, r22, r10
  Index        r27, r25, r26
  Const        r10, 1
  SubInt       r28, r4, r10
  Index        r29, r2, r28
  Const        r10, 1
  SubInt       r30, r22, r10
  Index        r31, r29, r30
  Add          r32, r27, r31
  SetIndex     r24, r22, r32
  // j = j + 1
  Const        r10, 1
  AddInt       r33, r22, r10
  Move         r22, r33
  // while j < i {
  Jump         L6
L5:
  // i = i + 1
  Const        r10, 1
  AddInt       r34, r4, r10
  Move         r4, r34
  // while i < n {
  Jump         L7
L4:
  // return tri
  Return       r2

  // fun main() {
func main (regs=33)
  // let bt = bellTriangle(51)
  Const        r1, 51
  Move         r0, r1
  Call         r2, bellTriangle, r0
  Move         r3, r2
  // print("First fifteen and fiftieth Bell numbers:")
  Const        r4, "First fifteen and fiftieth Bell numbers:"
  Print        r4
  // for i in 1..16 {
  Const        r5, 1
  Const        r6, 16
  Move         r7, r5
L1:
  LessInt      r8, r7, r6
  JumpIfFalse  r8, L0
  // print("" + padStart(str(i), 2, " ") + ": " + str(bt[i][0]))
  Const        r9, ""
  Add          r11, r9, r10
  Const        r12, ": "
  Add          r13, r11, r12
  Index        r14, r3, r7
  Const        r15, 0
  Index        r16, r14, r15
  Str          r17, r16
  Add          r18, r13, r17
  Print        r18
  // for i in 1..16 {
  Const        r19, 1
  AddInt       r20, r7, r19
  Move         r7, r20
  Jump         L1
L0:
  // print("50: " + str(bt[50][0]))
  Const        r21, "50: "
  Const        r22, 50
  Index        r23, r3, r22
  Const        r15, 0
  Index        r24, r23, r15
  Str          r25, r24
  Add          r26, r21, r25
  Print        r26
  // print("")
  Const        r9, ""
  Print        r9
  // print("The first ten rows of Bell's triangle:")
  Const        r27, "The first ten rows of Bell's triangle:"
  Print        r27
  // for i in 1..11 {
  Const        r5, 1
  Const        r28, 11
  Move         r7, r5
L3:
  LessInt      r29, r7, r28
  JumpIfFalse  r29, L2
  // print(bt[i])
  Index        r30, r3, r7
  Print        r30
  // for i in 1..11 {
  Const        r31, 1
  AddInt       r32, r7, r31
  Move         r7, r32
  Jump         L3
L2:
  Return       r0
