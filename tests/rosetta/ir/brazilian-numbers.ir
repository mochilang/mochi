func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun sameDigits(n: int, b: int): bool {
func sameDigits (regs=14)
  // var f = n % b
  Mod          r2, r0, r1
  Move         r3, r2
  // n = (n / b) as int
  Div          r4, r0, r1
  Cast         r5, r4, int
  Move         r0, r5
L2:
  // while n > 0 {
  Const        r6, 0
  Less         r7, r6, r0
  JumpIfFalse  r7, L0
  // if n % b != f {
  Mod          r8, r0, r1
  NotEqual     r9, r8, r3
  JumpIfFalse  r9, L1
  // return false
  Const        r10, false
  Return       r10
L1:
  // n = (n / b) as int
  Div          r11, r0, r1
  Cast         r12, r11, int
  Move         r0, r12
  // while n > 0 {
  Jump         L2
L0:
  // return true
  Const        r13, true
  Return       r13

  // fun isBrazilian(n: int): bool {
func isBrazilian (regs=20)
  // if n < 7 {
  Const        r1, 7
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  // return false
  Const        r3, false
  Return       r3
L0:
  // if n % 2 == 0 && n >= 8 {
  Const        r4, 2
  Mod          r5, r0, r4
  Const        r6, 8
  LessEq       r7, r6, r0
  Const        r8, 0
  Equal        r9, r5, r8
  Move         r10, r9
  JumpIfFalse  r10, L1
  Move         r10, r7
L1:
  JumpIfFalse  r10, L2
  // return true
  Const        r11, true
  Return       r11
L2:
  // var b = 2
  Const        r4, 2
  Move         r12, r4
L5:
  // while b < n - 1 {
  Const        r13, 1
  Sub          r14, r0, r13
  Less         r15, r12, r14
  JumpIfFalse  r15, L3
  // if sameDigits(n, b) {
  Move         r16, r0
  Move         r17, r12
  Call2        r18, sameDigits, r16, r17
  JumpIfFalse  r18, L4
  // return true
  Const        r11, true
  Return       r11
L4:
  // b = b + 1
  Const        r13, 1
  AddInt       r19, r12, r13
  Move         r12, r19
  // while b < n - 1 {
  Jump         L5
L3:
  // return false
  Const        r3, false
  Return       r3

  // fun isPrime(n: int): bool {
func isPrime (regs=24)
  // if n < 2 {
  Const        r1, 2
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  // return false
  Const        r3, false
  Return       r3
L0:
  // if n % 2 == 0 {
  Const        r1, 2
  Mod          r4, r0, r1
  Const        r5, 0
  Equal        r6, r4, r5
  JumpIfFalse  r6, L1
  // return n == 2
  Const        r1, 2
  Equal        r7, r0, r1
  Return       r7
L1:
  // if n % 3 == 0 {
  Const        r8, 3
  Mod          r9, r0, r8
  Const        r5, 0
  Equal        r10, r9, r5
  JumpIfFalse  r10, L2
  // return n == 3
  Const        r8, 3
  Equal        r11, r0, r8
  Return       r11
L2:
  // var d = 5
  Const        r12, 5
  Move         r13, r12
L6:
  // while d * d <= n {
  MulInt       r14, r13, r13
  LessEq       r15, r14, r0
  JumpIfFalse  r15, L3
  // if n % d == 0 {
  Mod          r16, r0, r13
  Const        r5, 0
  Equal        r17, r16, r5
  JumpIfFalse  r17, L4
  // return false
  Const        r3, false
  Return       r3
L4:
  // d = d + 2
  Const        r1, 2
  AddInt       r18, r13, r1
  Move         r13, r18
  // if n % d == 0 {
  Mod          r19, r0, r13
  Const        r5, 0
  Equal        r20, r19, r5
  JumpIfFalse  r20, L5
  // return false
  Const        r3, false
  Return       r3
L5:
  // d = d + 4
  Const        r21, 4
  AddInt       r22, r13, r21
  Move         r13, r22
  // while d * d <= n {
  Jump         L6
L3:
  // return true
  Const        r23, true
  Return       r23

  // fun main() {
func main (regs=43)
  // var kinds = [" ", " odd ", " prime "]
  Const        r0, [" ", " odd ", " prime "]
  Move         r1, r0
  // for kind in kinds {
  IterPrep     r2, r1
  Len          r3, r2
  Const        r4, 0
L4:
  LessInt      r5, r4, r3
  JumpIfFalse  r5, L0
  Index        r6, r2, r4
  Move         r7, r6
  // print("First 20" + kind + "Brazilian numbers:")
  Const        r8, "First 20"
  Add          r9, r8, r7
  Const        r10, "Brazilian numbers:"
  Add          r11, r9, r10
  Print        r11
  // var c = 0
  Const        r12, 0
  Move         r13, r12
  // var n = 7
  Const        r14, 7
  Move         r15, r14
L3:
  // while true {
  Const        r16, true
  // if isBrazilian(n) {
  Move         r17, r15
  Call         r18, isBrazilian, r17
  JumpIfFalse  r18, L1
  // print(str(n) + " ")
  Str          r19, r15
  Const        r20, " "
  Add          r21, r19, r20
  Print        r21
  // c = c + 1
  Const        r22, 1
  AddInt       r23, r13, r22
  Move         r13, r23
  // if c == 20 {
  Const        r24, 20
  EqualInt     r25, r13, r24
  JumpIfFalse  r25, L1
  // print("\n")
  Const        r26, "\n"
  Print        r26
  // break
  Jump         L2
L1:
  // if kind == " " {
  Const        r20, " "
  Equal        r27, r7, r20
  JumpIfFalse  r27, L3
  // n = n + 1
  Const        r22, 1
  AddInt       r28, r15, r22
  Move         r15, r28
  // while true {
  Jump         L3
L2:
  // for kind in kinds {
  Const        r29, 1
  AddInt       r30, r4, r29
  Move         r4, r30
  Jump         L4
L0:
  // var n = 7
  Const        r14, 7
  Move         r31, r14
  // var c = 0
  Const        r12, 0
  Move         r32, r12
L7:
  // while c < 100000 {
  Const        r33, 100000
  LessInt      r34, r32, r33
  JumpIfFalse  r34, L5
  // if isBrazilian(n) {
  Move         r35, r31
  Call         r36, isBrazilian, r35
  JumpIfFalse  r36, L6
  // c = c + 1
  Const        r22, 1
  AddInt       r37, r32, r22
  Move         r32, r37
L6:
  // n = n + 1
  Const        r22, 1
  AddInt       r38, r31, r22
  Move         r31, r38
  // while c < 100000 {
  Jump         L7
L5:
  // print("The 100,000th Brazilian number: " + str(n - 1))
  Const        r39, "The 100,000th Brazilian number: "
  Const        r22, 1
  SubInt       r40, r31, r22
  Str          r41, r40
  Add          r42, r39, r41
  Print        r42
  Return       r0
