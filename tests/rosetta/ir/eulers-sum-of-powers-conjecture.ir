func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun eulerSum(): list<int> {
func eulerSum (regs=66)
  // var pow5: list<int> = []
  Const        r0, []
  Move         r1, r0
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L1:
  // while i < 250 {
  Const        r4, 250
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // pow5 = append(pow5, i*i*i*i*i)
  MulInt       r6, r3, r3
  MulInt       r7, r6, r3
  MulInt       r8, r7, r3
  MulInt       r9, r8, r3
  Append       r10, r1, r9
  Move         r1, r10
  // i = i + 1
  Const        r11, 1
  AddInt       r12, r3, r11
  Move         r3, r12
  // while i < 250 {
  Jump         L1
L0:
  // var sums: map<int, list<int>> = {}
  Const        r13, {}
  Move         r14, r13
  // var x2 = 2
  Const        r15, 2
  Move         r16, r15
L6:
  // while x2 < 250 {
  Const        r4, 250
  LessInt      r17, r16, r4
  JumpIfFalse  r17, L2
  // var x3 = 1
  Const        r11, 1
  Move         r18, r11
L5:
  // while x3 < x2 {
  LessInt      r19, r18, r16
  JumpIfFalse  r19, L3
  // let s = pow5[x2] + pow5[x3]
  Index        r20, r1, r16
  Index        r21, r1, r18
  Add          r22, r20, r21
  Move         r23, r22
  // if !(s in sums) {
  In           r24, r23, r14
  Not          r25, r24
  JumpIfFalse  r25, L4
  // sums[s] = [x2, x3]
  Move         r26, r16
  Move         r27, r18
  MakeList     r28, 2, r26
  SetIndex     r14, r23, r28
L4:
  // x3 = x3 + 1
  Const        r11, 1
  AddInt       r29, r18, r11
  Move         r18, r29
  // while x3 < x2 {
  Jump         L5
L3:
  // x2 = x2 + 1
  Const        r11, 1
  AddInt       r30, r16, r11
  Move         r16, r30
  // while x2 < 250 {
  Jump         L6
L2:
  // var x0 = 4
  Const        r31, 4
  Move         r32, r31
L14:
  // while x0 < 250 {
  Const        r4, 250
  LessInt      r33, r32, r4
  JumpIfFalse  r33, L7
  // var x1 = 3
  Const        r34, 3
  Move         r35, r34
L13:
  // while x1 < x0 {
  LessInt      r36, r35, r32
  JumpIfFalse  r36, L8
  // var y = x0 + 1
  Const        r11, 1
  AddInt       r37, r32, r11
  Move         r38, r37
L12:
  // while y < 250 {
  Const        r4, 250
  LessInt      r39, r38, r4
  JumpIfFalse  r39, L9
  // let rem = pow5[y] - pow5[x0] - pow5[x1]
  Index        r40, r1, r38
  Index        r41, r1, r32
  Sub          r42, r40, r41
  Index        r43, r1, r35
  Sub          r44, r42, r43
  Move         r45, r44
  // if rem in sums {
  In           r46, r45, r14
  JumpIfFalse  r46, L10
  // let pair = sums[rem]
  Index        r47, r14, r45
  Move         r48, r47
  // let a = pair[0]
  Const        r2, 0
  Index        r49, r48, r2
  Move         r50, r49
  // let b = pair[1]
  Const        r11, 1
  Index        r51, r48, r11
  Move         r52, r51
  // if x1 > a && a > b {
  Less         r53, r50, r35
  Less         r54, r52, r50
  Move         r55, r53
  JumpIfFalse  r55, L11
  Move         r55, r54
L11:
  JumpIfFalse  r55, L10
  // return [x0, x1, a, b, y]
  Move         r56, r32
  Move         r57, r35
  Move         r58, r50
  Move         r59, r52
  Move         r60, r38
  MakeList     r61, 5, r56
  Return       r61
L10:
  // y = y + 1
  Const        r11, 1
  AddInt       r62, r38, r11
  Move         r38, r62
  // while y < 250 {
  Jump         L12
L9:
  // x1 = x1 + 1
  Const        r11, 1
  AddInt       r63, r35, r11
  Move         r35, r63
  // while x1 < x0 {
  Jump         L13
L8:
  // x0 = x0 + 1
  Const        r11, 1
  AddInt       r64, r32, r11
  Move         r32, r64
  // while x0 < 250 {
  Jump         L14
L7:
  // return [0,0,0,0,0]
  Const        r65, [0, 0, 0, 0, 0]
  Return       r65

  // fun main() {
func main (regs=26)
  // let r = eulerSum()
  Call         r0, eulerSum, 
  Move         r1, r0
  // print(str(r[0]) + " " + str(r[1]) + " " + str(r[2]) + " " + str(r[3]) + " " + str(r[4]))
  Const        r2, 0
  Index        r3, r1, r2
  Str          r4, r3
  Const        r5, " "
  Add          r6, r4, r5
  Const        r7, 1
  Index        r8, r1, r7
  Str          r9, r8
  Add          r10, r6, r9
  Const        r5, " "
  Add          r11, r10, r5
  Const        r12, 2
  Index        r13, r1, r12
  Str          r14, r13
  Add          r15, r11, r14
  Const        r5, " "
  Add          r16, r15, r5
  Const        r17, 3
  Index        r18, r1, r17
  Str          r19, r18
  Add          r20, r16, r19
  Const        r5, " "
  Add          r21, r20, r5
  Const        r22, 4
  Index        r23, r1, r22
  Str          r24, r23
  Add          r25, r21, r24
  Print        r25
  Return       r0
