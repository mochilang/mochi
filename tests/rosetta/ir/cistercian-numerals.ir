func main (regs=50)
  // var n: list<list<string>> = []
  Const        r3, []
  Move         r0, r3
  SetGlobal    0,0,0,0
  // var draw: map<int, fun()> = {}
  Const        r4, {}
  Move         r1, r4
  SetGlobal    1,1,0,0
  // initDraw()
  Call         r5, initDraw, 
  // let numbers = [0,1,20,300,4000,5555,6789,9999]
  Const        r6, [0, 1, 20, 300, 4000, 5555, 6789, 9999]
  Move         r2, r6
  SetGlobal    2,2,0,0
  // for number in numbers {
  IterPrep     r7, r2
  Len          r8, r7
  Const        r9, 0
L5:
  LessInt      r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // initN()
  Call         r13, initN, 
  // print(str(number) + ":")
  Str          r14, r12
  Const        r15, ":"
  Add          r16, r14, r15
  Print        r16
  // var num = number
  Move         r17, r12
  // let thousands = num / 1000
  Const        r18, 1000
  Div          r19, r17, r18
  Move         r20, r19
  // num = num % 1000
  Const        r18, 1000
  Mod          r21, r17, r18
  Move         r17, r21
  // let hundreds = num / 100
  Const        r22, 100
  Div          r23, r17, r22
  Move         r24, r23
  // num = num % 100
  Const        r22, 100
  Mod          r25, r17, r22
  Move         r17, r25
  // let tens = num / 10
  Const        r26, 10
  Div          r27, r17, r26
  Move         r28, r27
  // let ones = num % 10
  Const        r26, 10
  Mod          r29, r17, r26
  Move         r30, r29
  // if thousands > 0 { draw[thousands*1000]() }
  Const        r31, 0
  Less         r32, r31, r20
  JumpIfFalse  r32, L1
  Const        r18, 1000
  Mul          r33, r20, r18
  Index        r34, r1, r33
  CallV        r35, r34, 0, r0
L1:
  // if hundreds > 0 { draw[hundreds*100]() }
  Const        r31, 0
  Less         r36, r31, r24
  JumpIfFalse  r36, L2
  Const        r22, 100
  Mul          r37, r24, r22
  Index        r38, r1, r37
  CallV        r39, r38, 0, r0
L2:
  // if tens > 0 { draw[tens*10]() }
  Const        r31, 0
  Less         r40, r31, r28
  JumpIfFalse  r40, L3
  Const        r26, 10
  Mul          r41, r28, r26
  Index        r42, r1, r41
  CallV        r43, r42, 0, r0
L3:
  // if ones > 0 { draw[ones]() }
  Const        r31, 0
  Less         r44, r31, r30
  JumpIfFalse  r44, L4
  Index        r45, r1, r30
  CallV        r46, r45, 0, r0
L4:
  // printNumeral()
  Call         r47, printNumeral, 
  // for number in numbers {
  Const        r48, 1
  AddInt       r49, r9, r48
  Move         r9, r49
  Jump         L5
L0:
  Return       r0

  // fun initN() {
func initN (regs=20)
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L3:
  // while i < 15 {
  Const        r5, 15
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // var row: list<string> = []
  Const        r7, []
  Move         r8, r7
  // var j = 0
  Const        r3, 0
  Move         r9, r3
L2:
  // while j < 11 {
  Const        r10, 11
  LessInt      r11, r9, r10
  JumpIfFalse  r11, L1
  // row = append(row, " ")
  Const        r12, " "
  Append       r13, r8, r12
  Move         r8, r13
  // j = j + 1
  Const        r14, 1
  AddInt       r15, r9, r14
  Move         r9, r15
  // while j < 11 {
  Jump         L2
L1:
  // row[5] = "x"
  Const        r16, "x"
  Const        r17, 5
  SetIndex     r8, r17, r16
  // n = append(n, row)
  Append       r18, r0, r8
  Move         r0, r18
  SetGlobal    0,0,0,0
  // i = i + 1
  Const        r14, 1
  AddInt       r19, r4, r14
  Move         r4, r19
  // while i < 15 {
  Jump         L3
L0:
  Return       r0

  // fun horiz(c1: int, c2: int, r: int) { var c = c1; while c <= c2 { n[r][c] = "x"; c = c + 1 } }
func horiz (regs=12)
  // fun horiz(c1: int, c2: int, r: int) { var c = c1; while c <= c2 { n[r][c] = "x"; c = c + 1 } }
  Move         r6, r3
L1:
  LessEq       r7, r6, r4
  JumpIfFalse  r7, L0
  Index        r8, r0, r5
  Const        r9, "x"
  SetIndex     r8, r6, r9
  SetGlobal    0,0,0,0
  Const        r10, 1
  Add          r11, r6, r10
  Move         r6, r11
  Jump         L1
L0:
  Return       r0

  // fun verti(r1: int, r2: int, c: int) { var r = r1; while r <= r2 { n[r][c] = "x"; r = r + 1 } }
func verti (regs=12)
  // fun verti(r1: int, r2: int, c: int) { var r = r1; while r <= r2 { n[r][c] = "x"; r = r + 1 } }
  Move         r6, r3
L1:
  LessEq       r7, r6, r4
  JumpIfFalse  r7, L0
  Index        r8, r0, r6
  Const        r9, "x"
  SetIndex     r8, r5, r9
  SetGlobal    0,0,0,0
  Const        r10, 1
  Add          r11, r6, r10
  Move         r6, r11
  Jump         L1
L0:
  Return       r0

  // fun diagd(c1: int, c2: int, r: int) { var c = c1; while c <= c2 { n[r+c-c1][c] = "x"; c = c + 1 } }
func diagd (regs=14)
  // fun diagd(c1: int, c2: int, r: int) { var c = c1; while c <= c2 { n[r+c-c1][c] = "x"; c = c + 1 } }
  Move         r6, r3
L1:
  LessEq       r7, r6, r4
  JumpIfFalse  r7, L0
  Add          r8, r5, r6
  Sub          r9, r8, r3
  Index        r10, r0, r9
  Const        r11, "x"
  SetIndex     r10, r6, r11
  SetGlobal    0,0,0,0
  Const        r12, 1
  Add          r13, r6, r12
  Move         r6, r13
  Jump         L1
L0:
  Return       r0

  // fun diagu(c1: int, c2: int, r: int) { var c = c1; while c <= c2 { n[r-c+c1][c] = "x"; c = c + 1 } }
func diagu (regs=14)
  // fun diagu(c1: int, c2: int, r: int) { var c = c1; while c <= c2 { n[r-c+c1][c] = "x"; c = c + 1 } }
  Move         r6, r3
L1:
  LessEq       r7, r6, r4
  JumpIfFalse  r7, L0
  Sub          r8, r5, r6
  Add          r9, r8, r3
  Index        r10, r0, r9
  Const        r11, "x"
  SetIndex     r10, r6, r11
  SetGlobal    0,0,0,0
  Const        r12, 1
  Add          r13, r6, r12
  Move         r6, r13
  Jump         L1
L0:
  Return       r0

  // fun initDraw() {
func initDraw (regs=75)
  // draw[1] = fun() { horiz(6,10,0) }
  MakeClosure  r3, fn8, 0, r0
  Const        r4, 1
  SetIndex     r1, r4, r3
  SetGlobal    1,1,0,0
  // draw[2] = fun() { horiz(6,10,4) }
  MakeClosure  r5, fn9, 0, r0
  Const        r6, 2
  SetIndex     r1, r6, r5
  SetGlobal    1,1,0,0
  // draw[3] = fun() { diagd(6,10,0) }
  MakeClosure  r7, fn10, 0, r0
  Const        r8, 3
  SetIndex     r1, r8, r7
  SetGlobal    1,1,0,0
  // draw[4] = fun() { diagu(6,10,4) }
  MakeClosure  r9, fn11, 0, r0
  Const        r10, 4
  SetIndex     r1, r10, r9
  SetGlobal    1,1,0,0
  // draw[5] = fun() { draw[1](); draw[4]() }
  MakeClosure  r11, fn12, 0, r0
  Const        r12, 5
  SetIndex     r1, r12, r11
  SetGlobal    1,1,0,0
  // draw[6] = fun() { verti(0,4,10) }
  MakeClosure  r13, fn13, 0, r0
  Const        r14, 6
  SetIndex     r1, r14, r13
  SetGlobal    1,1,0,0
  // draw[7] = fun() { draw[1](); draw[6]() }
  MakeClosure  r15, fn14, 0, r0
  Const        r16, 7
  SetIndex     r1, r16, r15
  SetGlobal    1,1,0,0
  // draw[8] = fun() { draw[2](); draw[6]() }
  MakeClosure  r17, fn15, 0, r0
  Const        r18, 8
  SetIndex     r1, r18, r17
  SetGlobal    1,1,0,0
  // draw[9] = fun() { draw[1](); draw[8]() }
  MakeClosure  r19, fn16, 0, r0
  Const        r20, 9
  SetIndex     r1, r20, r19
  SetGlobal    1,1,0,0
  // draw[10] = fun() { horiz(0,4,0) }
  MakeClosure  r21, fn17, 0, r0
  Const        r22, 10
  SetIndex     r1, r22, r21
  SetGlobal    1,1,0,0
  // draw[20] = fun() { horiz(0,4,4) }
  MakeClosure  r23, fn18, 0, r0
  Const        r24, 20
  SetIndex     r1, r24, r23
  SetGlobal    1,1,0,0
  // draw[30] = fun() { diagu(0,4,4) }
  MakeClosure  r25, fn19, 0, r0
  Const        r26, 30
  SetIndex     r1, r26, r25
  SetGlobal    1,1,0,0
  // draw[40] = fun() { diagd(0,4,0) }
  MakeClosure  r27, fn20, 0, r0
  Const        r28, 40
  SetIndex     r1, r28, r27
  SetGlobal    1,1,0,0
  // draw[50] = fun() { draw[10](); draw[40]() }
  MakeClosure  r29, fn21, 0, r0
  Const        r30, 50
  SetIndex     r1, r30, r29
  SetGlobal    1,1,0,0
  // draw[60] = fun() { verti(0,4,0) }
  MakeClosure  r31, fn22, 0, r0
  Const        r32, 60
  SetIndex     r1, r32, r31
  SetGlobal    1,1,0,0
  // draw[70] = fun() { draw[10](); draw[60]() }
  MakeClosure  r33, fn23, 0, r0
  Const        r34, 70
  SetIndex     r1, r34, r33
  SetGlobal    1,1,0,0
  // draw[80] = fun() { draw[20](); draw[60]() }
  MakeClosure  r35, fn24, 0, r0
  Const        r36, 80
  SetIndex     r1, r36, r35
  SetGlobal    1,1,0,0
  // draw[90] = fun() { draw[10](); draw[80]() }
  MakeClosure  r37, fn25, 0, r0
  Const        r38, 90
  SetIndex     r1, r38, r37
  SetGlobal    1,1,0,0
  // draw[100] = fun() { horiz(6,10,14) }
  MakeClosure  r39, fn26, 0, r0
  Const        r40, 100
  SetIndex     r1, r40, r39
  SetGlobal    1,1,0,0
  // draw[200] = fun() { horiz(6,10,10) }
  MakeClosure  r41, fn27, 0, r0
  Const        r42, 200
  SetIndex     r1, r42, r41
  SetGlobal    1,1,0,0
  // draw[300] = fun() { diagu(6,10,14) }
  MakeClosure  r43, fn28, 0, r0
  Const        r44, 300
  SetIndex     r1, r44, r43
  SetGlobal    1,1,0,0
  // draw[400] = fun() { diagd(6,10,10) }
  MakeClosure  r45, fn29, 0, r0
  Const        r46, 400
  SetIndex     r1, r46, r45
  SetGlobal    1,1,0,0
  // draw[500] = fun() { draw[100](); draw[400]() }
  MakeClosure  r47, fn30, 0, r0
  Const        r48, 500
  SetIndex     r1, r48, r47
  SetGlobal    1,1,0,0
  // draw[600] = fun() { verti(10,14,10) }
  MakeClosure  r49, fn31, 0, r0
  Const        r50, 600
  SetIndex     r1, r50, r49
  SetGlobal    1,1,0,0
  // draw[700] = fun() { draw[100](); draw[600]() }
  MakeClosure  r51, fn32, 0, r0
  Const        r52, 700
  SetIndex     r1, r52, r51
  SetGlobal    1,1,0,0
  // draw[800] = fun() { draw[200](); draw[600]() }
  MakeClosure  r53, fn33, 0, r0
  Const        r54, 800
  SetIndex     r1, r54, r53
  SetGlobal    1,1,0,0
  // draw[900] = fun() { draw[100](); draw[800]() }
  MakeClosure  r55, fn34, 0, r0
  Const        r56, 900
  SetIndex     r1, r56, r55
  SetGlobal    1,1,0,0
  // draw[1000] = fun() { horiz(0,4,14) }
  MakeClosure  r57, fn35, 0, r0
  Const        r58, 1000
  SetIndex     r1, r58, r57
  SetGlobal    1,1,0,0
  // draw[2000] = fun() { horiz(0,4,10) }
  MakeClosure  r59, fn36, 0, r0
  Const        r60, 2000
  SetIndex     r1, r60, r59
  SetGlobal    1,1,0,0
  // draw[3000] = fun() { diagd(0,4,10) }
  MakeClosure  r61, fn37, 0, r0
  Const        r62, 3000
  SetIndex     r1, r62, r61
  SetGlobal    1,1,0,0
  // draw[4000] = fun() { diagu(0,4,14) }
  MakeClosure  r63, fn38, 0, r0
  Const        r64, 4000
  SetIndex     r1, r64, r63
  SetGlobal    1,1,0,0
  // draw[5000] = fun() { draw[1000](); draw[4000]() }
  MakeClosure  r65, fn39, 0, r0
  Const        r66, 5000
  SetIndex     r1, r66, r65
  SetGlobal    1,1,0,0
  // draw[6000] = fun() { verti(10,14,0) }
  MakeClosure  r67, fn40, 0, r0
  Const        r68, 6000
  SetIndex     r1, r68, r67
  SetGlobal    1,1,0,0
  // draw[7000] = fun() { draw[1000](); draw[6000]() }
  MakeClosure  r69, fn41, 0, r0
  Const        r70, 7000
  SetIndex     r1, r70, r69
  SetGlobal    1,1,0,0
  // draw[8000] = fun() { draw[2000](); draw[6000]() }
  MakeClosure  r71, fn42, 0, r0
  Const        r72, 8000
  SetIndex     r1, r72, r71
  SetGlobal    1,1,0,0
  // draw[9000] = fun() { draw[1000](); draw[8000]() }
  MakeClosure  r73, fn43, 0, r0
  Const        r74, 9000
  SetIndex     r1, r74, r73
  SetGlobal    1,1,0,0
  Return       r0

  // fun printNumeral() {
func printNumeral (regs=20)
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L3:
  // while i < 15 {
  Const        r5, 15
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // var line = ""
  Const        r7, ""
  Move         r8, r7
  // var j = 0
  Const        r3, 0
  Move         r9, r3
L2:
  // while j < 11 {
  Const        r10, 11
  LessInt      r11, r9, r10
  JumpIfFalse  r11, L1
  // line = line + n[i][j] + " "
  Index        r12, r0, r4
  Index        r13, r12, r9
  Add          r14, r8, r13
  Const        r15, " "
  Add          r16, r14, r15
  Move         r8, r16
  // j = j + 1
  Const        r17, 1
  AddInt       r18, r9, r17
  Move         r9, r18
  // while j < 11 {
  Jump         L2
L1:
  // print(line)
  Print        r8
  // i = i + 1
  Const        r17, 1
  AddInt       r19, r4, r17
  Move         r4, r19
  // while i < 15 {
  Jump         L3
L0:
  // print("")
  Const        r7, ""
  Print        r7
  Return       r0

  // draw[1] = fun() { horiz(6,10,0) }
func fn8 (regs=10)
  // draw[1] = fun() { horiz(6,10,0) }
  Const        r6, 6
  Move         r3, r6
  Const        r7, 10
  Move         r4, r7
  Const        r8, 0
  Move         r5, r8
  Call         r9, horiz, r3, r4, r5
  Return       r0

  // draw[2] = fun() { horiz(6,10,4) }
func fn9 (regs=10)
  // draw[2] = fun() { horiz(6,10,4) }
  Const        r6, 6
  Move         r3, r6
  Const        r7, 10
  Move         r4, r7
  Const        r8, 4
  Move         r5, r8
  Call         r9, horiz, r3, r4, r5
  Return       r0

  // draw[3] = fun() { diagd(6,10,0) }
func fn10 (regs=10)
  // draw[3] = fun() { diagd(6,10,0) }
  Const        r6, 6
  Move         r3, r6
  Const        r7, 10
  Move         r4, r7
  Const        r8, 0
  Move         r5, r8
  Call         r9, diagd, r3, r4, r5
  Return       r0

  // draw[4] = fun() { diagu(6,10,4) }
func fn11 (regs=10)
  // draw[4] = fun() { diagu(6,10,4) }
  Const        r6, 6
  Move         r3, r6
  Const        r7, 10
  Move         r4, r7
  Const        r8, 4
  Move         r5, r8
  Call         r9, diagu, r3, r4, r5
  Return       r0

  // draw[5] = fun() { draw[1](); draw[4]() }
func fn12 (regs=9)
  // draw[5] = fun() { draw[1](); draw[4]() }
  Const        r3, 1
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 4
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[6] = fun() { verti(0,4,10) }
func fn13 (regs=10)
  // draw[6] = fun() { verti(0,4,10) }
  Const        r6, 0
  Move         r3, r6
  Const        r7, 4
  Move         r4, r7
  Const        r8, 10
  Move         r5, r8
  Call         r9, verti, r3, r4, r5
  Return       r0

  // draw[7] = fun() { draw[1](); draw[6]() }
func fn14 (regs=9)
  // draw[7] = fun() { draw[1](); draw[6]() }
  Const        r3, 1
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 6
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[8] = fun() { draw[2](); draw[6]() }
func fn15 (regs=9)
  // draw[8] = fun() { draw[2](); draw[6]() }
  Const        r3, 2
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 6
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[9] = fun() { draw[1](); draw[8]() }
func fn16 (regs=9)
  // draw[9] = fun() { draw[1](); draw[8]() }
  Const        r3, 1
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 8
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[10] = fun() { horiz(0,4,0) }
func fn17 (regs=9)
  // draw[10] = fun() { horiz(0,4,0) }
  Const        r6, 0
  Move         r3, r6
  Const        r7, 4
  Move         r4, r7
  Const        r6, 0
  Move         r5, r6
  Call         r8, horiz, r3, r4, r5
  Return       r0

  // draw[20] = fun() { horiz(0,4,4) }
func fn18 (regs=9)
  // draw[20] = fun() { horiz(0,4,4) }
  Const        r6, 0
  Move         r3, r6
  Const        r7, 4
  Move         r4, r7
  Const        r7, 4
  Move         r5, r7
  Call         r8, horiz, r3, r4, r5
  Return       r0

  // draw[30] = fun() { diagu(0,4,4) }
func fn19 (regs=9)
  // draw[30] = fun() { diagu(0,4,4) }
  Const        r6, 0
  Move         r3, r6
  Const        r7, 4
  Move         r4, r7
  Const        r7, 4
  Move         r5, r7
  Call         r8, diagu, r3, r4, r5
  Return       r0

  // draw[40] = fun() { diagd(0,4,0) }
func fn20 (regs=9)
  // draw[40] = fun() { diagd(0,4,0) }
  Const        r6, 0
  Move         r3, r6
  Const        r7, 4
  Move         r4, r7
  Const        r6, 0
  Move         r5, r6
  Call         r8, diagd, r3, r4, r5
  Return       r0

  // draw[50] = fun() { draw[10](); draw[40]() }
func fn21 (regs=9)
  // draw[50] = fun() { draw[10](); draw[40]() }
  Const        r3, 10
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 40
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[60] = fun() { verti(0,4,0) }
func fn22 (regs=9)
  // draw[60] = fun() { verti(0,4,0) }
  Const        r6, 0
  Move         r3, r6
  Const        r7, 4
  Move         r4, r7
  Const        r6, 0
  Move         r5, r6
  Call         r8, verti, r3, r4, r5
  Return       r0

  // draw[70] = fun() { draw[10](); draw[60]() }
func fn23 (regs=9)
  // draw[70] = fun() { draw[10](); draw[60]() }
  Const        r3, 10
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 60
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[80] = fun() { draw[20](); draw[60]() }
func fn24 (regs=9)
  // draw[80] = fun() { draw[20](); draw[60]() }
  Const        r3, 20
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 60
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[90] = fun() { draw[10](); draw[80]() }
func fn25 (regs=9)
  // draw[90] = fun() { draw[10](); draw[80]() }
  Const        r3, 10
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 80
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[100] = fun() { horiz(6,10,14) }
func fn26 (regs=10)
  // draw[100] = fun() { horiz(6,10,14) }
  Const        r6, 6
  Move         r3, r6
  Const        r7, 10
  Move         r4, r7
  Const        r8, 14
  Move         r5, r8
  Call         r9, horiz, r3, r4, r5
  Return       r0

  // draw[200] = fun() { horiz(6,10,10) }
func fn27 (regs=9)
  // draw[200] = fun() { horiz(6,10,10) }
  Const        r6, 6
  Move         r3, r6
  Const        r7, 10
  Move         r4, r7
  Const        r7, 10
  Move         r5, r7
  Call         r8, horiz, r3, r4, r5
  Return       r0

  // draw[300] = fun() { diagu(6,10,14) }
func fn28 (regs=10)
  // draw[300] = fun() { diagu(6,10,14) }
  Const        r6, 6
  Move         r3, r6
  Const        r7, 10
  Move         r4, r7
  Const        r8, 14
  Move         r5, r8
  Call         r9, diagu, r3, r4, r5
  Return       r0

  // draw[400] = fun() { diagd(6,10,10) }
func fn29 (regs=9)
  // draw[400] = fun() { diagd(6,10,10) }
  Const        r6, 6
  Move         r3, r6
  Const        r7, 10
  Move         r4, r7
  Const        r7, 10
  Move         r5, r7
  Call         r8, diagd, r3, r4, r5
  Return       r0

  // draw[500] = fun() { draw[100](); draw[400]() }
func fn30 (regs=9)
  // draw[500] = fun() { draw[100](); draw[400]() }
  Const        r3, 100
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 400
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[600] = fun() { verti(10,14,10) }
func fn31 (regs=9)
  // draw[600] = fun() { verti(10,14,10) }
  Const        r6, 10
  Move         r3, r6
  Const        r7, 14
  Move         r4, r7
  Const        r6, 10
  Move         r5, r6
  Call         r8, verti, r3, r4, r5
  Return       r0

  // draw[700] = fun() { draw[100](); draw[600]() }
func fn32 (regs=9)
  // draw[700] = fun() { draw[100](); draw[600]() }
  Const        r3, 100
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 600
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[800] = fun() { draw[200](); draw[600]() }
func fn33 (regs=9)
  // draw[800] = fun() { draw[200](); draw[600]() }
  Const        r3, 200
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 600
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[900] = fun() { draw[100](); draw[800]() }
func fn34 (regs=9)
  // draw[900] = fun() { draw[100](); draw[800]() }
  Const        r3, 100
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 800
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[1000] = fun() { horiz(0,4,14) }
func fn35 (regs=10)
  // draw[1000] = fun() { horiz(0,4,14) }
  Const        r6, 0
  Move         r3, r6
  Const        r7, 4
  Move         r4, r7
  Const        r8, 14
  Move         r5, r8
  Call         r9, horiz, r3, r4, r5
  Return       r0

  // draw[2000] = fun() { horiz(0,4,10) }
func fn36 (regs=10)
  // draw[2000] = fun() { horiz(0,4,10) }
  Const        r6, 0
  Move         r3, r6
  Const        r7, 4
  Move         r4, r7
  Const        r8, 10
  Move         r5, r8
  Call         r9, horiz, r3, r4, r5
  Return       r0

  // draw[3000] = fun() { diagd(0,4,10) }
func fn37 (regs=10)
  // draw[3000] = fun() { diagd(0,4,10) }
  Const        r6, 0
  Move         r3, r6
  Const        r7, 4
  Move         r4, r7
  Const        r8, 10
  Move         r5, r8
  Call         r9, diagd, r3, r4, r5
  Return       r0

  // draw[4000] = fun() { diagu(0,4,14) }
func fn38 (regs=10)
  // draw[4000] = fun() { diagu(0,4,14) }
  Const        r6, 0
  Move         r3, r6
  Const        r7, 4
  Move         r4, r7
  Const        r8, 14
  Move         r5, r8
  Call         r9, diagu, r3, r4, r5
  Return       r0

  // draw[5000] = fun() { draw[1000](); draw[4000]() }
func fn39 (regs=9)
  // draw[5000] = fun() { draw[1000](); draw[4000]() }
  Const        r3, 1000
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 4000
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[6000] = fun() { verti(10,14,0) }
func fn40 (regs=10)
  // draw[6000] = fun() { verti(10,14,0) }
  Const        r6, 10
  Move         r3, r6
  Const        r7, 14
  Move         r4, r7
  Const        r8, 0
  Move         r5, r8
  Call         r9, verti, r3, r4, r5
  Return       r0

  // draw[7000] = fun() { draw[1000](); draw[6000]() }
func fn41 (regs=9)
  // draw[7000] = fun() { draw[1000](); draw[6000]() }
  Const        r3, 1000
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 6000
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[8000] = fun() { draw[2000](); draw[6000]() }
func fn42 (regs=9)
  // draw[8000] = fun() { draw[2000](); draw[6000]() }
  Const        r3, 2000
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 6000
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0

  // draw[9000] = fun() { draw[1000](); draw[8000]() }
func fn43 (regs=9)
  // draw[9000] = fun() { draw[1000](); draw[8000]() }
  Const        r3, 1000
  Index        r4, r1, r3
  CallV        r5, r4, 0, r0
  Const        r6, 8000
  Index        r7, r1, r6
  CallV        r8, r7, 0, r0
  Return       r0
