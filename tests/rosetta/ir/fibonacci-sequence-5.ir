func main (regs=3)
  // var memo: map<int,int> = {0: 0, 1: 1}
  Const        r1, {"0": 0, "1": 1}
  Move         r0, r1
  SetGlobal    0,0,0,0
  // main()
  Call         r2, main, 
  Return       r0

  // fun fib(n: int): int {
func fib (regs=14)
  // if n in memo { return memo[n] }
  In           r2, r1, r0
  JumpIfFalse  r2, L0
  Index        r3, r0, r1
  Return       r3
L0:
  // let v = fib(n - 1) + fib(n - 2)
  Const        r5, 1
  Sub          r6, r1, r5
  Move         r4, r6
  Call         r7, fib, r4
  Const        r9, 2
  Sub          r10, r1, r9
  Move         r8, r10
  Call         r11, fib, r8
  Add          r12, r7, r11
  Move         r13, r12
  // memo[n] = v
  SetIndex     r0, r1, r13
  SetGlobal    0,0,0,0
  // return v
  Return       r13

  // fun main() {
func main (regs=9)
  // var i = 1
  Const        r1, 1
  Move         r2, r1
L1:
  // while i <= 30 {
  Const        r3, 30
  LessEqInt    r4, r2, r3
  JumpIfFalse  r4, L0
  // print(str(fib(i)))
  Move         r5, r2
  Call         r6, fib, r5
  Str          r7, r6
  Print        r7
  // i = i + 1
  Const        r1, 1
  AddInt       r8, r2, r1
  Move         r2, r8
  // while i <= 30 {
  Jump         L1
L0:
  Return       r0
