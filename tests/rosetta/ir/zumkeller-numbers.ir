func __main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun getDivisors(n: int): list<int> {
func getDivisors (regs=20)
  // var divs: list<int> = [1, n]
  Const        r3, 1
  Move         r1, r3
  Move         r2, r0
  MakeList     r4, 2, r1
  Move         r5, r4
  // var i = 2
  Const        r6, 2
  Move         r7, r6
L2:
  // while i * i <= n {
  MulInt       r8, r7, r7
  LessEq       r9, r8, r0
  JumpIfFalse  r9, L0
  // if n % i == 0 {
  Mod          r10, r0, r7
  Const        r11, 0
  Equal        r12, r10, r11
  JumpIfFalse  r12, L1
  // let j = (n / i) as int
  Div          r13, r0, r7
  Cast         r14, r13, int
  Move         r15, r14
  // divs = append(divs, i)
  Append       r16, r5, r7
  Move         r5, r16
  // if i != j {
  NotEqual     r17, r7, r15
  JumpIfFalse  r17, L1
  // divs = append(divs, j)
  Append       r18, r5, r15
  Move         r5, r18
L1:
  // i = i + 1
  Const        r3, 1
  AddInt       r19, r7, r3
  Move         r7, r19
  // while i * i <= n {
  Jump         L2
L0:
  // return divs
  Return       r5

  // fun sum(xs: list<int>): int {
func sum (regs=12)
  // var s = 0
  Const        r1, 0
  Move         r2, r1
  // for x in xs { s = s + x }
  IterPrep     r3, r0
  Len          r4, r3
  Const        r5, 0
L1:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  Add          r9, r2, r8
  Move         r2, r9
  Const        r10, 1
  AddInt       r11, r5, r10
  Move         r5, r11
  Jump         L1
L0:
  // return s
  Return       r2

  // fun isPartSum(divs: list<int>, target: int): bool {
func isPartSum (regs=26)
  // var possible: list<bool> = []
  Const        r2, []
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L1:
  // while i <= target {
  LessEq       r6, r5, r1
  JumpIfFalse  r6, L0
  // possible = append(possible, false)
  Const        r7, false
  Append       r8, r3, r7
  Move         r3, r8
  // i = i + 1
  Const        r9, 1
  AddInt       r10, r5, r9
  Move         r5, r10
  // while i <= target {
  Jump         L1
L0:
  // possible[0] = true
  Const        r11, true
  Const        r4, 0
  SetIndex     r3, r4, r11
  // for v in divs {
  IterPrep     r12, r0
  Len          r13, r12
  Const        r14, 0
L6:
  LessInt      r15, r14, r13
  JumpIfFalse  r15, L2
  Index        r16, r12, r14
  Move         r17, r16
  // var s = target
  Move         r18, r1
L5:
  // while s >= v {
  LessEq       r19, r17, r18
  JumpIfFalse  r19, L3
  // if possible[s - v] { possible[s] = true }
  Sub          r20, r18, r17
  Index        r21, r3, r20
  JumpIfFalse  r21, L4
  Const        r11, true
  SetIndex     r3, r18, r11
L4:
  // s = s - 1
  Const        r9, 1
  Sub          r22, r18, r9
  Move         r18, r22
  // while s >= v {
  Jump         L5
L3:
  // for v in divs {
  Const        r23, 1
  AddInt       r24, r14, r23
  Move         r14, r24
  Jump         L6
L2:
  // return possible[target]
  Index        r25, r3, r1
  Return       r25

  // fun isZumkeller(n: int): bool {
func isZumkeller (regs=25)
  // let divs = getDivisors(n)
  Move         r1, r0
  Call         r2, getDivisors, r1
  Move         r3, r2
  // let s = sum(divs)
  Sum          r4, r3
  Move         r5, r4
  // if s % 2 == 1 { return false }
  Const        r6, 2
  Mod          r7, r5, r6
  Const        r8, 1
  Equal        r9, r7, r8
  JumpIfFalse  r9, L0
  Const        r10, false
  Return       r10
L0:
  // if n % 2 == 1 {
  Const        r6, 2
  Mod          r11, r0, r6
  Const        r8, 1
  Equal        r12, r11, r8
  JumpIfFalse  r12, L1
  // let abundance = s - 2 * n
  Const        r6, 2
  Mul          r13, r6, r0
  Sub          r14, r5, r13
  Move         r15, r14
  // return abundance > 0 && abundance % 2 == 0
  Const        r6, 2
  Mod          r16, r15, r6
  Const        r17, 0
  Less         r18, r17, r15
  Const        r17, 0
  Equal        r19, r16, r17
  Move         r20, r18
  JumpIfFalse  r20, L2
  Move         r20, r19
L2:
  Return       r20
L1:
  // return isPartSum(divs, s / 2)
  Move         r21, r3
  Const        r6, 2
  Div          r23, r5, r6
  Move         r22, r23
  Call2        r24, isPartSum, r21, r22
  Return       r24

  // fun pad(n: int, width: int): string {
func pad (regs=8)
  // var s = str(n)
  Str          r2, r0
  Move         r3, r2
L1:
  // while len(s) < width { s = " " + s }
  Len          r4, r3
  Less         r5, r4, r1
  JumpIfFalse  r5, L0
  Const        r6, " "
  Add          r7, r6, r3
  Move         r3, r7
  Jump         L1
L0:
  // return s
  Return       r3

  // fun main() {
func main (regs=67)
  // print("The first 220 Zumkeller numbers are:")
  Const        r0, "The first 220 Zumkeller numbers are:"
  Print        r0
  // var count = 0
  Const        r1, 0
  Move         r2, r1
  // var line = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 2
  Const        r5, 2
  Move         r6, r5
L2:
  // while count < 220 {
  Const        r7, 220
  LessInt      r8, r2, r7
  JumpIfFalse  r8, L0
  // if isZumkeller(i) {
  Move         r9, r6
  Call         r10, isZumkeller, r9
  JumpIfFalse  r10, L1
  // line = line + pad(i, 3) + " "
  Move         r11, r6
  Const        r13, 3
  Move         r12, r13
  Call2        r14, pad, r11, r12
  Add          r15, r4, r14
  Const        r16, " "
  Add          r17, r15, r16
  Move         r4, r17
  // count = count + 1
  Const        r18, 1
  AddInt       r19, r2, r18
  Move         r2, r19
  // if count % 20 == 0 {
  Const        r20, 20
  ModInt       r21, r2, r20
  Const        r1, 0
  EqualInt     r22, r21, r1
  JumpIfFalse  r22, L1
  // print(substring(line, 0, len(line)-1))
  Const        r1, 0
  Len          r23, r4
  Const        r18, 1
  SubInt       r24, r23, r18
  Slice        r25, r4, r1, r24
  Print        r25
  // line = ""
  Const        r3, ""
  Move         r4, r3
L1:
  // i = i + 1
  Const        r18, 1
  AddInt       r26, r6, r18
  Move         r6, r26
  // while count < 220 {
  Jump         L2
L0:
  // print("\nThe first 40 odd Zumkeller numbers are:")
  Const        r27, "\nThe first 40 odd Zumkeller numbers are:"
  Print        r27
  // count = 0
  Const        r1, 0
  Move         r2, r1
  // line = ""
  Const        r3, ""
  Move         r4, r3
  // i = 3
  Const        r13, 3
  Move         r6, r13
L5:
  // while count < 40 {
  Const        r28, 40
  LessInt      r29, r2, r28
  JumpIfFalse  r29, L3
  // if isZumkeller(i) {
  Move         r30, r6
  Call         r31, isZumkeller, r30
  JumpIfFalse  r31, L4
  // line = line + pad(i, 5) + " "
  Move         r32, r6
  Const        r34, 5
  Move         r33, r34
  Call2        r35, pad, r32, r33
  Add          r36, r4, r35
  Const        r16, " "
  Add          r37, r36, r16
  Move         r4, r37
  // count = count + 1
  Const        r18, 1
  AddInt       r38, r2, r18
  Move         r2, r38
  // if count % 10 == 0 {
  Const        r39, 10
  ModInt       r40, r2, r39
  Const        r1, 0
  EqualInt     r41, r40, r1
  JumpIfFalse  r41, L4
  // print(substring(line, 0, len(line)-1))
  Const        r1, 0
  Len          r42, r4
  Const        r18, 1
  SubInt       r43, r42, r18
  Slice        r44, r4, r1, r43
  Print        r44
  // line = ""
  Const        r3, ""
  Move         r4, r3
L4:
  // i = i + 2
  Const        r5, 2
  AddInt       r45, r6, r5
  Move         r6, r45
  // while count < 40 {
  Jump         L5
L3:
  // print("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:")
  Const        r46, "\nThe first 40 odd Zumkeller numbers which don't end in 5 are:"
  Print        r46
  // count = 0
  Const        r1, 0
  Move         r2, r1
  // line = ""
  Const        r3, ""
  Move         r4, r3
  // i = 3
  Const        r13, 3
  Move         r6, r13
L9:
  // while count < 40 {
  Const        r28, 40
  LessInt      r47, r2, r28
  JumpIfFalse  r47, L6
  // if i % 10 != 5 && isZumkeller(i) {
  Const        r39, 10
  ModInt       r48, r6, r39
  Const        r34, 5
  NotEqual     r49, r48, r34
  Move         r50, r49
  JumpIfFalse  r50, L7
  Move         r51, r6
  Call         r52, isZumkeller, r51
  Move         r50, r52
L7:
  JumpIfFalse  r50, L8
  // line = line + pad(i, 7) + " "
  Move         r53, r6
  Const        r55, 7
  Move         r54, r55
  Call2        r56, pad, r53, r54
  Add          r57, r4, r56
  Const        r16, " "
  Add          r58, r57, r16
  Move         r4, r58
  // count = count + 1
  Const        r18, 1
  AddInt       r59, r2, r18
  Move         r2, r59
  // if count % 8 == 0 {
  Const        r60, 8
  ModInt       r61, r2, r60
  Const        r1, 0
  EqualInt     r62, r61, r1
  JumpIfFalse  r62, L8
  // print(substring(line, 0, len(line)-1))
  Const        r1, 0
  Len          r63, r4
  Const        r18, 1
  SubInt       r64, r63, r18
  Slice        r65, r4, r1, r64
  Print        r65
  // line = ""
  Const        r3, ""
  Move         r4, r3
L8:
  // i = i + 2
  Const        r5, 2
  AddInt       r66, r6, r5
  Move         r6, r66
  // while count < 40 {
  Jump         L9
L6:
  Return       r0
