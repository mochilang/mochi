func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun countOccurrences(s: string, sub: string): int {
func countOccurrences (regs=21)
  // if len(sub) == 0 { return len(s) + 1 }
  Len          r2, r1
  Const        r3, 0
  EqualInt     r4, r2, r3
  JumpIfFalse  r4, L0
  Len          r5, r0
  Const        r6, 1
  AddInt       r7, r5, r6
  Return       r7
L0:
  // var cnt = 0
  Const        r3, 0
  Move         r8, r3
  // var i = 0
  Const        r3, 0
  Move         r9, r3
  // var step = len(sub)
  Len          r10, r1
  Move         r11, r10
L3:
  // while i + step <= len(s) {
  AddInt       r12, r9, r11
  Len          r13, r0
  LessEqInt    r14, r12, r13
  JumpIfFalse  r14, L1
  // if substring(s, i, i + step) == sub {
  AddInt       r15, r9, r11
  Slice        r16, r0, r9, r15
  Equal        r17, r16, r1
  JumpIfFalse  r17, L2
  // cnt = cnt + 1
  Const        r6, 1
  AddInt       r18, r8, r6
  Move         r8, r18
  // i = i + step
  AddInt       r19, r9, r11
  Move         r9, r19
  // if substring(s, i, i + step) == sub {
  Jump         L3
L2:
  // i = i + 1
  Const        r6, 1
  AddInt       r20, r9, r6
  Move         r9, r20
  // while i + step <= len(s) {
  Jump         L3
L1:
  // return cnt
  Return       r8

  // fun main() {
func main (regs=12)
  // print(str(countOccurrences("the three truths", "th")))
  Const        r2, "the three truths"
  Move         r0, r2
  Const        r3, "th"
  Move         r1, r3
  Call2        r4, countOccurrences, r0, r1
  Str          r5, r4
  Print        r5
  // print(str(countOccurrences("ababababab", "abab")))
  Const        r8, "ababababab"
  Move         r6, r8
  Const        r9, "abab"
  Move         r7, r9
  Call2        r10, countOccurrences, r6, r7
  Str          r11, r10
  Print        r11
  Return       r0
