func main (regs=3)
  // var given = [
  Const        r1, ["ABCD", "CABD", "ACDB", "DACB", "BCDA", "ACBD", "ADCB", "CDAB", "DABC", "BCAD", "CADB", "CDBA", "CBAD", "ABDC", "ADBC", "BDCA", "DCBA", "BACD", "BADC", "BDAC", "CBDA", "DBCA", "DCAB"]
  Move         r0, r1
  SetGlobal    0,0,0,0
  // main()
  Call         r2, main, 
  Return       r0

  // fun idx(ch: string): int {
func idx (regs=12)
  // if ch == "A" { return 0 }
  Const        r2, "A"
  Equal        r3, r1, r2
  JumpIfFalse  r3, L0
  Const        r4, 0
  Return       r4
L0:
  // if ch == "B" { return 1 }
  Const        r5, "B"
  Equal        r6, r1, r5
  JumpIfFalse  r6, L1
  Const        r7, 1
  Return       r7
L1:
  // if ch == "C" { return 2 }
  Const        r8, "C"
  Equal        r9, r1, r8
  JumpIfFalse  r9, L2
  Const        r10, 2
  Return       r10
L2:
  // return 3
  Const        r11, 3
  Return       r11

  // fun main() {
func main (regs=47)
  // var res = ""
  Const        r1, ""
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L9:
  // while i < len(given[0]) {
  Const        r3, 0
  Index        r5, r0, r3
  Len          r6, r5
  LessInt      r7, r4, r6
  JumpIfFalse  r7, L0
  // var counts: list<int> = [0,0,0,0]
  Const        r8, [0, 0, 0, 0]
  Move         r9, r8
  // for p in given {
  IterPrep     r10, r0
  Len          r11, r10
  Const        r12, 0
L2:
  LessInt      r13, r12, r11
  JumpIfFalse  r13, L1
  Index        r14, r10, r12
  Move         r15, r14
  // let ch = substring(p, i, i+1)
  Const        r16, 1
  AddInt       r17, r4, r16
  Slice        r18, r15, r4, r17
  Move         r19, r18
  // let j = idx(ch)
  Move         r20, r19
  Call         r21, idx, r20
  Move         r22, r21
  // counts[j] = counts[j] + 1
  Index        r23, r9, r22
  Const        r16, 1
  Add          r24, r23, r16
  SetIndex     r9, r22, r24
  // for p in given {
  Const        r25, 1
  AddInt       r26, r12, r25
  Move         r12, r26
  Jump         L2
L1:
  // var j = 0
  Const        r3, 0
  Move         r27, r3
L8:
  // while j < 4 {
  Const        r28, 4
  LessInt      r29, r27, r28
  JumpIfFalse  r29, L3
  // if counts[j] % 2 == 1 {
  Index        r30, r9, r27
  Const        r31, 2
  Mod          r32, r30, r31
  Const        r16, 1
  Equal        r33, r32, r16
  JumpIfFalse  r33, L4
  // if j == 0 { res = res + "A" }
  Const        r3, 0
  EqualInt     r34, r27, r3
  JumpIfFalse  r34, L5
  Const        r35, "A"
  Add          r36, r2, r35
  Move         r2, r36
  Jump         L4
L5:
  // else if j == 1 { res = res + "B" }
  Const        r16, 1
  EqualInt     r37, r27, r16
  JumpIfFalse  r37, L6
  Const        r38, "B"
  Add          r39, r2, r38
  Move         r2, r39
  Jump         L4
L6:
  // else if j == 2 { res = res + "C" }
  Const        r31, 2
  EqualInt     r40, r27, r31
  JumpIfFalse  r40, L7
  Const        r41, "C"
  Add          r42, r2, r41
  Move         r2, r42
  Jump         L4
L7:
  // else { res = res + "D" }
  Const        r43, "D"
  Add          r44, r2, r43
  Move         r2, r44
L4:
  // j = j + 1
  Const        r16, 1
  AddInt       r45, r27, r16
  Move         r27, r45
  // while j < 4 {
  Jump         L8
L3:
  // i = i + 1
  Const        r16, 1
  AddInt       r46, r4, r16
  Move         r4, r46
  // while i < len(given[0]) {
  Jump         L9
L0:
  // print(res)
  Print        r2
  Return       r0
