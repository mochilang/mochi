func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun indexOf(s: string, ch: string): int {
func indexOf (regs=12)
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L2:
  // while i < len(s) {
  Len          r4, r0
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // if substring(s, i, i+1) == ch {
  Const        r6, 1
  AddInt       r7, r3, r6
  Slice        r8, r0, r3, r7
  Equal        r9, r8, r1
  JumpIfFalse  r9, L1
  // return i
  Return       r3
L1:
  // i = i + 1
  Const        r6, 1
  AddInt       r10, r3, r6
  Move         r3, r10
  // while i < len(s) {
  Jump         L2
L0:
  // return -1
  Const        r6, 1
  NegInt       r11, r6
  Return       r11

  // fun join(xs: list<string>, sep: string): string {
func join (regs=14)
  // var res = ""
  Const        r2, ""
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L2:
  // while i < len(xs) {
  Len          r6, r0
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L0
  // if i > 0 { res = res + sep }
  Const        r4, 0
  LessInt      r8, r4, r5
  JumpIfFalse  r8, L1
  Add          r9, r3, r1
  Move         r3, r9
L1:
  // res = res + xs[i]
  Index        r10, r0, r5
  Add          r11, r3, r10
  Move         r3, r11
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r5, r12
  Move         r5, r13
  // while i < len(xs) {
  Jump         L2
L0:
  // return res
  Return       r3

  // fun sentenceType(s: string): string {
func sentenceType (regs=44)
  // if len(s) == 0 { return "" }
  Len          r1, r0
  Const        r2, 0
  EqualInt     r3, r1, r2
  JumpIfFalse  r3, L0
  Const        r4, ""
  Return       r4
L0:
  // var types: list<string> = []
  Const        r5, []
  Move         r6, r5
  // var i = 0
  Const        r2, 0
  Move         r7, r2
L5:
  // while i < len(s) {
  Len          r8, r0
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L1
  // let ch = substring(s, i, i+1)
  Const        r10, 1
  AddInt       r11, r7, r10
  Slice        r12, r0, r7, r11
  Move         r13, r12
  // if ch == "?" {
  Const        r14, "?"
  Equal        r15, r13, r14
  JumpIfFalse  r15, L2
  // types = append(types, "Q")
  Const        r16, "Q"
  Append       r17, r6, r16
  Move         r6, r17
  // if ch == "?" {
  Jump         L3
L2:
  // } else if ch == "!" {
  Const        r18, "!"
  Equal        r19, r13, r18
  JumpIfFalse  r19, L4
  // types = append(types, "E")
  Const        r20, "E"
  Append       r21, r6, r20
  Move         r6, r21
  // } else if ch == "!" {
  Jump         L3
L4:
  // } else if ch == "." {
  Const        r22, "."
  Equal        r23, r13, r22
  JumpIfFalse  r23, L3
  // types = append(types, "S")
  Const        r24, "S"
  Append       r25, r6, r24
  Move         r6, r25
L3:
  // i = i + 1
  Const        r10, 1
  AddInt       r26, r7, r10
  Move         r7, r26
  // while i < len(s) {
  Jump         L5
L1:
  // let last = substring(s, len(s)-1, len(s))
  Len          r27, r0
  Const        r10, 1
  SubInt       r28, r27, r10
  Len          r29, r0
  Slice        r30, r0, r28, r29
  Move         r31, r30
  // if indexOf("?!.", last) == (-1) {
  Const        r34, "?!."
  Move         r32, r34
  Move         r33, r31
  Call2        r35, indexOf, r32, r33
  Const        r36, -1
  Equal        r37, r35, r36
  JumpIfFalse  r37, L6
  // types = append(types, "N")
  Const        r38, "N"
  Append       r39, r6, r38
  Move         r6, r39
L6:
  // return join(types, "|")
  Move         r40, r6
  Const        r42, "|"
  Move         r41, r42
  Call2        r43, join, r40, r41
  Return       r43

  // fun main() {
func main (regs=5)
  // var s = "hi there, how are you today? I'd like to present to you the washing machine 9001. You have been nominated to win one of these! Just make sure you don't break it"
  Const        r0, "hi there, how are you today? I'd like to present to you the washing machine 9001. You have been nominated to win one of these! Just make sure you don't break it"
  Move         r1, r0
  // var result = sentenceType(s)
  Move         r2, r1
  Call         r3, sentenceType, r2
  Move         r4, r3
  // print(result)
  Print        r4
  Return       r0
