func main (regs=6)
  // let LIMIT = 999999
  Const        r2, 999999
  Move         r0, r2
  SetGlobal    0,0,0,0
  // let primes = primesUpTo(LIMIT)
  Move         r3, r0
  Call         r4, primesUpTo, r3
  Move         r1, r4
  SetGlobal    1,1,0,0
  // main()
  Call         r5, main, 
  Return       r0

  // fun primesUpTo(n: int): list<int> {
func primesUpTo (regs=29)
  // var sieve: list<bool> = []
  Const        r3, []
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L1:
  // while i <= n {
  LessEq       r7, r6, r2
  JumpIfFalse  r7, L0
  // sieve = append(sieve, true)
  Const        r8, true
  Append       r9, r4, r8
  Move         r4, r9
  // i = i + 1
  Const        r10, 1
  AddInt       r11, r6, r10
  Move         r6, r11
  // while i <= n {
  Jump         L1
L0:
  // var p = 2
  Const        r12, 2
  Move         r13, r12
L5:
  // while p * p <= n {
  MulInt       r14, r13, r13
  LessEq       r15, r14, r2
  JumpIfFalse  r15, L2
  // if sieve[p] {
  Index        r16, r4, r13
  JumpIfFalse  r16, L3
  // var m = p * p
  MulInt       r17, r13, r13
  Move         r18, r17
L4:
  // while m <= n {
  LessEq       r19, r18, r2
  JumpIfFalse  r19, L3
  // sieve[m] = false
  Const        r20, false
  SetIndex     r4, r18, r20
  // m = m + p
  AddInt       r21, r18, r13
  Move         r18, r21
  // while m <= n {
  Jump         L4
L3:
  // p = p + 1
  Const        r10, 1
  AddInt       r22, r13, r10
  Move         r13, r22
  // while p * p <= n {
  Jump         L5
L2:
  // var res: list<int> = []
  Const        r3, []
  Move         r23, r3
  // var x = 2
  Const        r12, 2
  Move         r24, r12
L8:
  // while x <= n {
  LessEq       r25, r24, r2
  JumpIfFalse  r25, L6
  // if sieve[x] { res = append(res, x) }
  Index        r26, r4, r24
  JumpIfFalse  r26, L7
  Append       r27, r23, r24
  Move         r23, r27
L7:
  // x = x + 1
  Const        r10, 1
  AddInt       r28, r24, r10
  Move         r24, r28
  // while x <= n {
  Jump         L8
L6:
  // return res
  Return       r23

  // fun longestSeq(dir: string) {
func longestSeq (regs=107)
  // var pd = 0
  Const        r3, 0
  Move         r4, r3
  // var longSeqs: list<list<int>> = [[2]]
  Const        r5, [[2]]
  Move         r6, r5
  // var currSeq: list<int> = [2]
  Const        r7, [2]
  Move         r8, r7
  // var i = 1
  Const        r9, 1
  Move         r10, r9
L8:
  // while i < len(primes) {
  Len          r11, r1
  LessInt      r12, r10, r11
  JumpIfFalse  r12, L0
  // let d = primes[i] - primes[i-1]
  Index        r13, r1, r10
  Const        r9, 1
  SubInt       r14, r10, r9
  Index        r15, r1, r14
  Sub          r16, r13, r15
  Move         r17, r16
  // if (dir == "ascending" && d <= pd) || (dir == "descending" && d >= pd) {
  LessEq       r18, r17, r4
  Const        r19, "ascending"
  Equal        r20, r2, r19
  Move         r21, r20
  JumpIfFalse  r21, L1
  Move         r21, r18
L1:
  Move         r22, r21
  JumpIfTrue   r22, L2
  LessEq       r23, r4, r17
  Const        r24, "descending"
  Equal        r25, r2, r24
  Move         r26, r25
  JumpIfFalse  r26, L3
  Move         r26, r23
L3:
  Move         r22, r26
L2:
  JumpIfFalse  r22, L4
  // if len(currSeq) > len(longSeqs[0]) {
  Len          r27, r8
  Const        r3, 0
  Index        r28, r6, r3
  Len          r29, r28
  LessInt      r30, r29, r27
  JumpIfFalse  r30, L5
  // longSeqs = [currSeq]
  Move         r31, r8
  MakeList     r32, 1, r31
  Move         r6, r32
  // if len(currSeq) > len(longSeqs[0]) {
  Jump         L6
L5:
  // } else if len(currSeq) == len(longSeqs[0]) {
  Len          r33, r8
  Const        r3, 0
  Index        r34, r6, r3
  Len          r35, r34
  EqualInt     r36, r33, r35
  JumpIfFalse  r36, L6
  // longSeqs = append(longSeqs, currSeq)
  Append       r37, r6, r8
  Move         r6, r37
L6:
  // currSeq = [primes[i-1], primes[i]]
  Const        r9, 1
  SubInt       r40, r10, r9
  Index        r41, r1, r40
  Move         r38, r41
  Index        r42, r1, r10
  Move         r39, r42
  MakeList     r43, 2, r38
  Move         r8, r43
  // if (dir == "ascending" && d <= pd) || (dir == "descending" && d >= pd) {
  Jump         L7
L4:
  // currSeq = append(currSeq, primes[i])
  Index        r44, r1, r10
  Append       r45, r8, r44
  Move         r8, r45
L7:
  // pd = d
  Move         r4, r17
  // i = i + 1
  Const        r9, 1
  AddInt       r46, r10, r9
  Move         r10, r46
  // while i < len(primes) {
  Jump         L8
L0:
  // if len(currSeq) > len(longSeqs[0]) {
  Len          r47, r8
  Const        r3, 0
  Index        r48, r6, r3
  Len          r49, r48
  LessInt      r50, r49, r47
  JumpIfFalse  r50, L9
  // longSeqs = [currSeq]
  Move         r51, r8
  MakeList     r52, 1, r51
  Move         r6, r52
  // if len(currSeq) > len(longSeqs[0]) {
  Jump         L10
L9:
  // } else if len(currSeq) == len(longSeqs[0]) {
  Len          r53, r8
  Const        r3, 0
  Index        r54, r6, r3
  Len          r55, r54
  EqualInt     r56, r53, r55
  JumpIfFalse  r56, L10
  // longSeqs = append(longSeqs, currSeq)
  Append       r57, r6, r8
  Move         r6, r57
L10:
  // print("Longest run(s) of primes with " + dir + " differences is " + str(len(longSeqs[0])) + " :")
  Const        r58, "Longest run(s) of primes with "
  Add          r59, r58, r2
  Const        r60, " differences is "
  Add          r61, r59, r60
  Const        r3, 0
  Index        r62, r6, r3
  Len          r63, r62
  Str          r64, r63
  Add          r65, r61, r64
  Const        r66, " :"
  Add          r67, r65, r66
  Print        r67
  // for ls in longSeqs {
  IterPrep     r68, r6
  Len          r69, r68
  Const        r70, 0
L16:
  LessInt      r71, r70, r69
  JumpIfFalse  r71, L11
  Index        r72, r68, r70
  Move         r73, r72
  // var diffs: list<int> = []
  Const        r74, []
  Move         r75, r74
  // var j = 1
  Const        r9, 1
  Move         r76, r9
L13:
  // while j < len(ls) {
  Len          r77, r73
  LessInt      r78, r76, r77
  JumpIfFalse  r78, L12
  // diffs = append(diffs, ls[j] - ls[j-1])
  Index        r79, r73, r76
  Const        r9, 1
  SubInt       r80, r76, r9
  Index        r81, r73, r80
  Sub          r82, r79, r81
  Append       r83, r75, r82
  Move         r75, r83
  // j = j + 1
  Const        r9, 1
  AddInt       r84, r76, r9
  Move         r76, r84
  // while j < len(ls) {
  Jump         L13
L12:
  // var k = 0
  Const        r3, 0
  Move         r85, r3
L15:
  // while k < len(ls) - 1 {
  Len          r86, r73
  Const        r9, 1
  SubInt       r87, r86, r9
  LessInt      r88, r85, r87
  JumpIfFalse  r88, L14
  // print(str(ls[k]) + " (" + str(diffs[k]) + ") ", false)
  Index        r89, r73, r85
  Str          r90, r89
  Const        r91, " ("
  Add          r92, r90, r91
  Index        r93, r75, r85
  Str          r94, r93
  Add          r95, r92, r94
  Const        r96, ") "
  Add          r97, r95, r96
  Const        r98, false
  Print2       r97, r98
  // k = k + 1
  Const        r9, 1
  AddInt       r99, r85, r9
  Move         r85, r99
  // while k < len(ls) - 1 {
  Jump         L15
L14:
  // print(str(ls[len(ls)-1]))
  Len          r100, r73
  Const        r9, 1
  SubInt       r101, r100, r9
  Index        r102, r73, r101
  Str          r103, r102
  Print        r103
  // for ls in longSeqs {
  Const        r104, 1
  AddInt       r105, r70, r104
  Move         r70, r105
  Jump         L16
L11:
  // print("")
  Const        r106, ""
  Print        r106
  Return       r0

  // fun main() {
func main (regs=14)
  // print("For primes < 1 million:\n")
  Const        r2, "For primes < 1 million:\n"
  Print        r2
  // for dir in ["ascending", "descending"] {
  Const        r3, ["ascending", "descending"]
  IterPrep     r4, r3
  Len          r5, r4
  Const        r6, 0
L1:
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L0
  Index        r8, r4, r6
  Move         r9, r8
  // longestSeq(dir)
  Move         r10, r9
  Call         r11, longestSeq, r10
  // for dir in ["ascending", "descending"] {
  Const        r12, 1
  AddInt       r13, r6, r12
  Move         r6, r13
  Jump         L1
L0:
  Return       r0
