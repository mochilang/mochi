func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun gcd(a: int, b: int): int {
func gcd (regs=12)
  // var x = a
  Move         r2, r0
  // if x < 0 { x = -x }
  Const        r3, 0
  Less         r4, r2, r3
  JumpIfFalse  r4, L0
  Neg          r5, r2
  Move         r2, r5
L0:
  // var y = b
  Move         r6, r1
  // if y < 0 { y = -y }
  Const        r3, 0
  Less         r7, r6, r3
  JumpIfFalse  r7, L1
  Neg          r8, r6
  Move         r6, r8
L1:
  // while y != 0 {
  Const        r3, 0
  NotEqual     r9, r6, r3
  JumpIfFalse  r9, L2
  // let t = x % y
  Mod          r10, r2, r6
  Move         r11, r10
  // x = y
  Move         r2, r6
  // y = t
  Move         r6, r11
  // while y != 0 {
  Jump         L1
L2:
  // return x
  Return       r2

  // fun parseRational(s: string): map<string, int> {
func parseRational (regs=46)
  // var intPart = 0
  Const        r1, 0
  Move         r2, r1
  // var fracPart = 0
  Const        r1, 0
  Move         r3, r1
  // var denom = 1
  Const        r4, 1
  Move         r5, r4
  // var afterDot = false
  Const        r6, false
  Move         r7, r6
  // var i = 0
  Const        r1, 0
  Move         r8, r1
L4:
  // while i < len(s) {
  Len          r9, r0
  LessInt      r10, r8, r9
  JumpIfFalse  r10, L0
  // let ch = substring(s, i, i+1)
  Const        r4, 1
  AddInt       r11, r8, r4
  Slice        r12, r0, r8, r11
  Move         r13, r12
  // if ch == "." {
  Const        r14, "."
  Equal        r15, r13, r14
  JumpIfFalse  r15, L1
  // afterDot = true
  Const        r16, true
  Move         r7, r16
  // if ch == "." {
  Jump         L2
L1:
  // let d = int(ch) - int("0")
  Cast         r17, r13, int
  Const        r1, 0
  Sub          r18, r17, r1
  Move         r19, r18
  // if !afterDot {
  Not          r20, r7
  JumpIfFalse  r20, L3
  // intPart = intPart * 10 + d
  Const        r21, 10
  MulInt       r22, r2, r21
  Add          r23, r22, r19
  Move         r2, r23
  // if !afterDot {
  Jump         L2
L3:
  // fracPart = fracPart * 10 + d
  Const        r21, 10
  MulInt       r24, r3, r21
  Add          r25, r24, r19
  Move         r3, r25
  // denom = denom * 10
  Const        r21, 10
  MulInt       r26, r5, r21
  Move         r5, r26
L2:
  // i = i + 1
  Const        r4, 1
  AddInt       r27, r8, r4
  Move         r8, r27
  // while i < len(s) {
  Jump         L4
L0:
  // var num = intPart * denom + fracPart
  Mul          r28, r2, r5
  Add          r29, r28, r3
  Move         r30, r29
  // let g = gcd(num, denom)
  Move         r31, r30
  Move         r32, r5
  Call2        r33, gcd, r31, r32
  Move         r34, r33
  // return {"num": (num / g) as int, "den": (denom / g) as int}
  Const        r35, "num"
  Div          r36, r30, r34
  Cast         r37, r36, int
  Const        r38, "den"
  Div          r39, r5, r34
  Cast         r40, r39, int
  Move         r41, r35
  Move         r42, r37
  Move         r43, r38
  Move         r44, r40
  MakeMap      r45, 2, r41
  Return       r45

  // fun main() {
func main (regs=25)
  // let inputs = ["0.9054054", "0.518518", "0.75"]
  Const        r0, ["0.9054054", "0.518518", "0.75"]
  Move         r1, r0
  // for s in inputs {
  IterPrep     r2, r1
  Len          r3, r2
  Const        r4, 0
L1:
  LessInt      r5, r4, r3
  JumpIfFalse  r5, L0
  Index        r6, r2, r4
  Move         r7, r6
  // let r = parseRational(s)
  Move         r8, r7
  Call         r9, parseRational, r8
  Move         r10, r9
  // print(s + " = " + str(r["num"]) + "/" + str(r["den"]))
  Const        r11, " = "
  Add          r12, r7, r11
  Const        r13, "num"
  Index        r14, r10, r13
  Str          r15, r14
  Add          r16, r12, r15
  Const        r17, "/"
  Add          r18, r16, r17
  Const        r19, "den"
  Index        r20, r10, r19
  Str          r21, r20
  Add          r22, r18, r21
  Print        r22
  // for s in inputs {
  Const        r23, 1
  AddInt       r24, r4, r23
  Move         r4, r24
  Jump         L1
L0:
  Return       r0
