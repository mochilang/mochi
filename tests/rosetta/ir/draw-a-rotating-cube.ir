func main (regs=110)
  // let PI: float = 3.141592653589793
  Const        r8, 3.141592653589793
  Move         r0, r8
  SetGlobal    0,0,0,0
  // let TWO_PI: float = 6.283185307179586
  Const        r9, 6.283185307179586
  Move         r1, r9
  SetGlobal    1,1,0,0
  // Point3{ x: -1.0, y: -1.0, z: -1.0 },
  Const        r18, 1.0
  NegFloat     r19, r18
  Const        r18, 1.0
  NegFloat     r20, r18
  Const        r18, 1.0
  NegFloat     r21, r18
  Const        r22, "__name"
  Const        r23, "Point3"
  Const        r24, "x"
  Move         r25, r19
  Const        r26, "y"
  Move         r27, r20
  Const        r28, "z"
  Move         r29, r21
  MakeMap      r30, 4, r22
  Move         r10, r30
  // Point3{ x: -1.0, y: -1.0, z: 1.0 },
  Const        r18, 1.0
  NegFloat     r31, r18
  Const        r18, 1.0
  NegFloat     r32, r18
  Const        r18, 1.0
  Const        r33, "__name"
  Const        r34, "Point3"
  Const        r35, "x"
  Move         r36, r31
  Const        r37, "y"
  Move         r38, r32
  Const        r39, "z"
  Move         r40, r18
  MakeMap      r41, 4, r33
  Move         r11, r41
  // Point3{ x: -1.0, y: 1.0, z: -1.0 },
  Const        r18, 1.0
  NegFloat     r42, r18
  Const        r18, 1.0
  Const        r18, 1.0
  NegFloat     r43, r18
  Const        r44, "__name"
  Const        r45, "Point3"
  Const        r46, "x"
  Move         r47, r42
  Const        r48, "y"
  Move         r49, r18
  Const        r50, "z"
  Move         r51, r43
  MakeMap      r52, 4, r44
  Move         r12, r52
  // Point3{ x: -1.0, y: 1.0, z: 1.0 },
  Const        r18, 1.0
  NegFloat     r53, r18
  Const        r18, 1.0
  Const        r18, 1.0
  Const        r54, "__name"
  Const        r55, "Point3"
  Const        r56, "x"
  Move         r57, r53
  Const        r58, "y"
  Move         r59, r18
  Const        r60, "z"
  Move         r61, r18
  MakeMap      r62, 4, r54
  Move         r13, r62
  // Point3{ x: 1.0, y: -1.0, z: -1.0 },
  Const        r18, 1.0
  Const        r18, 1.0
  NegFloat     r63, r18
  Const        r18, 1.0
  NegFloat     r64, r18
  Const        r65, "__name"
  Const        r66, "Point3"
  Const        r67, "x"
  Move         r68, r18
  Const        r69, "y"
  Move         r70, r63
  Const        r71, "z"
  Move         r72, r64
  MakeMap      r73, 4, r65
  Move         r14, r73
  // Point3{ x: 1.0, y: -1.0, z: 1.0 },
  Const        r18, 1.0
  Const        r18, 1.0
  NegFloat     r74, r18
  Const        r18, 1.0
  Const        r75, "__name"
  Const        r76, "Point3"
  Const        r77, "x"
  Move         r78, r18
  Const        r79, "y"
  Move         r80, r74
  Const        r81, "z"
  Move         r82, r18
  MakeMap      r83, 4, r75
  Move         r15, r83
  // Point3{ x: 1.0, y: 1.0, z: -1.0 },
  Const        r18, 1.0
  Const        r18, 1.0
  Const        r18, 1.0
  NegFloat     r84, r18
  Const        r85, "__name"
  Const        r86, "Point3"
  Const        r87, "x"
  Move         r88, r18
  Const        r89, "y"
  Move         r90, r18
  Const        r91, "z"
  Move         r92, r84
  MakeMap      r93, 4, r85
  Move         r16, r93
  // Point3{ x: 1.0, y: 1.0, z: 1.0 },
  Const        r18, 1.0
  Const        r18, 1.0
  Const        r18, 1.0
  Const        r94, "__name"
  Const        r95, "Point3"
  Const        r96, "x"
  Move         r97, r18
  Const        r98, "y"
  Move         r99, r18
  Const        r100, "z"
  Move         r101, r18
  MakeMap      r102, 4, r94
  Move         r17, r102
  // let nodes: list<Point3> = [
  MakeList     r103, 8, r10
  Move         r2, r103
  SetGlobal    2,2,0,0
  // let edges: list<list<int>> = [
  Const        r104, [[0, 1], [1, 3], [3, 2], [2, 0], [4, 5], [5, 7], [7, 6], [6, 4], [0, 4], [1, 5], [2, 6], [3, 7]]
  Move         r3, r104
  SetGlobal    3,3,0,0
  // let width = 40
  Const        r105, 40
  Move         r4, r105
  SetGlobal    4,4,0,0
  // let height = 20
  Const        r106, 20
  Move         r5, r106
  SetGlobal    5,5,0,0
  // let distance = 3.0
  Const        r107, 3.0
  Move         r6, r107
  SetGlobal    6,6,0,0
  // let scale = 8.0
  Const        r108, 8.0
  Move         r7, r108
  SetGlobal    7,7,0,0
  // main()
  Call         r109, main, 
  Return       r0

  // fun _mod(x: float, m: float): float {
func _mod (regs=15)
  // return x - ((x / m) as int as float) * m
  Div          r10, r8, r9
  Cast         r11, r10, int
  Cast         r12, r11, float
  Mul          r13, r12, r9
  Sub          r14, r8, r13
  Return       r14

  // fun _sin(x: float): float {
func _sin (regs=32)
  // let y = _mod(x + PI, TWO_PI) - PI
  Add          r11, r8, r0
  Move         r9, r11
  Move         r10, r1
  Call2        r12, _mod, r9, r10
  Sub          r13, r12, r0
  Move         r14, r13
  // let y2 = y * y
  Mul          r15, r14, r14
  Move         r16, r15
  // let y3 = y2 * y
  Mul          r17, r16, r14
  Move         r18, r17
  // let y5 = y3 * y2
  Mul          r19, r18, r16
  Move         r20, r19
  // let y7 = y5 * y2
  Mul          r21, r20, r16
  Move         r22, r21
  // return y - y3/6.0 + y5/120.0 - y7/5040.0
  Const        r23, 6.0
  DivFloat     r24, r18, r23
  Const        r25, 120.0
  DivFloat     r26, r20, r25
  Const        r27, 5040.0
  DivFloat     r28, r22, r27
  SubFloat     r29, r14, r24
  AddFloat     r30, r29, r26
  SubFloat     r31, r30, r28
  Return       r31

  // fun _cos(x: float): float {
func _cos (regs=31)
  // let y = _mod(x + PI, TWO_PI) - PI
  Add          r11, r8, r0
  Move         r9, r11
  Move         r10, r1
  Call2        r12, _mod, r9, r10
  Sub          r13, r12, r0
  Move         r14, r13
  // let y2 = y * y
  Mul          r15, r14, r14
  Move         r16, r15
  // let y4 = y2 * y2
  Mul          r17, r16, r16
  Move         r18, r17
  // let y6 = y4 * y2
  Mul          r19, r18, r16
  Move         r20, r19
  // return 1.0 - y2/2.0 + y4/24.0 - y6/720.0
  Const        r21, 1.0
  Const        r22, 2.0
  DivFloat     r23, r16, r22
  Const        r24, 24.0
  DivFloat     r25, r18, r24
  Const        r26, 720.0
  DivFloat     r27, r20, r26
  SubFloat     r28, r21, r23
  AddFloat     r29, r28, r25
  SubFloat     r30, r29, r27
  Return       r30

  // fun rotate(p: Point3, ax: float, ay: float): Point3 {
func rotate (regs=58)
  // let sinx = _sin(ax)
  Move         r11, r9
  Call         r12, _sin, r11
  Move         r13, r12
  // let cosx = _cos(ax)
  Move         r14, r9
  Call         r15, _cos, r14
  Move         r16, r15
  // let siny = _sin(ay)
  Move         r17, r10
  Call         r18, _sin, r17
  Move         r19, r18
  // let cosy = _cos(ay)
  Move         r20, r10
  Call         r21, _cos, r20
  Move         r22, r21
  // let x1 = p.x
  Const        r23, "x"
  Index        r24, r8, r23
  Move         r25, r24
  // let y1 = p.y*cosx - p.z*sinx
  Const        r26, "y"
  Index        r27, r8, r26
  Mul          r28, r27, r16
  Const        r29, "z"
  Index        r30, r8, r29
  Mul          r31, r30, r13
  Sub          r32, r28, r31
  Move         r33, r32
  // let z1 = p.y*sinx + p.z*cosx
  Const        r26, "y"
  Index        r34, r8, r26
  Mul          r35, r34, r13
  Const        r29, "z"
  Index        r36, r8, r29
  Mul          r37, r36, r16
  Add          r38, r35, r37
  Move         r39, r38
  // let x2 = x1*cosy + z1*siny
  Mul          r40, r25, r22
  Mul          r41, r39, r19
  Add          r42, r40, r41
  Move         r43, r42
  // let z2 = -x1*siny + z1*cosy
  Neg          r44, r25
  Mul          r45, r44, r19
  Mul          r46, r39, r22
  Add          r47, r45, r46
  Move         r48, r47
  // return Point3{ x: x2, y: y1, z: z2 }
  Const        r49, "__name"
  Const        r50, "Point3"
  Const        r51, "x"
  Move         r52, r43
  Const        r53, "y"
  Move         r54, r33
  Const        r55, "z"
  Move         r56, r48
  MakeMap      r57, 4, r49
  Return       r57

  // fun project(p: Point3): Point2 {
func project (regs=37)
  // let factor = scale / (p.z + distance)
  Const        r9, "z"
  Index        r10, r8, r9
  Add          r11, r10, r6
  Div          r12, r7, r11
  Move         r13, r12
  // let x = (p.x * factor) as int + width/2
  Const        r14, "x"
  Index        r15, r8, r14
  Mul          r16, r15, r13
  Cast         r17, r16, int
  Const        r18, 2
  Div          r19, r4, r18
  Add          r20, r17, r19
  Move         r21, r20
  // let y = (-p.y * factor) as int + height/2
  Const        r22, "y"
  Index        r23, r8, r22
  Neg          r24, r23
  Mul          r25, r24, r13
  Cast         r26, r25, int
  Const        r18, 2
  Div          r27, r5, r18
  Add          r28, r26, r27
  Move         r29, r28
  // return Point2{ x: x, y: y }
  Const        r30, "__name"
  Const        r31, "Point2"
  Const        r32, "x"
  Move         r33, r21
  Const        r34, "y"
  Move         r35, r29
  MakeMap      r36, 3, r30
  Return       r36

  // fun clearGrid(): list<list<string>> {
func clearGrid (regs=22)
  // var g: list<list<string>> = []
  Const        r8, []
  Move         r9, r8
  // var y = 0
  Const        r10, 0
  Move         r11, r10
L3:
  // while y < height {
  Less         r12, r11, r5
  JumpIfFalse  r12, L0
  // var row: list<string> = []
  Const        r8, []
  Move         r13, r8
  // var x = 0
  Const        r10, 0
  Move         r14, r10
L2:
  // while x < width {
  Less         r15, r14, r4
  JumpIfFalse  r15, L1
  // row = append(row, " ")
  Const        r16, " "
  Append       r17, r13, r16
  Move         r13, r17
  // x = x + 1
  Const        r18, 1
  AddInt       r19, r14, r18
  Move         r14, r19
  // while x < width {
  Jump         L2
L1:
  // g = append(g, row)
  Append       r20, r9, r13
  Move         r9, r20
  // y = y + 1
  Const        r18, 1
  AddInt       r21, r11, r18
  Move         r11, r21
  // while y < height {
  Jump         L3
L0:
  // return g
  Return       r9

  // fun drawPoint(g: list<list<string>>, x: int, y: int, ch: string) {
func drawPoint (regs=20)
  // if x >= 0 && x < width && y >= 0 && y < height {
  Const        r12, 0
  LessEq       r13, r12, r9
  Less         r14, r9, r4
  Const        r12, 0
  LessEq       r15, r12, r10
  Less         r16, r10, r5
  Move         r17, r13
  JumpIfFalse  r17, L0
  Move         r17, r14
  JumpIfFalse  r17, L0
  Move         r17, r15
  JumpIfFalse  r17, L0
  Move         r17, r16
L0:
  JumpIfFalse  r17, L1
  // var row = g[y]
  Index        r18, r8, r10
  Move         r19, r18
  // row[x] = ch
  SetIndex     r19, r9, r11
  // g[y] = row
  SetIndex     r8, r10, r19
L1:
  Return       r0

  // fun bresenham(x0:int,y0:int,x1:int,y1:int,g:list<list<string>>,ch:string) {
func bresenham (regs=51)
  // var dx = x1 - x0
  Sub          r14, r10, r8
  Move         r15, r14
  // if dx < 0 { dx = -dx }
  Const        r16, 0
  Less         r17, r15, r16
  JumpIfFalse  r17, L0
  Neg          r18, r15
  Move         r15, r18
L0:
  // var dy = y1 - y0
  Sub          r19, r11, r9
  Move         r20, r19
  // if dy < 0 { dy = -dy }
  Const        r16, 0
  Less         r21, r20, r16
  JumpIfFalse  r21, L1
  Neg          r22, r20
  Move         r20, r22
L1:
  // var sx = -1
  Const        r23, 1
  NegInt       r24, r23
  Move         r25, r24
  // if x0 < x1 { sx = 1 }
  Less         r26, r8, r10
  JumpIfFalse  r26, L2
  Const        r23, 1
  Move         r25, r23
L2:
  // var sy = -1
  Const        r23, 1
  NegInt       r27, r23
  Move         r28, r27
  // if y0 < y1 { sy = 1 }
  Less         r29, r9, r11
  JumpIfFalse  r29, L3
  Const        r23, 1
  Move         r28, r23
L3:
  // var err = dx - dy
  Sub          r30, r15, r20
  Move         r31, r30
L8:
  // while true {
  Const        r32, true
  // drawPoint(g, x0, y0, ch)
  Move         r33, r12
  Move         r34, r8
  Move         r35, r9
  Move         r36, r13
  Call         r37, drawPoint, r33, r34, r35, r36
  // if x0 == x1 && y0 == y1 { break }
  Equal        r38, r8, r10
  Equal        r39, r9, r11
  Move         r40, r38
  JumpIfFalse  r40, L4
  Move         r40, r39
L4:
  JumpIfFalse  r40, L5
  Jump         L6
L5:
  // var e2 = 2*err
  Const        r41, 2
  Mul          r42, r41, r31
  Move         r43, r42
  // if e2 > (-dy) {
  Neg          r44, r20
  Less         r45, r44, r43
  JumpIfFalse  r45, L7
  // err = err - dy
  Sub          r46, r31, r20
  Move         r31, r46
  // x0 = x0 + sx
  Add          r47, r8, r25
  Move         r8, r47
L7:
  // if e2 < dx {
  Less         r48, r43, r15
  JumpIfFalse  r48, L8
  // err = err + dx
  Add          r49, r31, r15
  Move         r31, r49
  // y0 = y0 + sy
  Add          r50, r9, r28
  Move         r9, r50
  // while true {
  Jump         L8
L6:
  Return       r0

  // fun render(g:list<list<string>>): string {
func render (regs=26)
  // var out = ""
  Const        r9, ""
  Move         r10, r9
  // var y = 0
  Const        r11, 0
  Move         r12, r11
L3:
  // while y < height {
  Less         r13, r12, r5
  JumpIfFalse  r13, L0
  // var line = ""
  Const        r9, ""
  Move         r14, r9
  // var x = 0
  Const        r11, 0
  Move         r15, r11
L2:
  // while x < width {
  Less         r16, r15, r4
  JumpIfFalse  r16, L1
  // line = line + g[y][x]
  Index        r17, r8, r12
  Index        r18, r17, r15
  Add          r19, r14, r18
  Move         r14, r19
  // x = x + 1
  Const        r20, 1
  AddInt       r21, r15, r20
  Move         r15, r21
  // while x < width {
  Jump         L2
L1:
  // out = out + line + "\n"
  Add          r22, r10, r14
  Const        r23, "\n"
  Add          r24, r22, r23
  Move         r10, r24
  // y = y + 1
  Const        r20, 1
  AddInt       r25, r12, r20
  Move         r12, r25
  // while y < height {
  Jump         L3
L0:
  // return out
  Return       r10

  // fun main() {
func main (regs=71)
  // var f = 0
  Const        r8, 0
  Move         r9, r8
L5:
  // while f < 10 {
  Const        r10, 10
  LessInt      r11, r9, r10
  JumpIfFalse  r11, L0
  // var grid = clearGrid()
  Call         r12, clearGrid, 
  Move         r13, r12
  // var rot: list<Point2> = []
  Const        r14, []
  Move         r15, r14
  // var i = 0
  Const        r8, 0
  Move         r16, r8
  // var ay = (PI/4.0) + (f as float)*PI/10.0
  Const        r17, 4.0
  DivFloat     r18, r0, r17
  Cast         r19, r9, float
  Mul          r20, r19, r0
  Const        r21, 10.0
  DivFloat     r22, r20, r21
  AddFloat     r23, r18, r22
  Move         r24, r23
L2:
  // while i < len(nodes) {
  Len          r25, r2
  LessInt      r26, r16, r25
  JumpIfFalse  r26, L1
  // let p = rotate(nodes[i], PI/4.0, ay)
  Index        r30, r2, r16
  Move         r27, r30
  Const        r17, 4.0
  DivFloat     r31, r0, r17
  Move         r28, r31
  Move         r29, r24
  Call         r32, rotate, r27, r28, r29
  Move         r33, r32
  // let pp = project(p)
  Move         r34, r33
  Call         r35, project, r34
  Move         r36, r35
  // rot = append(rot, pp)
  Append       r37, r15, r36
  Move         r15, r37
  // i = i + 1
  Const        r38, 1
  AddInt       r39, r16, r38
  Move         r16, r39
  // while i < len(nodes) {
  Jump         L2
L1:
  // var e = 0
  Const        r8, 0
  Move         r40, r8
L4:
  // while e < len(edges) {
  Len          r41, r3
  LessInt      r42, r40, r41
  JumpIfFalse  r42, L3
  // let a = edges[e][0]
  Index        r43, r3, r40
  Const        r8, 0
  Index        r44, r43, r8
  Move         r45, r44
  // let b = edges[e][1]
  Index        r46, r3, r40
  Const        r38, 1
  Index        r47, r46, r38
  Move         r48, r47
  // let p1 = rot[a]
  Index        r49, r15, r45
  Move         r50, r49
  // let p2 = rot[b]
  Index        r51, r15, r48
  Move         r52, r51
  // bresenham(p1.x, p1.y, p2.x, p2.y, grid, "#")
  Const        r59, "x"
  Index        r60, r50, r59
  Move         r53, r60
  Const        r61, "y"
  Index        r62, r50, r61
  Move         r54, r62
  Const        r59, "x"
  Index        r63, r52, r59
  Move         r55, r63
  Const        r61, "y"
  Index        r64, r52, r61
  Move         r56, r64
  Move         r57, r13
  Const        r65, "#"
  Move         r58, r65
  Call         r66, bresenham, r53, r54, r55, r56, r57, r58
  // e = e + 1
  Const        r38, 1
  AddInt       r67, r40, r38
  Move         r40, r67
  // while e < len(edges) {
  Jump         L4
L3:
  // print(render(grid))
  Move         r68, r13
  Call         r69, render, r68
  Print        r69
  // f = f + 1
  Const        r38, 1
  AddInt       r70, r9, r38
  Move         r9, r70
  // while f < 10 {
  Jump         L5
L0:
  Return       r0
