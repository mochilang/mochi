func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun shuffle(xs: list<int>): list<int> {
func shuffle (regs=15)
  // var arr = xs
  Move         r1, r0
  // var i = 99  // length of arr minus 1
  Const        r2, 99
  Move         r3, r2
L1:
  // while i > 0 {
  Const        r4, 0
  LessInt      r5, r4, r3
  JumpIfFalse  r5, L0
  // let j = now() % (i + 1)
  Now          r6
  Const        r7, 1
  AddInt       r8, r3, r7
  ModInt       r9, r6, r8
  Move         r10, r9
  // let tmp = arr[i]
  Index        r11, r1, r3
  Move         r12, r11
  // arr[i] = arr[j]
  Index        r13, r1, r10
  SetIndex     r1, r3, r13
  // arr[j] = tmp
  SetIndex     r1, r10, r12
  // i = i - 1
  Const        r7, 1
  SubInt       r14, r3, r7
  Move         r3, r14
  // while i > 0 {
  Jump         L1
L0:
  // return arr
  Return       r1

  // fun doTrials(trials: int, np: int, strategy: string) {
func doTrials (regs=71)
  // var pardoned = 0
  Const        r3, 0
  Move         r4, r3
  // var t = 0
  Const        r3, 0
  Move         r5, r3
L17:
  // while t < trials {
  Less         r6, r5, r0
  JumpIfFalse  r6, L0
  // var drawers: list<int> = []
  Const        r7, []
  Move         r8, r7
  // var i = 0
  Const        r3, 0
  Move         r9, r3
L2:
  // while i < 100 {
  Const        r10, 100
  LessInt      r11, r9, r10
  JumpIfFalse  r11, L1
  // drawers = append(drawers, i)
  Append       r12, r8, r9
  Move         r8, r12
  // i = i + 1
  Const        r13, 1
  AddInt       r14, r9, r13
  Move         r9, r14
  // while i < 100 {
  Jump         L2
L1:
  // drawers = shuffle(drawers)
  Move         r15, r8
  Call         r16, shuffle, r15
  Move         r8, r16
  // var p = 0
  Const        r3, 0
  Move         r17, r3
  // var success = true
  Const        r18, true
  Move         r19, r18
L15:
  // while p < np {
  Less         r20, r17, r1
  JumpIfFalse  r20, L3
  // var found = false
  Const        r21, false
  Move         r22, r21
  // if strategy == "optimal" {
  Const        r23, "optimal"
  Equal        r24, r2, r23
  JumpIfFalse  r24, L4
  // var prev = p
  Move         r25, r17
  // var d = 0
  Const        r3, 0
  Move         r26, r3
L7:
  // while d < 50 {
  Const        r27, 50
  LessInt      r28, r26, r27
  JumpIfFalse  r28, L5
  // let this = drawers[prev]
  Index        r29, r8, r25
  Move         r30, r29
  // if this == p {
  Equal        r31, r30, r17
  JumpIfFalse  r31, L6
  // found = true
  Const        r18, true
  Move         r22, r18
  // break
  Jump         L5
L6:
  // prev = this
  Move         r25, r30
  // d = d + 1
  Const        r13, 1
  AddInt       r32, r26, r13
  Move         r26, r32
  // while d < 50 {
  Jump         L7
L4:
  // var opened: list<bool> = []
  Const        r7, []
  Move         r33, r7
  // var k = 0
  Const        r3, 0
  Move         r34, r3
L9:
  // while k < 100 {
  Const        r10, 100
  LessInt      r35, r34, r10
  JumpIfFalse  r35, L8
  // opened = append(opened, false)
  Const        r21, false
  Append       r36, r33, r21
  Move         r33, r36
  // k = k + 1
  Const        r13, 1
  AddInt       r37, r34, r13
  Move         r34, r37
  // while k < 100 {
  Jump         L9
L8:
  // var d = 0
  Const        r3, 0
  Move         r38, r3
L13:
  // while d < 50 {
  Const        r27, 50
  LessInt      r39, r38, r27
  JumpIfFalse  r39, L5
  // var n = now() % 100
  Now          r40
  Const        r10, 100
  ModInt       r41, r40, r10
  Move         r42, r41
L11:
  // while opened[n] {
  Index        r43, r33, r42
  JumpIfFalse  r43, L10
  // n = now() % 100
  Now          r44
  Const        r10, 100
  ModInt       r45, r44, r10
  Move         r42, r45
  // while opened[n] {
  Jump         L11
L10:
  // opened[n] = true
  Const        r18, true
  SetIndex     r33, r42, r18
  // if drawers[n] == p {
  Index        r46, r8, r42
  Equal        r47, r46, r17
  JumpIfFalse  r47, L12
  // found = true
  Const        r18, true
  Move         r22, r18
  // break
  Jump         L5
L12:
  // d = d + 1
  Const        r13, 1
  AddInt       r48, r38, r13
  Move         r38, r48
  // while d < 50 {
  Jump         L13
L5:
  // if !found {
  Not          r49, r22
  JumpIfFalse  r49, L14
  // success = false
  Const        r21, false
  Move         r19, r21
  // break
  Jump         L3
L14:
  // p = p + 1
  Const        r13, 1
  AddInt       r50, r17, r13
  Move         r17, r50
  // while p < np {
  Jump         L15
L3:
  // if success {
  JumpIfFalse  r19, L16
  // pardoned = pardoned + 1
  Const        r13, 1
  AddInt       r51, r4, r13
  Move         r4, r51
L16:
  // t = t + 1
  Const        r13, 1
  AddInt       r52, r5, r13
  Move         r5, r52
  // while t < trials {
  Jump         L17
L0:
  // let rf = (pardoned as float) / (trials as float) * 100.0
  Cast         r53, r4, float
  Cast         r54, r0, float
  Div          r55, r53, r54
  Const        r56, 100.0
  MulFloat     r57, r55, r56
  Move         r58, r57
  // print("  strategy = " + strategy + "  pardoned = " + str(pardoned) + " relative frequency = " + str(rf) + "%")
  Const        r59, "  strategy = "
  Add          r60, r59, r2
  Const        r61, "  pardoned = "
  Add          r62, r60, r61
  Str          r63, r4
  Add          r64, r62, r63
  Const        r65, " relative frequency = "
  Add          r66, r64, r65
  Str          r67, r58
  Add          r68, r66, r67
  Const        r69, "%"
  Add          r70, r68, r69
  Print        r70
  Return       r0

  // fun main() {
func main (regs=33)
  // let trials = 1000
  Const        r0, 1000
  Move         r1, r0
  // for np in [10, 100] {
  Const        r2, [10, 100]
  IterPrep     r3, r2
  Len          r4, r3
  Const        r5, 0
L3:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // print("Results from " + str(trials) + " trials with " + str(np) + " prisoners:\n")
  Const        r9, "Results from "
  Const        r10, "1000"
  Const        r11, "Results from 1000"
  Const        r12, " trials with "
  Const        r13, "Results from 1000 trials with "
  Str          r14, r8
  Add          r15, r13, r14
  Const        r16, " prisoners:\n"
  Add          r17, r15, r16
  Print        r17
  // for strat in ["random", "optimal"] {
  Const        r18, ["random", "optimal"]
  IterPrep     r19, r18
  Len          r20, r19
  Const        r21, 0
L2:
  LessInt      r22, r21, r20
  JumpIfFalse  r22, L1
  Index        r23, r19, r21
  Move         r24, r23
  // doTrials(trials, np, strat)
  Move         r25, r1
  Move         r26, r8
  Move         r27, r24
  Call         r28, doTrials, r25, r26, r27
  // for strat in ["random", "optimal"] {
  Const        r29, 1
  AddInt       r30, r21, r29
  Move         r21, r30
  Jump         L2
L1:
  // for np in [10, 100] {
  Const        r31, 1
  AddInt       r32, r5, r31
  Move         r5, r32
  Jump         L3
L0:
  Return       r0
