func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun fields(s: string): list<string> {
func fields (regs=28)
  // var words: list<string> = []
  Const        r1, []
  Move         r2, r1
  // var cur = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L4:
  // while i < len(s) {
  Len          r7, r0
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // let ch = substring(s, i, i + 1)
  Const        r9, 1
  AddInt       r10, r6, r9
  Slice        r11, r0, r6, r10
  Move         r12, r11
  // if ch == " " || ch == "\n" || ch == "\t" {
  Const        r13, " "
  Equal        r14, r12, r13
  Const        r15, "\n"
  Equal        r16, r12, r15
  Const        r17, "\t"
  Equal        r18, r12, r17
  Move         r19, r14
  JumpIfTrue   r19, L1
  Move         r19, r16
  JumpIfTrue   r19, L1
  Move         r19, r18
L1:
  JumpIfFalse  r19, L2
  // if len(cur) > 0 {
  Len          r20, r4
  Const        r5, 0
  LessInt      r21, r5, r20
  JumpIfFalse  r21, L3
  // words = append(words, cur)
  Append       r22, r2, r4
  Move         r2, r22
  // cur = ""
  Const        r3, ""
  Move         r4, r3
  // if ch == " " || ch == "\n" || ch == "\t" {
  Jump         L3
L2:
  // cur = cur + ch
  Add          r23, r4, r12
  Move         r4, r23
L3:
  // i = i + 1
  Const        r9, 1
  AddInt       r24, r6, r9
  Move         r6, r24
  // while i < len(s) {
  Jump         L4
L0:
  // if len(cur) > 0 {
  Len          r25, r4
  Const        r5, 0
  LessInt      r26, r5, r25
  JumpIfFalse  r26, L5
  // words = append(words, cur)
  Append       r27, r2, r4
  Move         r2, r27
L5:
  // return words
  Return       r2

  // fun padRight(s: string, width: int): string {
func padRight (regs=10)
  // var out = s
  Move         r2, r0
  // var i = len(s)
  Len          r3, r0
  Move         r4, r3
L1:
  // while i < width {
  Less         r5, r4, r1
  JumpIfFalse  r5, L0
  // out = out + " "
  Const        r6, " "
  Add          r7, r2, r6
  Move         r2, r7
  // i = i + 1
  Const        r8, 1
  AddInt       r9, r4, r8
  Move         r4, r9
  // while i < width {
  Jump         L1
L0:
  // return out
  Return       r2

  // fun join(xs: list<string>, sep: string): string {
func join (regs=14)
  // var res = ""
  Const        r2, ""
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L2:
  // while i < len(xs) {
  Len          r6, r0
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L0
  // if i > 0 {
  Const        r4, 0
  LessInt      r8, r4, r5
  JumpIfFalse  r8, L1
  // res = res + sep
  Add          r9, r3, r1
  Move         r3, r9
L1:
  // res = res + xs[i]
  Index        r10, r0, r5
  Add          r11, r3, r10
  Move         r3, r11
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r5, r12
  Move         r5, r13
  // while i < len(xs) {
  Jump         L2
L0:
  // return res
  Return       r3

  // fun validate(commands: list<string>, words: list<string>, mins: list<int>): list<string> {
func validate (regs=43)
  // var results: list<string> = []
  Const        r3, []
  Move         r4, r3
  // if len(words) == 0 {
  Len          r5, r1
  Const        r6, 0
  EqualInt     r7, r5, r6
  JumpIfFalse  r7, L0
  // return results
  Return       r4
L0:
  // var wi = 0
  Const        r6, 0
  Move         r8, r6
L7:
  // while wi < len(words) {
  Len          r9, r1
  LessInt      r10, r8, r9
  JumpIfFalse  r10, L1
  // let w = words[wi]
  Index        r11, r1, r8
  Move         r12, r11
  // var found = false
  Const        r13, false
  Move         r14, r13
  // let wlen = len(w)
  Len          r15, r12
  Move         r16, r15
  // var ci = 0
  Const        r6, 0
  Move         r17, r6
L5:
  // while ci < len(commands) {
  Len          r18, r0
  LessInt      r19, r17, r18
  JumpIfFalse  r19, L2
  // let cmd = commands[ci]
  Index        r20, r0, r17
  Move         r21, r20
  // if mins[ci] != 0 && wlen >= mins[ci] && wlen <= len(cmd) {
  Index        r22, r2, r17
  Index        r23, r2, r17
  LessEq       r24, r23, r16
  Len          r25, r21
  LessEqInt    r26, r16, r25
  Const        r6, 0
  NotEqual     r27, r22, r6
  Move         r28, r27
  JumpIfFalse  r28, L3
  Move         r28, r24
  JumpIfFalse  r28, L3
  Move         r28, r26
L3:
  JumpIfFalse  r28, L4
  // let c = upper(cmd)
  Upper        r29, r21
  Move         r30, r29
  // let ww = upper(w)
  Upper        r31, r12
  Move         r32, r31
  // if substring(c, 0, wlen) == ww {
  Const        r6, 0
  Slice        r33, r30, r6, r16
  Equal        r34, r33, r32
  JumpIfFalse  r34, L4
  // results = append(results, c)
  Append       r35, r4, r30
  Move         r4, r35
  // found = true
  Const        r36, true
  Move         r14, r36
  // break
  Jump         L2
L4:
  // ci = ci + 1
  Const        r37, 1
  AddInt       r38, r17, r37
  Move         r17, r38
  // while ci < len(commands) {
  Jump         L5
L2:
  // if !found {
  Not          r39, r14
  JumpIfFalse  r39, L6
  // results = append(results, "*error*")
  Const        r40, "*error*"
  Append       r41, r4, r40
  Move         r4, r41
L6:
  // wi = wi + 1
  Const        r37, 1
  AddInt       r42, r8, r37
  Move         r8, r42
  // while wi < len(words) {
  Jump         L7
L1:
  // return results
  Return       r4

  // fun main() {
func main (regs=72)
  // let table = "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " +
  Const        r0, "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy "
  // "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find " +
  Const        r1, "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find "
  // let table = "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " +
  Const        r2, "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find "
  // "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput " +
  Const        r3, "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput "
  // "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find " +
  Const        r4, "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput "
  // " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO " +
  Const        r5, " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO "
  // "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput " +
  Const        r6, "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput  Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO "
  // "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT " +
  Const        r7, "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT "
  // " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO " +
  Const        r8, "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput  Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT "
  // "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT " +
  Const        r9, "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT "
  // "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT " +
  Const        r10, "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput  Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT "
  // "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp "
  Const        r11, "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp "
  // "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT " +
  Const        r12, "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput  Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp "
  // let table = "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " +
  Move         r13, r12
  // let commands = fields(table)
  Move         r14, r13
  Call         r15, fields, r14
  Move         r16, r15
  // var mins: list<int> = []
  Const        r17, []
  Move         r18, r17
  // var i = 0
  Const        r19, 0
  Move         r20, r19
L5:
  // while i < len(commands) {
  Len          r21, r16
  LessInt      r22, r20, r21
  JumpIfFalse  r22, L0
  // var count = 0
  Const        r19, 0
  Move         r23, r19
  // var j = 0
  Const        r19, 0
  Move         r24, r19
  // let cmd = commands[i]
  Index        r25, r16, r20
  Move         r26, r25
L4:
  // while j < len(cmd) {
  Len          r27, r26
  LessInt      r28, r24, r27
  JumpIfFalse  r28, L1
  // let ch = substring(cmd, j, j + 1)
  Const        r29, 1
  AddInt       r30, r24, r29
  Slice        r31, r26, r24, r30
  Move         r32, r31
  // if ch >= "A" && ch <= "Z" {
  Const        r33, "A"
  LessEq       r34, r33, r32
  Const        r35, "Z"
  LessEq       r36, r32, r35
  Move         r37, r34
  JumpIfFalse  r37, L2
  Move         r37, r36
L2:
  JumpIfFalse  r37, L3
  // count = count + 1
  Const        r29, 1
  AddInt       r38, r23, r29
  Move         r23, r38
L3:
  // j = j + 1
  Const        r29, 1
  AddInt       r39, r24, r29
  Move         r24, r39
  // while j < len(cmd) {
  Jump         L4
L1:
  // mins = append(mins, count)
  Append       r40, r18, r23
  Move         r18, r40
  // i = i + 1
  Const        r29, 1
  AddInt       r41, r20, r29
  Move         r20, r41
  // while i < len(commands) {
  Jump         L5
L0:
  // let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
  Const        r42, "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
  Move         r43, r42
  // let words = fields(sentence)
  Move         r44, r43
  Call         r45, fields, r44
  Move         r46, r45
  // let results = validate(commands, words, mins)
  Move         r47, r16
  Move         r48, r46
  Move         r49, r18
  Call         r50, validate, r47, r48, r49
  Move         r51, r50
  // var out1 = "user words:  "
  Const        r52, "user words:  "
  Move         r53, r52
  // var k = 0
  Const        r19, 0
  Move         r54, r19
L7:
  // while k < len(words) {
  Len          r55, r46
  LessInt      r56, r54, r55
  JumpIfFalse  r56, L6
  // out1 = out1 + padRight(words[k], len(results[k])) + " "
  Index        r59, r46, r54
  Move         r57, r59
  Index        r60, r51, r54
  Len          r61, r60
  Move         r58, r61
  Call2        r62, padRight, r57, r58
  Add          r63, r53, r62
  Const        r64, " "
  Add          r65, r63, r64
  Move         r53, r65
  // k = k + 1
  Const        r29, 1
  AddInt       r66, r54, r29
  Move         r54, r66
  // while k < len(words) {
  Jump         L7
L6:
  // print(out1)
  Print        r53
  // print("full words:  " + join(results, " "))
  Const        r67, "full words:  "
  Move         r68, r51
  Const        r64, " "
  Move         r69, r64
  Call2        r70, join, r68, r69
  Add          r71, r67, r70
  Print        r71
  Return       r0
