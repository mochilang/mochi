func main (regs=66)
  // var b: list<int> = [98, 105, 110, 97, 114, 121]
  Const        r8, [98, 105, 110, 97, 114, 121]
  Move         r0, r8
  SetGlobal    0,0,0,0
  // print(str(b))
  Const        r9, "[98 105 110 97 114 121]"
  Print        r9
  // var c: list<int> = b
  Move         r1, r0
  SetGlobal    1,1,0,0
  // print(str(c))
  Const        r10, "[98 105 110 97 114 121]"
  Print        r10
  // print(str(b == c))
  Equal        r11, r0, r1
  Str          r12, r11
  Print        r12
  // var d: list<int> = []
  Const        r13, []
  Move         r2, r13
  SetGlobal    2,2,0,0
  // var i = 0
  Const        r14, 0
  Move         r3, r14
  SetGlobal    3,3,0,0
L1:
  // while i < len(b) {
  Const        r15, 6
  LessInt      r16, r3, r15
  JumpIfFalse  r16, L0
  // d = append(d, b[i])
  Index        r17, r0, r3
  Append       r18, r2, r17
  Move         r2, r18
  SetGlobal    2,2,0,0
  // i = i + 1
  Const        r19, 1
  AddInt       r20, r3, r19
  Move         r3, r20
  SetGlobal    3,3,0,0
  // while i < len(b) {
  Jump         L1
L0:
  // d[1] = 97
  Const        r21, 97
  Const        r19, 1
  SetIndex     r2, r19, r21
  SetGlobal    2,2,0,0
  // d[4] = 110
  Const        r22, 110
  Const        r23, 4
  SetIndex     r2, r23, r22
  SetGlobal    2,2,0,0
  // print(fromBytes(b))
  Move         r24, r0
  Call         r25, fromBytes, r24
  Print        r25
  // print(fromBytes(d))
  Move         r26, r2
  Call         r27, fromBytes, r26
  Print        r27
  // print(str(len(b) == 0))
  Const        r28, 6
  Const        r14, 0
  EqualInt     r29, r28, r14
  Str          r30, r29
  Print        r30
  // var z = append(b, 122)
  Const        r31, 122
  Const        r32, [98, 105, 110, 97, 114, 121, 122]
  Move         r4, r32
  SetGlobal    4,4,0,0
  // print(fromBytes(z))
  Move         r33, r4
  Call         r34, fromBytes, r33
  Print        r34
  // var sub = b[1:3]
  Const        r19, 1
  Move         r35, r19
  Const        r37, 3
  Move         r36, r37
  Slice        r38, r0, r35, r36
  Move         r5, r38
  SetGlobal    5,5,0,0
  // print(fromBytes(sub))
  Move         r39, r5
  Call         r40, fromBytes, r39
  Print        r40
  // var f: list<int> = []
  Const        r13, []
  Move         r6, r13
  SetGlobal    6,6,0,0
  // i = 0
  Const        r14, 0
  Move         r3, r14
  SetGlobal    3,3,0,0
L5:
  // while i < len(d) {
  Len          r41, r2
  LessInt      r42, r3, r41
  JumpIfFalse  r42, L2
  // let val = d[i]
  Index        r43, r2, r3
  Move         r44, r43
  // if val == 110 {
  Const        r22, 110
  Equal        r45, r44, r22
  JumpIfFalse  r45, L3
  // f = append(f, 109)
  Const        r46, 109
  Append       r47, r6, r46
  Move         r6, r47
  SetGlobal    6,6,0,0
  // if val == 110 {
  Jump         L4
L3:
  // f = append(f, val)
  Append       r48, r6, r44
  Move         r6, r48
  SetGlobal    6,6,0,0
L4:
  // i = i + 1
  Const        r19, 1
  AddInt       r49, r3, r19
  Move         r3, r49
  SetGlobal    3,3,0,0
  // while i < len(d) {
  Jump         L5
L2:
  // print(fromBytes(d) + " -> " + fromBytes(f))
  Move         r50, r2
  Call         r51, fromBytes, r50
  Const        r52, " -> "
  Add          r53, r51, r52
  Move         r54, r6
  Call         r55, fromBytes, r54
  Add          r56, r53, r55
  Print        r56
  // var rem: list<int> = []
  Const        r13, []
  Move         r7, r13
  SetGlobal    7,7,0,0
  // rem = append(rem, b[0])
  Const        r14, 0
  Index        r57, r0, r14
  Append       r58, r7, r57
  Move         r7, r58
  SetGlobal    7,7,0,0
  // i = 3
  Const        r37, 3
  Move         r3, r37
  SetGlobal    3,3,0,0
L7:
  // while i < len(b) {
  Const        r59, 6
  LessInt      r60, r3, r59
  JumpIfFalse  r60, L6
  // rem = append(rem, b[i])
  Index        r61, r0, r3
  Append       r62, r7, r61
  Move         r7, r62
  SetGlobal    7,7,0,0
  // i = i + 1
  Const        r19, 1
  AddInt       r63, r3, r19
  Move         r3, r63
  SetGlobal    3,3,0,0
  // while i < len(b) {
  Jump         L7
L6:
  // print(fromBytes(rem))
  Move         r64, r7
  Call         r65, fromBytes, r64
  Print        r65
  Return       r0

  // fun char(n: int): string {
func char (regs=23)
  // let letters = "abcdefghijklmnopqrstuvwxyz"
  Const        r9, "abcdefghijklmnopqrstuvwxyz"
  Move         r10, r9
  // let idx = n - 97
  Const        r11, 97
  Sub          r12, r8, r11
  Move         r13, r12
  // if idx < 0 || idx >= len(letters) {
  Const        r14, 0
  Less         r15, r13, r14
  Const        r16, 26
  LessEq       r17, r16, r13
  Move         r18, r15
  JumpIfTrue   r18, L0
  Move         r18, r17
L0:
  JumpIfFalse  r18, L1
  // return "?"
  Const        r19, "?"
  Return       r19
L1:
  // return substring(letters, idx, idx + 1)
  Const        r9, "abcdefghijklmnopqrstuvwxyz"
  Const        r20, 1
  Add          r21, r13, r20
  Slice        r22, r9, r13, r21
  Return       r22

  // fun fromBytes(bs: list<int>): string {
func fromBytes (regs=20)
  // var s = ""
  Const        r9, ""
  Move         r10, r9
  // var i = 0
  Const        r11, 0
  Move         r3, r11
  SetGlobal    3,3,0,0
L1:
  // while i < len(bs) {
  Len          r12, r8
  LessInt      r13, r3, r12
  JumpIfFalse  r13, L0
  // s = s + char(bs[i])
  Index        r15, r8, r3
  Move         r14, r15
  Call         r16, char, r14
  Add          r17, r10, r16
  Move         r10, r17
  // i = i + 1
  Const        r18, 1
  AddInt       r19, r3, r18
  Move         r3, r19
  SetGlobal    3,3,0,0
  // while i < len(bs) {
  Jump         L1
L0:
  // return s
  Return       r10
