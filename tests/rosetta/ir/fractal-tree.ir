func __main (regs=14)
  // let PI: float = 3.141592653589793
  Const        r7, 3.141592653589793
  Move         r0, r7
  SetGlobal    0,0,0,0
  // let width = 80
  Const        r8, 80
  Move         r1, r8
  SetGlobal    1,1,0,0
  // let height = 40
  Const        r9, 40
  Move         r2, r9
  SetGlobal    2,2,0,0
  // let depth = 6
  Const        r10, 6
  Move         r3, r10
  SetGlobal    3,3,0,0
  // let angle = 12.0
  Const        r11, 12.0
  Move         r4, r11
  SetGlobal    4,4,0,0
  // let length = 12.0
  Const        r11, 12.0
  Move         r5, r11
  SetGlobal    5,5,0,0
  // let frac = 0.8
  Const        r12, 0.8
  Move         r6, r12
  SetGlobal    6,6,0,0
  // main()
  Call         r13, main, 
  Return       r0

  // fun _mod(x: float, m: float): float {
func _mod (regs=14)
  // return x - ((x / m) as int as float) * m
  Div          r9, r7, r8
  Cast         r10, r9, int
  Cast         r11, r10, float
  Mul          r12, r11, r8
  Sub          r13, r7, r12
  Return       r13

  // fun _sin(x: float): float {
func _sin (regs=33)
  // let y = _mod(x + PI, 2.0 * PI) - PI
  Add          r10, r7, r0
  Move         r8, r10
  Const        r11, 2.0
  MulFloat     r12, r11, r0
  Move         r9, r12
  Call2        r13, _mod, r8, r9
  Sub          r14, r13, r0
  Move         r15, r14
  // let y2 = y * y
  Mul          r16, r15, r15
  Move         r17, r16
  // let y3 = y2 * y
  Mul          r18, r17, r15
  Move         r19, r18
  // let y5 = y3 * y2
  Mul          r20, r19, r17
  Move         r21, r20
  // let y7 = y5 * y2
  Mul          r22, r21, r17
  Move         r23, r22
  // return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0
  Const        r24, 6.0
  DivFloat     r25, r19, r24
  Const        r26, 120.0
  DivFloat     r27, r21, r26
  Const        r28, 5040.0
  DivFloat     r29, r23, r28
  SubFloat     r30, r15, r25
  AddFloat     r31, r30, r27
  SubFloat     r32, r31, r29
  Return       r32

  // fun _cos(x: float): float {
func _cos (regs=31)
  // let y = _mod(x + PI, 2.0 * PI) - PI
  Add          r10, r7, r0
  Move         r8, r10
  Const        r11, 2.0
  MulFloat     r12, r11, r0
  Move         r9, r12
  Call2        r13, _mod, r8, r9
  Sub          r14, r13, r0
  Move         r15, r14
  // let y2 = y * y
  Mul          r16, r15, r15
  Move         r17, r16
  // let y4 = y2 * y2
  Mul          r18, r17, r17
  Move         r19, r18
  // let y6 = y4 * y2
  Mul          r20, r19, r17
  Move         r21, r20
  // return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0
  Const        r22, 1.0
  Const        r11, 2.0
  DivFloat     r23, r17, r11
  Const        r24, 24.0
  DivFloat     r25, r19, r24
  Const        r26, 720.0
  DivFloat     r27, r21, r26
  SubFloat     r28, r22, r23
  AddFloat     r29, r28, r25
  SubFloat     r30, r29, r27
  Return       r30

  // fun clearGrid(): list<list<string>> {
func clearGrid (regs=21)
  // var g: list<list<string>> = []
  Const        r7, []
  Move         r8, r7
  // var y = 0
  Const        r9, 0
  Move         r10, r9
L3:
  // while y < height {
  Less         r11, r10, r2
  JumpIfFalse  r11, L0
  // var row: list<string> = []
  Const        r7, []
  Move         r12, r7
  // var x = 0
  Const        r9, 0
  Move         r13, r9
L2:
  // while x < width {
  Less         r14, r13, r1
  JumpIfFalse  r14, L1
  // row = append(row, " ")
  Const        r15, " "
  Append       r16, r12, r15
  Move         r12, r16
  // x = x + 1
  Const        r17, 1
  AddInt       r18, r13, r17
  Move         r13, r18
  // while x < width {
  Jump         L2
L1:
  // g = append(g, row)
  Append       r19, r8, r12
  Move         r8, r19
  // y = y + 1
  Const        r17, 1
  AddInt       r20, r10, r17
  Move         r10, r20
  // while y < height {
  Jump         L3
L0:
  // return g
  Return       r8

  // fun drawPoint(g: list<list<string>>, x: int, y: int) {
func drawPoint (regs=19)
  // if x >= 0 && x < width && y >= 0 && y < height {
  Const        r10, 0
  LessEq       r11, r10, r8
  Less         r12, r8, r1
  Const        r10, 0
  LessEq       r13, r10, r9
  Less         r14, r9, r2
  Move         r15, r11
  JumpIfFalse  r15, L0
  Move         r15, r12
  JumpIfFalse  r15, L0
  Move         r15, r13
  JumpIfFalse  r15, L0
  Move         r15, r14
L0:
  JumpIfFalse  r15, L1
  // var row = g[y]
  Index        r16, r7, r9
  Move         r17, r16
  // row[x] = "#"
  Const        r18, "#"
  SetIndex     r17, r8, r18
  // g[y] = row
  SetIndex     r7, r9, r17
L1:
  Return       r0

  // fun bresenham(x0:int,y0:int,x1:int,y1:int,g:list<list<string>>) {
func bresenham (regs=48)
  // var dx = x1 - x0
  Sub          r12, r9, r7
  Move         r13, r12
  // if dx < 0 { dx = -dx }
  Const        r14, 0
  Less         r15, r13, r14
  JumpIfFalse  r15, L0
  Neg          r16, r13
  Move         r13, r16
L0:
  // var dy = y1 - y0
  Sub          r17, r10, r8
  Move         r18, r17
  // if dy < 0 { dy = -dy }
  Const        r14, 0
  Less         r19, r18, r14
  JumpIfFalse  r19, L1
  Neg          r20, r18
  Move         r18, r20
L1:
  // var sx = -1
  Const        r21, 1
  NegInt       r22, r21
  Move         r23, r22
  // if x0 < x1 { sx = 1 }
  Less         r24, r7, r9
  JumpIfFalse  r24, L2
  Const        r21, 1
  Move         r23, r21
L2:
  // var sy = -1
  Const        r21, 1
  NegInt       r25, r21
  Move         r26, r25
  // if y0 < y1 { sy = 1 }
  Less         r27, r8, r10
  JumpIfFalse  r27, L3
  Const        r21, 1
  Move         r26, r21
L3:
  // var err = dx - dy
  Sub          r28, r13, r18
  Move         r29, r28
L8:
  // while true {
  Const        r30, true
  // drawPoint(g, x0, y0)
  Move         r31, r11
  Move         r32, r7
  Move         r33, r8
  Call         r34, drawPoint, r31, r32, r33
  // if x0 == x1 && y0 == y1 { break }
  Equal        r35, r7, r9
  Equal        r36, r8, r10
  Move         r37, r35
  JumpIfFalse  r37, L4
  Move         r37, r36
L4:
  JumpIfFalse  r37, L5
  Jump         L6
L5:
  // var e2 = 2 * err
  Const        r38, 2
  Mul          r39, r38, r29
  Move         r40, r39
  // if e2 > (-dy) {
  Neg          r41, r18
  Less         r42, r41, r40
  JumpIfFalse  r42, L7
  // err = err - dy
  Sub          r43, r29, r18
  Move         r29, r43
  // x0 = x0 + sx
  Add          r44, r7, r23
  Move         r7, r44
L7:
  // if e2 < dx {
  Less         r45, r40, r13
  JumpIfFalse  r45, L8
  // err = err + dx
  Add          r46, r29, r13
  Move         r29, r46
  // y0 = y0 + sy
  Add          r47, r8, r26
  Move         r8, r47
  // while true {
  Jump         L8
L6:
  Return       r0

  // fun ftree(g: list<list<string>>, x: float, y: float, dist: float, dir: float, d: int) {
func ftree (regs=60)
  // let rad = dir * PI / 180.0
  Mul          r13, r11, r0
  Const        r14, 180.0
  DivFloat     r15, r13, r14
  Move         r16, r15
  // let x2 = x + dist * _sin(rad)
  Move         r17, r16
  Call         r18, _sin, r17
  Mul          r19, r10, r18
  Add          r20, r8, r19
  Move         r21, r20
  // let y2 = y - dist * _cos(rad)
  Move         r22, r16
  Call         r23, _cos, r22
  Mul          r24, r10, r23
  Sub          r25, r9, r24
  Move         r26, r25
  // bresenham(x as int, y as int, x2 as int, y2 as int, g)
  Cast         r32, r8, int
  Move         r27, r32
  Cast         r33, r9, int
  Move         r28, r33
  Cast         r34, r21, int
  Move         r29, r34
  Cast         r35, r26, int
  Move         r30, r35
  Move         r31, r7
  Call         r36, bresenham, r27, r28, r29, r30, r31
  // if d > 0 {
  Const        r37, 0
  Less         r38, r37, r12
  JumpIfFalse  r38, L0
  // ftree(g, x2, y2, dist * frac, dir - angle, d - 1)
  Move         r39, r7
  Move         r40, r21
  Move         r41, r26
  Mul          r45, r10, r6
  Move         r42, r45
  Sub          r46, r11, r4
  Move         r43, r46
  Const        r47, 1
  Sub          r48, r12, r47
  Move         r44, r48
  Call         r49, ftree, r39, r40, r41, r42, r43, r44
  // ftree(g, x2, y2, dist * frac, dir + angle, d - 1)
  Move         r50, r7
  Move         r51, r21
  Move         r52, r26
  Mul          r56, r10, r6
  Move         r53, r56
  Add          r57, r11, r4
  Move         r54, r57
  Const        r47, 1
  Sub          r58, r12, r47
  Move         r55, r58
  Call         r59, ftree, r50, r51, r52, r53, r54, r55
L0:
  Return       r0

  // fun render(g: list<list<string>>): string {
func render (regs=27)
  // var out = ""
  Const        r8, ""
  Move         r9, r8
  // var y = 0
  Const        r10, 0
  Move         r11, r10
L4:
  // while y < height {
  Less         r12, r11, r2
  JumpIfFalse  r12, L0
  // var line = ""
  Const        r8, ""
  Move         r13, r8
  // var x = 0
  Const        r10, 0
  Move         r14, r10
L2:
  // while x < width {
  Less         r15, r14, r1
  JumpIfFalse  r15, L1
  // line = line + g[y][x]
  Index        r16, r7, r11
  Index        r17, r16, r14
  Add          r18, r13, r17
  Move         r13, r18
  // x = x + 1
  Const        r19, 1
  AddInt       r20, r14, r19
  Move         r14, r20
  // while x < width {
  Jump         L2
L1:
  // out = out + line
  Add          r21, r9, r13
  Move         r9, r21
  // if y < height - 1 { out = out + "\n" }
  Const        r19, 1
  Sub          r22, r2, r19
  Less         r23, r11, r22
  JumpIfFalse  r23, L3
  Const        r24, "\n"
  Add          r25, r9, r24
  Move         r9, r25
L3:
  // y = y + 1
  Const        r19, 1
  AddInt       r26, r11, r19
  Move         r11, r26
  // while y < height {
  Jump         L4
L0:
  // return out
  Return       r9

  // fun main() {
func main (regs=25)
  // var grid = clearGrid()
  Call         r7, clearGrid, 
  Move         r8, r7
  // ftree(grid, (width/2) as float, (height-1) as float, length, 0.0, depth)
  Move         r9, r8
  Const        r15, 2
  Div          r16, r1, r15
  Cast         r17, r16, float
  Move         r10, r17
  Const        r18, 1
  Sub          r19, r2, r18
  Cast         r20, r19, float
  Move         r11, r20
  Move         r12, r5
  Const        r21, 0.0
  Move         r13, r21
  Move         r14, r3
  Call         r22, ftree, r9, r10, r11, r12, r13, r14
  // print(render(grid))
  Move         r23, r8
  Call         r24, render, r23
  Print        r24
  Return       r0
