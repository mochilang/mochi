func main (regs=30)
  // printFactors(-1)
  Const        r1, 1
  NegInt       r2, r1
  Move         r0, r2
  Call         r3, printFactors, r0
  // printFactors(0)
  Const        r5, 0
  Move         r4, r5
  Call         r6, printFactors, r4
  // printFactors(1)
  Const        r1, 1
  Move         r7, r1
  Call         r8, printFactors, r7
  // printFactors(2)
  Const        r10, 2
  Move         r9, r10
  Call         r11, printFactors, r9
  // printFactors(3)
  Const        r13, 3
  Move         r12, r13
  Call         r14, printFactors, r12
  // printFactors(53)
  Const        r16, 53
  Move         r15, r16
  Call         r17, printFactors, r15
  // printFactors(45)
  Const        r19, 45
  Move         r18, r19
  Call         r20, printFactors, r18
  // printFactors(64)
  Const        r22, 64
  Move         r21, r22
  Call         r23, printFactors, r21
  // printFactors(600851475143)
  Const        r25, 600851475143
  Move         r24, r25
  Call         r26, printFactors, r24
  // printFactors(999999999999999989)
  Const        r28, 999999999999999989
  Move         r27, r28
  Call         r29, printFactors, r27
  Return       r0

  // fun printFactors(n: int) {
func printFactors (regs=49)
  // if n < 1 {
  Const        r1, 1
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  // print("\nFactors of " + str(n) + " not computed")
  Const        r3, "\nFactors of "
  Str          r4, r0
  Add          r5, r3, r4
  Const        r6, " not computed"
  Add          r7, r5, r6
  Print        r7
  // return
  Return       r0
L0:
  // print("\nFactors of " + str(n) + ": ")
  Const        r3, "\nFactors of "
  Str          r8, r0
  Add          r9, r3, r8
  Const        r10, ": "
  Add          r11, r9, r10
  Print        r11
  // var fs: list<int> = [1]
  Const        r12, [1]
  Move         r13, r12
  // fun apf(p: int, e: int) {
  Move         r14, r13
  Move         r15, r0
  MakeClosure  r16, apf, 2, r14
  // var e = 0
  Const        r17, 0
  Move         r18, r17
  // var m = n
  Move         r19, r0
L2:
  // while m % 2 == 0 {
  Const        r20, 2
  Mod          r21, r19, r20
  Const        r17, 0
  Equal        r22, r21, r17
  JumpIfFalse  r22, L1
  // m = (m / 2) as int
  Const        r20, 2
  Div          r23, r19, r20
  Cast         r24, r23, int
  Move         r19, r24
  // e = e + 1
  Const        r1, 1
  AddInt       r25, r18, r1
  Move         r18, r25
  // while m % 2 == 0 {
  Jump         L2
L1:
  // apf(2, e)
  Const        r20, 2
  Move         r26, r20
  Move         r27, r18
  CallV        r28, r16, 2, r26
  // var d = 3
  Const        r29, 3
  Move         r30, r29
L8:
  // while m > 1 {
  Const        r1, 1
  Less         r31, r1, r19
  JumpIfFalse  r31, L3
  // if d * d > m {
  MulInt       r32, r30, r30
  Less         r33, r19, r32
  JumpIfFalse  r33, L4
  // d = m
  Move         r30, r19
L4:
  // e = 0
  Const        r17, 0
  Move         r18, r17
L6:
  // while m % d == 0 {
  Mod          r34, r19, r30
  Const        r17, 0
  Equal        r35, r34, r17
  JumpIfFalse  r35, L5
  // m = (m / d) as int
  Div          r36, r19, r30
  Cast         r37, r36, int
  Move         r19, r37
  // e = e + 1
  Const        r1, 1
  AddInt       r38, r18, r1
  Move         r18, r38
  // while m % d == 0 {
  Jump         L6
L5:
  // if e > 0 { apf(d, e) }
  Const        r17, 0
  LessInt      r39, r17, r18
  JumpIfFalse  r39, L7
  Move         r40, r30
  Move         r41, r18
  CallV        r42, r16, 2, r40
L7:
  // d = d + 2
  Const        r20, 2
  Add          r43, r30, r20
  Move         r30, r43
  // while m > 1 {
  Jump         L8
L3:
  // print(str(fs))
  Const        r44, "[1]"
  Print        r44
  // print("Number of factors = " + str(len(fs)))
  Const        r45, "Number of factors = "
  Const        r46, 1
  Const        r47, "1"
  Const        r48, "Number of factors = 1"
  Print        r48
  Return       r0

  // fun apf(p: int, e: int) {
func apf (regs=19)
  // var orig = len(fs)
  Len          r4, r0
  Move         r5, r4
  // var pp = p
  Move         r6, r2
  // var i = 0
  Const        r7, 0
  Move         r8, r7
L3:
  // while i < e {
  Less         r9, r8, r3
  JumpIfFalse  r9, L0
  // var j = 0
  Const        r7, 0
  Move         r10, r7
L2:
  // while j < orig {
  LessInt      r11, r10, r5
  JumpIfFalse  r11, L1
  // fs = append(fs, fs[j] * pp)
  Index        r12, r0, r10
  Mul          r13, r12, r6
  Append       r14, r0, r13
  Move         r0, r14
  // j = j + 1
  Const        r15, 1
  AddInt       r16, r10, r15
  Move         r10, r16
  // while j < orig {
  Jump         L2
L1:
  // i = i + 1
  Const        r15, 1
  AddInt       r17, r8, r15
  Move         r8, r17
  // pp = pp * p
  Mul          r18, r6, r2
  Move         r6, r18
  // while i < e {
  Jump         L3
L0:
  Return       r0
