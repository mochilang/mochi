func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun indexOf3(s: string, ch: string, start: int): int {
func indexOf3 (regs=12)
  // var i = start
  Move         r3, r2
L2:
  // while i < len(s) {
  Len          r4, r0
  Less         r5, r3, r4
  JumpIfFalse  r5, L0
  // if substring(s, i, i+1) == ch { return i }
  Const        r6, 1
  Add          r7, r3, r6
  Slice        r8, r0, r3, r7
  Equal        r9, r8, r1
  JumpIfFalse  r9, L1
  Return       r3
L1:
  // i = i + 1
  Const        r6, 1
  Add          r10, r3, r6
  Move         r3, r10
  // while i < len(s) {
  Jump         L2
L0:
  // return -1
  Const        r6, 1
  NegInt       r11, r6
  Return       r11

  // fun ord(ch: string): int {
func ord (regs=24)
  // let digits = "0123456789"
  Const        r1, "0123456789"
  Move         r2, r1
  // var idx = indexOf3(digits, ch, 0)
  Move         r3, r2
  Move         r4, r0
  Const        r6, 0
  Move         r5, r6
  Call         r7, indexOf3, r3, r4, r5
  Move         r8, r7
  // if idx >= 0 { return 48 + idx }
  Const        r6, 0
  LessEq       r9, r6, r8
  JumpIfFalse  r9, L0
  Const        r10, 48
  Add          r11, r10, r8
  Return       r11
L0:
  // if ch == "X" { return 0x58 }
  Const        r12, "X"
  Equal        r13, r0, r12
  JumpIfFalse  r13, L1
  Const        r14, 88
  Return       r14
L1:
  // if ch == "é" { return 0xE9 }
  Const        r15, "é"
  Equal        r16, r0, r15
  JumpIfFalse  r16, L2
  Const        r17, 233
  Return       r17
L2:
  // if ch == "😍" { return 0x1F60D }
  Const        r18, "😍"
  Equal        r19, r0, r18
  JumpIfFalse  r19, L3
  Const        r20, 128525
  Return       r20
L3:
  // if ch == "🐡" { return 0x1F421 }
  Const        r21, "🐡"
  Equal        r22, r0, r21
  JumpIfFalse  r22, L4
  Const        r23, 128033
  Return       r23
L4:
  // return 0
  Const        r6, 0
  Return       r6

  // fun toHex(n: int): string {
func toHex (regs=20)
  // let digits = "0123456789ABCDEF"
  Const        r1, "0123456789ABCDEF"
  Move         r2, r1
  // if n == 0 { return "0" }
  Const        r3, 0
  Equal        r4, r0, r3
  JumpIfFalse  r4, L0
  Const        r5, "0"
  Return       r5
L0:
  // var v = n
  Move         r6, r0
  // var out = ""
  Const        r7, ""
  Move         r8, r7
L2:
  // while v > 0 {
  Const        r3, 0
  Less         r9, r3, r6
  JumpIfFalse  r9, L1
  // let d = v % 16
  Const        r10, 16
  Mod          r11, r6, r10
  Move         r12, r11
  // out = digits[d:d+1] + out
  Move         r13, r12
  Const        r15, 1
  Add          r16, r12, r15
  Move         r14, r16
  Slice        r17, r2, r13, r14
  Add          r18, r17, r8
  Move         r8, r18
  // v = v / 16
  Const        r10, 16
  Div          r19, r6, r10
  Move         r6, r19
  // while v > 0 {
  Jump         L2
L1:
  // return out
  Return       r8

  // fun analyze(s: string) {
func analyze (regs=54)
  // let le = len(s)
  Len          r1, r0
  Move         r2, r1
  // print("Analyzing \"" + s + "\" which has a length of " + str(le) + ":")
  Const        r3, "Analyzing \""
  Add          r4, r3, r0
  Const        r5, "\" which has a length of "
  Add          r6, r4, r5
  Str          r7, r2
  Add          r8, r6, r7
  Const        r9, ":"
  Add          r10, r8, r9
  Print        r10
  // if le > 1 {
  Const        r11, 1
  LessInt      r12, r11, r2
  JumpIfFalse  r12, L0
  // var i = 0
  Const        r13, 0
  Move         r14, r13
L4:
  // while i < le - 1 {
  Const        r11, 1
  SubInt       r15, r2, r11
  LessInt      r16, r14, r15
  JumpIfFalse  r16, L0
  // var j = i + 1
  Const        r11, 1
  AddInt       r17, r14, r11
  Move         r18, r17
L3:
  // while j < le {
  LessInt      r19, r18, r2
  JumpIfFalse  r19, L1
  // if substring(s, j, j+1) == substring(s, i, i+1) {
  Const        r11, 1
  AddInt       r20, r18, r11
  Slice        r21, r0, r18, r20
  Const        r11, 1
  AddInt       r22, r14, r11
  Slice        r23, r0, r14, r22
  Equal        r24, r21, r23
  JumpIfFalse  r24, L2
  // let ch = substring(s, i, i+1)
  Const        r11, 1
  AddInt       r25, r14, r11
  Slice        r26, r0, r14, r25
  Move         r27, r26
  // print("  Not all characters in the string are unique.")
  Const        r28, "  Not all characters in the string are unique."
  Print        r28
  // print("  '" + ch + "' (0x" + lower(toHex(ord(ch))) + ") is duplicated at positions " + str(i+1) + " and " + str(j+1) + ".\n")
  Const        r29, "  '"
  Add          r30, r29, r27
  Const        r31, "' (0x"
  Add          r32, r30, r31
  Move         r34, r27
  Call         r35, ord, r34
  Move         r33, r35
  Call         r36, toHex, r33
  Lower        r37, r36
  Add          r38, r32, r37
  Const        r39, ") is duplicated at positions "
  Add          r40, r38, r39
  Const        r11, 1
  AddInt       r41, r14, r11
  Str          r42, r41
  Add          r43, r40, r42
  Const        r44, " and "
  Add          r45, r43, r44
  Const        r11, 1
  AddInt       r46, r18, r11
  Str          r47, r46
  Add          r48, r45, r47
  Const        r49, ".\n"
  Add          r50, r48, r49
  Print        r50
  // return
  Return       r0
L2:
  // j = j + 1
  Const        r11, 1
  AddInt       r51, r18, r11
  Move         r18, r51
  // while j < le {
  Jump         L3
L1:
  // i = i + 1
  Const        r11, 1
  AddInt       r52, r14, r11
  Move         r14, r52
  // while i < le - 1 {
  Jump         L4
L0:
  // print("  All characters in the string are unique.\n")
  Const        r53, "  All characters in the string are unique.\n"
  Print        r53
  Return       r0

  // fun main() {
func main (regs=11)
  // let strings = [
  Const        r0, ["", ".", "abcABC", "XYZ ZYX", "1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ", "01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X", "hétérogénéité", "🎆🎃🎇🎈", "😍😀🙌💃😍🙌", "🐠🐟🐡🦈🐬🐳🐋🐡"]
  Move         r1, r0
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L1:
  // while i < count(strings) {
  Const        r4, 10
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // analyze(strings[i])
  Index        r7, r1, r3
  Move         r6, r7
  Call         r8, analyze, r6
  // i = i + 1
  Const        r9, 1
  AddInt       r10, r3, r9
  Move         r3, r10
  // while i < count(strings) {
  Jump         L1
L0:
  Return       r0
