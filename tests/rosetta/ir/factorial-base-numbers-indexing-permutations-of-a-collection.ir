func main (regs=3)
  // var seed = 1
  Const        r1, 1
  Move         r0, r1
  SetGlobal    0,0,0,0
  // main()
  Call         r2, main, 
  Return       r0

  // fun split(s: string, sep: string): list<string> {
func split (regs=31)
  // var parts: list<string> = []
  Const        r3, []
  Move         r4, r3
  // var cur = ""
  Const        r5, ""
  Move         r6, r5
  // var i = 0
  Const        r7, 0
  Move         r8, r7
L3:
  // while i < len(s) {
  Len          r9, r1
  LessInt      r10, r8, r9
  JumpIfFalse  r10, L0
  // if len(sep) > 0 && i + len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
  Len          r11, r2
  Len          r12, r2
  AddInt       r13, r8, r12
  Const        r7, 0
  LessInt      r14, r7, r11
  Len          r15, r1
  LessEqInt    r16, r13, r15
  Len          r17, r2
  AddInt       r18, r8, r17
  Slice        r19, r1, r8, r18
  Equal        r20, r19, r2
  Move         r21, r14
  JumpIfFalse  r21, L1
  Move         r21, r16
  JumpIfFalse  r21, L1
  Move         r21, r20
L1:
  JumpIfFalse  r21, L2
  // parts = append(parts, cur)
  Append       r22, r4, r6
  Move         r4, r22
  // cur = ""
  Const        r5, ""
  Move         r6, r5
  // i = i + len(sep)
  Len          r23, r2
  AddInt       r24, r8, r23
  Move         r8, r24
  // if len(sep) > 0 && i + len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
  Jump         L3
L2:
  // cur = cur + substring(s, i, i+1)
  Const        r25, 1
  AddInt       r26, r8, r25
  Slice        r27, r1, r8, r26
  Add          r28, r6, r27
  Move         r6, r28
  // i = i + 1
  Const        r25, 1
  AddInt       r29, r8, r25
  Move         r8, r29
  // while i < len(s) {
  Jump         L3
L0:
  // parts = append(parts, cur)
  Append       r30, r4, r6
  Move         r4, r30
  // return parts
  Return       r4

  // fun parseIntStr(str: string): int {
func parseIntStr (regs=31)
  // var i = 0
  Const        r2, 0
  Move         r3, r2
  // var neg = false
  Const        r4, false
  Move         r5, r4
  // if len(str) > 0 && str[0:1] == "-" {
  Len          r6, r1
  Const        r2, 0
  LessInt      r7, r2, r6
  Const        r2, 0
  Move         r8, r2
  Const        r10, 1
  Move         r9, r10
  Slice        r11, r1, r8, r9
  Const        r12, "-"
  Equal        r13, r11, r12
  Move         r14, r7
  JumpIfFalse  r14, L0
  Move         r14, r13
L0:
  JumpIfFalse  r14, L1
  // neg = true
  Const        r15, true
  Move         r5, r15
  // i = 1
  Const        r10, 1
  Move         r3, r10
L1:
  // var n = 0
  Const        r2, 0
  Move         r16, r2
  // let digits = {
  Const        r17, {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
  Move         r18, r17
L3:
  // while i < len(str) {
  Len          r19, r1
  LessInt      r20, r3, r19
  JumpIfFalse  r20, L2
  // n = n * 10 + digits[str[i:i+1]]
  Const        r21, 10
  MulInt       r22, r16, r21
  Move         r23, r3
  Const        r10, 1
  AddInt       r25, r3, r10
  Move         r24, r25
  Slice        r26, r1, r23, r24
  Index        r27, r18, r26
  Add          r28, r22, r27
  Move         r16, r28
  // i = i + 1
  Const        r10, 1
  AddInt       r29, r3, r10
  Move         r3, r29
  // while i < len(str) {
  Jump         L3
L2:
  // if neg { n = -n }
  JumpIfFalse  r5, L4
  Neg          r30, r16
  Move         r16, r30
L4:
  // return n
  Return       r16

  // fun joinInts(nums: list<int>, sep: string): string {
func joinInts (regs=16)
  // var s = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L2:
  // while i < len(nums) {
  Len          r7, r1
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // if i > 0 { s = s + sep }
  Const        r5, 0
  LessInt      r9, r5, r6
  JumpIfFalse  r9, L1
  Add          r10, r4, r2
  Move         r4, r10
L1:
  // s = s + str(nums[i])
  Index        r11, r1, r6
  Str          r12, r11
  Add          r13, r4, r12
  Move         r4, r13
  // i = i + 1
  Const        r14, 1
  AddInt       r15, r6, r14
  Move         r6, r15
  // while i < len(nums) {
  Jump         L2
L0:
  // return s
  Return       r4

  // fun undot(s: string): list<int> {
func undot (regs=20)
  // let parts = split(s, ".")
  Move         r2, r1
  Const        r4, "."
  Move         r3, r4
  Call2        r5, split, r2, r3
  Move         r6, r5
  // var nums: list<int> = []
  Const        r7, []
  Move         r8, r7
  // for p in parts { nums = append(nums, parseIntStr(p)) }
  IterPrep     r9, r6
  Len          r10, r9
  Const        r11, 0
L1:
  LessInt      r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r13, r9, r11
  Move         r14, r13
  Move         r15, r14
  Call         r16, parseIntStr, r15
  Append       r17, r8, r16
  Move         r8, r17
  Const        r18, 1
  AddInt       r19, r11, r18
  Move         r11, r19
  Jump         L1
L0:
  // return nums
  Return       r8

  // fun factorial(n: int): int {
func factorial (regs=9)
  // var f = 1
  Const        r2, 1
  Move         r3, r2
  // var i = 2
  Const        r4, 2
  Move         r5, r4
L1:
  // while i <= n {
  LessEq       r6, r5, r1
  JumpIfFalse  r6, L0
  // f = f * i
  MulInt       r7, r3, r5
  Move         r3, r7
  // i = i + 1
  Const        r2, 1
  AddInt       r8, r5, r2
  Move         r5, r8
  // while i <= n {
  Jump         L1
L0:
  // return f
  Return       r3

  // fun genFactBaseNums(size: int, countOnly: bool): list<any> {
func genFactBaseNums (regs=40)
  // var results: list<list<int>> = []
  Const        r3, []
  Move         r4, r3
  // var count = 0
  Const        r5, 0
  Move         r6, r5
  // var n = 0
  Const        r5, 0
  Move         r7, r5
L9:
  // while true {
  Const        r8, true
  // var radix = 2
  Const        r9, 2
  Move         r10, r9
  // var res: list<int> = []
  Const        r3, []
  Move         r11, r3
  // if !countOnly {
  Not          r12, r2
  JumpIfFalse  r12, L0
  // var z = 0
  Const        r5, 0
  Move         r13, r5
L1:
  // while z < size { res = append(res, 0); z = z + 1 }
  Less         r14, r13, r1
  JumpIfFalse  r14, L0
  Const        r5, 0
  Append       r15, r11, r5
  Move         r11, r15
  Const        r16, 1
  AddInt       r17, r13, r16
  Move         r13, r17
  Jump         L1
L0:
  // var k = n
  Move         r18, r7
L5:
  // while k > 0 {
  Const        r5, 0
  LessInt      r19, r5, r18
  JumpIfFalse  r19, L2
  // var div = k / radix
  DivInt       r20, r18, r10
  Move         r21, r20
  // var rem = k % radix
  ModInt       r22, r18, r10
  Move         r23, r22
  // if !countOnly && radix <= size + 1 {
  Not          r24, r2
  Const        r16, 1
  Add          r25, r1, r16
  LessEq       r26, r10, r25
  Move         r27, r24
  JumpIfFalse  r27, L3
  Move         r27, r26
L3:
  JumpIfFalse  r27, L4
  // res[size - radix + 1] = rem
  Sub          r28, r1, r10
  Const        r16, 1
  Add          r29, r28, r16
  SetIndex     r11, r29, r23
L4:
  // k = div
  Move         r18, r21
  // radix = radix + 1
  Const        r16, 1
  AddInt       r30, r10, r16
  Move         r10, r30
  // while k > 0 {
  Jump         L5
L2:
  // if radix > size + 2 { break }
  Const        r9, 2
  Add          r31, r1, r9
  Less         r32, r31, r10
  JumpIfFalse  r32, L6
  Jump         L7
L6:
  // count = count + 1
  Const        r16, 1
  AddInt       r33, r6, r16
  Move         r6, r33
  // if !countOnly { results = append(results, res) }
  Not          r34, r2
  JumpIfFalse  r34, L8
  Append       r35, r4, r11
  Move         r4, r35
L8:
  // n = n + 1
  Const        r16, 1
  AddInt       r36, r7, r16
  Move         r7, r36
  // while true {
  Jump         L9
L7:
  // return [results, count]
  Move         r37, r4
  Move         r38, r6
  MakeList     r39, 2, r37
  Return       r39

  // fun mapToPerms(factNums: list<list<int>>): list<list<int>> {
func mapToPerms (regs=52)
  // var perms: list<list<int>> = []
  Const        r2, []
  Move         r3, r2
  // var psize = len(factNums[0]) + 1
  Const        r4, 0
  Index        r5, r1, r4
  Len          r6, r5
  Const        r7, 1
  AddInt       r8, r6, r7
  Move         r9, r8
  // var start: list<int> = []
  Const        r2, []
  Move         r10, r2
  // var i = 0
  Const        r4, 0
  Move         r11, r4
L1:
  // while i < psize { start = append(start, i); i = i + 1 }
  LessInt      r12, r11, r9
  JumpIfFalse  r12, L0
  Append       r13, r10, r11
  Move         r10, r13
  Const        r7, 1
  AddInt       r14, r11, r7
  Move         r11, r14
  Jump         L1
L0:
  // for fn in factNums {
  IterPrep     r15, r1
  Len          r16, r15
  Const        r17, 0
L11:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L2
  Index        r19, r15, r17
  Move         r20, r19
  // var perm: list<int> = []
  Const        r2, []
  Move         r21, r2
  // var j = 0
  Const        r4, 0
  Move         r22, r4
L4:
  // while j < len(start) { perm = append(perm, start[j]); j = j + 1 }
  Len          r23, r10
  LessInt      r24, r22, r23
  JumpIfFalse  r24, L3
  Index        r25, r10, r22
  Append       r26, r21, r25
  Move         r21, r26
  Const        r7, 1
  AddInt       r27, r22, r7
  Move         r22, r27
  Jump         L4
L3:
  // var m = 0
  Const        r4, 0
  Move         r28, r4
L10:
  // while m < len(fn) {
  Len          r29, r20
  LessInt      r30, r28, r29
  JumpIfFalse  r30, L5
  // var g = fn[m]
  Index        r31, r20, r28
  Move         r32, r31
  // if g != 0 {
  Const        r4, 0
  NotEqual     r33, r32, r4
  JumpIfFalse  r33, L6
  // var first = m
  Move         r34, r28
  // var last = m + g
  Add          r35, r28, r32
  Move         r36, r35
  // var t = 1
  Const        r7, 1
  Move         r37, r7
L9:
  // while t <= g {
  LessEq       r38, r37, r32
  JumpIfFalse  r38, L6
  // var temp = perm[first]
  Index        r39, r21, r34
  Move         r40, r39
  // var x = first + 1
  Const        r7, 1
  AddInt       r41, r34, r7
  Move         r42, r41
L8:
  // while x <= last {
  LessEq       r43, r42, r36
  JumpIfFalse  r43, L7
  // perm[x - 1] = perm[x]
  Index        r44, r21, r42
  Const        r7, 1
  SubInt       r45, r42, r7
  SetIndex     r21, r45, r44
  // x = x + 1
  Const        r7, 1
  AddInt       r46, r42, r7
  Move         r42, r46
  // while x <= last {
  Jump         L8
L7:
  // perm[last] = temp
  SetIndex     r21, r36, r40
  // t = t + 1
  Const        r7, 1
  AddInt       r47, r37, r7
  Move         r37, r47
  // while t <= g {
  Jump         L9
L6:
  // m = m + 1
  Const        r7, 1
  AddInt       r48, r28, r7
  Move         r28, r48
  // while m < len(fn) {
  Jump         L10
L5:
  // perms = append(perms, perm)
  Append       r49, r3, r21
  Move         r3, r49
  // for fn in factNums {
  Const        r50, 1
  AddInt       r51, r17, r50
  Move         r17, r51
  Jump         L11
L2:
  // return perms
  Return       r3

  // fun randInt(n: int): int {
func randInt (regs=9)
  // seed = (seed * 1664525 + 1013904223) % 2147483647
  Const        r2, 1664525
  Mul          r3, r0, r2
  Const        r4, 1013904223
  Add          r5, r3, r4
  Const        r6, 2147483647
  Mod          r7, r5, r6
  Move         r0, r7
  SetGlobal    0,0,0,0
  // return seed % n
  Mod          r8, r0, r1
  Return       r8

  // fun main() {
func main (regs=119)
  // let g = genFactBaseNums(3, false)
  Const        r3, 3
  Move         r1, r3
  Const        r4, false
  Move         r2, r4
  Call2        r5, genFactBaseNums, r1, r2
  Move         r6, r5
  // var factNums = g[0]
  Const        r7, 0
  Index        r8, r6, r7
  Move         r9, r8
  // var perms = mapToPerms(factNums)
  Move         r10, r9
  Call         r11, mapToPerms, r10
  Move         r12, r11
  // var i = 0
  Const        r7, 0
  Move         r13, r7
L1:
  // while i < len(factNums) {
  Len          r14, r9
  LessInt      r15, r13, r14
  JumpIfFalse  r15, L0
  // print(joinInts(factNums[i], ".") + " -> " + joinInts(perms[i], ""))
  Index        r18, r9, r13
  Move         r16, r18
  Const        r19, "."
  Move         r17, r19
  Call2        r20, joinInts, r16, r17
  Const        r21, " -> "
  Add          r22, r20, r21
  Index        r25, r12, r13
  Move         r23, r25
  Const        r26, ""
  Move         r24, r26
  Call2        r27, joinInts, r23, r24
  Add          r28, r22, r27
  Print        r28
  // i = i + 1
  Const        r29, 1
  AddInt       r30, r13, r29
  Move         r13, r30
  // while i < len(factNums) {
  Jump         L1
L0:
  // let count2 = factorial(11)
  Const        r32, 11
  Move         r31, r32
  Call         r33, factorial, r31
  Move         r34, r33
  // print("\nPermutations generated = " + str(count2))
  Const        r35, "\nPermutations generated = "
  Str          r36, r34
  Add          r37, r35, r36
  Print        r37
  // print("compared to 11! which  = " + str(factorial(11)))
  Const        r38, "compared to 11! which  = "
  Const        r32, 11
  Move         r39, r32
  Call         r40, factorial, r39
  Str          r41, r40
  Add          r42, r38, r41
  Print        r42
  // print("")
  Const        r26, ""
  Print        r26
  // let fbn51s: list<string> = [
  Const        r43, ["39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0", "51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1"]
  Move         r44, r43
  // factNums = [undot(fbn51s[0]), undot(fbn51s[1])]
  Const        r7, 0
  Index        r48, r44, r7
  Move         r47, r48
  Call         r49, undot, r47
  Move         r45, r49
  Const        r29, 1
  Index        r51, r44, r29
  Move         r50, r51
  Call         r52, undot, r50
  Move         r46, r52
  MakeList     r53, 2, r45
  Move         r9, r53
  // perms = mapToPerms(factNums)
  Move         r54, r9
  Call         r55, mapToPerms, r54
  Move         r12, r55
  // let shoe = "A♠K♠Q♠J♠T♠9♠8♠7♠6♠5♠4♠3♠2♠A♥K♥Q♥J♥T♥9♥8♥7♥6♥5♥4♥3♥2♥A♦K♦Q♦J♦T♦9♦8♦7♦6♦5♦4♦3♦2♦A♣K♣Q♣J♣T♣9♣8♣7♣6♣5♣4♣3♣2♣"
  Const        r56, "A♠K♠Q♠J♠T♠9♠8♠7♠6♠5♠4♠3♠2♠A♥K♥Q♥J♥T♥9♥8♥7♥6♥5♥4♥3♥2♥A♦K♦Q♦J♦T♦9♦8♦7♦6♦5♦4♦3♦2♦A♣K♣Q♣J♣T♣9♣8♣7♣6♣5♣4♣3♣2♣"
  Move         r57, r56
  // var cards: list<string> = []
  Const        r58, []
  Move         r59, r58
  // i = 0
  Const        r7, 0
  Move         r13, r7
L4:
  // while i < 52 {
  Const        r60, 52
  LessInt      r61, r13, r60
  JumpIfFalse  r61, L2
  // var card = substring(shoe, 2*i, 2*i+2)
  Const        r62, 2
  MulInt       r63, r62, r13
  Const        r62, 2
  MulInt       r64, r62, r13
  Const        r62, 2
  AddInt       r65, r64, r62
  Slice        r66, r57, r63, r65
  Move         r67, r66
  // if card[0:1] == "T" { card = "10" + card[1:2] }
  Const        r7, 0
  Move         r68, r7
  Const        r29, 1
  Move         r69, r29
  Slice        r70, r67, r68, r69
  Const        r71, "T"
  Equal        r72, r70, r71
  JumpIfFalse  r72, L3
  Const        r73, "10"
  Const        r29, 1
  Move         r74, r29
  Const        r62, 2
  Move         r75, r62
  Slice        r76, r67, r74, r75
  Add          r77, r73, r76
  Move         r67, r77
L3:
  // cards = append(cards, card)
  Append       r78, r59, r67
  Move         r59, r78
  // i = i + 1
  Const        r29, 1
  AddInt       r79, r13, r29
  Move         r13, r79
  // while i < 52 {
  Jump         L4
L2:
  // i = 0
  Const        r7, 0
  Move         r13, r7
L8:
  // while i < len(fbn51s) {
  Const        r62, 2
  LessInt      r80, r13, r62
  JumpIfFalse  r80, L5
  // print(fbn51s[i])
  Index        r81, r44, r13
  Print        r81
  // var perm = perms[i]
  Index        r82, r12, r13
  Move         r83, r82
  // var j = 0
  Const        r7, 0
  Move         r84, r7
  // var line = ""
  Const        r26, ""
  Move         r85, r26
L7:
  // while j < len(perm) {
  Len          r86, r83
  LessInt      r87, r84, r86
  JumpIfFalse  r87, L6
  // line = line + cards[perm[j]]
  Index        r88, r83, r84
  Index        r89, r59, r88
  Add          r90, r85, r89
  Move         r85, r90
  // j = j + 1
  Const        r29, 1
  AddInt       r91, r84, r29
  Move         r84, r91
  // while j < len(perm) {
  Jump         L7
L6:
  // print(line + "\n")
  Const        r92, "\n"
  Add          r93, r85, r92
  Print        r93
  // i = i + 1
  Const        r29, 1
  AddInt       r94, r13, r29
  Move         r13, r94
  // while i < len(fbn51s) {
  Jump         L8
L5:
  // var fbn51: list<int> = []
  Const        r58, []
  Move         r95, r58
  // i = 0
  Const        r7, 0
  Move         r13, r7
L10:
  // while i < 51 {
  Const        r96, 51
  LessInt      r97, r13, r96
  JumpIfFalse  r97, L9
  // fbn51 = append(fbn51, randInt(52 - i))
  Const        r60, 52
  SubInt       r99, r60, r13
  Move         r98, r99
  Call         r100, randInt, r98
  Append       r101, r95, r100
  Move         r95, r101
  // i = i + 1
  Const        r29, 1
  AddInt       r102, r13, r29
  Move         r13, r102
  // while i < 51 {
  Jump         L10
L9:
  // print(joinInts(fbn51, "."))
  Move         r103, r95
  Const        r19, "."
  Move         r104, r19
  Call2        r105, joinInts, r103, r104
  Print        r105
  // perms = mapToPerms([fbn51])
  Move         r107, r95
  MakeList     r108, 1, r107
  Move         r106, r108
  Call         r109, mapToPerms, r106
  Move         r12, r109
  // var line = ""
  Const        r26, ""
  Move         r110, r26
  // i = 0
  Const        r7, 0
  Move         r13, r7
L12:
  // while i < len(perms[0]) {
  Const        r7, 0
  Index        r111, r12, r7
  Len          r112, r111
  LessInt      r113, r13, r112
  JumpIfFalse  r113, L11
  // line = line + cards[perms[0][i]]
  Const        r7, 0
  Index        r114, r12, r7
  Index        r115, r114, r13
  Index        r116, r59, r115
  Add          r117, r110, r116
  Move         r110, r117
  // i = i + 1
  Const        r29, 1
  AddInt       r118, r13, r29
  Move         r13, r118
  // while i < len(perms[0]) {
  Jump         L12
L11:
  // print(line)
  Print        r110
  Return       r0
