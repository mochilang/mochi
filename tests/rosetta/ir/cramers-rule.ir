func main (regs=40)
  // let m = [
  Const        r7, [[2.0, -1.0, 5.0, 1.0], [3.0, 2.0, 2.0, -6.0], [1.0, 3.0, 3.0, -1.0], [5.0, -2.0, -3.0, 3.0]]
  Move         r0, r7
  SetGlobal    0,0,0,0
  // let v = [-3.0, -32.0, -47.0, 49.0]
  Const        r8, [-3.0, -32.0, -47.0, 49.0]
  Move         r1, r8
  SetGlobal    1,1,0,0
  // let d = det(m)
  Move         r9, r0
  Call         r10, det, r9
  Move         r2, r10
  SetGlobal    2,2,0,0
  // var x: list<float> = []
  Const        r11, []
  Move         r3, r11
  SetGlobal    3,3,0,0
  // var i = 0
  Const        r12, 0
  Move         r4, r12
  SetGlobal    4,4,0,0
L1:
  // while i < len(v) {
  Const        r13, 4
  LessInt      r14, r4, r13
  JumpIfFalse  r14, L0
  // let mc = replaceCol(m, i, v)
  Move         r15, r0
  Move         r16, r4
  Move         r17, r1
  Call         r18, replaceCol, r15, r16, r17
  Move         r19, r18
  // x = append(x, det(mc) / d)
  Move         r20, r19
  Call         r21, det, r20
  Div          r22, r21, r2
  Append       r23, r3, r22
  Move         r3, r23
  SetGlobal    3,3,0,0
  // i = i + 1
  Const        r24, 1
  AddInt       r25, r4, r24
  Move         r4, r25
  SetGlobal    4,4,0,0
  // while i < len(v) {
  Jump         L1
L0:
  // var s = "["
  Const        r26, "["
  Move         r5, r26
  SetGlobal    5,5,0,0
  // var j = 0
  Const        r12, 0
  Move         r6, r12
  SetGlobal    6,6,0,0
L4:
  // while j < len(x) {
  Len          r27, r3
  LessInt      r28, r6, r27
  JumpIfFalse  r28, L2
  // s = s + str(x[j])
  Index        r29, r3, r6
  Str          r30, r29
  Add          r31, r5, r30
  Move         r5, r31
  SetGlobal    5,5,0,0
  // if j < len(x)-1 { s = s + " " }
  Len          r32, r3
  Const        r24, 1
  SubInt       r33, r32, r24
  LessInt      r34, r6, r33
  JumpIfFalse  r34, L3
  Const        r35, " "
  Add          r36, r5, r35
  Move         r5, r36
  SetGlobal    5,5,0,0
L3:
  // j = j + 1
  Const        r24, 1
  AddInt       r37, r6, r24
  Move         r6, r37
  SetGlobal    6,6,0,0
  // while j < len(x) {
  Jump         L4
L2:
  // s = s + "]"
  Const        r38, "]"
  Add          r39, r5, r38
  Move         r5, r39
  SetGlobal    5,5,0,0
  // print(s)
  Print        r5
  Return       r0

  // fun det(m: list<list<float>>): float {
func det (regs=45)
  // let n = len(m)
  Len          r8, r7
  Move         r9, r8
  // if n == 1 { return m[0][0] }
  Const        r10, 1
  EqualInt     r11, r9, r10
  JumpIfFalse  r11, L0
  Const        r12, 0
  Index        r13, r7, r12
  Const        r12, 0
  Index        r14, r13, r12
  Return       r14
L0:
  // var total = 0.0
  Const        r15, 0.0
  Move         r16, r15
  // var sign = 1.0
  Const        r17, 1.0
  Move         r18, r17
  // var c = 0
  Const        r12, 0
  Move         r19, r12
L7:
  // while c < n {
  LessInt      r20, r19, r9
  JumpIfFalse  r20, L1
  // var sub: list<list<float>> = []
  Const        r21, []
  Move         r22, r21
  // var r = 1
  Const        r10, 1
  Move         r23, r10
L6:
  // while r < n {
  LessInt      r24, r23, r9
  JumpIfFalse  r24, L2
  // var row: list<float> = []
  Const        r21, []
  Move         r25, r21
  // var cc = 0
  Const        r12, 0
  Move         r26, r12
L5:
  // while cc < n {
  LessInt      r27, r26, r9
  JumpIfFalse  r27, L3
  // if cc != c { row = append(row, m[r][cc]) }
  NotEqual     r28, r26, r19
  JumpIfFalse  r28, L4
  Index        r29, r7, r23
  Index        r30, r29, r26
  Append       r31, r25, r30
  Move         r25, r31
L4:
  // cc = cc + 1
  Const        r10, 1
  AddInt       r32, r26, r10
  Move         r26, r32
  // while cc < n {
  Jump         L5
L3:
  // sub = append(sub, row)
  Append       r33, r22, r25
  Move         r22, r33
  // r = r + 1
  Const        r10, 1
  AddInt       r34, r23, r10
  Move         r23, r34
  // while r < n {
  Jump         L6
L2:
  // total = total + sign * m[0][c] * det(sub)
  Const        r12, 0
  Index        r35, r7, r12
  Index        r36, r35, r19
  MulFloat     r37, r18, r36
  Move         r38, r22
  Call         r39, det, r38
  MulFloat     r40, r37, r39
  AddFloat     r41, r16, r40
  Move         r16, r41
  // sign = sign * (-1.0)
  Const        r42, -1.0
  MulFloat     r43, r18, r42
  Move         r18, r43
  // c = c + 1
  Const        r10, 1
  AddInt       r44, r19, r10
  Move         r19, r44
  // while c < n {
  Jump         L7
L1:
  // return total
  Return       r16

  // fun replaceCol(m: list<list<float>>, col: int, v: list<float>): list<list<float>> {
func replaceCol (regs=31)
  // var res: list<list<float>> = []
  Const        r10, []
  Move         r11, r10
  // var r = 0
  Const        r12, 0
  Move         r13, r12
L5:
  // while r < len(m) {
  Len          r14, r7
  LessInt      r15, r13, r14
  JumpIfFalse  r15, L0
  // var row: list<float> = []
  Const        r10, []
  Move         r16, r10
  // var c = 0
  Const        r12, 0
  Move         r17, r12
L4:
  // while c < len(m[r]) {
  Index        r18, r7, r13
  Len          r19, r18
  LessInt      r20, r17, r19
  JumpIfFalse  r20, L1
  // if c == col { row = append(row, v[r]) } else { row = append(row, m[r][c]) }
  Equal        r21, r17, r8
  JumpIfFalse  r21, L2
  Index        r22, r9, r13
  Append       r23, r16, r22
  Move         r16, r23
  Jump         L3
L2:
  Index        r24, r7, r13
  Index        r25, r24, r17
  Append       r26, r16, r25
  Move         r16, r26
L3:
  // c = c + 1
  Const        r27, 1
  AddInt       r28, r17, r27
  Move         r17, r28
  // while c < len(m[r]) {
  Jump         L4
L1:
  // res = append(res, row)
  Append       r29, r11, r16
  Move         r11, r29
  // r = r + 1
  Const        r27, 1
  AddInt       r30, r13, r27
  Move         r13, r30
  // while r < len(m) {
  Jump         L5
L0:
  // return res
  Return       r11
