func main (regs=27)
  // "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" +
  Const        r2, "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n"
  // "are$delineated$by$a$single$'dollar'$character,$write$a$program\n" +
  Const        r3, "are$delineated$by$a$single$'dollar'$character,$write$a$program\n"
  // "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" +
  Const        r4, "Given$a$text$file$of$many$lines,$where$fields$within$a$line\nare$delineated$by$a$single$'dollar'$character,$write$a$program\n"
  // "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n" +
  Const        r5, "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n"
  // "are$delineated$by$a$single$'dollar'$character,$write$a$program\n" +
  Const        r6, "Given$a$text$file$of$many$lines,$where$fields$within$a$line\nare$delineated$by$a$single$'dollar'$character,$write$a$program\nthat$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n"
  // "column$are$separated$by$at$least$one$space.\n" +
  Const        r7, "column$are$separated$by$at$least$one$space.\n"
  // "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n" +
  Const        r8, "Given$a$text$file$of$many$lines,$where$fields$within$a$line\nare$delineated$by$a$single$'dollar'$character,$write$a$program\nthat$aligns$each$column$of$fields$by$ensuring$that$words$in$each\ncolumn$are$separated$by$at$least$one$space.\n"
  // "Further,$allow$for$each$word$in$a$column$to$be$either$left\n" +
  Const        r9, "Further,$allow$for$each$word$in$a$column$to$be$either$left\n"
  // "column$are$separated$by$at$least$one$space.\n" +
  Const        r10, "Given$a$text$file$of$many$lines,$where$fields$within$a$line\nare$delineated$by$a$single$'dollar'$character,$write$a$program\nthat$aligns$each$column$of$fields$by$ensuring$that$words$in$each\ncolumn$are$separated$by$at$least$one$space.\nFurther,$allow$for$each$word$in$a$column$to$be$either$left\n"
  // "justified,$right$justified,$or$center$justified$within$its$column."
  Const        r11, "justified,$right$justified,$or$center$justified$within$its$column."
  // "Further,$allow$for$each$word$in$a$column$to$be$either$left\n" +
  Const        r12, "Given$a$text$file$of$many$lines,$where$fields$within$a$line\nare$delineated$by$a$single$'dollar'$character,$write$a$program\nthat$aligns$each$column$of$fields$by$ensuring$that$words$in$each\ncolumn$are$separated$by$at$least$one$space.\nFurther,$allow$for$each$word$in$a$column$to$be$either$left\njustified,$right$justified,$or$center$justified$within$its$column."
  // let text =
  Move         r0, r12
  SetGlobal    0,0,0,0
  // let f = newFormatter(text)
  Move         r13, r0
  Call         r14, newFormatter, r13
  Move         r1, r14
  SetGlobal    1,1,0,0
  // printFmt(f, 0)
  Move         r15, r1
  Const        r17, 0
  Move         r16, r17
  Call2        r18, printFmt, r15, r16
  // printFmt(f, 1)
  Move         r19, r1
  Const        r21, 1
  Move         r20, r21
  Call2        r22, printFmt, r19, r20
  // printFmt(f, 2)
  Move         r23, r1
  Const        r25, 2
  Move         r24, r25
  Call2        r26, printFmt, r23, r24
  Return       r0

  // fun split(s: string, sep: string): list<string> {
func split (regs=32)
  // var parts: list<string> = []
  Const        r4, []
  Move         r5, r4
  // var cur = ""
  Const        r6, ""
  Move         r7, r6
  // var i = 0
  Const        r8, 0
  Move         r9, r8
L3:
  // while i < len(s) {
  Len          r10, r2
  LessInt      r11, r9, r10
  JumpIfFalse  r11, L0
  // if len(sep) > 0 && i+len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
  Len          r12, r3
  Len          r13, r3
  AddInt       r14, r9, r13
  Const        r8, 0
  LessInt      r15, r8, r12
  Len          r16, r2
  LessEqInt    r17, r14, r16
  Len          r18, r3
  AddInt       r19, r9, r18
  Slice        r20, r2, r9, r19
  Equal        r21, r20, r3
  Move         r22, r15
  JumpIfFalse  r22, L1
  Move         r22, r17
  JumpIfFalse  r22, L1
  Move         r22, r21
L1:
  JumpIfFalse  r22, L2
  // parts = append(parts, cur)
  Append       r23, r5, r7
  Move         r5, r23
  // cur = ""
  Const        r6, ""
  Move         r7, r6
  // i = i + len(sep)
  Len          r24, r3
  AddInt       r25, r9, r24
  Move         r9, r25
  // if len(sep) > 0 && i+len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
  Jump         L3
L2:
  // cur = cur + substring(s, i, i+1)
  Const        r26, 1
  AddInt       r27, r9, r26
  Slice        r28, r2, r9, r27
  Add          r29, r7, r28
  Move         r7, r29
  // i = i + 1
  Const        r26, 1
  AddInt       r30, r9, r26
  Move         r9, r30
  // while i < len(s) {
  Jump         L3
L0:
  // parts = append(parts, cur)
  Append       r31, r5, r7
  Move         r5, r31
  // return parts
  Return       r5

  // fun rstripEmpty(words: list<string>): list<string> {
func rstripEmpty (regs=17)
  // var n = len(words)
  Len          r3, r2
  Move         r4, r3
L2:
  // while n > 0 && words[n-1] == "" {
  Const        r5, 0
  LessInt      r6, r5, r4
  Const        r7, 1
  SubInt       r8, r4, r7
  Index        r9, r2, r8
  Const        r10, ""
  Equal        r11, r9, r10
  Move         r12, r6
  JumpIfFalse  r12, L0
  Move         r12, r11
L0:
  JumpIfFalse  r12, L1
  // n = n - 1
  Const        r7, 1
  SubInt       r13, r4, r7
  Move         r4, r13
  // while n > 0 && words[n-1] == "" {
  Jump         L2
L1:
  // return words[:n]
  Const        r14, nil
  Move         r15, r4
  Slice        r16, r2, r14, r15
  Return       r16

  // fun spaces(n: int): string {
func spaces (regs=12)
  // var out = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L1:
  // while i < n {
  Less         r7, r6, r2
  JumpIfFalse  r7, L0
  // out = out + " "
  Const        r8, " "
  Add          r9, r4, r8
  Move         r4, r9
  // i = i + 1
  Const        r10, 1
  AddInt       r11, r6, r10
  Move         r6, r11
  // while i < n {
  Jump         L1
L0:
  // return out
  Return       r4

  // fun pad(word: string, width: int, align: int): string {
func pad (regs=29)
  // let diff = width - len(word)
  Len          r5, r2
  Sub          r6, r3, r5
  Move         r7, r6
  // if align == 0 { // left
  Const        r8, 0
  Equal        r9, r4, r8
  JumpIfFalse  r9, L0
  // return word + spaces(diff)
  Move         r10, r7
  Call         r11, spaces, r10
  Add          r12, r2, r11
  Return       r12
L0:
  // if align == 2 { // right
  Const        r13, 2
  Equal        r14, r4, r13
  JumpIfFalse  r14, L1
  // return spaces(diff) + word
  Move         r15, r7
  Call         r16, spaces, r15
  Add          r17, r16, r2
  Return       r17
L1:
  // var left = (diff / 2) as int
  Const        r13, 2
  Div          r18, r7, r13
  Cast         r19, r18, int
  Move         r20, r19
  // var right = diff - left
  Sub          r21, r7, r20
  Move         r22, r21
  // return spaces(left) + word + spaces(right)
  Move         r23, r20
  Call         r24, spaces, r23
  Add          r25, r24, r2
  Move         r26, r22
  Call         r27, spaces, r26
  Add          r28, r25, r27
  Return       r28

  // fun newFormatter(text: string): map<string, any> {
func newFormatter (regs=49)
  // var lines = split(text, "\n")
  Move         r3, r2
  Const        r5, "\n"
  Move         r4, r5
  Call2        r6, split, r3, r4
  Move         r7, r6
  // var fmtLines: list<list<string>> = []
  Const        r8, []
  Move         r9, r8
  // var width: list<int> = []
  Const        r8, []
  Move         r10, r8
  // var i = 0
  Const        r11, 0
  Move         r12, r11
L2:
  // while i < len(lines) {
  Len          r13, r7
  LessInt      r14, r12, r13
  JumpIfFalse  r14, L0
  // if len(lines[i]) == 0 {
  Index        r15, r7, r12
  Len          r16, r15
  Const        r11, 0
  EqualInt     r17, r16, r11
  JumpIfFalse  r17, L1
  // i = i + 1
  Const        r18, 1
  AddInt       r19, r12, r18
  Move         r12, r19
  // continue
  Jump         L2
L1:
  // var words = rstripEmpty(split(lines[i], "$"))
  Index        r23, r7, r12
  Move         r21, r23
  Const        r24, "$"
  Move         r22, r24
  Call2        r25, split, r21, r22
  Move         r20, r25
  Call         r26, rstripEmpty, r20
  Move         r27, r26
  // fmtLines = append(fmtLines, words)
  Append       r28, r9, r27
  Move         r9, r28
  // var j = 0
  Const        r11, 0
  Move         r29, r11
L6:
  // while j < len(words) {
  Len          r30, r27
  LessInt      r31, r29, r30
  JumpIfFalse  r31, L3
  // let wlen = len(words[j])
  Index        r32, r27, r29
  Len          r33, r32
  Move         r34, r33
  // if j == len(width) {
  Len          r35, r10
  EqualInt     r36, r29, r35
  JumpIfFalse  r36, L4
  // width = append(width, wlen)
  Append       r37, r10, r34
  Move         r10, r37
  // if j == len(width) {
  Jump         L5
L4:
  // } else if wlen > width[j] {
  Index        r38, r10, r29
  Less         r39, r38, r34
  JumpIfFalse  r39, L5
  // width[j] = wlen
  SetIndex     r10, r29, r34
L5:
  // j = j + 1
  Const        r18, 1
  AddInt       r40, r29, r18
  Move         r29, r40
  // while j < len(words) {
  Jump         L6
L3:
  // i = i + 1
  Const        r18, 1
  AddInt       r41, r12, r18
  Move         r12, r41
  // while i < len(lines) {
  Jump         L2
L0:
  // return {"text": fmtLines, "width": width}
  Const        r42, "text"
  Const        r43, "width"
  Move         r44, r42
  Move         r45, r9
  Move         r46, r43
  Move         r47, r10
  MakeMap      r48, 2, r44
  Return       r48

  // fun printFmt(f: map<string, any>, align: int) {
func printFmt (regs=35)
  // let lines = f["text"] as list<list<string>>
  Const        r4, "text"
  Index        r5, r2, r4
  Cast         r6, r5, [[string]]
  Move         r7, r6
  // let width = f["width"] as list<int>
  Const        r8, "width"
  Index        r9, r2, r8
  Cast         r10, r9, [int]
  Move         r11, r10
  // var i = 0
  Const        r12, 0
  Move         r13, r12
L3:
  // while i < len(lines) {
  Len          r14, r7
  LessInt      r15, r13, r14
  JumpIfFalse  r15, L0
  // let words = lines[i]
  Index        r16, r7, r13
  Move         r17, r16
  // var line = ""
  Const        r18, ""
  Move         r19, r18
  // var j = 0
  Const        r12, 0
  Move         r20, r12
L2:
  // while j < len(words) {
  Len          r21, r17
  LessInt      r22, r20, r21
  JumpIfFalse  r22, L1
  // line = line + pad(words[j], width[j], align) + " "
  Index        r26, r17, r20
  Move         r23, r26
  Index        r27, r11, r20
  Move         r24, r27
  Move         r25, r3
  Call         r28, pad, r23, r24, r25
  Add          r29, r19, r28
  Const        r30, " "
  Add          r31, r29, r30
  Move         r19, r31
  // j = j + 1
  Const        r32, 1
  AddInt       r33, r20, r32
  Move         r20, r33
  // while j < len(words) {
  Jump         L2
L1:
  // print(line)
  Print        r19
  // i = i + 1
  Const        r32, 1
  AddInt       r34, r13, r32
  Move         r13, r34
  // while i < len(lines) {
  Jump         L3
L0:
  // print("")
  Const        r18, ""
  Print        r18
  Return       r0
