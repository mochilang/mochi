func main (regs=104)
  // print("Avalanche of topplings:\n")
  Const        r9, "Avalanche of topplings:\n"
  Print        r9
  // var s4 = [4,3,3,3,1,2,0,2,3]
  Const        r10, [4, 3, 3, 3, 1, 2, 0, 2, 3]
  Move         r0, r10
  SetGlobal    0,0,0,0
  // print(pileString(s4))
  Move         r11, r0
  Call         r12, pileString, r11
  Print        r12
L1:
  // while !isStable(s4) {
  Move         r13, r0
  Call         r14, isStable, r13
  Not          r15, r14
  JumpIfFalse  r15, L0
  // topple(s4)
  Move         r16, r0
  Call         r17, topple, r16
  // print(pileString(s4))
  Move         r18, r0
  Call         r19, pileString, r18
  Print        r19
  // while !isStable(s4) {
  Jump         L1
L0:
  // print("Commutative additions:\n")
  Const        r20, "Commutative additions:\n"
  Print        r20
  // var s1 = [1,2,0,2,1,1,0,1,3]
  Const        r21, [1, 2, 0, 2, 1, 1, 0, 1, 3]
  Move         r1, r21
  SetGlobal    1,1,0,0
  // var s2 = [2,1,3,1,0,1,0,1,0]
  Const        r22, [2, 1, 3, 1, 0, 1, 0, 1, 0]
  Move         r2, r22
  SetGlobal    2,2,0,0
  // var s3_a = plus(s1, s2)
  Move         r23, r1
  Move         r24, r2
  Call2        r25, plus, r23, r24
  Move         r3, r25
  SetGlobal    3,3,0,0
L3:
  // while !isStable(s3_a) { topple(s3_a) }
  Move         r26, r3
  Call         r27, isStable, r26
  Not          r28, r27
  JumpIfFalse  r28, L2
  Move         r29, r3
  Call         r30, topple, r29
  Jump         L3
L2:
  // var s3_b = plus(s2, s1)
  Move         r31, r2
  Move         r32, r1
  Call2        r33, plus, r31, r32
  Move         r4, r33
  SetGlobal    4,4,0,0
L5:
  // while !isStable(s3_b) { topple(s3_b) }
  Move         r34, r4
  Call         r35, isStable, r34
  Not          r36, r35
  JumpIfFalse  r36, L4
  Move         r37, r4
  Call         r38, topple, r37
  Jump         L5
L4:
  // print(pileString(s1) + "\nplus\n\n" + pileString(s2) + "\nequals\n\n" + pileString(s3_a))
  Move         r39, r1
  Call         r40, pileString, r39
  Const        r41, "\nplus\n\n"
  Add          r42, r40, r41
  Move         r43, r2
  Call         r44, pileString, r43
  Add          r45, r42, r44
  Const        r46, "\nequals\n\n"
  Add          r47, r45, r46
  Move         r48, r3
  Call         r49, pileString, r48
  Add          r50, r47, r49
  Print        r50
  // print("and\n\n" + pileString(s2) + "\nplus\n\n" + pileString(s1) + "\nalso equals\n\n" + pileString(s3_b))
  Const        r51, "and\n\n"
  Move         r52, r2
  Call         r53, pileString, r52
  Add          r54, r51, r53
  Const        r41, "\nplus\n\n"
  Add          r55, r54, r41
  Move         r56, r1
  Call         r57, pileString, r56
  Add          r58, r55, r57
  Const        r59, "\nalso equals\n\n"
  Add          r60, r58, r59
  Move         r61, r4
  Call         r62, pileString, r61
  Add          r63, r60, r62
  Print        r63
  // print("Addition of identity sandpile:\n")
  Const        r64, "Addition of identity sandpile:\n"
  Print        r64
  // var s3 = [3,3,3,3,3,3,3,3,3]
  Const        r65, [3, 3, 3, 3, 3, 3, 3, 3, 3]
  Move         r5, r65
  SetGlobal    5,5,0,0
  // var s3_id = [2,1,2,1,0,1,2,1,2]
  Const        r66, [2, 1, 2, 1, 0, 1, 2, 1, 2]
  Move         r6, r66
  SetGlobal    6,6,0,0
  // var s4b = plus(s3, s3_id)
  Move         r67, r5
  Move         r68, r6
  Call2        r69, plus, r67, r68
  Move         r7, r69
  SetGlobal    7,7,0,0
L7:
  // while !isStable(s4b) { topple(s4b) }
  Move         r70, r7
  Call         r71, isStable, r70
  Not          r72, r71
  JumpIfFalse  r72, L6
  Move         r73, r7
  Call         r74, topple, r73
  Jump         L7
L6:
  // print(pileString(s3) + "\nplus\n\n" + pileString(s3_id) + "\nequals\n\n" + pileString(s4b))
  Move         r75, r5
  Call         r76, pileString, r75
  Const        r41, "\nplus\n\n"
  Add          r77, r76, r41
  Move         r78, r6
  Call         r79, pileString, r78
  Add          r80, r77, r79
  Const        r46, "\nequals\n\n"
  Add          r81, r80, r46
  Move         r82, r7
  Call         r83, pileString, r82
  Add          r84, r81, r83
  Print        r84
  // print("Addition of identities:\n")
  Const        r85, "Addition of identities:\n"
  Print        r85
  // var s5 = plus(s3_id, s3_id)
  Move         r86, r6
  Move         r87, r6
  Call2        r88, plus, r86, r87
  Move         r8, r88
  SetGlobal    8,8,0,0
L9:
  // while !isStable(s5) { topple(s5) }
  Move         r89, r8
  Call         r90, isStable, r89
  Not          r91, r90
  JumpIfFalse  r91, L8
  Move         r92, r8
  Call         r93, topple, r92
  Jump         L9
L8:
  // print(pileString(s3_id) + "\nplus\n\n" + pileString(s3_id) + "\nequals\n\n" + pileString(s5))
  Move         r94, r6
  Call         r95, pileString, r94
  Const        r41, "\nplus\n\n"
  Add          r96, r95, r41
  Move         r97, r6
  Call         r98, pileString, r97
  Add          r99, r96, r98
  Const        r46, "\nequals\n\n"
  Add          r100, r99, r46
  Move         r101, r8
  Call         r102, pileString, r101
  Add          r103, r100, r102
  Print        r103
  Return       r0

  // fun neighborsList(): list<list<int>> {
func neighborsList (regs=10)
  // return [
  Const        r9, [[1, 3], [0, 2, 4], [1, 5], [0, 4, 6], [1, 3, 5, 7], [2, 4, 8], [3, 7], [4, 6, 8], [5, 7]]
  Return       r9

  // fun plus(a: list<int>, b: list<int>): list<int> {
func plus (regs=23)
  // var res: list<int> = []
  Const        r11, []
  Move         r12, r11
  // var i = 0
  Const        r13, 0
  Move         r14, r13
L1:
  // while i < len(a) {
  Len          r15, r9
  LessInt      r16, r14, r15
  JumpIfFalse  r16, L0
  // res = append(res, a[i] + b[i])
  Index        r17, r9, r14
  Index        r18, r10, r14
  Add          r19, r17, r18
  Append       r20, r12, r19
  Move         r12, r20
  // i = i + 1
  Const        r21, 1
  AddInt       r22, r14, r21
  Move         r14, r22
  // while i < len(a) {
  Jump         L1
L0:
  // return res
  Return       r12

  // fun isStable(p: list<int>): bool {
func isStable (regs=22)
  // for v in p {
  IterPrep     r10, r9
  Len          r11, r10
  Const        r12, 0
L2:
  LessInt      r13, r12, r11
  JumpIfFalse  r13, L0
  Index        r14, r10, r12
  Move         r15, r14
  // if v > 3 { return false }
  Const        r16, 3
  Less         r17, r16, r15
  JumpIfFalse  r17, L1
  Const        r18, false
  Return       r18
L1:
  // for v in p {
  Const        r19, 1
  AddInt       r20, r12, r19
  Move         r12, r20
  Jump         L2
L0:
  // return true
  Const        r21, true
  Return       r21

  // fun topple(p: list<int>): int {
func topple (regs=36)
  // let neighbors = neighborsList()
  Call         r10, neighborsList, 
  Move         r11, r10
  // var i = 0
  Const        r12, 0
  Move         r13, r12
L4:
  // while i < len(p) {
  Len          r14, r9
  LessInt      r15, r13, r14
  JumpIfFalse  r15, L0
  // if p[i] > 3 {
  Index        r16, r9, r13
  Const        r17, 3
  Less         r18, r17, r16
  JumpIfFalse  r18, L1
  // p[i] = p[i] - 4
  Index        r19, r9, r13
  Const        r20, 4
  Sub          r21, r19, r20
  SetIndex     r9, r13, r21
  // let nbs = neighbors[i]
  Index        r22, r11, r13
  Move         r23, r22
  // for j in nbs {
  IterPrep     r24, r23
  Len          r25, r24
  Const        r26, 0
L3:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L2
  Index        r28, r24, r26
  Move         r29, r28
  // p[j] = p[j] + 1
  Index        r30, r9, r29
  Const        r31, 1
  Add          r32, r30, r31
  SetIndex     r9, r29, r32
  // for j in nbs {
  Const        r33, 1
  AddInt       r34, r26, r33
  Move         r26, r34
  Jump         L3
L2:
  // return 0
  Const        r12, 0
  Return       r12
L1:
  // i = i + 1
  Const        r31, 1
  AddInt       r35, r13, r31
  Move         r13, r35
  // while i < len(p) {
  Jump         L4
L0:
  // return 0
  Const        r12, 0
  Return       r12

  // fun pileString(p: list<int>): string {
func pileString (regs=30)
  // var s = ""
  Const        r10, ""
  Move         r11, r10
  // var r = 0
  Const        r12, 0
  Move         r13, r12
L3:
  // while r < 3 {
  Const        r14, 3
  LessInt      r15, r13, r14
  JumpIfFalse  r15, L0
  // var c = 0
  Const        r12, 0
  Move         r16, r12
L2:
  // while c < 3 {
  Const        r14, 3
  LessInt      r17, r16, r14
  JumpIfFalse  r17, L1
  // s = s + str(p[3*r + c]) + " "
  Const        r14, 3
  MulInt       r18, r14, r13
  AddInt       r19, r18, r16
  Index        r20, r9, r19
  Str          r21, r20
  Add          r22, r11, r21
  Const        r23, " "
  Add          r24, r22, r23
  Move         r11, r24
  // c = c + 1
  Const        r25, 1
  AddInt       r26, r16, r25
  Move         r16, r26
  // while c < 3 {
  Jump         L2
L1:
  // s = s + "\n"
  Const        r27, "\n"
  Add          r28, r11, r27
  Move         r11, r28
  // r = r + 1
  Const        r25, 1
  AddInt       r29, r13, r25
  Move         r13, r29
  // while r < 3 {
  Jump         L3
L0:
  // return s
  Return       r11
