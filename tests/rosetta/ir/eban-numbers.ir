func main (regs=5)
  // let vals = [0,2,4,6,30,32,34,36,40,42,44,46,50,52,54,56,60,62,64,66]
  Const        r2, [0, 2, 4, 6, 30, 32, 34, 36, 40, 42, 44, 46, 50, 52, 54, 56, 60, 62, 64, 66]
  Move         r0, r2
  SetGlobal    0,0,0,0
  // let billions = [0,2,4,6]
  Const        r3, [0, 2, 4, 6]
  Move         r1, r3
  SetGlobal    1,1,0,0
  // main()
  Call         r4, main, 
  Return       r0

  // fun ebanNumbers(start: int, stop: int): list<int> {
func ebanNumbers (regs=52)
  // var nums: list<int> = []
  Const        r4, []
  Move         r5, r4
  // for b in billions {
  IterPrep     r6, r1
  Len          r7, r6
  Const        r8, 0
L9:
  LessInt      r9, r8, r7
  JumpIfFalse  r9, L0
  Index        r10, r6, r8
  Move         r11, r10
  // for m in vals {
  IterPrep     r12, r0
  Len          r13, r12
  Const        r14, 0
L8:
  LessInt      r15, r14, r13
  JumpIfFalse  r15, L1
  Index        r16, r12, r14
  Move         r17, r16
  // for t in vals {
  IterPrep     r18, r0
  Len          r19, r18
  Const        r20, 0
L7:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L2
  Index        r22, r18, r20
  Move         r23, r22
  // for r in vals {
  IterPrep     r24, r0
  Len          r25, r24
  Const        r26, 0
L6:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L3
  Index        r28, r24, r26
  Move         r29, r28
  // let n = b*1000000000 + m*1000000 + t*1000 + r
  Const        r30, 1000000000
  Mul          r31, r11, r30
  Const        r32, 1000000
  Mul          r33, r17, r32
  Const        r34, 1000
  Mul          r35, r23, r34
  Add          r36, r31, r33
  Add          r37, r36, r35
  Add          r38, r37, r29
  Move         r39, r38
  // if (n >= start) && (n <= stop) {
  LessEq       r40, r2, r39
  Move         r41, r40
  JumpIfFalse  r41, L4
  LessEq       r42, r39, r3
  Move         r41, r42
L4:
  JumpIfFalse  r41, L5
  // nums = append(nums, n)
  Append       r43, r5, r39
  Move         r5, r43
L5:
  // for r in vals {
  Const        r44, 1
  AddInt       r45, r26, r44
  Move         r26, r45
  Jump         L6
L3:
  // for t in vals {
  Const        r46, 1
  AddInt       r47, r20, r46
  Move         r20, r47
  Jump         L7
L2:
  // for m in vals {
  Const        r48, 1
  AddInt       r49, r14, r48
  Move         r14, r49
  Jump         L8
L1:
  // for b in billions {
  Const        r50, 1
  AddInt       r51, r8, r50
  Move         r8, r51
  Jump         L9
L0:
  // return nums
  Return       r5

  // fun countEban(start: int, stop: int): int {
func countEban (regs=53)
  // var count = 0
  Const        r4, 0
  Move         r5, r4
  // for b in billions {
  IterPrep     r6, r1
  Len          r7, r6
  Const        r8, 0
L9:
  LessInt      r9, r8, r7
  JumpIfFalse  r9, L0
  Index        r10, r6, r8
  Move         r11, r10
  // for m in vals {
  IterPrep     r12, r0
  Len          r13, r12
  Const        r14, 0
L8:
  LessInt      r15, r14, r13
  JumpIfFalse  r15, L1
  Index        r16, r12, r14
  Move         r17, r16
  // for t in vals {
  IterPrep     r18, r0
  Len          r19, r18
  Const        r20, 0
L7:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L2
  Index        r22, r18, r20
  Move         r23, r22
  // for r in vals {
  IterPrep     r24, r0
  Len          r25, r24
  Const        r26, 0
L6:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L3
  Index        r28, r24, r26
  Move         r29, r28
  // let n = b*1000000000 + m*1000000 + t*1000 + r
  Const        r30, 1000000000
  Mul          r31, r11, r30
  Const        r32, 1000000
  Mul          r33, r17, r32
  Const        r34, 1000
  Mul          r35, r23, r34
  Add          r36, r31, r33
  Add          r37, r36, r35
  Add          r38, r37, r29
  Move         r39, r38
  // if (n >= start) && (n <= stop) {
  LessEq       r40, r2, r39
  Move         r41, r40
  JumpIfFalse  r41, L4
  LessEq       r42, r39, r3
  Move         r41, r42
L4:
  JumpIfFalse  r41, L5
  // count = count + 1
  Const        r43, 1
  AddInt       r44, r5, r43
  Move         r5, r44
L5:
  // for r in vals {
  Const        r45, 1
  AddInt       r46, r26, r45
  Move         r26, r46
  Jump         L6
L3:
  // for t in vals {
  Const        r47, 1
  AddInt       r48, r20, r47
  Move         r20, r48
  Jump         L7
L2:
  // for m in vals {
  Const        r49, 1
  AddInt       r50, r14, r49
  Move         r14, r50
  Jump         L8
L1:
  // for b in billions {
  Const        r51, 1
  AddInt       r52, r8, r51
  Move         r8, r52
  Jump         L9
L0:
  // return count
  Return       r5

  // fun main() {
func main (regs=68)
  // let ranges = [
  Const        r2, [[2, 1000, true], [1000, 4000, true], [2, 10000, false], [2, 100000, false], [2, 1000000, false], [2, 10000000, false], [2, 100000000, false], [2, 1000000000, false]]
  Move         r3, r2
  // for rg in ranges {
  IterPrep     r4, r3
  Len          r5, r4
  Const        r6, 0
L6:
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L0
  Index        r8, r4, r6
  Move         r9, r8
  // let start = rg[0] as int
  Const        r10, 0
  Index        r11, r9, r10
  Cast         r12, r11, int
  Move         r13, r12
  // let stop = rg[1] as int
  Const        r14, 1
  Index        r15, r9, r14
  Cast         r16, r15, int
  Move         r17, r16
  // let show = rg[2] as bool
  Const        r18, 2
  Index        r19, r9, r18
  Cast         r20, r19, bool
  Move         r21, r20
  // if start == 2 {
  Const        r18, 2
  Equal        r22, r13, r18
  JumpIfFalse  r22, L1
  // print("eban numbers up to and including " + str(stop) + ":")
  Const        r23, "eban numbers up to and including "
  Str          r24, r17
  Add          r25, r23, r24
  Const        r26, ":"
  Add          r27, r25, r26
  Print        r27
  // if start == 2 {
  Jump         L2
L1:
  // print("eban numbers between " + str(start) + " and " + str(stop) + " (inclusive):")
  Const        r28, "eban numbers between "
  Str          r29, r13
  Add          r30, r28, r29
  Const        r31, " and "
  Add          r32, r30, r31
  Str          r33, r17
  Add          r34, r32, r33
  Const        r35, " (inclusive):"
  Add          r36, r34, r35
  Print        r36
L2:
  // if show {
  JumpIfFalse  r21, L3
  // let nums = ebanNumbers(start, stop)
  Move         r37, r13
  Move         r38, r17
  Call2        r39, ebanNumbers, r37, r38
  Move         r40, r39
  // var line = ""
  Const        r41, ""
  Move         r42, r41
  // var i = 0
  Const        r10, 0
  Move         r43, r10
L5:
  // while i < len(nums) {
  Len          r44, r40
  LessInt      r45, r43, r44
  JumpIfFalse  r45, L4
  // line = line + str(nums[i]) + " "
  Index        r46, r40, r43
  Str          r47, r46
  Add          r48, r42, r47
  Const        r49, " "
  Add          r50, r48, r49
  Move         r42, r50
  // i = i + 1
  Const        r14, 1
  AddInt       r51, r43, r14
  Move         r43, r51
  // while i < len(nums) {
  Jump         L5
L4:
  // if len(line) > 0 { print(substring(line, 0, len(line)-1)) }
  Len          r52, r42
  Const        r10, 0
  LessInt      r53, r10, r52
  JumpIfFalse  r53, L3
  Const        r10, 0
  Len          r54, r42
  Const        r14, 1
  SubInt       r55, r54, r14
  Slice        r56, r42, r10, r55
  Print        r56
L3:
  // let c = countEban(start, stop)
  Move         r57, r13
  Move         r58, r17
  Call2        r59, countEban, r57, r58
  Move         r60, r59
  // print("count = " + str(c) + "\n")
  Const        r61, "count = "
  Str          r62, r60
  Add          r63, r61, r62
  Const        r64, "\n"
  Add          r65, r63, r64
  Print        r65
  // for rg in ranges {
  Const        r66, 1
  AddInt       r67, r6, r66
  Move         r6, r67
  Jump         L6
L0:
  Return       r0
