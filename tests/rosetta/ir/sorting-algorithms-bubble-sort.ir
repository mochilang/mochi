func __main (regs=10)
  // var list = [31, 41, 59, 26, 53, 58, 97, 93, 23, 84]
  Const        r1, [31, 41, 59, 26, 53, 58, 97, 93, 23, 84]
  Move         r0, r1
  SetGlobal    0,0,0,0
  // print("unsorted: " + str(list))
  Const        r2, "unsorted: "
  Str          r3, r0
  Add          r4, r2, r3
  Print        r4
  // list = bubbleSort(list)
  Move         r5, r0
  Call         r6, bubbleSort, r5
  Move         r0, r6
  SetGlobal    0,0,0,0
  // print("sorted!  " + str(list))
  Const        r7, "sorted!  "
  Str          r8, r0
  Add          r9, r7, r8
  Print        r9
  Return       r0

  // fun bubbleSort(a: list<int>): list<int> {
func bubbleSort (regs=25)
  // var arr = a
  Move         r2, r1
  // var itemCount = len(arr) - 1
  Len          r3, r2
  Const        r4, 1
  SubInt       r5, r3, r4
  Move         r6, r5
L5:
  // while true {
  Const        r7, true
  JumpIfFalse  r7, L0
  // var hasChanged = false
  Const        r8, false
  Move         r9, r8
  // var index = 0
  Const        r10, 0
  Move         r11, r10
L3:
  // while index < itemCount {
  LessInt      r12, r11, r6
  JumpIfFalse  r12, L1
  // if arr[index] > arr[index+1] {
  Index        r13, r2, r11
  Const        r4, 1
  AddInt       r14, r11, r4
  Index        r15, r2, r14
  Less         r16, r15, r13
  JumpIfFalse  r16, L2
  // let tmp = arr[index]
  Index        r17, r2, r11
  Move         r18, r17
  // arr[index] = arr[index+1]
  Const        r4, 1
  AddInt       r19, r11, r4
  Index        r20, r2, r19
  SetIndex     r2, r11, r20
  // arr[index+1] = tmp
  Const        r4, 1
  AddInt       r21, r11, r4
  SetIndex     r2, r21, r18
  // hasChanged = true
  Const        r7, true
  Move         r9, r7
L2:
  // index = index + 1
  Const        r4, 1
  AddInt       r22, r11, r4
  Move         r11, r22
  // while index < itemCount {
  Jump         L3
L1:
  // if !hasChanged {
  Not          r23, r9
  JumpIfFalse  r23, L4
  // break
  Jump         L0
L4:
  // itemCount = itemCount - 1
  Const        r4, 1
  SubInt       r24, r6, r4
  Move         r6, r24
  // while true {
  Jump         L5
L0:
  // return arr
  Return       r2
