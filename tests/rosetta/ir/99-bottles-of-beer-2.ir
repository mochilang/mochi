func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun fields(s: string): list<string> {
func fields (regs=28)
  // var words: list<string> = []
  Const        r1, []
  Move         r2, r1
  // var cur = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L4:
  // while i < len(s) {
  Len          r7, r0
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // let ch = substring(s, i, i + 1)
  Const        r9, 1
  AddInt       r10, r6, r9
  Slice        r11, r0, r6, r10
  Move         r12, r11
  // if ch == " " || ch == "\n" || ch == "\t" {
  Const        r13, " "
  Equal        r14, r12, r13
  Const        r15, "\n"
  Equal        r16, r12, r15
  Const        r17, "\t"
  Equal        r18, r12, r17
  Move         r19, r14
  JumpIfTrue   r19, L1
  Move         r19, r16
  JumpIfTrue   r19, L1
  Move         r19, r18
L1:
  JumpIfFalse  r19, L2
  // if len(cur) > 0 {
  Len          r20, r4
  Const        r5, 0
  LessInt      r21, r5, r20
  JumpIfFalse  r21, L3
  // words = append(words, cur)
  Append       r22, r2, r4
  Move         r2, r22
  // cur = ""
  Const        r3, ""
  Move         r4, r3
  // if ch == " " || ch == "\n" || ch == "\t" {
  Jump         L3
L2:
  // cur = cur + ch
  Add          r23, r4, r12
  Move         r4, r23
L3:
  // i = i + 1
  Const        r9, 1
  AddInt       r24, r6, r9
  Move         r6, r24
  // while i < len(s) {
  Jump         L4
L0:
  // if len(cur) > 0 {
  Len          r25, r4
  Const        r5, 0
  LessInt      r26, r5, r25
  JumpIfFalse  r26, L5
  // words = append(words, cur)
  Append       r27, r2, r4
  Move         r2, r27
L5:
  // return words
  Return       r2

  // fun join(xs: list<string>, sep: string): string {
func join (regs=14)
  // var res = ""
  Const        r2, ""
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L2:
  // while i < len(xs) {
  Len          r6, r0
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L0
  // if i > 0 {
  Const        r4, 0
  LessInt      r8, r4, r5
  JumpIfFalse  r8, L1
  // res = res + sep
  Add          r9, r3, r1
  Move         r3, r9
L1:
  // res = res + xs[i]
  Index        r10, r0, r5
  Add          r11, r3, r10
  Move         r3, r11
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r5, r12
  Move         r5, r13
  // while i < len(xs) {
  Jump         L2
L0:
  // return res
  Return       r3

  // fun numberName(n: int): string {
func numberName (regs=25)
  // let small = [
  Const        r1, ["no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
  Move         r2, r1
  // let tens = [
  Const        r3, ["ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
  Move         r4, r3
  // if n < 0 { return "" }
  Const        r5, 0
  Less         r6, r0, r5
  JumpIfFalse  r6, L0
  Const        r7, ""
  Return       r7
L0:
  // if n < 20 { return small[n] }
  Const        r8, 20
  Less         r9, r0, r8
  JumpIfFalse  r9, L1
  Index        r10, r2, r0
  Return       r10
L1:
  // if n < 100 {
  Const        r11, 100
  Less         r12, r0, r11
  JumpIfFalse  r12, L2
  // var t = tens[(n / 10) as int]
  Const        r13, 10
  Div          r14, r0, r13
  Cast         r15, r14, int
  Index        r16, r4, r15
  Move         r17, r16
  // var s = n % 10
  Const        r13, 10
  Mod          r18, r0, r13
  Move         r19, r18
  // if s > 0 {
  Const        r5, 0
  Less         r20, r5, r19
  JumpIfFalse  r20, L3
  // t = t + " " + small[s]
  Const        r21, " "
  Add          r22, r17, r21
  Index        r23, r2, r19
  Add          r24, r22, r23
  Move         r17, r24
L3:
  // return t
  Return       r17
L2:
  // return ""
  Const        r7, ""
  Return       r7

  // fun pluralizeFirst(s: string, n: int): string {
func pluralizeFirst (regs=17)
  // if n == 1 { return s }
  Const        r2, 1
  Equal        r3, r1, r2
  JumpIfFalse  r3, L0
  Return       r0
L0:
  // let w = fields(s)
  Move         r4, r0
  Call         r5, fields, r4
  Move         r6, r5
  // if len(w) > 0 {
  Len          r7, r6
  Const        r8, 0
  LessInt      r9, r8, r7
  JumpIfFalse  r9, L1
  // w[0] = w[0] + "s"
  Const        r8, 0
  Index        r10, r6, r8
  Const        r11, "s"
  Add          r12, r10, r11
  Const        r8, 0
  SetIndex     r6, r8, r12
L1:
  // return join(w, " ")
  Move         r13, r6
  Const        r15, " "
  Move         r14, r15
  Call2        r16, join, r13, r14
  Return       r16

  // fun randInt(seed: int, n: int): int {
func randInt (regs=10)
  // let next = (seed * 1664525 + 1013904223) % 2147483647
  Const        r2, 1664525
  Mul          r3, r0, r2
  Const        r4, 1013904223
  Add          r5, r3, r4
  Const        r6, 2147483647
  Mod          r7, r5, r6
  Move         r8, r7
  // return next % n
  Mod          r9, r8, r1
  Return       r9

  // fun slur(p: string, d: int): string {
func slur (regs=58)
  // if len(p) <= 2 { return p }
  Len          r2, r0
  Const        r3, 2
  LessEqInt    r4, r2, r3
  JumpIfFalse  r4, L0
  Return       r0
L0:
  // var a: list<string> = []
  Const        r5, []
  Move         r6, r5
  // var i = 1
  Const        r7, 1
  Move         r8, r7
L2:
  // while i < len(p) - 1 {
  Len          r9, r0
  Const        r7, 1
  SubInt       r10, r9, r7
  LessInt      r11, r8, r10
  JumpIfFalse  r11, L1
  // a = append(a, substring(p, i, i + 1))
  Const        r7, 1
  AddInt       r12, r8, r7
  Slice        r13, r0, r8, r12
  Append       r14, r6, r13
  Move         r6, r14
  // i = i + 1
  Const        r7, 1
  AddInt       r15, r8, r7
  Move         r8, r15
  // while i < len(p) - 1 {
  Jump         L2
L1:
  // var idx = len(a) - 1
  Len          r16, r6
  Const        r7, 1
  SubInt       r17, r16, r7
  Move         r18, r17
  // var seed = d
  Move         r19, r1
L5:
  // while idx >= 1 {
  Const        r7, 1
  LessEqInt    r20, r7, r18
  JumpIfFalse  r20, L3
  // seed = (seed * 1664525 + 1013904223) % 2147483647
  Const        r21, 1664525
  Mul          r22, r19, r21
  Const        r23, 1013904223
  Add          r24, r22, r23
  Const        r25, 2147483647
  Mod          r26, r24, r25
  Move         r19, r26
  // if seed % 100 >= d {
  Const        r27, 100
  Mod          r28, r19, r27
  LessEq       r29, r1, r28
  JumpIfFalse  r29, L4
  // let j = seed % (idx + 1)
  Const        r7, 1
  AddInt       r30, r18, r7
  Mod          r31, r19, r30
  Move         r32, r31
  // let tmp = a[idx]
  Index        r33, r6, r18
  Move         r34, r33
  // a[idx] = a[j]
  Index        r35, r6, r32
  SetIndex     r6, r18, r35
  // a[j] = tmp
  SetIndex     r6, r32, r34
L4:
  // idx = idx - 1
  Const        r7, 1
  SubInt       r36, r18, r7
  Move         r18, r36
  // while idx >= 1 {
  Jump         L5
L3:
  // var s = substring(p, 0, 1)
  Const        r37, 0
  Const        r7, 1
  Slice        r38, r0, r37, r7
  Move         r39, r38
  // var k = 0
  Const        r37, 0
  Move         r40, r37
L7:
  // while k < len(a) {
  Len          r41, r6
  LessInt      r42, r40, r41
  JumpIfFalse  r42, L6
  // s = s + a[k]
  Index        r43, r6, r40
  Add          r44, r39, r43
  Move         r39, r44
  // k = k + 1
  Const        r7, 1
  AddInt       r45, r40, r7
  Move         r40, r45
  // while k < len(a) {
  Jump         L7
L6:
  // s = s + substring(p, len(p) - 1, len(p))
  Len          r46, r0
  Const        r7, 1
  SubInt       r47, r46, r7
  Len          r48, r0
  Slice        r49, r0, r47, r48
  Add          r50, r39, r49
  Move         r39, r50
  // let w = fields(s)
  Move         r51, r39
  Call         r52, fields, r51
  Move         r53, r52
  // return join(w, " ")
  Move         r54, r53
  Const        r56, " "
  Move         r55, r56
  Call2        r57, join, r54, r55
  Return       r57

  // fun main() {
func main (regs=82)
  // var i = 99
  Const        r0, 99
  Move         r1, r0
L1:
  // while i > 0 {
  Const        r2, 0
  LessInt      r3, r2, r1
  JumpIfFalse  r3, L0
  // print(slur(numberName(i), i) + " " +
  Move         r6, r1
  Call         r7, numberName, r6
  Move         r4, r7
  Move         r5, r1
  Call2        r8, slur, r4, r5
  Const        r9, " "
  Add          r10, r8, r9
  // pluralizeFirst(slur("bottle of", i), i) + " " +
  Const        r15, "bottle of"
  Move         r13, r15
  Move         r14, r1
  Call2        r16, slur, r13, r14
  Move         r11, r16
  Move         r12, r1
  Call2        r17, pluralizeFirst, r11, r12
  // print(slur(numberName(i), i) + " " +
  Add          r18, r10, r17
  // pluralizeFirst(slur("bottle of", i), i) + " " +
  Const        r9, " "
  Add          r19, r18, r9
  // slur("beer on the wall", i))
  Const        r22, "beer on the wall"
  Move         r20, r22
  Move         r21, r1
  Call2        r23, slur, r20, r21
  // pluralizeFirst(slur("bottle of", i), i) + " " +
  Add          r24, r19, r23
  // print(slur(numberName(i), i) + " " +
  Print        r24
  // print(slur(numberName(i), i) + " " +
  Move         r27, r1
  Call         r28, numberName, r27
  Move         r25, r28
  Move         r26, r1
  Call2        r29, slur, r25, r26
  Const        r9, " "
  Add          r30, r29, r9
  // pluralizeFirst(slur("bottle of", i), i) + " " +
  Const        r15, "bottle of"
  Move         r33, r15
  Move         r34, r1
  Call2        r35, slur, r33, r34
  Move         r31, r35
  Move         r32, r1
  Call2        r36, pluralizeFirst, r31, r32
  // print(slur(numberName(i), i) + " " +
  Add          r37, r30, r36
  // pluralizeFirst(slur("bottle of", i), i) + " " +
  Const        r9, " "
  Add          r38, r37, r9
  // slur("beer", i))
  Const        r41, "beer"
  Move         r39, r41
  Move         r40, r1
  Call2        r42, slur, r39, r40
  // pluralizeFirst(slur("bottle of", i), i) + " " +
  Add          r43, r38, r42
  // print(slur(numberName(i), i) + " " +
  Print        r43
  // print(slur("take one", i) + " " +
  Const        r46, "take one"
  Move         r44, r46
  Move         r45, r1
  Call2        r47, slur, r44, r45
  Const        r9, " "
  Add          r48, r47, r9
  // slur("down", i) + " " +
  Const        r51, "down"
  Move         r49, r51
  Move         r50, r1
  Call2        r52, slur, r49, r50
  // print(slur("take one", i) + " " +
  Add          r53, r48, r52
  // slur("down", i) + " " +
  Const        r9, " "
  Add          r54, r53, r9
  // slur("pass it around", i))
  Const        r57, "pass it around"
  Move         r55, r57
  Move         r56, r1
  Call2        r58, slur, r55, r56
  // slur("down", i) + " " +
  Add          r59, r54, r58
  // print(slur("take one", i) + " " +
  Print        r59
  // print(slur(numberName(i - 1), i) + " " +
  Const        r63, 1
  SubInt       r64, r1, r63
  Move         r62, r64
  Call         r65, numberName, r62
  Move         r60, r65
  Move         r61, r1
  Call2        r66, slur, r60, r61
  Const        r9, " "
  Add          r67, r66, r9
  // pluralizeFirst(slur("bottle of", i), i - 1) + " " +
  Const        r15, "bottle of"
  Move         r70, r15
  Move         r71, r1
  Call2        r72, slur, r70, r71
  Move         r68, r72
  Const        r63, 1
  SubInt       r73, r1, r63
  Move         r69, r73
  Call2        r74, pluralizeFirst, r68, r69
  // print(slur(numberName(i - 1), i) + " " +
  Add          r75, r67, r74
  // pluralizeFirst(slur("bottle of", i), i - 1) + " " +
  Const        r9, " "
  Add          r76, r75, r9
  // slur("beer on the wall", i))
  Const        r22, "beer on the wall"
  Move         r77, r22
  Move         r78, r1
  Call2        r79, slur, r77, r78
  // pluralizeFirst(slur("bottle of", i), i - 1) + " " +
  Add          r80, r76, r79
  // print(slur(numberName(i - 1), i) + " " +
  Print        r80
  // i = i - 1
  Const        r63, 1
  SubInt       r81, r1, r63
  Move         r1, r81
  // while i > 0 {
  Jump         L1
L0:
  Return       r0
