func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun damm(s: string): bool {
func damm (regs=23)
  // let tbl = [
  Const        r1, [[0, 3, 1, 7, 5, 9, 8, 6, 4, 2], [7, 0, 9, 2, 1, 5, 4, 8, 6, 3], [4, 2, 0, 6, 8, 7, 1, 3, 5, 9], [1, 7, 5, 0, 9, 8, 3, 4, 2, 6], [6, 1, 2, 3, 0, 4, 5, 9, 7, 8], [3, 6, 7, 4, 2, 0, 9, 5, 8, 1], [5, 8, 6, 9, 7, 2, 0, 1, 3, 4], [8, 9, 4, 5, 3, 6, 2, 0, 1, 7], [9, 4, 3, 8, 6, 1, 7, 2, 0, 5], [2, 5, 8, 1, 4, 3, 6, 7, 9, 0]]
  Move         r2, r1
  // let digits = {
  Const        r3, {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
  Move         r4, r3
  // var interim: int = 0
  Const        r5, 0
  Move         r6, r5
  // var i: int = 0
  Const        r5, 0
  Move         r7, r5
L1:
  // while i < len(s) {
  Len          r8, r0
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // let digit = digits[s[i:i+1]] as int
  Move         r10, r7
  Const        r12, 1
  AddInt       r13, r7, r12
  Move         r11, r13
  Slice        r14, r0, r10, r11
  Index        r15, r4, r14
  Cast         r16, r15, int
  Move         r17, r16
  // let row = tbl[interim]
  Index        r18, r2, r6
  Move         r19, r18
  // interim = row[digit]
  Index        r20, r19, r17
  Move         r6, r20
  // i = i + 1
  Const        r12, 1
  AddInt       r21, r7, r12
  Move         r7, r21
  // while i < len(s) {
  Jump         L1
L0:
  // return interim == 0
  Const        r5, 0
  Equal        r22, r6, r5
  Return       r22

  // fun padLeft(s: string, width: int): string {
func padLeft (regs=6)
L1:
  // while len(s) < width {
  Len          r2, r0
  Less         r3, r2, r1
  JumpIfFalse  r3, L0
  // s = " " + s
  Const        r4, " "
  Add          r5, r4, r0
  Move         r0, r5
  // while len(s) < width {
  Jump         L1
L0:
  // return s
  Return       r0

  // fun main() {
func main (regs=19)
  // for s in ["5724", "5727", "112946", "112949"] {
  Const        r0, ["5724", "5727", "112946", "112949"]
  IterPrep     r1, r0
  Len          r2, r1
  Const        r3, 0
L1:
  LessInt      r4, r3, r2
  JumpIfFalse  r4, L0
  Index        r5, r1, r3
  Move         r6, r5
  // print(padLeft(s, 6) + "  " + str(damm(s)))
  Move         r7, r6
  Const        r9, 6
  Move         r8, r9
  Call2        r10, padLeft, r7, r8
  Const        r11, "  "
  Add          r12, r10, r11
  Move         r13, r6
  Call         r14, damm, r13
  Str          r15, r14
  Add          r16, r12, r15
  Print        r16
  // for s in ["5724", "5727", "112946", "112949"] {
  Const        r17, 1
  AddInt       r18, r3, r17
  Move         r3, r18
  Jump         L1
L0:
  Return       r0
