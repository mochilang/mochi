func main (regs=42)
  // print("rows:")
  Const        r1, "rows:"
  Print        r1
  // var x = 1
  Const        r2, 1
  Move         r0, r2
  SetGlobal    0,0,0,0
L3:
  // while x < 11 {
  Const        r3, 11
  LessInt      r4, r0, r3
  JumpIfFalse  r4, L0
  // let r = row(x)
  Move         r5, r0
  Call         r6, row, r5
  Move         r7, r6
  // var line = ""
  Const        r8, ""
  Move         r9, r8
  // var i = 0
  Const        r10, 0
  Move         r11, r10
L2:
  // while i < count(r) {
  Count        r12, r7
  LessInt      r13, r11, r12
  JumpIfFalse  r13, L1
  // line = line + " " + r[i] + " "
  Const        r14, " "
  Add          r15, r9, r14
  Index        r16, r7, r11
  Add          r17, r15, r16
  Const        r14, " "
  Add          r18, r17, r14
  Move         r9, r18
  // i = i + 1
  Const        r2, 1
  AddInt       r19, r11, r2
  Move         r11, r19
  // while i < count(r) {
  Jump         L2
L1:
  // print(line)
  Print        r9
  // x = x + 1
  Const        r2, 1
  AddInt       r20, r0, r2
  Move         r0, r20
  SetGlobal    0,0,0,0
  // while x < 11 {
  Jump         L3
L0:
  // print("")
  Const        r8, ""
  Print        r8
  // print("sums:")
  Const        r21, "sums:"
  Print        r21
  // for num in [23, 123, 1234] {
  Const        r22, [23, 123, 1234]
  IterPrep     r23, r22
  Len          r24, r23
  Const        r25, 0
L5:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L4
  Index        r27, r23, r25
  Move         r28, r27
  // let r = cumu(num)
  Move         r29, r28
  Call         r30, cumu, r29
  Move         r31, r30
  // print(str(num) + " " + bigToString(r[count(r)-1]))
  Str          r32, r28
  Const        r14, " "
  Add          r33, r32, r14
  Count        r35, r31
  Const        r2, 1
  SubInt       r36, r35, r2
  Index        r37, r31, r36
  Move         r34, r37
  Call         r38, bigToString, r34
  Add          r39, r33, r38
  Print        r39
  // for num in [23, 123, 1234] {
  Const        r40, 1
  AddInt       r41, r25, r40
  Move         r25, r41
  Jump         L5
L4:
  Return       r0

  // fun bigTrim(a: list<int>): list<int> {
func bigTrim (regs=16)
  // var n = count(a)
  Count        r2, r1
  Move         r3, r2
L2:
  // while n > 1 && a[n-1] == 0 {
  Const        r4, 1
  LessInt      r5, r4, r3
  Const        r4, 1
  SubInt       r6, r3, r4
  Index        r7, r1, r6
  Const        r8, 0
  Equal        r9, r7, r8
  Move         r10, r5
  JumpIfFalse  r10, L0
  Move         r10, r9
L0:
  JumpIfFalse  r10, L1
  // a = a[0:n-1]
  Const        r8, 0
  Move         r11, r8
  Const        r4, 1
  SubInt       r13, r3, r4
  Move         r12, r13
  Slice        r14, r1, r11, r12
  Move         r1, r14
  // n = n - 1
  Const        r4, 1
  SubInt       r15, r3, r4
  Move         r3, r15
  // while n > 1 && a[n-1] == 0 {
  Jump         L2
L1:
  // return a
  Return       r1

  // fun bigFromInt(x: int): list<int> {
func bigFromInt (regs=13)
  // if x == 0 { return [0] }
  Const        r2, 0
  Equal        r3, r1, r2
  JumpIfFalse  r3, L0
  Const        r4, [0]
  Return       r4
L0:
  // var digits: list<int> = []
  Const        r5, []
  Move         r6, r5
  // var n = x
  Move         r7, r1
L2:
  // while n > 0 {
  Const        r2, 0
  Less         r8, r2, r7
  JumpIfFalse  r8, L1
  // digits = append(digits, n % 10)
  Const        r9, 10
  Mod          r10, r7, r9
  Append       r11, r6, r10
  Move         r6, r11
  // n = n / 10
  Const        r9, 10
  Div          r12, r7, r9
  Move         r7, r12
  // while n > 0 {
  Jump         L2
L1:
  // return digits
  Return       r6

  // fun bigAdd(a: list<int>, b: list<int>): list<int> {
func bigAdd (regs=33)
  // var res: list<int> = []
  Const        r3, []
  Move         r4, r3
  // var carry = 0
  Const        r5, 0
  Move         r6, r5
  // var i = 0
  Const        r5, 0
  Move         r7, r5
L4:
  // while i < count(a) || i < count(b) || carry > 0 {
  Count        r8, r1
  LessInt      r9, r7, r8
  Count        r10, r2
  LessInt      r11, r7, r10
  Const        r5, 0
  LessInt      r12, r5, r6
  Move         r13, r9
  JumpIfTrue   r13, L0
  Move         r13, r11
  JumpIfTrue   r13, L0
  Move         r13, r12
L0:
  JumpIfFalse  r13, L1
  // var av = 0
  Const        r5, 0
  Move         r14, r5
  // if i < count(a) { av = a[i] }
  Count        r15, r1
  LessInt      r16, r7, r15
  JumpIfFalse  r16, L2
  Index        r17, r1, r7
  Move         r14, r17
L2:
  // var bv = 0
  Const        r5, 0
  Move         r18, r5
  // if i < count(b) { bv = b[i] }
  Count        r19, r2
  LessInt      r20, r7, r19
  JumpIfFalse  r20, L3
  Index        r21, r2, r7
  Move         r18, r21
L3:
  // var s = av + bv + carry
  Add          r22, r14, r18
  Add          r23, r22, r6
  Move         r24, r23
  // res = append(res, s % 10)
  Const        r25, 10
  Mod          r26, r24, r25
  Append       r27, r4, r26
  Move         r4, r27
  // carry = s / 10
  Const        r25, 10
  Div          r28, r24, r25
  Move         r6, r28
  // i = i + 1
  Const        r29, 1
  AddInt       r30, r7, r29
  Move         r7, r30
  // while i < count(a) || i < count(b) || carry > 0 {
  Jump         L4
L1:
  // return bigTrim(res)
  Move         r31, r4
  Call         r32, bigTrim, r31
  Return       r32

  // fun bigSub(a: list<int>, b: list<int>): list<int> {
func bigSub (regs=27)
  // var res: list<int> = []
  Const        r3, []
  Move         r4, r3
  // var borrow = 0
  Const        r5, 0
  Move         r6, r5
  // var i = 0
  Const        r5, 0
  Move         r7, r5
L4:
  // while i < count(a) {
  Count        r8, r1
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // var av = a[i]
  Index        r10, r1, r7
  Move         r11, r10
  // var bv = 0
  Const        r5, 0
  Move         r12, r5
  // if i < count(b) { bv = b[i] }
  Count        r13, r2
  LessInt      r14, r7, r13
  JumpIfFalse  r14, L1
  Index        r15, r2, r7
  Move         r12, r15
L1:
  // var diff = av - bv - borrow
  Sub          r16, r11, r12
  Sub          r17, r16, r6
  Move         r18, r17
  // if diff < 0 {
  Const        r5, 0
  Less         r19, r18, r5
  JumpIfFalse  r19, L2
  // diff = diff + 10
  Const        r20, 10
  Add          r21, r18, r20
  Move         r18, r21
  // borrow = 1
  Const        r22, 1
  Move         r6, r22
  // if diff < 0 {
  Jump         L3
L2:
  // borrow = 0
  Const        r5, 0
  Move         r6, r5
L3:
  // res = append(res, diff)
  Append       r23, r4, r18
  Move         r4, r23
  // i = i + 1
  Const        r22, 1
  AddInt       r24, r7, r22
  Move         r7, r24
  // while i < count(a) {
  Jump         L4
L0:
  // return bigTrim(res)
  Move         r25, r4
  Call         r26, bigTrim, r25
  Return       r26

  // fun bigToString(a: list<int>): string {
func bigToString (regs=14)
  // var s = ""
  Const        r2, ""
  Move         r3, r2
  // var i = count(a) - 1
  Count        r4, r1
  Const        r5, 1
  SubInt       r6, r4, r5
  Move         r7, r6
L1:
  // while i >= 0 {
  Const        r8, 0
  LessEqInt    r9, r8, r7
  JumpIfFalse  r9, L0
  // s = s + str(a[i])
  Index        r10, r1, r7
  Str          r11, r10
  Add          r12, r3, r11
  Move         r3, r12
  // i = i - 1
  Const        r5, 1
  SubInt       r13, r7, r5
  Move         r7, r13
  // while i >= 0 {
  Jump         L1
L0:
  // return s
  Return       r3

  // fun minInt(a: int, b: int): int {
func minInt (regs=4)
  // if a < b { return a } else { return b }
  Less         r3, r1, r2
  JumpIfFalse  r3, L0
  Return       r1
L0:
  Return       r2

  // fun cumu(n: int): list<list<int>> {
func cumu (regs=38)
  // var cache: list<list<list<int>>> = [[bigFromInt(1)]]
  Const        r5, 1
  Move         r4, r5
  Call         r6, bigFromInt, r4
  Move         r3, r6
  MakeList     r7, 1, r3
  Move         r2, r7
  MakeList     r8, 1, r2
  Move         r9, r8
  // var y = 1
  Const        r5, 1
  Move         r10, r5
L3:
  // while y <= n {
  LessEq       r11, r10, r1
  JumpIfFalse  r11, L0
  // var row: list<list<int>> = [bigFromInt(0)]
  Const        r14, 0
  Move         r13, r14
  Call         r15, bigFromInt, r13
  Move         r12, r15
  MakeList     r16, 1, r12
  Move         r17, r16
  // var x = 1
  Const        r5, 1
  Move         r0, r5
  SetGlobal    0,0,0,0
L2:
  // while x <= y {
  LessEqInt    r18, r0, r10
  JumpIfFalse  r18, L1
  // let val = cache[y - x][minInt(x, y - x)]
  SubInt       r19, r10, r0
  Index        r20, r9, r19
  Move         r21, r0
  SubInt       r23, r10, r0
  Move         r22, r23
  Call2        r24, minInt, r21, r22
  Index        r25, r20, r24
  Move         r26, r25
  // row = append(row, bigAdd(row[count(row)-1], val))
  Count        r29, r17
  Const        r5, 1
  SubInt       r30, r29, r5
  Index        r31, r17, r30
  Move         r27, r31
  Move         r28, r26
  Call2        r32, bigAdd, r27, r28
  Append       r33, r17, r32
  Move         r17, r33
  // x = x + 1
  Const        r5, 1
  AddInt       r34, r0, r5
  Move         r0, r34
  SetGlobal    0,0,0,0
  // while x <= y {
  Jump         L2
L1:
  // cache = append(cache, row)
  Append       r35, r9, r17
  Move         r9, r35
  // y = y + 1
  Const        r5, 1
  AddInt       r36, r10, r5
  Move         r10, r36
  // while y <= n {
  Jump         L3
L0:
  // return cache[n]
  Index        r37, r9, r1
  Return       r37

  // fun row(n: int): list<string> {
func row (regs=22)
  // let e = cumu(n)
  Move         r2, r1
  Call         r3, cumu, r2
  Move         r4, r3
  // var out: list<string> = []
  Const        r5, []
  Move         r6, r5
  // var i = 0
  Const        r7, 0
  Move         r8, r7
L1:
  // while i < n {
  Less         r9, r8, r1
  JumpIfFalse  r9, L0
  // let diff = bigSub(e[i+1], e[i])
  Const        r12, 1
  AddInt       r13, r8, r12
  Index        r14, r4, r13
  Move         r10, r14
  Index        r15, r4, r8
  Move         r11, r15
  Call2        r16, bigSub, r10, r11
  Move         r17, r16
  // out = append(out, bigToString(diff))
  Move         r18, r17
  Call         r19, bigToString, r18
  Append       r20, r6, r19
  Move         r6, r20
  // i = i + 1
  Const        r12, 1
  AddInt       r21, r8, r12
  Move         r8, r21
  // while i < n {
  Jump         L1
L0:
  // return out
  Return       r6
