func main (regs=39)
  // var rows: list<list<string>> = [
  Const        r2, [["A", "B", "C"], ["1", "2", "3"], ["4", "5", "6"], ["7", "8", "9"]]
  Move         r0, r2
  SetGlobal    0,0,0,0
  // rows[0] = append(rows[0], "SUM")
  Const        r3, 0
  Index        r4, r0, r3
  Const        r5, "SUM"
  Append       r6, r4, r5
  Const        r3, 0
  SetIndex     r0, r3, r6
  SetGlobal    0,0,0,0
  // var i = 1
  Const        r7, 1
  Move         r1, r7
  SetGlobal    1,1,0,0
L3:
  // while i < len(rows) {
  Const        r8, 4
  LessInt      r9, r1, r8
  JumpIfFalse  r9, L0
  // var sum = 0
  Const        r3, 0
  Move         r10, r3
  // for s in rows[i] { sum = sum + parseIntStr(s) }
  Index        r11, r0, r1
  IterPrep     r12, r11
  Len          r13, r12
  Const        r14, 0
L2:
  LessInt      r15, r14, r13
  JumpIfFalse  r15, L1
  Index        r16, r12, r14
  Move         r17, r16
  Move         r18, r17
  Call         r19, parseIntStr, r18
  Add          r20, r10, r19
  Move         r10, r20
  Const        r21, 1
  AddInt       r22, r14, r21
  Move         r14, r22
  Jump         L2
L1:
  // rows[i] = append(rows[i], str(sum))
  Index        r23, r0, r1
  Str          r24, r10
  Append       r25, r23, r24
  SetIndex     r0, r1, r25
  SetGlobal    0,0,0,0
  // i = i + 1
  Const        r7, 1
  AddInt       r26, r1, r7
  Move         r1, r26
  SetGlobal    1,1,0,0
  // while i < len(rows) {
  Jump         L3
L0:
  // for r in rows { print(join(r, ",")) }
  IterPrep     r27, r0
  Len          r28, r27
  Const        r29, 0
L5:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L4
  Index        r31, r27, r29
  Move         r32, r31
  Move         r33, r32
  Const        r35, ","
  Move         r34, r35
  Call2        r36, join, r33, r34
  Print        r36
  Const        r37, 1
  AddInt       r38, r29, r37
  Move         r29, r38
  Jump         L5
L4:
  Return       r0

  // fun join(xs: list<string>, sep: string): string {
func join (regs=15)
  // var res = ""
  Const        r4, ""
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r1, r6
  SetGlobal    1,1,0,0
L2:
  // while i < len(xs) {
  Len          r7, r2
  LessInt      r8, r1, r7
  JumpIfFalse  r8, L0
  // if i > 0 { res = res + sep }
  Const        r6, 0
  LessInt      r9, r6, r1
  JumpIfFalse  r9, L1
  Add          r10, r5, r3
  Move         r5, r10
L1:
  // res = res + xs[i]
  Index        r11, r2, r1
  Add          r12, r5, r11
  Move         r5, r12
  // i = i + 1
  Const        r13, 1
  AddInt       r14, r1, r13
  Move         r1, r14
  SetGlobal    1,1,0,0
  // while i < len(xs) {
  Jump         L2
L0:
  // return res
  Return       r5

  // fun parseIntStr(str: string): int {
func parseIntStr (regs=31)
  // var i = 0
  Const        r3, 0
  Move         r1, r3
  SetGlobal    1,1,0,0
  // var neg = false
  Const        r4, false
  Move         r5, r4
  // if len(str) > 0 && str[0:1] == "-" {
  Len          r6, r2
  Const        r3, 0
  LessInt      r7, r3, r6
  Const        r3, 0
  Move         r8, r3
  Const        r10, 1
  Move         r9, r10
  Slice        r11, r2, r8, r9
  Const        r12, "-"
  Equal        r13, r11, r12
  Move         r14, r7
  JumpIfFalse  r14, L0
  Move         r14, r13
L0:
  JumpIfFalse  r14, L1
  // neg = true
  Const        r15, true
  Move         r5, r15
  // i = 1
  Const        r10, 1
  Move         r1, r10
  SetGlobal    1,1,0,0
L1:
  // var n = 0
  Const        r3, 0
  Move         r16, r3
  // let digits = {
  Const        r17, {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
  Move         r18, r17
L3:
  // while i < len(str) {
  Len          r19, r2
  LessInt      r20, r1, r19
  JumpIfFalse  r20, L2
  // n = n * 10 + digits[str[i:i+1]]
  Const        r21, 10
  MulInt       r22, r16, r21
  Move         r23, r1
  Const        r10, 1
  AddInt       r25, r1, r10
  Move         r24, r25
  Slice        r26, r2, r23, r24
  Index        r27, r18, r26
  Add          r28, r22, r27
  Move         r16, r28
  // i = i + 1
  Const        r10, 1
  AddInt       r29, r1, r10
  Move         r1, r29
  SetGlobal    1,1,0,0
  // while i < len(str) {
  Jump         L3
L2:
  // if neg { n = -n }
  JumpIfFalse  r5, L4
  Neg          r30, r16
  Move         r16, r30
L4:
  // return n
  Return       r16
