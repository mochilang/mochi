func main (regs=29)
  // let b2Seg = 20
  Const        r2, 20
  Move         r0, r2
  SetGlobal    0,0,0,0
  // var b = newBitmap(400, 300)
  Const        r5, 400
  Move         r3, r5
  Const        r6, 300
  Move         r4, r6
  Call2        r7, newBitmap, r3, r4
  Move         r1, r7
  SetGlobal    1,1,0,0
  // fillRgb(b, 14614575) // 0xdfffef
  Move         r8, r1
  Const        r10, 14614575
  Move         r9, r10
  Call2        r11, fillRgb, r8, r9
  // bezier2(b, 20, 150, 500, -100, 300, 280, pixelFromRgb(4165615))
  Move         r12, r1
  Const        r2, 20
  Move         r13, r2
  Const        r20, 150
  Move         r14, r20
  Const        r21, 500
  Move         r15, r21
  Const        r22, 100
  Const        r23, -100
  Move         r16, r23
  Const        r6, 300
  Move         r17, r6
  Const        r24, 280
  Move         r18, r24
  Const        r26, 4165615
  Move         r25, r26
  Call         r27, pixelFromRgb, r25
  Move         r19, r27
  Call         r28, bezier2, r12, r13, r14, r15, r16, r17, r18, r19
  Return       r0

  // fun pixelFromRgb(rgb: int): Pixel {
func pixelFromRgb (regs=24)
  // let r = ((rgb / 65536) % 256) as int
  Const        r3, 65536
  Div          r4, r2, r3
  Const        r5, 256
  Mod          r6, r4, r5
  Cast         r7, r6, int
  Move         r8, r7
  // let g = ((rgb / 256) % 256) as int
  Const        r5, 256
  Div          r9, r2, r5
  Const        r5, 256
  Mod          r10, r9, r5
  Cast         r11, r10, int
  Move         r12, r11
  // let b = (rgb % 256) as int
  Const        r5, 256
  Mod          r13, r2, r5
  Cast         r14, r13, int
  Move         r1, r14
  SetGlobal    1,1,0,0
  // return Pixel{ r: r, g: g, b: b }
  Const        r15, "__name"
  Const        r16, "Pixel"
  Const        r17, "r"
  Move         r18, r8
  Const        r19, "g"
  Move         r20, r12
  Const        r21, "b"
  Move         r22, r1
  MakeMap      r23, 4, r15
  Return       r23

  // fun newBitmap(cols: int, rows: int): map<string, any> {
func newBitmap (regs=36)
  // var d: list<list<Pixel>> = []
  Const        r4, []
  Move         r5, r4
  // var y = 0
  Const        r6, 0
  Move         r7, r6
L3:
  // while y < rows {
  Less         r8, r7, r3
  JumpIfFalse  r8, L0
  // var row: list<Pixel> = []
  Const        r4, []
  Move         r9, r4
  // var x = 0
  Const        r6, 0
  Move         r10, r6
L2:
  // while x < cols {
  Less         r11, r10, r2
  JumpIfFalse  r11, L1
  // row = append(row, Pixel{ r: 0, g: 0, b: 0 })
  Const        r6, 0
  Const        r6, 0
  Const        r6, 0
  Const        r12, "__name"
  Const        r13, "Pixel"
  Const        r14, "r"
  Move         r15, r6
  Const        r16, "g"
  Move         r17, r6
  Const        r18, "b"
  Move         r19, r6
  MakeMap      r20, 4, r12
  Append       r21, r9, r20
  Move         r9, r21
  // x = x + 1
  Const        r22, 1
  AddInt       r23, r10, r22
  Move         r10, r23
  // while x < cols {
  Jump         L2
L1:
  // d = append(d, row)
  Append       r24, r5, r9
  Move         r5, r24
  // y = y + 1
  Const        r22, 1
  AddInt       r25, r7, r22
  Move         r7, r25
  // while y < rows {
  Jump         L3
L0:
  // return {"cols": cols, "rows": rows, "data": d}
  Const        r26, "cols"
  Const        r27, "rows"
  Const        r28, "data"
  Move         r29, r26
  Move         r30, r2
  Move         r31, r27
  Move         r32, r3
  Move         r33, r28
  Move         r34, r5
  MakeMap      r35, 3, r29
  Return       r35

  // fun setPx(b: map<string, any>, x: int, y: int, p: Pixel) {
func setPx (regs=23)
  // let cols = b["cols"] as int
  Const        r6, "cols"
  Index        r7, r2, r6
  Cast         r8, r7, int
  Move         r9, r8
  // let rows = b["rows"] as int
  Const        r10, "rows"
  Index        r11, r2, r10
  Cast         r12, r11, int
  Move         r13, r12
  // if x >= 0 && x < cols && y >= 0 && y < rows {
  Const        r14, 0
  LessEq       r15, r14, r3
  Less         r16, r3, r9
  Const        r14, 0
  LessEq       r17, r14, r4
  Less         r18, r4, r13
  Move         r19, r15
  JumpIfFalse  r19, L0
  Move         r19, r16
  JumpIfFalse  r19, L0
  Move         r19, r17
  JumpIfFalse  r19, L0
  Move         r19, r18
L0:
  JumpIfFalse  r19, L1
  // b["data"][y][x] = p
  Const        r20, "data"
  Index        r21, r2, r20
  Index        r22, r21, r4
  SetIndex     r22, r3, r5
  SetGlobal    1,2,0,0
L1:
  Return       r0

  // fun fill(b: map<string, any>, p: Pixel) {
func fill (regs=23)
  // let cols = b["cols"] as int
  Const        r4, "cols"
  Index        r5, r2, r4
  Cast         r6, r5, int
  Move         r7, r6
  // let rows = b["rows"] as int
  Const        r8, "rows"
  Index        r9, r2, r8
  Cast         r10, r9, int
  Move         r11, r10
  // var y = 0
  Const        r12, 0
  Move         r13, r12
L3:
  // while y < rows {
  Less         r14, r13, r11
  JumpIfFalse  r14, L0
  // var x = 0
  Const        r12, 0
  Move         r15, r12
L2:
  // while x < cols {
  Less         r16, r15, r7
  JumpIfFalse  r16, L1
  // b["data"][y][x] = p
  Const        r17, "data"
  Index        r18, r2, r17
  Index        r19, r18, r13
  SetIndex     r19, r15, r3
  SetGlobal    1,2,0,0
  // x = x + 1
  Const        r20, 1
  AddInt       r21, r15, r20
  Move         r15, r21
  // while x < cols {
  Jump         L2
L1:
  // y = y + 1
  Const        r20, 1
  AddInt       r22, r13, r20
  Move         r13, r22
  // while y < rows {
  Jump         L3
L0:
  Return       r0

  // fun fillRgb(b: map<string, any>, rgb: int) { fill(b, pixelFromRgb(rgb)) }
func fillRgb (regs=9)
  // fun fillRgb(b: map<string, any>, rgb: int) { fill(b, pixelFromRgb(rgb)) }
  Move         r4, r2
  Move         r6, r3
  Call         r7, pixelFromRgb, r6
  Move         r5, r7
  Call2        r8, fill, r4, r5
  Return       r0

  // fun line(b: map<string, any>, x0: int, y0: int, x1: int, y1: int, p: Pixel) {
func line (regs=45)
  // var dx = x1 - x0
  Sub          r8, r5, r3
  Move         r9, r8
  // if dx < 0 { dx = -dx }
  Const        r10, 0
  Less         r11, r9, r10
  JumpIfFalse  r11, L0
  Neg          r12, r9
  Move         r9, r12
L0:
  // var dy = y1 - y0
  Sub          r13, r6, r4
  Move         r14, r13
  // if dy < 0 { dy = -dy }
  Const        r10, 0
  Less         r15, r14, r10
  JumpIfFalse  r15, L1
  Neg          r16, r14
  Move         r14, r16
L1:
  // var sx = -1
  Const        r17, 1
  NegInt       r18, r17
  Move         r19, r18
  // if x0 < x1 { sx = 1 }
  Less         r20, r3, r5
  JumpIfFalse  r20, L2
  Const        r17, 1
  Move         r19, r17
L2:
  // var sy = -1
  Const        r17, 1
  NegInt       r21, r17
  Move         r22, r21
  // if y0 < y1 { sy = 1 }
  Less         r23, r4, r6
  JumpIfFalse  r23, L3
  Const        r17, 1
  Move         r22, r17
L3:
  // var err = dx - dy
  Sub          r24, r9, r14
  Move         r25, r24
L8:
  // while true {
  Const        r26, true
  // setPx(b, x0, y0, p)
  Move         r27, r2
  Move         r28, r3
  Move         r29, r4
  Move         r30, r7
  Call         r31, setPx, r27, r28, r29, r30
  // if x0 == x1 && y0 == y1 { break }
  Equal        r32, r3, r5
  Equal        r33, r4, r6
  Move         r34, r32
  JumpIfFalse  r34, L4
  Move         r34, r33
L4:
  JumpIfFalse  r34, L5
  Jump         L6
L5:
  // let e2 = 2 * err
  Const        r35, 2
  Mul          r36, r35, r25
  Move         r37, r36
  // if e2 > (0 - dy) {
  Const        r10, 0
  Sub          r38, r10, r14
  Less         r39, r38, r37
  JumpIfFalse  r39, L7
  // err = err - dy
  Sub          r40, r25, r14
  Move         r25, r40
  // x0 = x0 + sx
  Add          r41, r3, r19
  Move         r3, r41
L7:
  // if e2 < dx {
  Less         r42, r37, r9
  JumpIfFalse  r42, L8
  // err = err + dx
  Add          r43, r25, r9
  Move         r25, r43
  // y0 = y0 + sy
  Add          r44, r4, r22
  Move         r4, r44
  // while true {
  Jump         L8
L6:
  Return       r0

  // fun bezier2(b: map<string, any>,
func bezier2 (regs=78)
  // var px: list<int> = []
  Const        r10, []
  Move         r11, r10
  // var py: list<int> = []
  Const        r10, []
  Move         r12, r10
  // var i = 0
  Const        r13, 0
  Move         r14, r13
L1:
  // while i <= b2Seg {
  LessEq       r15, r14, r0
  JumpIfFalse  r15, L0
  // px = append(px, 0)
  Const        r13, 0
  Append       r16, r11, r13
  Move         r11, r16
  // py = append(py, 0)
  Const        r13, 0
  Append       r17, r12, r13
  Move         r12, r17
  // i = i + 1
  Const        r18, 1
  AddInt       r19, r14, r18
  Move         r14, r19
  // while i <= b2Seg {
  Jump         L1
L0:
  // let fx1 = x1 as float
  Cast         r20, r3, float
  Move         r21, r20
  // let fy1 = y1 as float
  Cast         r22, r4, float
  Move         r23, r22
  // let fx2 = x2 as float
  Cast         r24, r5, float
  Move         r25, r24
  // let fy2 = y2 as float
  Cast         r26, r6, float
  Move         r27, r26
  // let fx3 = x3 as float
  Cast         r28, r7, float
  Move         r29, r28
  // let fy3 = y3 as float
  Cast         r30, r8, float
  Move         r31, r30
  // i = 0
  Const        r13, 0
  Move         r14, r13
L3:
  // while i <= b2Seg {
  LessEq       r32, r14, r0
  JumpIfFalse  r32, L2
  // let c = (i as float) / (b2Seg as float)
  Cast         r33, r14, float
  Cast         r34, r0, float
  Div          r35, r33, r34
  Move         r36, r35
  // var a = 1.0 - c
  Const        r37, 1.0
  SubFloat     r38, r37, r36
  Move         r39, r38
  // var a2 = a * a
  MulFloat     r40, r39, r39
  Move         r41, r40
  // var b2 = 2.0 * c * a
  Const        r42, 2.0
  MulFloat     r43, r42, r36
  MulFloat     r44, r43, r39
  Move         r45, r44
  // var c2 = c * c
  Mul          r46, r36, r36
  Move         r47, r46
  // px[i] = (a2*fx1 + b2*fx2 + c2*fx3) as int
  MulFloat     r48, r41, r21
  MulFloat     r49, r45, r25
  Mul          r50, r47, r29
  AddFloat     r51, r48, r49
  AddFloat     r52, r51, r50
  Cast         r53, r52, int
  SetIndex     r11, r14, r53
  // py[i] = (a2*fy1 + b2*fy2 + c2*fy3) as int
  MulFloat     r54, r41, r23
  MulFloat     r55, r45, r27
  Mul          r56, r47, r31
  AddFloat     r57, r54, r55
  AddFloat     r58, r57, r56
  Cast         r59, r58, int
  SetIndex     r12, r14, r59
  // i = i + 1
  Const        r18, 1
  AddInt       r60, r14, r18
  Move         r14, r60
  // while i <= b2Seg {
  Jump         L3
L2:
  // var x0 = px[0]
  Const        r13, 0
  Index        r61, r11, r13
  Move         r62, r61
  // var y0 = py[0]
  Const        r13, 0
  Index        r63, r12, r13
  Move         r64, r63
  // i = 1
  Const        r18, 1
  Move         r14, r18
L5:
  // while i <= b2Seg {
  LessEq       r65, r14, r0
  JumpIfFalse  r65, L4
  // let x = px[i]
  Index        r66, r11, r14
  Move         r67, r66
  // let y = py[i]
  Index        r68, r12, r14
  Move         r69, r68
  // line(b, x0, y0, x, y, p)
  Move         r70, r2
  Move         r71, r62
  Move         r72, r64
  Move         r73, r67
  Move         r74, r69
  Move         r75, r9
  Call         r76, line, r70, r71, r72, r73, r74, r75
  // x0 = x
  Move         r62, r67
  // y0 = y
  Move         r64, r69
  // i = i + 1
  Const        r18, 1
  AddInt       r77, r14, r18
  Move         r14, r77
  // while i <= b2Seg {
  Jump         L5
L4:
  Return       r0
