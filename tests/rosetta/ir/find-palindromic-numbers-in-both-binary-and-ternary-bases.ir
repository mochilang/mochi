func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun toBase(n: int, b: int): string {
func toBase (regs=14)
  // if n == 0 { return "0" }
  Const        r2, 0
  Equal        r3, r0, r2
  JumpIfFalse  r3, L0
  Const        r4, "0"
  Return       r4
L0:
  // var s = ""
  Const        r5, ""
  Move         r6, r5
  // var x = n
  Move         r7, r0
L2:
  // while x > 0 {
  Const        r2, 0
  Less         r8, r2, r7
  JumpIfFalse  r8, L1
  // s = str(x % b) + s
  Mod          r9, r7, r1
  Str          r10, r9
  Add          r11, r10, r6
  Move         r6, r11
  // x = (x / b) as int
  Div          r12, r7, r1
  Cast         r13, r12, int
  Move         r7, r13
  // while x > 0 {
  Jump         L2
L1:
  // return s
  Return       r6

  // fun reverseStr(s: string): string {
func reverseStr (regs=15)
  // var out = ""
  Const        r1, ""
  Move         r2, r1
  // var i = len(s) - 1
  Len          r3, r0
  Const        r4, 1
  SubInt       r5, r3, r4
  Move         r6, r5
L1:
  // while i >= 0 {
  Const        r7, 0
  LessEqInt    r8, r7, r6
  JumpIfFalse  r8, L0
  // out = out + s[i:i+1]
  Move         r9, r6
  Const        r4, 1
  AddInt       r11, r6, r4
  Move         r10, r11
  Slice        r12, r0, r9, r10
  Add          r13, r2, r12
  Move         r2, r13
  // i = i - 1
  Const        r4, 1
  SubInt       r14, r6, r4
  Move         r6, r14
  // while i >= 0 {
  Jump         L1
L0:
  // return out
  Return       r2

  // fun isPal(s: string): bool { return s == reverseStr(s) }
func isPal (regs=4)
  // fun isPal(s: string): bool { return s == reverseStr(s) }
  Move         r1, r0
  Call         r2, reverseStr, r1
  Equal        r3, r0, r2
  Return       r3

  // fun main() {
func main (regs=25)
  // print("Numbers palindromic in both binary and ternary :\n")
  Const        r0, "Numbers palindromic in both binary and ternary :\n"
  Print        r0
  // var count = 0
  Const        r1, 0
  Move         r2, r1
  // var n = 0
  Const        r1, 0
  Move         r3, r1
L3:
  // while count < 4 {
  Const        r4, 4
  LessInt      r5, r2, r4
  JumpIfFalse  r5, L0
  // let b2 = toBase(n,2)
  Move         r6, r3
  Const        r8, 2
  Move         r7, r8
  Call2        r9, toBase, r6, r7
  Move         r10, r9
  // let b3 = toBase(n,3)
  Move         r11, r3
  Const        r13, 3
  Move         r12, r13
  Call2        r14, toBase, r11, r12
  Move         r15, r14
  // if isPal(b2) && isPal(b3) {
  Move         r16, r10
  Call         r17, isPal, r16
  Move         r18, r17
  JumpIfFalse  r18, L1
  Move         r19, r15
  Call         r20, isPal, r19
  Move         r18, r20
L1:
  JumpIfFalse  r18, L2
  // print(str(n))
  Str          r21, r3
  Print        r21
  // count = count + 1
  Const        r22, 1
  AddInt       r23, r2, r22
  Move         r2, r23
L2:
  // n = n + 1
  Const        r22, 1
  AddInt       r24, r3, r22
  Move         r3, r24
  // while count < 4 {
  Jump         L3
L0:
  Return       r0
