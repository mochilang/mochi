func __main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun toBase(n: int, b: int): string {
func toBase (regs=19)
  // if n == 0 { return "0" }
  Const        r2, 0
  Equal        r3, r0, r2
  JumpIfFalse  r3, L0
  Const        r4, "0"
  Return       r4
L0:
  // var s = ""
  Const        r5, ""
  Move         r6, r5
  // var x = n
  Move         r7, r0
L2:
  // while x > 0 {
  Const        r2, 0
  Less         r8, r2, r7
  JumpIfFalse  r8, L1
  // s = str(x % b) + s
  Mod          r9, r7, r1
  Str          r10, r9
  Add          r11, r10, r6
  Move         r6, r11
  // x = (x / b) as int
  Div          r12, r7, r1
  Cast         r13, r12, int
  Move         r7, r13
  // while x > 0 {
  Jump         L2
L1:
  // return s
  Return       r6

  // fun parseIntBase(s: string, b: int): int {
func parseIntBase (regs=12)
  // var n = 0
  Const        r2, 0
  Move         r3, r2
  // var i = 0
  Const        r2, 0
  Move         r4, r2
L1:
  // while i < len(s) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // n = n * b + parseIntStr(s[i:i+1])
  Mul          r7, r3, r1
  Add          r9, r7, r8
  Move         r3, r9
  // i = i + 1
  Const        r10, 1
  AddInt       r11, r4, r10
  Move         r4, r11
  // while i < len(s) {
  Jump         L1
L0:
  // return n
  Return       r3

  // fun reverseStr(s: string): string {
func reverseStr (regs=15)
  // var out = ""
  Const        r1, ""
  Move         r2, r1
  // var i = len(s) - 1
  Len          r3, r0
  Const        r4, 1
  SubInt       r5, r3, r4
  Move         r6, r5
L1:
  // while i >= 0 {
  Const        r7, 0
  LessEqInt    r8, r7, r6
  JumpIfFalse  r8, L0
  // out = out + s[i:i+1]
  Move         r9, r6
  Const        r4, 1
  AddInt       r11, r6, r4
  Move         r10, r11
  Slice        r12, r0, r9, r10
  Add          r13, r2, r12
  Move         r2, r13
  // i = i - 1
  Const        r4, 1
  SubInt       r14, r6, r4
  Move         r6, r14
  // while i >= 0 {
  Jump         L1
L0:
  // return out
  Return       r2

  // fun isPalindrome(s: string): bool { return s == reverseStr(s) }
func isPalindrome (regs=4)
  // fun isPalindrome(s: string): bool { return s == reverseStr(s) }
  Move         r1, r0
  Call         r2, reverseStr, r1
  Equal        r3, r0, r2
  Return       r3

  // fun isPalindromeBin(n: int): bool {
func isPalindromeBin (regs=8)
  // let b = toBase(n, 2)
  Move         r1, r0
  Const        r3, 2
  Move         r2, r3
  Call2        r4, toBase, r1, r2
  Move         r5, r4
  // return isPalindrome(b)
  Move         r6, r5
  Call         r7, isPalindrome, r6
  Return       r7

  // fun myMin(a: int, b: int): int { if a < b { return a } return b }
func myMin (regs=3)
  // fun myMin(a: int, b: int): int { if a < b { return a } return b }
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Return       r0
L0:
  Return       r1

  // fun myMax(a: int, b: int): int { if a > b { return a } return b }
func myMax (regs=3)
  // fun myMax(a: int, b: int): int { if a > b { return a } return b }
  Less         r2, r1, r0
  JumpIfFalse  r2, L0
  Return       r0
L0:
  Return       r1

  // fun reverse3(n: int): int {
func reverse3 (regs=11)
  // var x = 0
  Const        r1, 0
  Move         r2, r1
  // var y = n
  Move         r3, r0
L1:
  // while y != 0 {
  Const        r1, 0
  NotEqual     r4, r3, r1
  JumpIfFalse  r4, L0
  // x = x * 3 + (y % 3)
  Const        r5, 3
  MulInt       r6, r2, r5
  Const        r5, 3
  Mod          r7, r3, r5
  Add          r8, r6, r7
  Move         r2, r8
  // y = (y / 3) as int
  Const        r5, 3
  Div          r9, r3, r5
  Cast         r10, r9, int
  Move         r3, r10
  // while y != 0 {
  Jump         L1
L0:
  // return x
  Return       r2

  // fun show(n: int) {
func show (regs=17)
  // print("Decimal : " + str(n))
  Const        r1, "Decimal : "
  Str          r2, r0
  Add          r3, r1, r2
  Print        r3
  // print("Binary  : " + toBase(n,2))
  Const        r4, "Binary  : "
  Move         r5, r0
  Const        r7, 2
  Move         r6, r7
  Call2        r8, toBase, r5, r6
  Add          r9, r4, r8
  Print        r9
  // print("Ternary : " + toBase(n,3))
  Const        r10, "Ternary : "
  Move         r11, r0
  Const        r13, 3
  Move         r12, r13
  Call2        r14, toBase, r11, r12
  Add          r15, r10, r14
  Print        r15
  // print("")
  Const        r16, ""
  Print        r16
  Return       r0

  // fun main() {
func main (regs=62)
  // print("The first 6 numbers which are palindromic in both binary and ternary are :\n")
  Const        r0, "The first 6 numbers which are palindromic in both binary and ternary are :\n"
  Print        r0
  // show(0)
  Const        r2, 0
  Move         r1, r2
  Call         r3, show, r1
  // var count = 1
  Const        r4, 1
  Move         r5, r4
  // var lo = 0
  Const        r2, 0
  Move         r6, r2
  // var hi = 1
  Const        r4, 1
  Move         r7, r4
  // var pow2 = 1
  Const        r4, 1
  Move         r8, r4
  // var pow3 = 1
  Const        r4, 1
  Move         r9, r4
L6:
  // while true {
  Const        r10, true
  JumpIfFalse  r10, L0
  // var i = lo
  Move         r11, r6
L3:
  // while i < hi {
  LessInt      r12, r11, r7
  JumpIfFalse  r12, L1
  // var n = (i*3 + 1) * pow3 + reverse3(i)
  Const        r13, 3
  MulInt       r14, r11, r13
  Const        r4, 1
  AddInt       r15, r14, r4
  MulInt       r16, r15, r9
  Move         r17, r11
  Call         r18, reverse3, r17
  Add          r19, r16, r18
  Move         r20, r19
  // if isPalindromeBin(n) {
  Move         r21, r20
  Call         r22, isPalindromeBin, r21
  JumpIfFalse  r22, L2
  // show(n)
  Move         r23, r20
  Call         r24, show, r23
  // count = count + 1
  Const        r4, 1
  AddInt       r25, r5, r4
  Move         r5, r25
  // if count >= 6 { return }
  Const        r26, 6
  LessEqInt    r27, r26, r5
  JumpIfFalse  r27, L2
  Return       r0
L2:
  // i = i + 1
  Const        r4, 1
  AddInt       r28, r11, r4
  Move         r11, r28
  // while i < hi {
  Jump         L3
L1:
  // if i == pow3 {
  EqualInt     r29, r11, r9
  JumpIfFalse  r29, L4
  // pow3 = pow3 * 3
  Const        r13, 3
  MulInt       r30, r9, r13
  Move         r9, r30
  // if i == pow3 {
  Jump         L5
L4:
  // pow2 = pow2 * 4
  Const        r31, 4
  MulInt       r32, r8, r31
  Move         r8, r32
L5:
  // while true {
  Const        r10, true
  JumpIfFalse  r10, L6
L8:
  // while pow2 <= pow3 { pow2 = pow2 * 4 }
  LessEqInt    r33, r8, r9
  JumpIfFalse  r33, L7
  Const        r31, 4
  MulInt       r34, r8, r31
  Move         r8, r34
  Jump         L8
L7:
  // var lo2 = ((pow2 / pow3 - 1) / 3) as int
  DivInt       r35, r8, r9
  Const        r4, 1
  SubInt       r36, r35, r4
  Const        r13, 3
  DivInt       r37, r36, r13
  Cast         r38, r37, int
  Move         r39, r38
  // var hi2 = ((pow2 * 2 / pow3 - 1) / 3) as int + 1
  Const        r40, 2
  MulInt       r41, r8, r40
  DivInt       r42, r41, r9
  Const        r4, 1
  SubInt       r43, r42, r4
  Const        r13, 3
  DivInt       r44, r43, r13
  Cast         r45, r44, int
  Const        r4, 1
  Add          r46, r45, r4
  Move         r47, r46
  // var lo3 = (pow3 / 3) as int
  Const        r13, 3
  DivInt       r48, r9, r13
  Cast         r49, r48, int
  Move         r50, r49
  // var hi3 = pow3
  Move         r51, r9
  // if lo2 >= hi3 {
  LessEq       r52, r51, r39
  JumpIfFalse  r52, L9
  // pow3 = pow3 * 3
  Const        r13, 3
  MulInt       r53, r9, r13
  Move         r9, r53
  // if lo2 >= hi3 {
  Jump         L5
L9:
  // } else if lo3 >= hi2 {
  LessEq       r54, r47, r50
  JumpIfFalse  r54, L10
  // pow2 = pow2 * 4
  Const        r31, 4
  MulInt       r55, r8, r31
  Move         r8, r55
  // } else if lo3 >= hi2 {
  Jump         L5
L10:
  // lo = myMax(lo2, lo3)
  Move         r56, r39
  Move         r57, r50
  Call2        r58, myMax, r56, r57
  Move         r6, r58
  // hi = myMin(hi2, hi3)
  Move         r59, r47
  Move         r60, r51
  Call2        r61, myMin, r59, r60
  Move         r7, r61
  // break
  Jump         L6
L0:
  Return       r0

  // fun parseIntStr(str: string): int {
func parseIntStr (regs=30)
  // var i = 0
  Const        r5, 0
  Move         r6, r5
  // var neg = false
  Const        r7, false
  Move         r8, r7
  // if len(str) > 0 && str[0] == "-" {
  Len          r9, r4
  Const        r5, 0
  LessInt      r10, r5, r9
  Const        r5, 0
  Index        r11, r4, r5
  Const        r12, "-"
  Equal        r13, r11, r12
  Move         r14, r10
  JumpIfFalse  r14, L0
  Move         r14, r13
L0:
  JumpIfFalse  r14, L1
  // neg = true
  Const        r15, true
  Move         r8, r15
  // i = 1
  Const        r16, 1
  Move         r6, r16
L1:
  // var n = 0
  Const        r5, 0
  Move         r1, r5
L3:
  // while i < len(str) {
  Len          r17, r4
  LessInt      r18, r6, r17
  JumpIfFalse  r18, L2
  // n = n * 10 + (str[i:i+1] as int) - ("0" as int)
  Const        r19, 10
  MulInt       r20, r1, r19
  Move         r21, r6
  Const        r16, 1
  AddInt       r23, r6, r16
  Move         r22, r23
  Slice        r24, r4, r21, r22
  Cast         r25, r24, int
  Add          r26, r20, r25
  Const        r5, 0
  Sub          r27, r26, r5
  Move         r1, r27
  // i = i + 1
  Const        r16, 1
  AddInt       r28, r6, r16
  Move         r6, r28
  // while i < len(str) {
  Jump         L3
L2:
  // if neg { n = -n }
  JumpIfFalse  r8, L4
  Neg          r29, r1
  Move         r1, r29
L4:
  // return n
  Return       r1
