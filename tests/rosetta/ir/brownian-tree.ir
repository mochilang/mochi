func main (regs=73)
  // let w: int = 400
  Const        r7, 400
  Move         r0, r7
  SetGlobal    0,0,0,0
  // let h: int = 300
  Const        r8, 300
  Move         r1, r8
  SetGlobal    1,1,0,0
  // let n: int = 15000
  Const        r9, 15000
  Move         r2, r9
  SetGlobal    2,2,0,0
  // let frost: int = 255
  Const        r10, 255
  Move         r3, r10
  SetGlobal    3,3,0,0
  // var grid: list<list<int>> = []
  Const        r11, []
  Move         r4, r11
  SetGlobal    4,4,0,0
  // var y = 0
  Const        r12, 0
  Move         r5, r12
  SetGlobal    5,5,0,0
L3:
  // while y < h {
  Const        r8, 300
  LessInt      r13, r5, r8
  JumpIfFalse  r13, L0
  // var row: list<int> = []
  Const        r11, []
  Move         r14, r11
  // var x = 0
  Const        r12, 0
  Move         r15, r12
L2:
  // while x < w {
  Const        r7, 400
  LessInt      r16, r15, r7
  JumpIfFalse  r16, L1
  // row = append(row, 0)
  Const        r12, 0
  Append       r17, r14, r12
  Move         r14, r17
  // x = x + 1
  Const        r18, 1
  AddInt       r19, r15, r18
  Move         r15, r19
  // while x < w {
  Jump         L2
L1:
  // grid = append(grid, row)
  Append       r20, r4, r14
  Move         r4, r20
  SetGlobal    4,4,0,0
  // y = y + 1
  Const        r18, 1
  AddInt       r21, r5, r18
  Move         r5, r21
  SetGlobal    5,5,0,0
  // while y < h {
  Jump         L3
L0:
  // grid[h/3][w/3] = frost
  Const        r8, 300
  Const        r22, 3
  DivInt       r23, r8, r22
  Index        r24, r4, r23
  Const        r10, 255
  Const        r7, 400
  Const        r22, 3
  DivInt       r25, r7, r22
  SetIndex     r24, r25, r10
  SetGlobal    4,4,0,0
  // var a = 0
  Const        r12, 0
  Move         r6, r12
  SetGlobal    6,6,0,0
L10:
  // while a < n {
  Const        r9, 15000
  LessInt      r26, r6, r9
  JumpIfFalse  r26, L4
  // var px = now() % w
  Now          r27
  Const        r7, 400
  ModInt       r28, r27, r7
  Move         r29, r28
  // var py = now() % h
  Now          r30
  Const        r8, 300
  ModInt       r31, r30, r8
  Move         r32, r31
  // if grid[py][px] == frost {
  Index        r33, r4, r32
  Index        r34, r33, r29
  Const        r10, 255
  Equal        r35, r34, r10
  JumpIfFalse  r35, L5
  // var lost = false
  Const        r36, false
  Move         r37, r36
L8:
  // while true {
  Const        r38, true
  JumpIfFalse  r38, L6
  // px = px + (now() % 3) - 1
  Now          r39
  Const        r22, 3
  ModInt       r40, r39, r22
  AddInt       r41, r29, r40
  Const        r18, 1
  SubInt       r42, r41, r18
  Move         r29, r42
  // py = py + (now() % 3) - 1
  Now          r43
  Const        r22, 3
  ModInt       r44, r43, r22
  AddInt       r45, r32, r44
  Const        r18, 1
  SubInt       r46, r45, r18
  Move         r32, r46
  // if !inBounds(px, py) {
  Move         r47, r29
  Move         r48, r32
  Call2        r49, inBounds, r47, r48
  Not          r50, r49
  JumpIfFalse  r50, L7
  // lost = true
  Const        r38, true
  Move         r37, r38
  // break
  Jump         L6
L7:
  // if grid[py][px] != frost { break }
  Index        r51, r4, r32
  Index        r52, r51, r29
  Const        r10, 255
  NotEqual     r53, r52, r10
  JumpIfFalse  r53, L8
L6:
  // if lost { continue }
  JumpIfFalse  r37, L9
  Jump         L10
L5:
  // var lost = false
  Const        r36, false
  Move         r54, r36
L12:
  // while !hasNeighbor(px, py) {
  Move         r55, r29
  Move         r56, r32
  Call2        r57, hasNeighbor, r55, r56
  Not          r58, r57
  JumpIfFalse  r58, L11
  // px = px + (now() % 3) - 1
  Now          r59
  Const        r22, 3
  ModInt       r60, r59, r22
  AddInt       r61, r29, r60
  Const        r18, 1
  SubInt       r62, r61, r18
  Move         r29, r62
  // py = py + (now() % 3) - 1
  Now          r63
  Const        r22, 3
  ModInt       r64, r63, r22
  AddInt       r65, r32, r64
  Const        r18, 1
  SubInt       r66, r65, r18
  Move         r32, r66
  // if !inBounds(px, py) {
  Move         r67, r29
  Move         r68, r32
  Call2        r69, inBounds, r67, r68
  Not          r70, r69
  JumpIfFalse  r70, L12
  // lost = true
  Const        r38, true
  Move         r54, r38
L11:
  // if lost { continue }
  JumpIfFalse  r54, L9
  Jump         L10
L9:
  // grid[py][px] = frost
  Index        r71, r4, r32
  Const        r10, 255
  SetIndex     r71, r29, r10
  SetGlobal    4,4,0,0
  // a = a + 1
  Const        r18, 1
  AddInt       r72, r6, r18
  Move         r6, r72
  SetGlobal    6,6,0,0
  // while a < n {
  Jump         L10
L4:
  Return       r0

  // fun inBounds(x: int, y: int): bool {
func inBounds (regs=15)
  // return x >= 0 && x < w && y >= 0 && y < h
  Const        r9, 0
  LessEq       r10, r9, r7
  Less         r11, r7, r0
  Const        r9, 0
  LessEq       r12, r9, r8
  Less         r13, r8, r1
  Move         r14, r10
  JumpIfFalse  r14, L0
  Move         r14, r11
  JumpIfFalse  r14, L0
  Move         r14, r12
  JumpIfFalse  r14, L0
  Move         r14, r13
L0:
  Return       r14

  // fun hasNeighbor(x: int, y: int): bool {
func hasNeighbor (regs=36)
  // var dy = -1
  Const        r9, 1
  NegInt       r10, r9
  Move         r11, r10
L6:
  // while dy <= 1 {
  Const        r9, 1
  LessEqInt    r12, r11, r9
  JumpIfFalse  r12, L0
  // var dx = -1
  Const        r9, 1
  NegInt       r13, r9
  Move         r14, r13
L5:
  // while dx <= 1 {
  Const        r9, 1
  LessEqInt    r15, r14, r9
  JumpIfFalse  r15, L1
  // if !(dx == 0 && dy == 0) {
  Const        r16, 0
  EqualInt     r17, r14, r16
  Const        r16, 0
  EqualInt     r18, r11, r16
  Move         r19, r17
  JumpIfFalse  r19, L2
  Move         r19, r18
L2:
  Not          r20, r19
  JumpIfFalse  r20, L3
  // let nx = x + dx
  Add          r21, r7, r14
  Move         r22, r21
  // let ny = y + dy
  Add          r23, r8, r11
  Move         r24, r23
  // if inBounds(nx, ny) && grid[ny][nx] == frost {
  Move         r25, r22
  Move         r26, r24
  Call2        r27, inBounds, r25, r26
  Index        r28, r4, r24
  Index        r29, r28, r22
  Equal        r30, r29, r3
  Move         r31, r27
  JumpIfFalse  r31, L4
  Move         r31, r30
L4:
  JumpIfFalse  r31, L3
  // return true
  Const        r32, true
  Return       r32
L3:
  // dx = dx + 1
  Const        r9, 1
  AddInt       r33, r14, r9
  Move         r14, r33
  // while dx <= 1 {
  Jump         L5
L1:
  // dy = dy + 1
  Const        r9, 1
  AddInt       r34, r11, r9
  Move         r11, r34
  // while dy <= 1 {
  Jump         L6
L0:
  // return false
  Const        r35, false
  Return       r35
