func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun floorf(x: float): float { let y = x as int; return y as float }
func floorf (regs=4)
  // fun floorf(x: float): float { let y = x as int; return y as float }
  Cast         r1, r0, int
  Move         r2, r1
  Cast         r3, r2, float
  Return       r3

  // fun indexOf(s: string, ch: string): int { var i=0; while i < len(s) { if substring(s,i,i+1)==ch { return i } i=i+1 } return 0 - 1 }
func indexOf (regs=12)
  // fun indexOf(s: string, ch: string): int { var i=0; while i < len(s) { if substring(s,i,i+1)==ch { return i } i=i+1 } return 0 - 1 }
  Const        r2, 0
  Move         r3, r2
L2:
  Len          r4, r0
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  Const        r6, 1
  AddInt       r7, r3, r6
  Slice        r8, r0, r3, r7
  Equal        r9, r8, r1
  JumpIfFalse  r9, L1
  Return       r3
L1:
  Const        r6, 1
  AddInt       r10, r3, r6
  Move         r3, r10
  Jump         L2
L0:
  Const        r2, 0
  Const        r6, 1
  SubInt       r11, r2, r6
  Return       r11

  // fun fmt8(x: float): string {
func fmt8 (regs=31)
  // var y = floorf(x * 100000000.0 + 0.5) / 100000000.0
  Const        r2, 100000000.0
  MulFloat     r3, r0, r2
  Const        r4, 0.5
  AddFloat     r5, r3, r4
  Move         r1, r5
  Call         r6, floorf, r1
  Const        r2, 100000000.0
  DivFloat     r7, r6, r2
  Move         r8, r7
  // var s = str(y)
  Str          r9, r8
  Move         r10, r9
  // var dot = indexOf(s, ".")
  Move         r11, r10
  Const        r13, "."
  Move         r12, r13
  Call2        r14, indexOf, r11, r12
  Move         r15, r14
  // if dot == 0 - 1 { s = s + ".00000000" }
  Const        r16, 0
  Const        r17, 1
  SubInt       r18, r16, r17
  Equal        r19, r15, r18
  JumpIfFalse  r19, L0
  Const        r20, ".00000000"
  Add          r21, r10, r20
  Move         r10, r21
  Jump         L1
L0:
  // var decs = len(s) - dot - 1
  Len          r22, r10
  Sub          r23, r22, r15
  Const        r17, 1
  Sub          r24, r23, r17
  Move         r25, r24
L2:
  // while decs < 8 { s = s + "0"; decs = decs + 1 }
  Const        r26, 8
  Less         r27, r25, r26
  JumpIfFalse  r27, L1
  Const        r28, "0"
  Add          r29, r10, r28
  Move         r10, r29
  Const        r17, 1
  Add          r30, r25, r17
  Move         r25, r30
  Jump         L2
L1:
  // return s
  Return       r10

  // fun pad2(x: int): string { var s = str(x); if len(s) < 2 { s = " " + s }; return s }
func pad2 (regs=8)
  // fun pad2(x: int): string { var s = str(x); if len(s) < 2 { s = " " + s }; return s }
  Str          r1, r0
  Move         r2, r1
  Len          r3, r2
  Const        r4, 2
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  Const        r6, " "
  Add          r7, r6, r2
  Move         r2, r7
L0:
  Return       r2

  // fun main() {
func main (regs=51)
  // let maxIt = 13
  Const        r0, 13
  Move         r1, r0
  // let maxItJ = 10
  Const        r2, 10
  Move         r3, r2
  // var a1 = 1.0
  Const        r4, 1.0
  Move         r5, r4
  // var a2 = 0.0
  Const        r6, 0.0
  Move         r7, r6
  // var d1 = 3.2
  Const        r8, 3.2
  Move         r9, r8
  // print(" i       d")
  Const        r10, " i       d"
  Print        r10
  // var i = 2
  Const        r11, 2
  Move         r12, r11
L5:
  // while i <= maxIt {
  LessEqInt    r13, r12, r1
  JumpIfFalse  r13, L0
  // var a = a1 + (a1 - a2) / d1
  SubFloat     r14, r5, r7
  DivFloat     r15, r14, r9
  AddFloat     r16, r5, r15
  Move         r17, r16
  // var j = 1
  Const        r18, 1
  Move         r19, r18
L4:
  // while j <= maxItJ {
  LessEqInt    r20, r19, r3
  JumpIfFalse  r20, L1
  // var x = 0.0
  Const        r6, 0.0
  Move         r21, r6
  // var y = 0.0
  Const        r6, 0.0
  Move         r22, r6
  // var k = 1
  Const        r18, 1
  Move         r23, r18
  // let limit = pow_int(2, i)
  Const        r11, 2
  Move         r24, r11
  Move         r25, r12
  Call2        r26, pow_int, r24, r25
  Move         r27, r26
L3:
  // while k <= limit {
  LessEq       r28, r23, r27
  JumpIfFalse  r28, L2
  // y = 1.0 - 2.0*y*x
  Const        r4, 1.0
  Const        r29, 2.0
  MulFloat     r30, r29, r22
  MulFloat     r31, r30, r21
  SubFloat     r32, r4, r31
  Move         r22, r32
  // x = a - x*x
  MulFloat     r33, r21, r21
  SubFloat     r34, r17, r33
  Move         r21, r34
  // k = k + 1
  Const        r18, 1
  AddInt       r35, r23, r18
  Move         r23, r35
  // while k <= limit {
  Jump         L3
L2:
  // a = a - x / y
  DivFloat     r36, r21, r22
  SubFloat     r37, r17, r36
  Move         r17, r37
  // j = j + 1
  Const        r18, 1
  AddInt       r38, r19, r18
  Move         r19, r38
  // while j <= maxItJ {
  Jump         L4
L1:
  // var d = (a1 - a2) / (a - a1)
  SubFloat     r39, r5, r7
  SubFloat     r40, r17, r5
  DivFloat     r41, r39, r40
  Move         r42, r41
  // print(pad2(i) + "    " + fmt8(d))
  Move         r43, r12
  Call         r44, pad2, r43
  Const        r45, "    "
  Add          r46, r44, r45
  Move         r47, r42
  Call         r48, fmt8, r47
  Add          r49, r46, r48
  Print        r49
  // d1 = d
  Move         r9, r42
  // a2 = a1
  Move         r7, r5
  // a1 = a
  Move         r5, r17
  // i = i + 1
  Const        r18, 1
  AddInt       r50, r12, r18
  Move         r12, r50
  // while i <= maxIt {
  Jump         L5
L0:
  Return       r0

  // fun pow_int(base: int, exp: int): int {
func pow_int (regs=15)
  // var r = 1
  Const        r2, 1
  Move         r3, r2
  // var b = base
  Move         r4, r0
  // var e = exp
  Move         r5, r1
L2:
  // while e > 0 {
  Const        r6, 0
  Less         r7, r6, r5
  JumpIfFalse  r7, L0
  // if e % 2 == 1 { r = r * b }
  Const        r8, 2
  Mod          r9, r5, r8
  Const        r2, 1
  Equal        r10, r9, r2
  JumpIfFalse  r10, L1
  Mul          r11, r3, r4
  Move         r3, r11
L1:
  // b = b * b
  Mul          r12, r4, r4
  Move         r4, r12
  // e = (e / 2) as int
  Const        r8, 2
  Div          r13, r5, r8
  Cast         r14, r13, int
  Move         r5, r14
  // while e > 0 {
  Jump         L2
L0:
  // return r
  Return       r3
