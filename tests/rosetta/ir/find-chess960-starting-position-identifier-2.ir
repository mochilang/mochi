func __main (regs=7)
  // var g2lMap: map<string, string> = {
  Const        r3, {"♔": "K", "♕": "Q", "♖": "R", "♗": "B", "♘": "N", "♚": "K", "♛": "Q", "♜": "R", "♝": "B", "♞": "N"}
  Move         r0, r3
  SetGlobal    0,0,0,0
  // var names: map<string, string> = {"R": "rook", "N": "knight", "B": "bishop", "Q": "queen", "K": "king"}
  Const        r4, {"B": "bishop", "K": "king", "N": "knight", "Q": "queen", "R": "rook"}
  Move         r1, r4
  SetGlobal    1,1,0,0
  // var ntable: map<string, int> = {"01":0, "02":1, "03":2, "04":3, "12":4, "13":5, "14":6, "23":7, "24":8, "34":9}
  Const        r5, {"01": 0, "02": 1, "03": 2, "04": 3, "12": 4, "13": 5, "14": 6, "23": 7, "24": 8, "34": 9}
  Move         r2, r5
  SetGlobal    2,2,0,0
  // main()
  Call         r6, main, 
  Return       r0

  // fun indexOf(s: string, sub: string): int {
func indexOf (regs=18)
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L2:
  // while i <= len(s) - len(sub) {
  Len          r7, r3
  Len          r8, r4
  SubInt       r9, r7, r8
  LessEqInt    r10, r6, r9
  JumpIfFalse  r10, L0
  // if substring(s, i, i + len(sub)) == sub { return i }
  Len          r11, r4
  AddInt       r12, r6, r11
  Slice        r13, r3, r6, r12
  Equal        r14, r13, r4
  JumpIfFalse  r14, L1
  Return       r6
L1:
  // i = i + 1
  Const        r15, 1
  AddInt       r16, r6, r15
  Move         r6, r16
  // while i <= len(s) - len(sub) {
  Jump         L2
L0:
  // return -1
  Const        r15, 1
  NegInt       r17, r15
  Return       r17

  // fun removeChar(s: string, ch: string): string {
func removeChar (regs=18)
  // var res = ""
  Const        r5, ""
  Move         r6, r5
  // var i = 0
  Const        r7, 0
  Move         r8, r7
L2:
  // while i < len(s) {
  Len          r9, r3
  LessInt      r10, r8, r9
  JumpIfFalse  r10, L0
  // let c = substring(s, i, i+1)
  Const        r11, 1
  AddInt       r12, r8, r11
  Slice        r13, r3, r8, r12
  Move         r14, r13
  // if c != ch { res = res + c }
  NotEqual     r15, r14, r4
  JumpIfFalse  r15, L1
  Add          r16, r6, r14
  Move         r6, r16
L1:
  // i = i + 1
  Const        r11, 1
  AddInt       r17, r8, r11
  Move         r8, r17
  // while i < len(s) {
  Jump         L2
L0:
  // return res
  Return       r6

  // fun g2l(pieces: string): string {
func g2l (regs=17)
  // var res = ""
  Const        r4, ""
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L1:
  // while i < len(pieces) {
  Len          r8, r3
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // let ch = substring(pieces, i, i+1)
  Const        r10, 1
  AddInt       r11, r7, r10
  Slice        r12, r3, r7, r11
  Move         r13, r12
  // res = res + g2lMap[ch]
  Index        r14, r0, r13
  Add          r15, r5, r14
  Move         r5, r15
  // i = i + 1
  Const        r10, 1
  AddInt       r16, r7, r10
  Move         r7, r16
  // while i < len(pieces) {
  Jump         L1
L0:
  // return res
  Return       r5

  // fun countChar(s: string, ch: string): int {
func countChar (regs=16)
  // var c = 0
  Const        r5, 0
  Move         r6, r5
  // var i = 0
  Const        r5, 0
  Move         r7, r5
L2:
  // while i < len(s) {
  Len          r8, r3
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // if substring(s, i, i+1) == ch { c = c + 1 }
  Const        r10, 1
  AddInt       r11, r7, r10
  Slice        r12, r3, r7, r11
  Equal        r13, r12, r4
  JumpIfFalse  r13, L1
  Const        r10, 1
  AddInt       r14, r6, r10
  Move         r6, r14
L1:
  // i = i + 1
  Const        r10, 1
  AddInt       r15, r7, r10
  Move         r7, r15
  // while i < len(s) {
  Jump         L2
L0:
  // return c
  Return       r6

  // fun spid(pieces: string): int {
func spid (regs=148)
  // pieces = g2l(pieces)
  Move         r4, r3
  Call         r5, g2l, r4
  Move         r3, r5
  // if len(pieces) != 8 { return -1 }
  Len          r6, r3
  Const        r7, 8
  NotEqual     r8, r6, r7
  JumpIfFalse  r8, L0
  Const        r9, 1
  NegInt       r10, r9
  Return       r10
L0:
  // for one in ["K", "Q"] {
  Const        r11, ["K", "Q"]
  IterPrep     r12, r11
  Len          r13, r12
  Const        r14, 0
L3:
  LessInt      r15, r14, r13
  JumpIfFalse  r15, L1
  Index        r16, r12, r14
  Move         r17, r16
  // if countChar(pieces, one) != 1 { return -1 }
  Move         r18, r3
  Move         r19, r17
  Call2        r20, countChar, r18, r19
  Const        r9, 1
  NotEqual     r21, r20, r9
  JumpIfFalse  r21, L2
  Const        r9, 1
  NegInt       r22, r9
  Return       r22
L2:
  // for one in ["K", "Q"] {
  Const        r23, 1
  AddInt       r24, r14, r23
  Move         r14, r24
  Jump         L3
L1:
  // for two in ["R", "N", "B"] {
  Const        r25, ["R", "N", "B"]
  IterPrep     r26, r25
  Len          r27, r26
  Const        r28, 0
L6:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L4
  Index        r30, r26, r28
  Move         r31, r30
  // if countChar(pieces, two) != 2 { return -1 }
  Move         r32, r3
  Move         r33, r31
  Call2        r34, countChar, r32, r33
  Const        r35, 2
  NotEqual     r36, r34, r35
  JumpIfFalse  r36, L5
  Const        r9, 1
  NegInt       r37, r9
  Return       r37
L5:
  // for two in ["R", "N", "B"] {
  Const        r38, 1
  AddInt       r39, r28, r38
  Move         r28, r39
  Jump         L6
L4:
  // let r1 = indexOf(pieces, "R")
  Move         r40, r3
  Const        r42, "R"
  Move         r41, r42
  Call2        r43, indexOf, r40, r41
  Move         r44, r43
  // let r2 = indexOf(substring(pieces, r1+1, len(pieces)), "R") + r1 + 1
  Const        r9, 1
  Add          r47, r44, r9
  Len          r48, r3
  Slice        r49, r3, r47, r48
  Move         r45, r49
  Const        r42, "R"
  Move         r46, r42
  Call2        r50, indexOf, r45, r46
  Add          r51, r50, r44
  Const        r9, 1
  Add          r52, r51, r9
  Move         r53, r52
  // let k  = indexOf(pieces, "K")
  Move         r54, r3
  Const        r56, "K"
  Move         r55, r56
  Call2        r57, indexOf, r54, r55
  Move         r58, r57
  // if k < r1 || k > r2 { return -1 }
  Less         r59, r58, r44
  Less         r60, r53, r58
  Move         r61, r59
  JumpIfTrue   r61, L7
  Move         r61, r60
L7:
  JumpIfFalse  r61, L8
  Const        r9, 1
  NegInt       r62, r9
  Return       r62
L8:
  // let b1 = indexOf(pieces, "B")
  Move         r63, r3
  Const        r65, "B"
  Move         r64, r65
  Call2        r66, indexOf, r63, r64
  Move         r67, r66
  // let b2 = indexOf(substring(pieces, b1+1, len(pieces)), "B") + b1 + 1
  Const        r9, 1
  Add          r70, r67, r9
  Len          r71, r3
  Slice        r72, r3, r70, r71
  Move         r68, r72
  Const        r65, "B"
  Move         r69, r65
  Call2        r73, indexOf, r68, r69
  Add          r74, r73, r67
  Const        r9, 1
  Add          r75, r74, r9
  Move         r76, r75
  // if (b2 - b1) % 2 == 0 { return -1 }
  Sub          r77, r76, r67
  Const        r35, 2
  Mod          r78, r77, r35
  Const        r79, 0
  Equal        r80, r78, r79
  JumpIfFalse  r80, L9
  Const        r9, 1
  NegInt       r81, r9
  Return       r81
L9:
  // var piecesN = removeChar(removeChar(pieces, "Q"), "B")
  Move         r84, r3
  Const        r86, "Q"
  Move         r85, r86
  Call2        r87, removeChar, r84, r85
  Move         r82, r87
  Const        r65, "B"
  Move         r83, r65
  Call2        r88, removeChar, r82, r83
  Move         r89, r88
  // let n1 = indexOf(piecesN, "N")
  Move         r90, r89
  Const        r92, "N"
  Move         r91, r92
  Call2        r93, indexOf, r90, r91
  Move         r94, r93
  // let n2 = indexOf(substring(piecesN, n1+1, len(piecesN)), "N") + n1 + 1
  Const        r9, 1
  Add          r97, r94, r9
  Len          r98, r89
  Slice        r99, r89, r97, r98
  Move         r95, r99
  Const        r92, "N"
  Move         r96, r92
  Call2        r100, indexOf, r95, r96
  Add          r101, r100, r94
  Const        r9, 1
  Add          r102, r101, r9
  Move         r103, r102
  // let N = ntable[str(n1) + str(n2)]
  Str          r104, r94
  Str          r105, r103
  Add          r106, r104, r105
  Index        r107, r2, r106
  Move         r108, r107
  // var piecesQ = removeChar(pieces, "B")
  Move         r109, r3
  Const        r65, "B"
  Move         r110, r65
  Call2        r111, removeChar, r109, r110
  Move         r112, r111
  // let Q = indexOf(piecesQ, "Q")
  Move         r113, r112
  Const        r86, "Q"
  Move         r114, r86
  Call2        r115, indexOf, r113, r114
  Move         r116, r115
  // var D = indexOf("0246", str(b1))
  Const        r119, "0246"
  Move         r117, r119
  Str          r120, r67
  Move         r118, r120
  Call2        r121, indexOf, r117, r118
  Move         r122, r121
  // var L = indexOf("1357", str(b2))
  Const        r125, "1357"
  Move         r123, r125
  Str          r126, r76
  Move         r124, r126
  Call2        r127, indexOf, r123, r124
  Move         r128, r127
  // if D == (0 - 1) {
  Const        r129, -1
  Equal        r130, r122, r129
  JumpIfFalse  r130, L10
  // D = indexOf("0246", str(b2))
  Const        r119, "0246"
  Move         r131, r119
  Str          r133, r76
  Move         r132, r133
  Call2        r134, indexOf, r131, r132
  Move         r122, r134
  // L = indexOf("1357", str(b1))
  Const        r125, "1357"
  Move         r135, r125
  Str          r137, r67
  Move         r136, r137
  Call2        r138, indexOf, r135, r136
  Move         r128, r138
L10:
  // return 96*N + 16*Q + 4*D + L
  Const        r139, 96
  Mul          r140, r139, r108
  Const        r141, 16
  Mul          r142, r141, r116
  Const        r143, 4
  Mul          r144, r143, r122
  Add          r145, r140, r142
  Add          r146, r145, r144
  Add          r147, r146, r128
  Return       r147

  // fun main() {
func main (regs=23)
  // for pieces in ["♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"] {
  Const        r3, ["♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"]
  IterPrep     r4, r3
  Len          r5, r4
  Const        r6, 0
L1:
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L0
  Index        r8, r4, r6
  Move         r9, r8
  // print(pieces + " or " + g2l(pieces) + " has SP-ID of " + str(spid(pieces)))
  Const        r10, " or "
  Add          r11, r9, r10
  Move         r12, r9
  Call         r13, g2l, r12
  Add          r14, r11, r13
  Const        r15, " has SP-ID of "
  Add          r16, r14, r15
  Move         r17, r9
  Call         r18, spid, r17
  Str          r19, r18
  Add          r20, r16, r19
  Print        r20
  // for pieces in ["♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"] {
  Const        r21, 1
  AddInt       r22, r6, r21
  Move         r6, r22
  Jump         L1
L0:
  Return       r0
