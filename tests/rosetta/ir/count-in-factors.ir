func main (regs=26)
  // show(1)
  Const        r1, 1
  Move         r0, r1
  Call         r2, show, r0
  // for i in 2..10 { show(i) }
  Const        r3, 2
  Const        r4, 10
  Move         r5, r3
L1:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Move         r7, r5
  Call         r8, show, r7
  Const        r9, 1
  AddInt       r10, r5, r9
  Move         r5, r10
  Jump         L1
L0:
  // print("...")
  Const        r11, "..."
  Print        r11
  // for i in 2144..2155 { show(i) }
  Const        r12, 2144
  Const        r13, 2155
  Move         r5, r12
L3:
  LessInt      r14, r5, r13
  JumpIfFalse  r14, L2
  Move         r15, r5
  Call         r16, show, r15
  Const        r17, 1
  AddInt       r18, r5, r17
  Move         r5, r18
  Jump         L3
L2:
  // print("...")
  Const        r11, "..."
  Print        r11
  // for i in 9987..10000 { show(i) }
  Const        r19, 9987
  Const        r20, 10000
  Move         r5, r19
L5:
  LessInt      r21, r5, r20
  JumpIfFalse  r21, L4
  Move         r22, r5
  Call         r23, show, r22
  Const        r24, 1
  AddInt       r25, r5, r24
  Move         r5, r25
  Jump         L5
L4:
  Return       r0

  // fun show(n: int) {
func show (regs=24)
  // if n == 1 {
  Const        r1, 1
  Equal        r2, r0, r1
  JumpIfFalse  r2, L0
  // print("1: 1")
  Const        r3, "1: 1"
  Print        r3
  // return
  Return       r0
L0:
  // var out = str(n) + ": "
  Str          r4, r0
  Const        r5, ": "
  Add          r6, r4, r5
  Move         r7, r6
  // var x = ""
  Const        r8, ""
  Move         r9, r8
  // var m = n
  Move         r10, r0
  // var f = 2
  Const        r11, 2
  Move         r12, r11
L3:
  // while m != 1 {
  Const        r1, 1
  NotEqual     r13, r10, r1
  JumpIfFalse  r13, L1
  // if m % f == 0 {
  Mod          r14, r10, r12
  Const        r15, 0
  Equal        r16, r14, r15
  JumpIfFalse  r16, L2
  // out = out + x + str(f)
  Add          r17, r7, r9
  Str          r18, r12
  Add          r19, r17, r18
  Move         r7, r19
  // x = "×"
  Const        r20, "×"
  Move         r9, r20
  // m = (m / f) as int
  Div          r21, r10, r12
  Cast         r22, r21, int
  Move         r10, r22
  // if m % f == 0 {
  Jump         L3
L2:
  // f = f + 1
  Const        r1, 1
  AddInt       r23, r12, r1
  Move         r12, r23
  // while m != 1 {
  Jump         L3
L1:
  // print(out)
  Print        r7
  Return       r0
