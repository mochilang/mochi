func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun Add(t2: TinyInt): TinyInt {
func TinyInt.Add (regs=7)
  // return NewTinyInt(value + t2.value)
  Const        r3, "value"
  Index        r4, r1, r3
  Add          r5, r0, r4
  Move         r2, r5
  Call         r6, NewTinyInt, r2
  Return       r6

  // fun Sub(t2: TinyInt): TinyInt {
func TinyInt.Sub (regs=7)
  // return NewTinyInt(value - t2.value)
  Const        r3, "value"
  Index        r4, r1, r3
  Sub          r5, r0, r4
  Move         r2, r5
  Call         r6, NewTinyInt, r2
  Return       r6

  // fun Mul(t2: TinyInt): TinyInt {
func TinyInt.Mul (regs=7)
  // return NewTinyInt(value * t2.value)
  Const        r3, "value"
  Index        r4, r1, r3
  Mul          r5, r0, r4
  Move         r2, r5
  Call         r6, NewTinyInt, r2
  Return       r6

  // fun Div(t2: TinyInt): TinyInt {
func TinyInt.Div (regs=7)
  // return NewTinyInt(value / t2.value)
  Const        r3, "value"
  Index        r4, r1, r3
  Div          r5, r0, r4
  Move         r2, r5
  Call         r6, NewTinyInt, r2
  Return       r6

  // fun Rem(t2: TinyInt): TinyInt {
func TinyInt.Rem (regs=7)
  // return NewTinyInt(value % t2.value)
  Const        r3, "value"
  Index        r4, r1, r3
  Mod          r5, r0, r4
  Move         r2, r5
  Call         r6, NewTinyInt, r2
  Return       r6

  // fun Inc(): TinyInt {
func TinyInt.Inc (regs=2)
  // return Add(NewTinyInt(1))
  Return       r1

  // fun Dec(): TinyInt {
func TinyInt.Dec (regs=2)
  // return Sub(NewTinyInt(1))
  Return       r1

  // fun NewTinyInt(i: int): TinyInt {
func NewTinyInt (regs=24)
  // if i < 1 { i = 1 }
  Const        r1, 1
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r1, 1
  Move         r0, r1
  Jump         L1
L0:
  // else if i > 10 { i = 10 }
  Const        r3, 10
  LessInt      r4, r3, r0
  JumpIfFalse  r4, L1
  Const        r3, 10
  Move         r0, r3
L1:
  // return TinyInt{ value: i }
  Const        r5, "__name"
  Const        r6, "TinyInt"
  Const        r7, "value"
  Move         r8, r0
  // fun Mul(t2: TinyInt): TinyInt {
  Const        r9, "Mul"
  // return TinyInt{ value: i }
  MakeClosure  r10, TinyInt.Mul, 1, r8
  // fun Div(t2: TinyInt): TinyInt {
  Const        r11, "Div"
  // return TinyInt{ value: i }
  MakeClosure  r12, TinyInt.Div, 1, r8
  // fun Rem(t2: TinyInt): TinyInt {
  Const        r13, "Rem"
  // return TinyInt{ value: i }
  MakeClosure  r14, TinyInt.Rem, 1, r8
  // fun Inc(): TinyInt {
  Const        r15, "Inc"
  // return TinyInt{ value: i }
  MakeClosure  r16, TinyInt.Inc, 1, r8
  // fun Dec(): TinyInt {
  Const        r17, "Dec"
  // return TinyInt{ value: i }
  MakeClosure  r18, TinyInt.Dec, 1, r8
  // fun Add(t2: TinyInt): TinyInt {
  Const        r19, "Add"
  // return TinyInt{ value: i }
  MakeClosure  r20, TinyInt.Add, 1, r8
  // fun Sub(t2: TinyInt): TinyInt {
  Const        r21, "Sub"
  // return TinyInt{ value: i }
  MakeClosure  r22, TinyInt.Sub, 1, r8
  MakeMap      r23, 9, r5
  Return       r23

  // fun main() {
func main (regs=64)
  // let t1 = NewTinyInt(6)
  Const        r1, 6
  Move         r0, r1
  Call         r2, NewTinyInt, r0
  Move         r3, r2
  // let t2 = NewTinyInt(3)
  Const        r5, 3
  Move         r4, r5
  Call         r6, NewTinyInt, r4
  Move         r7, r6
  // print("t1      = " + str(t1.value))
  Const        r8, "t1      = "
  Const        r9, "value"
  Index        r10, r3, r9
  Str          r11, r10
  Add          r12, r8, r11
  Print        r12
  // print("t2      = " + str(t2.value))
  Const        r13, "t2      = "
  Const        r9, "value"
  Index        r14, r7, r9
  Str          r15, r14
  Add          r16, r13, r15
  Print        r16
  // print("t1 + t2 = " + str(t1.Add(t2).value))
  Const        r17, "t1 + t2 = "
  Const        r18, "Add"
  Index        r19, r3, r18
  Move         r20, r7
  CallV        r21, r19, 1, r20
  Str          r22, r21
  Add          r23, r17, r22
  Print        r23
  // print("t1 - t2 = " + str(t1.Sub(t2).value))
  Const        r24, "t1 - t2 = "
  Const        r25, "Sub"
  Index        r26, r3, r25
  Move         r27, r7
  CallV        r28, r26, 1, r27
  Str          r29, r28
  Add          r30, r24, r29
  Print        r30
  // print("t1 * t2 = " + str(t1.Mul(t2).value))
  Const        r31, "t1 * t2 = "
  Const        r32, "Mul"
  Index        r33, r3, r32
  Move         r34, r7
  CallV        r35, r33, 1, r34
  Str          r36, r35
  Add          r37, r31, r36
  Print        r37
  // print("t1 / t2 = " + str(t1.Div(t2).value))
  Const        r38, "t1 / t2 = "
  Const        r39, "Div"
  Index        r40, r3, r39
  Move         r41, r7
  CallV        r42, r40, 1, r41
  Str          r43, r42
  Add          r44, r38, r43
  Print        r44
  // print("t1 % t2 = " + str(t1.Rem(t2).value))
  Const        r45, "t1 % t2 = "
  Const        r46, "Rem"
  Index        r47, r3, r46
  Move         r48, r7
  CallV        r49, r47, 1, r48
  Str          r50, r49
  Add          r51, r45, r50
  Print        r51
  // print("t1 + 1  = " + str(t1.Inc().value))
  Const        r52, "t1 + 1  = "
  Const        r53, "Inc"
  Index        r54, r3, r53
  CallV        r55, r54, 0, r0
  Str          r56, r55
  Add          r57, r52, r56
  Print        r57
  // print("t1 - 1  = " + str(t1.Dec().value))
  Const        r58, "t1 - 1  = "
  Const        r59, "Dec"
  Index        r60, r3, r59
  CallV        r61, r60, 0, r0
  Str          r62, r61
  Add          r63, r58, r62
  Print        r63
  Return       r0
