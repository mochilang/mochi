func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun indexOf(s: string, ch: string): int {
func indexOf (regs=12)
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L2:
  // while i < len(s) {
  Len          r4, r0
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // if substring(s, i, i + 1) == ch {
  Const        r6, 1
  AddInt       r7, r3, r6
  Slice        r8, r0, r3, r7
  Equal        r9, r8, r1
  JumpIfFalse  r9, L1
  // return i
  Return       r3
L1:
  // i = i + 1
  Const        r6, 1
  AddInt       r10, r3, r6
  Move         r3, r10
  // while i < len(s) {
  Jump         L2
L0:
  // return -1
  Const        r6, 1
  NegInt       r11, r6
  Return       r11

  // fun fields(s: string): list<string> {
func fields (regs=28)
  // var words: list<string> = []
  Const        r1, []
  Move         r2, r1
  // var cur = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L4:
  // while i < len(s) {
  Len          r7, r0
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // let ch = substring(s, i, i + 1)
  Const        r9, 1
  AddInt       r10, r6, r9
  Slice        r11, r0, r6, r10
  Move         r12, r11
  // if ch == " " || ch == "\t" || ch == "\n" {
  Const        r13, " "
  Equal        r14, r12, r13
  Const        r15, "\t"
  Equal        r16, r12, r15
  Const        r17, "\n"
  Equal        r18, r12, r17
  Move         r19, r14
  JumpIfTrue   r19, L1
  Move         r19, r16
  JumpIfTrue   r19, L1
  Move         r19, r18
L1:
  JumpIfFalse  r19, L2
  // if len(cur) > 0 {
  Len          r20, r4
  Const        r5, 0
  LessInt      r21, r5, r20
  JumpIfFalse  r21, L3
  // words = append(words, cur)
  Append       r22, r2, r4
  Move         r2, r22
  // cur = ""
  Const        r3, ""
  Move         r4, r3
  // if ch == " " || ch == "\t" || ch == "\n" {
  Jump         L3
L2:
  // cur = cur + ch
  Add          r23, r4, r12
  Move         r4, r23
L3:
  // i = i + 1
  Const        r9, 1
  AddInt       r24, r6, r9
  Move         r6, r24
  // while i < len(s) {
  Jump         L4
L0:
  // if len(cur) > 0 { words = append(words, cur) }
  Len          r25, r4
  Const        r5, 0
  LessInt      r26, r5, r25
  JumpIfFalse  r26, L5
  Append       r27, r2, r4
  Move         r2, r27
L5:
  // return words
  Return       r2

  // fun makePatterns(): list<string> {
func makePatterns (regs=35)
  // let digits = ["1","2","3","4","5","6","7","8","9"]
  Const        r0, ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
  Move         r1, r0
  // var pats: list<string> = []
  Const        r2, []
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L10:
  // while i < len(digits) {
  Const        r6, 9
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L0
  // var j = 0
  Const        r4, 0
  Move         r8, r4
L9:
  // while j < len(digits) {
  Const        r6, 9
  LessInt      r9, r8, r6
  JumpIfFalse  r9, L1
  // if j != i {
  NotEqual     r10, r8, r5
  JumpIfFalse  r10, L2
  // var k = 0
  Const        r4, 0
  Move         r11, r4
L8:
  // while k < len(digits) {
  Const        r6, 9
  LessInt      r12, r11, r6
  JumpIfFalse  r12, L2
  // if k != i && k != j {
  NotEqual     r13, r11, r5
  NotEqual     r14, r11, r8
  Move         r15, r13
  JumpIfFalse  r15, L3
  Move         r15, r14
L3:
  JumpIfFalse  r15, L4
  // var l = 0
  Const        r4, 0
  Move         r16, r4
L7:
  // while l < len(digits) {
  Const        r6, 9
  LessInt      r17, r16, r6
  JumpIfFalse  r17, L4
  // if l != i && l != j && l != k {
  NotEqual     r18, r16, r5
  NotEqual     r19, r16, r8
  NotEqual     r20, r16, r11
  Move         r21, r18
  JumpIfFalse  r21, L5
  Move         r21, r19
  JumpIfFalse  r21, L5
  Move         r21, r20
L5:
  JumpIfFalse  r21, L6
  // pats = append(pats, digits[i] + digits[j] + digits[k] + digits[l])
  Index        r22, r1, r5
  Index        r23, r1, r8
  Add          r24, r22, r23
  Index        r25, r1, r11
  Add          r26, r24, r25
  Index        r27, r1, r16
  Add          r28, r26, r27
  Append       r29, r3, r28
  Move         r3, r29
L6:
  // l = l + 1
  Const        r30, 1
  AddInt       r31, r16, r30
  Move         r16, r31
  // while l < len(digits) {
  Jump         L7
L4:
  // k = k + 1
  Const        r30, 1
  AddInt       r32, r11, r30
  Move         r11, r32
  // while k < len(digits) {
  Jump         L8
L2:
  // j = j + 1
  Const        r30, 1
  AddInt       r33, r8, r30
  Move         r8, r33
  // while j < len(digits) {
  Jump         L9
L1:
  // i = i + 1
  Const        r30, 1
  AddInt       r34, r5, r30
  Move         r5, r34
  // while i < len(digits) {
  Jump         L10
L0:
  // return pats
  Return       r3

  // fun main() {
func main (regs=85)
  // print("Cows and bulls/player\n" +
  Const        r0, "Cows and bulls/player\n"
  // "You think of four digit number of unique digits in the range 1 to 9.\n" +
  Const        r1, "You think of four digit number of unique digits in the range 1 to 9.\n"
  // print("Cows and bulls/player\n" +
  Const        r2, "Cows and bulls/player\nYou think of four digit number of unique digits in the range 1 to 9.\n"
  // "I guess.  You score my guess:\n" +
  Const        r3, "I guess.  You score my guess:\n"
  // "You think of four digit number of unique digits in the range 1 to 9.\n" +
  Const        r4, "Cows and bulls/player\nYou think of four digit number of unique digits in the range 1 to 9.\nI guess.  You score my guess:\n"
  // "    A correct digit but not in the correct place is a cow.\n" +
  Const        r5, "    A correct digit but not in the correct place is a cow.\n"
  // "I guess.  You score my guess:\n" +
  Const        r6, "Cows and bulls/player\nYou think of four digit number of unique digits in the range 1 to 9.\nI guess.  You score my guess:\n    A correct digit but not in the correct place is a cow.\n"
  // "    A correct digit in the correct place is a bull.\n" +
  Const        r7, "    A correct digit in the correct place is a bull.\n"
  // "    A correct digit but not in the correct place is a cow.\n" +
  Const        r8, "Cows and bulls/player\nYou think of four digit number of unique digits in the range 1 to 9.\nI guess.  You score my guess:\n    A correct digit but not in the correct place is a cow.\n    A correct digit in the correct place is a bull.\n"
  // "You give my score as two numbers separated with a space.")
  Const        r9, "You give my score as two numbers separated with a space."
  // "    A correct digit in the correct place is a bull.\n" +
  Const        r10, "Cows and bulls/player\nYou think of four digit number of unique digits in the range 1 to 9.\nI guess.  You score my guess:\n    A correct digit but not in the correct place is a cow.\n    A correct digit in the correct place is a bull.\nYou give my score as two numbers separated with a space."
  // print("Cows and bulls/player\n" +
  Print        r10
  // var patterns = makePatterns()
  Call         r11, makePatterns, 
  Move         r12, r11
L15:
  // while true {
  Const        r13, true
  JumpIfFalse  r13, L0
  // if len(patterns) == 0 {
  Len          r14, r12
  Const        r15, 0
  EqualInt     r16, r14, r15
  JumpIfFalse  r16, L1
  // print("Oops, check scoring.")
  Const        r17, "Oops, check scoring."
  Print        r17
  // return
  Return       r0
L1:
  // let guess = patterns[0]
  Const        r15, 0
  Index        r18, r12, r15
  Move         r19, r18
  // patterns = patterns[1:]
  Const        r21, 1
  Move         r20, r21
  Const        r22, nil
  Slice        r23, r12, r20, r22
  Move         r12, r23
  // var cows = 0
  Const        r15, 0
  Move         r24, r15
  // var bulls = 0
  Const        r15, 0
  Move         r25, r15
L5:
  // while true {
  Const        r13, true
  JumpIfFalse  r13, L2
  // print("My guess: " + guess + ".  Score? (c b) ")
  Const        r26, "My guess: "
  Add          r27, r26, r19
  Const        r28, ".  Score? (c b) "
  Add          r29, r27, r28
  Print        r29
  // let line = input()
  Input        r30
  Move         r31, r30
  // let toks = fields(line)
  Move         r32, r31
  Call         r33, fields, r32
  Move         r34, r33
  // if len(toks) == 2 {
  Len          r35, r34
  Const        r36, 2
  EqualInt     r37, r35, r36
  JumpIfFalse  r37, L3
  // let c = int(toks[0])
  Const        r15, 0
  Index        r38, r34, r15
  Cast         r39, r38, int
  Move         r40, r39
  // let b = int(toks[1])
  Const        r21, 1
  Index        r41, r34, r21
  Cast         r42, r41, int
  Move         r43, r42
  // if c >= 0 && c <= 4 && b >= 0 && b <= 4 && c + b <= 4 {
  Add          r44, r40, r43
  Const        r15, 0
  LessEq       r45, r15, r40
  Const        r46, 4
  LessEq       r47, r40, r46
  Const        r15, 0
  LessEq       r48, r15, r43
  Const        r46, 4
  LessEq       r49, r43, r46
  Const        r46, 4
  LessEq       r50, r44, r46
  Move         r51, r45
  JumpIfFalse  r51, L4
  Move         r51, r47
  JumpIfFalse  r51, L4
  Move         r51, r48
  JumpIfFalse  r51, L4
  Move         r51, r49
  JumpIfFalse  r51, L4
  Move         r51, r50
L4:
  JumpIfFalse  r51, L3
  // cows = c
  Move         r24, r40
  // bulls = b
  Move         r25, r43
  // break
  Jump         L2
L3:
  // print("Score guess as two numbers: cows bulls")
  Const        r52, "Score guess as two numbers: cows bulls"
  Print        r52
  // while true {
  Jump         L5
L2:
  // if bulls == 4 {
  Const        r46, 4
  Equal        r53, r25, r46
  JumpIfFalse  r53, L6
  // print("I did it. :)")
  Const        r54, "I did it. :)"
  Print        r54
  // return
  Return       r0
L6:
  // var next: list<string> = []
  Const        r55, []
  Move         r56, r55
  // var idx = 0
  Const        r15, 0
  Move         r57, r15
L14:
  // while idx < len(patterns) {
  Len          r58, r12
  LessInt      r59, r57, r58
  JumpIfFalse  r59, L7
  // let pat = patterns[idx]
  Index        r60, r12, r57
  Move         r61, r60
  // var c = 0
  Const        r15, 0
  Move         r62, r15
  // var b = 0
  Const        r15, 0
  Move         r63, r15
  // var i = 0
  Const        r15, 0
  Move         r64, r15
L11:
  // while i < 4 {
  Const        r46, 4
  LessInt      r65, r64, r46
  JumpIfFalse  r65, L8
  // let cg = substring(guess, i, i + 1)
  Const        r21, 1
  AddInt       r66, r64, r21
  Slice        r67, r19, r64, r66
  Move         r68, r67
  // let cp = substring(pat, i, i + 1)
  Const        r21, 1
  AddInt       r69, r64, r21
  Slice        r70, r61, r64, r69
  Move         r71, r70
  // if cg == cp {
  Equal        r72, r68, r71
  JumpIfFalse  r72, L9
  // b = b + 1
  Const        r21, 1
  AddInt       r73, r63, r21
  Move         r63, r73
  // if cg == cp {
  Jump         L10
L9:
  // } else if indexOf(pat, cg) >= 0 {
  Move         r74, r61
  Move         r75, r68
  Call2        r76, indexOf, r74, r75
  Const        r15, 0
  LessEq       r77, r15, r76
  JumpIfFalse  r77, L10
  // c = c + 1
  Const        r21, 1
  AddInt       r78, r62, r21
  Move         r62, r78
L10:
  // i = i + 1
  Const        r21, 1
  AddInt       r79, r64, r21
  Move         r64, r79
  // while i < 4 {
  Jump         L11
L8:
  // if c == cows && b == bulls {
  Equal        r80, r62, r24
  Equal        r81, r63, r25
  Move         r82, r80
  JumpIfFalse  r82, L12
  Move         r82, r81
L12:
  JumpIfFalse  r82, L13
  // next = append(next, pat)
  Append       r83, r56, r61
  Move         r56, r83
L13:
  // idx = idx + 1
  Const        r21, 1
  AddInt       r84, r57, r21
  Move         r57, r84
  // while idx < len(patterns) {
  Jump         L14
L7:
  // patterns = next
  Move         r12, r56
  // while true {
  Jump         L15
L0:
  Return       r0
