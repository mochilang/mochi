func main (regs=8)
  // print(str(validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")))
  Const        r1, "1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i"
  Move         r0, r1
  Call         r2, validA58, r0
  Str          r3, r2
  Print        r3
  // print(str(validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")))
  Const        r5, "17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j"
  Move         r4, r5
  Call         r6, validA58, r4
  Str          r7, r6
  Print        r7
  Return       r0

  // fun indexOf(s: string, ch: string): int {
func indexOf (regs=14)
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L2:
  // while i < len(s) {
  Len          r4, r0
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // if s[i:i+1] == ch {
  Move         r6, r3
  Const        r8, 1
  AddInt       r9, r3, r8
  Move         r7, r9
  Slice        r10, r0, r6, r7
  Equal        r11, r10, r1
  JumpIfFalse  r11, L1
  // return i
  Return       r3
L1:
  // i = i + 1
  Const        r8, 1
  AddInt       r12, r3, r8
  Move         r3, r12
  // while i < len(s) {
  Jump         L2
L0:
  // return -1
  Const        r8, 1
  NegInt       r13, r8
  Return       r13

  // fun set58(addr: string): list<int> {
func set58 (regs=39)
  // let tmpl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
  Const        r1, "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
  Move         r2, r1
  // var a: list<int> = []
  Const        r3, []
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L1:
  // while i < 25 {
  Const        r7, 25
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // a = append(a, 0)
  Const        r5, 0
  Append       r9, r4, r5
  Move         r4, r9
  // i = i + 1
  Const        r10, 1
  AddInt       r11, r6, r10
  Move         r6, r11
  // while i < 25 {
  Jump         L1
L0:
  // var idx = 0
  Const        r5, 0
  Move         r12, r5
L7:
  // while idx < len(addr) {
  Len          r13, r0
  LessInt      r14, r12, r13
  JumpIfFalse  r14, L2
  // let ch = addr[idx:idx+1]
  Move         r15, r12
  Const        r10, 1
  AddInt       r17, r12, r10
  Move         r16, r17
  Slice        r18, r0, r15, r16
  Move         r19, r18
  // var c = indexOf(tmpl, ch)
  Move         r20, r2
  Move         r21, r19
  Call2        r22, indexOf, r20, r21
  Move         r23, r22
  // if c < 0 {
  Const        r5, 0
  Less         r24, r23, r5
  JumpIfFalse  r24, L3
  // return []
  Const        r3, []
  Return       r3
L3:
  // var j = 24
  Const        r25, 24
  Move         r26, r25
L5:
  // while j >= 0 {
  Const        r5, 0
  LessEqInt    r27, r5, r26
  JumpIfFalse  r27, L4
  // c = c + 58 * a[j]
  Const        r28, 58
  Index        r29, r4, r26
  Mul          r30, r28, r29
  Add          r31, r23, r30
  Move         r23, r31
  // a[j] = c % 256
  Const        r32, 256
  Mod          r33, r23, r32
  SetIndex     r4, r26, r33
  // c = (c / 256) as int
  Const        r32, 256
  Div          r34, r23, r32
  Cast         r35, r34, int
  Move         r23, r35
  // j = j - 1
  Const        r10, 1
  SubInt       r36, r26, r10
  Move         r26, r36
  // while j >= 0 {
  Jump         L5
L4:
  // if c > 0 {
  Const        r5, 0
  Less         r37, r5, r23
  JumpIfFalse  r37, L6
  // return []
  Const        r3, []
  Return       r3
L6:
  // idx = idx + 1
  Const        r10, 1
  AddInt       r38, r12, r10
  Move         r12, r38
  // while idx < len(addr) {
  Jump         L7
L2:
  // return a
  Return       r4

  // fun doubleSHA256(bs: list<int>): list<int> {
func doubleSHA256 (regs=4)
  // let first = sha256(bs)
  SHA256       1,0,0,0
  Move         r2, r1
  // return sha256(first)
  SHA256       3,2,0,0
  Return       r3

  // fun computeChecksum(a: list<int>): list<int> {
func computeChecksum (regs=13)
  // let hash = doubleSHA256(a[0:21])
  Const        r3, 0
  Move         r2, r3
  Const        r5, 21
  Move         r4, r5
  Slice        r6, r0, r2, r4
  Move         r1, r6
  Call         r7, doubleSHA256, r1
  Move         r8, r7
  // return hash[0:4]
  Const        r3, 0
  Move         r9, r3
  Const        r11, 4
  Move         r10, r11
  Slice        r12, r8, r9, r10
  Return       r12

  // fun validA58(addr: string): bool {
func validA58 (regs=25)
  // let a = set58(addr)
  Move         r1, r0
  Call         r2, set58, r1
  Move         r3, r2
  // if len(a) != 25 { return false }
  Len          r4, r3
  Const        r5, 25
  NotEqual     r6, r4, r5
  JumpIfFalse  r6, L0
  Const        r7, false
  Return       r7
L0:
  // if a[0] != 0 { return false }
  Const        r8, 0
  Index        r9, r3, r8
  Const        r8, 0
  NotEqual     r10, r9, r8
  JumpIfFalse  r10, L1
  Const        r7, false
  Return       r7
L1:
  // let sum = computeChecksum(a)
  Move         r11, r3
  Call         r12, computeChecksum, r11
  Move         r13, r12
  // var i = 0
  Const        r8, 0
  Move         r14, r8
L4:
  // while i < 4 {
  Const        r15, 4
  LessInt      r16, r14, r15
  JumpIfFalse  r16, L2
  // if a[21+i] != sum[i] {
  Const        r17, 21
  AddInt       r18, r17, r14
  Index        r19, r3, r18
  Index        r20, r13, r14
  NotEqual     r21, r19, r20
  JumpIfFalse  r21, L3
  // return false
  Const        r7, false
  Return       r7
L3:
  // i = i + 1
  Const        r22, 1
  AddInt       r23, r14, r22
  Move         r14, r23
  // while i < 4 {
  Jump         L4
L2:
  // return true
  Const        r24, true
  Return       r24
