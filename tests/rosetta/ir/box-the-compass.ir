func main (regs=39)
  // let compassPoint = [
  Const        r3, ["North", "North by east", "North-northeast", "Northeast by north", "Northeast", "Northeast by east", "East-northeast", "East by north", "East", "East by south", "East-southeast", "Southeast by east", "Southeast", "Southeast by south", "South-southeast", "South by east", "South", "South by west", "South-southwest", "Southwest by south", "Southwest", "Southwest by west", "West-southwest", "West by south", "West", "West by north", "West-northwest", "Northwest by west", "Northwest", "Northwest by north", "North-northwest", "North by west"]
  Move         r0, r3
  SetGlobal    0,0,0,0
  // let headings = [
  Const        r4, [0.0, 16.87, 16.88, 33.75, 50.62, 50.63, 67.5, 84.37, 84.38, 101.25, 118.12, 118.13, 135.0, 151.87, 151.88, 168.75, 185.62, 185.63, 202.5, 219.37, 219.38, 236.25, 253.12, 253.13, 270.0, 286.87, 286.88, 303.75, 320.62, 320.63, 337.5, 354.37, 354.38]
  Move         r1, r4
  SetGlobal    1,1,0,0
  // print("Index  Compass point         Degree")
  Const        r5, "Index  Compass point         Degree"
  Print        r5
  // var i = 0
  Const        r6, 0
  Move         r2, r6
  SetGlobal    2,2,0,0
L1:
  // while i < len(headings) {
  Const        r7, 33
  LessInt      r8, r2, r7
  JumpIfFalse  r8, L0
  // let h = headings[i]
  Index        r9, r1, r2
  Move         r10, r9
  // let idx = i % 32 + 1
  Const        r11, 32
  ModInt       r12, r2, r11
  Const        r13, 1
  AddInt       r14, r12, r13
  Move         r15, r14
  // let cp = degrees2compasspoint(h)
  Move         r16, r10
  Call         r17, degrees2compasspoint, r16
  Move         r18, r17
  // print(padLeft(str(idx), 4) + "   " + padRight(cp, 19) + " " + format2(h) + "°")
  Str          r21, r15
  Move         r19, r21
  Const        r22, 4
  Move         r20, r22
  Call2        r23, padLeft, r19, r20
  Const        r24, "   "
  Add          r25, r23, r24
  Move         r26, r18
  Const        r28, 19
  Move         r27, r28
  Call2        r29, padRight, r26, r27
  Add          r30, r25, r29
  Const        r31, " "
  Add          r32, r30, r31
  Move         r33, r10
  Call         r34, format2, r33
  Add          r35, r32, r34
  Const        r36, "°"
  Add          r37, r35, r36
  Print        r37
  // i = i + 1
  Const        r13, 1
  AddInt       r38, r2, r13
  Move         r2, r38
  SetGlobal    2,2,0,0
  // while i < len(headings) {
  Jump         L1
L0:
  Return       r0

  // fun padLeft(s: string, w: int): string {
func padLeft (regs=17)
  // var res = ""
  Const        r5, ""
  Move         r6, r5
  // var n = w - len(s)
  Len          r7, r3
  Sub          r8, r4, r7
  Move         r9, r8
L1:
  // while n > 0 {
  Const        r10, 0
  Less         r11, r10, r9
  JumpIfFalse  r11, L0
  // res = res + " "
  Const        r12, " "
  Add          r13, r6, r12
  Move         r6, r13
  // n = n - 1
  Const        r14, 1
  Sub          r15, r9, r14
  Move         r9, r15
  // while n > 0 {
  Jump         L1
L0:
  // return res + s
  Add          r16, r6, r3
  Return       r16

  // fun padRight(s: string, w: int): string {
func padRight (regs=12)
  // var out = s
  Move         r5, r3
  // var i = len(s)
  Len          r6, r3
  Move         r2, r6
  SetGlobal    2,2,0,0
L1:
  // while i < w {
  Less         r7, r2, r4
  JumpIfFalse  r7, L0
  // out = out + " "
  Const        r8, " "
  Add          r9, r5, r8
  Move         r5, r9
  // i = i + 1
  Const        r10, 1
  AddInt       r11, r2, r10
  Move         r2, r11
  SetGlobal    2,2,0,0
  // while i < w {
  Jump         L1
L0:
  // return out
  Return       r5

  // fun indexOf(s: string, ch: string): int {
func indexOf (regs=14)
  // var i = 0
  Const        r5, 0
  Move         r2, r5
  SetGlobal    2,2,0,0
L2:
  // while i < len(s) {
  Len          r6, r3
  LessInt      r7, r2, r6
  JumpIfFalse  r7, L0
  // if substring(s, i, i+1) == ch {
  Const        r8, 1
  AddInt       r9, r2, r8
  Slice        r10, r3, r2, r9
  Equal        r11, r10, r4
  JumpIfFalse  r11, L1
  // return i
  Return       r2
L1:
  // i = i + 1
  Const        r8, 1
  AddInt       r12, r2, r8
  Move         r2, r12
  SetGlobal    2,2,0,0
  // while i < len(s) {
  Jump         L2
L0:
  // return -1
  Const        r8, 1
  NegInt       r13, r8
  Return       r13

  // fun format2(f: float): string {
func format2 (regs=25)
  // var s = str(f)
  Str          r4, r3
  Move         r5, r4
  // let idx = indexOf(s, ".")
  Move         r6, r5
  Const        r8, "."
  Move         r7, r8
  Call2        r9, indexOf, r6, r7
  Move         r10, r9
  // if idx < 0 {
  Const        r11, 0
  Less         r12, r10, r11
  JumpIfFalse  r12, L0
  // s = s + ".00"
  Const        r13, ".00"
  Add          r14, r5, r13
  Move         r5, r14
  // if idx < 0 {
  Jump         L1
L0:
  // var need = idx + 3
  Const        r15, 3
  Add          r16, r10, r15
  Move         r17, r16
  // if len(s) > need {
  Len          r18, r5
  Less         r19, r17, r18
  JumpIfFalse  r19, L2
  // s = substring(s, 0, need)
  Const        r11, 0
  Slice        r20, r5, r11, r17
  Move         r5, r20
  // if len(s) > need {
  Jump         L1
L2:
  // while len(s) < need {
  Len          r21, r5
  Less         r22, r21, r17
  JumpIfFalse  r22, L1
  // s = s + "0"
  Const        r23, "0"
  Add          r24, r5, r23
  Move         r5, r24
  // while len(s) < need {
  Jump         L2
L1:
  // return s
  Return       r5

  // fun cpx(h: float): int {
func cpx (regs=15)
  // var x = ((h / 11.25) + 0.5) as int
  Const        r4, 11.25
  DivFloat     r5, r3, r4
  Const        r6, 0.5
  AddFloat     r7, r5, r6
  Cast         r8, r7, int
  Move         r9, r8
  // x = x % 32
  Const        r10, 32
  Mod          r11, r9, r10
  Move         r9, r11
  // if x < 0 { x = x + 32 }
  Const        r12, 0
  Less         r13, r9, r12
  JumpIfFalse  r13, L0
  Const        r10, 32
  Add          r14, r9, r10
  Move         r9, r14
L0:
  // return x
  Return       r9

  // fun degrees2compasspoint(h: float): string {
func degrees2compasspoint (regs=7)
  // return compassPoint[cpx(h)]
  Move         r4, r3
  Call         r5, cpx, r4
  Index        r6, r0, r5
  Return       r6
