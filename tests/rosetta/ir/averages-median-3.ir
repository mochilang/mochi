func main (regs=8)
  // print(str(median([3.0, 1.0, 4.0, 1.0])))
  Const        r1, [3.0, 1.0, 4.0, 1.0]
  Move         r0, r1
  Call         r2, median, r0
  Str          r3, r2
  Print        r3
  // print(str(median([3.0, 1.0, 4.0, 1.0, 5.0])))
  Const        r5, [3.0, 1.0, 4.0, 1.0, 5.0]
  Move         r4, r5
  Call         r6, median, r4
  Str          r7, r6
  Print        r7
  Return       r0

  // fun qsel(a: list<float>, k: int): float {
func qsel (regs=43)
  // var arr = a
  Move         r2, r0
L6:
  // while len(arr) > 1 {
  Len          r3, r2
  Const        r4, 1
  LessInt      r5, r4, r3
  JumpIfFalse  r5, L0
  // var px = now() % len(arr)
  Now          r6
  Len          r7, r2
  ModInt       r8, r6, r7
  Move         r9, r8
  // var pv = arr[px]
  Index        r10, r2, r9
  Move         r11, r10
  // let last = len(arr) - 1
  Len          r12, r2
  Const        r4, 1
  SubInt       r13, r12, r4
  Move         r14, r13
  // let tmp = arr[px]
  Index        r15, r2, r9
  Move         r16, r15
  // arr[px] = arr[last]
  Index        r17, r2, r14
  SetIndex     r2, r9, r17
  // arr[last] = tmp
  SetIndex     r2, r14, r16
  // px = 0
  Const        r18, 0
  Move         r9, r18
  // var i = 0
  Const        r18, 0
  Move         r19, r18
L3:
  // while i < last {
  LessInt      r20, r19, r14
  JumpIfFalse  r20, L1
  // let v = arr[i]
  Index        r21, r2, r19
  Move         r22, r21
  // if v < pv {
  Less         r23, r22, r11
  JumpIfFalse  r23, L2
  // let tmp2 = arr[px]
  Index        r24, r2, r9
  Move         r25, r24
  // arr[px] = arr[i]
  Index        r26, r2, r19
  SetIndex     r2, r9, r26
  // arr[i] = tmp2
  SetIndex     r2, r19, r25
  // px = px + 1
  Const        r4, 1
  AddInt       r27, r9, r4
  Move         r9, r27
L2:
  // i = i + 1
  Const        r4, 1
  AddInt       r28, r19, r4
  Move         r19, r28
  // while i < last {
  Jump         L3
L1:
  // if px == k {
  Equal        r29, r9, r1
  JumpIfFalse  r29, L4
  // return pv
  Return       r11
L4:
  // if k < px {
  Less         r30, r1, r9
  JumpIfFalse  r30, L5
  // arr = arr[0:px]
  Const        r18, 0
  Move         r31, r18
  Move         r32, r9
  Slice        r33, r2, r31, r32
  Move         r2, r33
  // if k < px {
  Jump         L6
L5:
  // let tmp2 = arr[px]
  Index        r34, r2, r9
  Move         r35, r34
  // arr[px] = pv
  SetIndex     r2, r9, r11
  // arr[last] = tmp2
  SetIndex     r2, r14, r35
  // arr = arr[(px + 1):]
  Const        r4, 1
  AddInt       r37, r9, r4
  Move         r36, r37
  Const        r38, nil
  Slice        r39, r2, r36, r38
  Move         r2, r39
  // k = k - (px + 1)
  Const        r4, 1
  AddInt       r40, r9, r4
  Sub          r41, r1, r40
  Move         r1, r41
  // while len(arr) > 1 {
  Jump         L6
L0:
  // return arr[0]
  Const        r18, 0
  Index        r42, r2, r18
  Return       r42

  // fun median(list: list<float>): float {
func median (regs=23)
  // var arr = list
  Move         r1, r0
  // let half = (len(arr) / 2) as int
  Len          r2, r1
  Const        r3, 2
  DivInt       r4, r2, r3
  Cast         r5, r4, int
  Move         r6, r5
  // let med = qsel(arr, half)
  Move         r7, r1
  Move         r8, r6
  Call2        r9, qsel, r7, r8
  Move         r10, r9
  // if len(arr) % 2 == 0 {
  Len          r11, r1
  Const        r3, 2
  ModInt       r12, r11, r3
  Const        r13, 0
  EqualInt     r14, r12, r13
  JumpIfFalse  r14, L0
  // return (med + qsel(arr, half-1)) / 2.0
  Move         r15, r1
  Const        r17, 1
  Sub          r18, r6, r17
  Move         r16, r18
  Call2        r19, qsel, r15, r16
  Add          r20, r10, r19
  Const        r21, 2.0
  DivFloat     r22, r20, r21
  Return       r22
L0:
  // return med
  Return       r10
