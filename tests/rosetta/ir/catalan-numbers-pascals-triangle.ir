func main (regs=53)
  // let n = 15
  Const        r2, 15
  Move         r0, r2
  SetGlobal    0,0,0,0
  // var t: list<int> = []
  Const        r3, []
  Move         r1, r3
  SetGlobal    1,1,0,0
  // for _ in 0..(n+2) {
  Const        r4, 0
  Const        r5, 2
  Const        r6, 17
  Move         r7, r4
L1:
  LessInt      r8, r7, r6
  JumpIfFalse  r8, L0
  // t = append(t, 0)
  Const        r4, 0
  Append       r9, r1, r4
  Move         r1, r9
  SetGlobal    1,1,0,0
  // for _ in 0..(n+2) {
  Const        r10, 1
  AddInt       r11, r7, r10
  Move         r7, r11
  Jump         L1
L0:
  // t[1] = 1
  Const        r12, 1
  Const        r12, 1
  SetIndex     r1, r12, r12
  SetGlobal    1,1,0,0
  // for i in 1..(n+1) {
  Const        r12, 1
  Const        r12, 1
  AddInt       r13, r0, r12
  Move         r14, r12
L9:
  LessInt      r15, r14, r13
  JumpIfFalse  r15, L2
  // var j = i
  Move         r16, r14
L4:
  // while j > 1 {
  Const        r12, 1
  LessInt      r17, r12, r16
  JumpIfFalse  r17, L3
  // t[j] = t[j] + t[j-1]
  Index        r18, r1, r16
  Const        r12, 1
  SubInt       r19, r16, r12
  Index        r20, r1, r19
  Add          r21, r18, r20
  SetIndex     r1, r16, r21
  SetGlobal    1,1,0,0
  // j = j - 1
  Const        r12, 1
  SubInt       r22, r16, r12
  Move         r16, r22
  // while j > 1 {
  Jump         L4
L3:
  // t[(i+1) as int] = t[i]
  Index        r23, r1, r14
  Const        r12, 1
  AddInt       r24, r14, r12
  Cast         r25, r24, int
  SetIndex     r1, r25, r23
  SetGlobal    1,1,0,0
  // j = i + 1
  Const        r12, 1
  AddInt       r26, r14, r12
  Move         r16, r26
L6:
  // while j > 1 {
  Const        r12, 1
  LessInt      r27, r12, r16
  JumpIfFalse  r27, L5
  // t[j] = t[j] + t[j-1]
  Index        r28, r1, r16
  Const        r12, 1
  SubInt       r29, r16, r12
  Index        r30, r1, r29
  Add          r31, r28, r30
  SetIndex     r1, r16, r31
  SetGlobal    1,1,0,0
  // j = j - 1
  Const        r12, 1
  SubInt       r32, r16, r12
  Move         r16, r32
  // while j > 1 {
  Jump         L6
L5:
  // let cat = t[i+1] - t[i]
  Const        r12, 1
  AddInt       r33, r14, r12
  Index        r34, r1, r33
  Index        r35, r1, r14
  Sub          r36, r34, r35
  Move         r37, r36
  // if i < 10 {
  Const        r38, 10
  LessInt      r39, r14, r38
  JumpIfFalse  r39, L7
  // print(" " + str(i) + " : " + str(cat))
  Const        r40, " "
  Str          r41, r14
  Add          r42, r40, r41
  Const        r43, " : "
  Add          r44, r42, r43
  Str          r45, r37
  Add          r46, r44, r45
  Print        r46
  // if i < 10 {
  Jump         L8
L7:
  // print(str(i) + " : " + str(cat))
  Str          r47, r14
  Const        r43, " : "
  Add          r48, r47, r43
  Str          r49, r37
  Add          r50, r48, r49
  Print        r50
L8:
  // for i in 1..(n+1) {
  Const        r51, 1
  AddInt       r52, r14, r51
  Move         r14, r52
  Jump         L9
L2:
  Return       r0
