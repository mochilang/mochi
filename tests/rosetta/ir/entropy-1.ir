func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun log2(x: float): float {
func log2 (regs=34)
  // var k = 0.0
  Const        r1, 0.0
  Move         r2, r1
  // var v = x
  Move         r3, r0
L1:
  // while v >= 2.0 {
  Const        r4, 2.0
  LessEqFloat  r5, r4, r3
  JumpIfFalse  r5, L0
  // v = v / 2.0
  Const        r4, 2.0
  DivFloat     r6, r3, r4
  Move         r3, r6
  // k = k + 1.0
  Const        r7, 1.0
  AddFloat     r8, r2, r7
  Move         r2, r8
  // while v >= 2.0 {
  Jump         L1
L0:
  // while v < 1.0 {
  Const        r7, 1.0
  LessFloat    r9, r3, r7
  JumpIfFalse  r9, L2
  // v = v * 2.0
  Const        r4, 2.0
  MulFloat     r10, r3, r4
  Move         r3, r10
  // k = k - 1.0
  Const        r7, 1.0
  SubFloat     r11, r2, r7
  Move         r2, r11
  // while v < 1.0 {
  Jump         L0
L2:
  // let z = (v - 1.0) / (v + 1.0)
  Const        r7, 1.0
  SubFloat     r12, r3, r7
  Const        r7, 1.0
  AddFloat     r13, r3, r7
  DivFloat     r14, r12, r13
  Move         r15, r14
  // var zpow = z
  Move         r16, r15
  // var sum = z
  Move         r17, r15
  // var i = 3
  Const        r18, 3
  Move         r19, r18
L4:
  // while i <= 9 {
  Const        r20, 9
  LessEqInt    r21, r19, r20
  JumpIfFalse  r21, L3
  // zpow = zpow * z * z
  MulFloat     r22, r16, r15
  MulFloat     r23, r22, r15
  Move         r16, r23
  // sum = sum + zpow / (i as float)
  Cast         r24, r19, float
  DivFloat     r25, r16, r24
  AddFloat     r26, r17, r25
  Move         r17, r26
  // i = i + 2
  Const        r27, 2
  AddInt       r28, r19, r27
  Move         r19, r28
  // while i <= 9 {
  Jump         L4
L3:
  // let ln2 = 0.6931471805599453
  Const        r29, 0.6931471805599453
  Move         r30, r29
  // return k + 2.0 * sum / ln2
  Const        r4, 2.0
  MulFloat     r31, r4, r17
  Const        r29, 0.6931471805599453
  DivFloat     r32, r31, r29
  AddFloat     r33, r2, r32
  Return       r33

  // fun H(data: string): float {
func H (regs=39)
  // if data == "" { return 0.0 }
  Const        r1, ""
  Equal        r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, 0.0
  Return       r3
L0:
  // var counts: map<string,int> = {}
  Const        r4, {}
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L4:
  // while i < len(data) {
  Len          r8, r0
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L1
  // let ch = substring(data, i, i+1)
  Const        r10, 1
  AddInt       r11, r7, r10
  Slice        r12, r0, r7, r11
  Move         r13, r12
  // if ch in counts {
  In           r14, r13, r5
  JumpIfFalse  r14, L2
  // counts[ch] = counts[ch] + 1
  Index        r15, r5, r13
  Const        r10, 1
  Add          r16, r15, r10
  SetIndex     r5, r13, r16
  // if ch in counts {
  Jump         L3
L2:
  // counts[ch] = 1
  Const        r10, 1
  SetIndex     r5, r13, r10
L3:
  // i = i + 1
  Const        r10, 1
  AddInt       r17, r7, r10
  Move         r7, r17
  // while i < len(data) {
  Jump         L4
L1:
  // var entropy = 0.0
  Const        r3, 0.0
  Move         r18, r3
  // let l = len(data) as float
  Len          r19, r0
  Cast         r20, r19, float
  Move         r21, r20
  // for ch in counts {
  IterPrep     r22, r5
  Len          r23, r22
  Const        r24, 0
L7:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L5
  Index        r26, r22, r24
  Move         r27, r26
  // let px = (counts[ch] as float) / l
  Index        r28, r5, r27
  Cast         r29, r28, float
  Div          r30, r29, r21
  Move         r31, r30
  // if px > 0.0 {
  Const        r3, 0.0
  LessFloat    r32, r3, r31
  JumpIfFalse  r32, L6
  // entropy = entropy - px * log2(px)
  Move         r33, r31
  Call         r34, log2, r33
  Mul          r35, r31, r34
  SubFloat     r36, r18, r35
  Move         r18, r36
L6:
  // for ch in counts {
  Const        r37, 1
  AddInt       r38, r24, r37
  Move         r24, r38
  Jump         L7
L5:
  // return entropy
  Return       r18

  // fun main() {
func main (regs=4)
  // print(str(H("1223334444")))
  Const        r1, "1223334444"
  Move         r0, r1
  Call         r2, H, r0
  Str          r3, r2
  Print        r3
  Return       r0
