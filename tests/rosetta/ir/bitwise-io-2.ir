func main (regs=1)
  // Example()
  Call         r0, Example, 
  Return       r0

  // fun pow2(n: int): int {
func pow2 (regs=9)
  // var v = 1
  Const        r1, 1
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L1:
  // while i < n { v = v * 2; i = i + 1 }
  Less         r5, r4, r0
  JumpIfFalse  r5, L0
  Const        r6, 2
  MulInt       r7, r2, r6
  Move         r2, r7
  Const        r1, 1
  AddInt       r8, r4, r1
  Move         r4, r8
  Jump         L1
L0:
  // return v
  Return       r2

  // fun lshift(x: int, n: int): int { return x * pow2(n) }
func lshift (regs=5)
  // fun lshift(x: int, n: int): int { return x * pow2(n) }
  Move         r2, r1
  Call         r3, pow2, r2
  Mul          r4, r0, r3
  Return       r4

  // fun rshift(x: int, n: int): int { return x / pow2(n) }
func rshift (regs=5)
  // fun rshift(x: int, n: int): int { return x / pow2(n) }
  Move         r2, r1
  Call         r3, pow2, r2
  Div          r4, r0, r3
  Return       r4

  // fun NewWriter(order: string): Writer { return Writer{ order: order, bits:0, nbits:0, data: [] } }
func NewWriter (regs=14)
  // fun NewWriter(order: string): Writer { return Writer{ order: order, bits:0, nbits:0, data: [] } }
  Const        r1, 0
  Const        r1, 0
  Const        r2, []
  Const        r3, "__name"
  Const        r4, "Writer"
  Const        r5, "order"
  Move         r6, r0
  Const        r7, "bits"
  Move         r8, r1
  Const        r9, "nbits"
  Move         r10, r1
  Const        r11, "data"
  Move         r12, r2
  MakeMap      r13, 5, r3
  Return       r13

  // fun writeBitsLSB(w: Writer, c: int, width: int): Writer {
func writeBitsLSB (regs=29)
  // w.bits = w.bits + lshift(c, w.nbits)
  Const        r3, "bits"
  Index        r4, r0, r3
  Move         r5, r1
  Const        r7, "nbits"
  Index        r8, r0, r7
  Move         r6, r8
  Call2        r9, lshift, r5, r6
  Add          r10, r4, r9
  Const        r3, "bits"
  SetIndex     r0, r3, r10
  // w.nbits = w.nbits + width
  Const        r7, "nbits"
  Index        r11, r0, r7
  Add          r12, r11, r2
  Const        r7, "nbits"
  SetIndex     r0, r7, r12
L1:
  // while w.nbits >= 8 {
  Const        r7, "nbits"
  Index        r13, r0, r7
  Const        r14, 8
  LessEq       r15, r14, r13
  JumpIfFalse  r15, L0
  // let b = w.bits % 256
  Const        r3, "bits"
  Index        r16, r0, r3
  Const        r17, 256
  Mod          r18, r16, r17
  Move         r19, r18
  // w.data = append(w.data, b)
  Const        r20, "data"
  Index        r21, r0, r20
  Append       r22, r21, r19
  Const        r20, "data"
  SetIndex     r0, r20, r22
  // w.bits = rshift(w.bits, 8)
  Const        r3, "bits"
  Index        r25, r0, r3
  Move         r23, r25
  Const        r14, 8
  Move         r24, r14
  Call2        r26, rshift, r23, r24
  Const        r3, "bits"
  SetIndex     r0, r3, r26
  // w.nbits = w.nbits - 8
  Const        r7, "nbits"
  Index        r27, r0, r7
  Const        r14, 8
  Sub          r28, r27, r14
  Const        r7, "nbits"
  SetIndex     r0, r7, r28
  // while w.nbits >= 8 {
  Jump         L1
L0:
  // return w
  Return       r0

  // fun writeBitsMSB(w: Writer, c: int, width: int): Writer {
func writeBitsMSB (regs=37)
  // w.bits = w.bits + lshift(c, 32 - width - w.nbits)
  Const        r3, "bits"
  Index        r4, r0, r3
  Move         r5, r1
  Const        r7, 32
  Sub          r8, r7, r2
  Const        r9, "nbits"
  Index        r10, r0, r9
  Sub          r11, r8, r10
  Move         r6, r11
  Call2        r12, lshift, r5, r6
  Add          r13, r4, r12
  Const        r3, "bits"
  SetIndex     r0, r3, r13
  // w.nbits = w.nbits + width
  Const        r9, "nbits"
  Index        r14, r0, r9
  Add          r15, r14, r2
  Const        r9, "nbits"
  SetIndex     r0, r9, r15
L1:
  // while w.nbits >= 8 {
  Const        r9, "nbits"
  Index        r16, r0, r9
  Const        r17, 8
  LessEq       r18, r17, r16
  JumpIfFalse  r18, L0
  // let b = rshift(w.bits, 24) % 256
  Const        r3, "bits"
  Index        r21, r0, r3
  Move         r19, r21
  Const        r22, 24
  Move         r20, r22
  Call2        r23, rshift, r19, r20
  Const        r24, 256
  Mod          r25, r23, r24
  Move         r26, r25
  // w.data = append(w.data, b)
  Const        r27, "data"
  Index        r28, r0, r27
  Append       r29, r28, r26
  Const        r27, "data"
  SetIndex     r0, r27, r29
  // w.bits = (w.bits % pow2(24)) * 256
  Const        r3, "bits"
  Index        r30, r0, r3
  Const        r22, 24
  Move         r31, r22
  Call         r32, pow2, r31
  Mod          r33, r30, r32
  Const        r24, 256
  Mul          r34, r33, r24
  Const        r3, "bits"
  SetIndex     r0, r3, r34
  // w.nbits = w.nbits - 8
  Const        r9, "nbits"
  Index        r35, r0, r9
  Const        r17, 8
  Sub          r36, r35, r17
  Const        r9, "nbits"
  SetIndex     r0, r9, r36
  // while w.nbits >= 8 {
  Jump         L1
L0:
  // return w
  Return       r0

  // fun WriteBits(w: Writer, c: int, width: int): Writer {
func WriteBits (regs=15)
  // if w.order == "LSB" { return writeBitsLSB(w,c,width) }
  Const        r3, "order"
  Index        r4, r0, r3
  Const        r5, "LSB"
  Equal        r6, r4, r5
  JumpIfFalse  r6, L0
  Move         r7, r0
  Move         r8, r1
  Move         r9, r2
  Call         r10, writeBitsLSB, r7, r8, r9
  Return       r10
L0:
  // return writeBitsMSB(w,c,width)
  Move         r11, r0
  Move         r12, r1
  Move         r13, r2
  Call         r14, writeBitsMSB, r11, r12, r13
  Return       r14

  // fun CloseWriter(w: Writer): Writer {
func CloseWriter (regs=21)
  // if w.nbits > 0 {
  Const        r1, "nbits"
  Index        r2, r0, r1
  Const        r3, 0
  Less         r4, r3, r2
  JumpIfFalse  r4, L0
  // if w.order == "MSB" { w.bits = rshift(w.bits,24) }
  Const        r5, "order"
  Index        r6, r0, r5
  Const        r7, "MSB"
  Equal        r8, r6, r7
  JumpIfFalse  r8, L1
  Const        r11, "bits"
  Index        r12, r0, r11
  Move         r9, r12
  Const        r13, 24
  Move         r10, r13
  Call2        r14, rshift, r9, r10
  Const        r11, "bits"
  SetIndex     r0, r11, r14
L1:
  // w.data = append(w.data, w.bits % 256)
  Const        r15, "data"
  Index        r16, r0, r15
  Const        r11, "bits"
  Index        r17, r0, r11
  Const        r18, 256
  Mod          r19, r17, r18
  Append       r20, r16, r19
  Const        r15, "data"
  SetIndex     r0, r15, r20
L0:
  // w.bits = 0
  Const        r3, 0
  Const        r11, "bits"
  SetIndex     r0, r11, r3
  // w.nbits = 0
  Const        r3, 0
  Const        r1, "nbits"
  SetIndex     r0, r1, r3
  // return w
  Return       r0

  // fun NewReader(data: list<int>, order: string): Reader {
func NewReader (regs=16)
  // return Reader{ order: order, data: data, idx:0, bits:0, nbits:0 }
  Const        r2, 0
  Const        r2, 0
  Const        r2, 0
  Const        r3, "__name"
  Const        r4, "Reader"
  Const        r5, "order"
  Move         r6, r1
  Const        r7, "data"
  Move         r8, r0
  Const        r9, "idx"
  Move         r10, r2
  Const        r11, "bits"
  Move         r12, r2
  Const        r13, "nbits"
  Move         r14, r2
  MakeMap      r15, 6, r3
  Return       r15

  // fun readBitsLSB(r: Reader, width: int): map<string,any> {
func readBitsLSB (regs=51)
L2:
  // while r.nbits < width {
  Const        r2, "nbits"
  Index        r3, r0, r2
  Less         r4, r3, r1
  JumpIfFalse  r4, L0
  // if r.idx >= len(r.data) { return {"val":0, "eof":true} }
  Const        r5, "idx"
  Index        r6, r0, r5
  Const        r7, "data"
  Index        r8, r0, r7
  Len          r9, r8
  LessEq       r10, r9, r6
  JumpIfFalse  r10, L1
  Const        r11, {"eof": true, "val": 0}
  Return       r11
L1:
  // let b = r.data[r.idx]
  Const        r7, "data"
  Index        r12, r0, r7
  Const        r5, "idx"
  Index        r13, r0, r5
  Index        r14, r12, r13
  Move         r15, r14
  // r.idx = r.idx + 1
  Const        r5, "idx"
  Index        r16, r0, r5
  Const        r17, 1
  Add          r18, r16, r17
  Const        r5, "idx"
  SetIndex     r0, r5, r18
  // r.bits = r.bits + lshift(b, r.nbits)
  Const        r19, "bits"
  Index        r20, r0, r19
  Move         r21, r15
  Const        r2, "nbits"
  Index        r23, r0, r2
  Move         r22, r23
  Call2        r24, lshift, r21, r22
  Add          r25, r20, r24
  Const        r19, "bits"
  SetIndex     r0, r19, r25
  // r.nbits = r.nbits + 8
  Const        r2, "nbits"
  Index        r26, r0, r2
  Const        r27, 8
  Add          r28, r26, r27
  Const        r2, "nbits"
  SetIndex     r0, r2, r28
  // while r.nbits < width {
  Jump         L2
L0:
  // let mask = pow2(width) - 1
  Move         r29, r1
  Call         r30, pow2, r29
  Const        r17, 1
  Sub          r31, r30, r17
  Move         r32, r31
  // let out = r.bits % (mask + 1)
  Const        r19, "bits"
  Index        r33, r0, r19
  Const        r17, 1
  Add          r34, r32, r17
  Mod          r35, r33, r34
  Move         r36, r35
  // r.bits = rshift(r.bits, width)
  Const        r19, "bits"
  Index        r39, r0, r19
  Move         r37, r39
  Move         r38, r1
  Call2        r40, rshift, r37, r38
  Const        r19, "bits"
  SetIndex     r0, r19, r40
  // r.nbits = r.nbits - width
  Const        r2, "nbits"
  Index        r41, r0, r2
  Sub          r42, r41, r1
  Const        r2, "nbits"
  SetIndex     r0, r2, r42
  // return {"val": out, "eof": false}
  Const        r43, "val"
  Const        r44, "eof"
  Const        r45, false
  Move         r46, r43
  Move         r47, r36
  Move         r48, r44
  Move         r49, r45
  MakeMap      r50, 2, r46
  Return       r50

  // fun readBitsMSB(r: Reader, width: int): map<string,any> {
func readBitsMSB (regs=55)
L2:
  // while r.nbits < width {
  Const        r2, "nbits"
  Index        r3, r0, r2
  Less         r4, r3, r1
  JumpIfFalse  r4, L0
  // if r.idx >= len(r.data) { return {"val":0, "eof":true} }
  Const        r5, "idx"
  Index        r6, r0, r5
  Const        r7, "data"
  Index        r8, r0, r7
  Len          r9, r8
  LessEq       r10, r9, r6
  JumpIfFalse  r10, L1
  Const        r11, {"eof": true, "val": 0}
  Return       r11
L1:
  // let b = r.data[r.idx]
  Const        r7, "data"
  Index        r12, r0, r7
  Const        r5, "idx"
  Index        r13, r0, r5
  Index        r14, r12, r13
  Move         r15, r14
  // r.idx = r.idx + 1
  Const        r5, "idx"
  Index        r16, r0, r5
  Const        r17, 1
  Add          r18, r16, r17
  Const        r5, "idx"
  SetIndex     r0, r5, r18
  // r.bits = r.bits + lshift(b, 24 - r.nbits)
  Const        r19, "bits"
  Index        r20, r0, r19
  Move         r21, r15
  Const        r23, 24
  Const        r2, "nbits"
  Index        r24, r0, r2
  Sub          r25, r23, r24
  Move         r22, r25
  Call2        r26, lshift, r21, r22
  Add          r27, r20, r26
  Const        r19, "bits"
  SetIndex     r0, r19, r27
  // r.nbits = r.nbits + 8
  Const        r2, "nbits"
  Index        r28, r0, r2
  Const        r29, 8
  Add          r30, r28, r29
  Const        r2, "nbits"
  SetIndex     r0, r2, r30
  // while r.nbits < width {
  Jump         L2
L0:
  // let out = rshift(r.bits, 32 - width)
  Const        r19, "bits"
  Index        r33, r0, r19
  Move         r31, r33
  Const        r34, 32
  Sub          r35, r34, r1
  Move         r32, r35
  Call2        r36, rshift, r31, r32
  Move         r37, r36
  // r.bits = (r.bits * pow2(width)) % pow2(32)
  Const        r19, "bits"
  Index        r38, r0, r19
  Move         r39, r1
  Call         r40, pow2, r39
  Mul          r41, r38, r40
  Const        r34, 32
  Move         r42, r34
  Call         r43, pow2, r42
  Mod          r44, r41, r43
  Const        r19, "bits"
  SetIndex     r0, r19, r44
  // r.nbits = r.nbits - width
  Const        r2, "nbits"
  Index        r45, r0, r2
  Sub          r46, r45, r1
  Const        r2, "nbits"
  SetIndex     r0, r2, r46
  // return {"val": out, "eof": false}
  Const        r47, "val"
  Const        r48, "eof"
  Const        r49, false
  Move         r50, r47
  Move         r51, r37
  Move         r52, r48
  Move         r53, r49
  MakeMap      r54, 2, r50
  Return       r54

  // fun ReadBits(r: Reader, width: int): map<string,any> {
func ReadBits (regs=12)
  // if r.order == "LSB" { return readBitsLSB(r,width) }
  Const        r2, "order"
  Index        r3, r0, r2
  Const        r4, "LSB"
  Equal        r5, r3, r4
  JumpIfFalse  r5, L0
  Move         r6, r0
  Move         r7, r1
  Call2        r8, readBitsLSB, r6, r7
  Return       r8
L0:
  // return readBitsMSB(r,width)
  Move         r9, r0
  Move         r10, r1
  Call2        r11, readBitsMSB, r9, r10
  Return       r11

  // fun toBinary(n: int, bits: int): string {
func toBinary (regs=15)
  // var b = ""
  Const        r2, ""
  Move         r3, r2
  // var val = n
  Move         r4, r0
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L1:
  // while i < bits {
  Less         r7, r6, r1
  JumpIfFalse  r7, L0
  // b = str(val % 2) + b
  Const        r8, 2
  Mod          r9, r4, r8
  Str          r10, r9
  Add          r11, r10, r3
  Move         r3, r11
  // val = val / 2
  Const        r8, 2
  Div          r12, r4, r8
  Move         r4, r12
  // i = i + 1
  Const        r13, 1
  AddInt       r14, r6, r13
  Move         r6, r14
  // while i < bits {
  Jump         L1
L0:
  // return b
  Return       r3

  // fun bytesToBits(bs: list<int>): string {
func bytesToBits (regs=22)
  // var out = "["
  Const        r1, "["
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L2:
  // while i < len(bs) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // out = out + toBinary(bs[i],8)
  Index        r9, r0, r4
  Move         r7, r9
  Const        r10, 8
  Move         r8, r10
  Call2        r11, toBinary, r7, r8
  Add          r12, r2, r11
  Move         r2, r12
  // if i + 1 < len(bs) { out = out + " " }
  Const        r13, 1
  AddInt       r14, r4, r13
  Len          r15, r0
  LessInt      r16, r14, r15
  JumpIfFalse  r16, L1
  Const        r17, " "
  Add          r18, r2, r17
  Move         r2, r18
L1:
  // i = i + 1
  Const        r13, 1
  AddInt       r19, r4, r13
  Move         r4, r19
  // while i < len(bs) {
  Jump         L2
L0:
  // out = out + "]"
  Const        r20, "]"
  Add          r21, r2, r20
  Move         r2, r21
  // return out
  Return       r2

  // fun bytesToHex(bs: list<int>): string {
func bytesToHex (regs=33)
  // let digits = "0123456789ABCDEF"
  Const        r1, "0123456789ABCDEF"
  Move         r2, r1
  // var out = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L2:
  // while i < len(bs) {
  Len          r7, r0
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // let b = bs[i]
  Index        r9, r0, r6
  Move         r10, r9
  // let hi = b / 16
  Const        r11, 16
  Div          r12, r10, r11
  Move         r13, r12
  // let lo = b % 16
  Const        r11, 16
  Mod          r14, r10, r11
  Move         r15, r14
  // out = out + digits[hi:hi+1] + digits[lo:lo+1]
  Move         r16, r13
  Const        r18, 1
  Add          r19, r13, r18
  Move         r17, r19
  Slice        r20, r2, r16, r17
  Add          r21, r4, r20
  Move         r22, r15
  Const        r18, 1
  Add          r24, r15, r18
  Move         r23, r24
  Slice        r25, r2, r22, r23
  Add          r26, r21, r25
  Move         r4, r26
  // if i + 1 < len(bs) { out = out + " " }
  Const        r18, 1
  AddInt       r27, r6, r18
  Len          r28, r0
  LessInt      r29, r27, r28
  JumpIfFalse  r29, L1
  Const        r30, " "
  Add          r31, r4, r30
  Move         r4, r31
L1:
  // i = i + 1
  Const        r18, 1
  AddInt       r32, r6, r18
  Move         r6, r32
  // while i < len(bs) {
  Jump         L2
L0:
  // return out
  Return       r4

  // fun ord(ch: string): int {
func ord (regs=29)
  // let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  Const        r1, "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  Move         r2, r1
  // let lower = "abcdefghijklmnopqrstuvwxyz"
  Const        r3, "abcdefghijklmnopqrstuvwxyz"
  Move         r4, r3
  // var idx = indexOf(upper, ch)
  Move         r6, r5
  // if idx >= 0 { return 65 + idx }
  Const        r7, 0
  LessEq       r8, r7, r6
  JumpIfFalse  r8, L0
  Const        r9, 65
  Add          r10, r9, r6
  Return       r10
L0:
  // idx = indexOf(lower, ch)
  Move         r6, r11
  // if idx >= 0 { return 97 + idx }
  Const        r7, 0
  LessEq       r12, r7, r6
  JumpIfFalse  r12, L1
  Const        r13, 97
  Add          r14, r13, r6
  Return       r14
L1:
  // if ch >= "0" && ch <= "9" { return 48 + parseIntStr(ch) }
  Const        r15, "0"
  LessEq       r16, r15, r0
  Const        r17, "9"
  LessEq       r18, r0, r17
  Move         r19, r16
  JumpIfFalse  r19, L2
  Move         r19, r18
L2:
  JumpIfFalse  r19, L3
  Const        r20, 48
  Add          r22, r20, r21
  Return       r22
L3:
  // if ch == " " { return 32 }
  Const        r23, " "
  Equal        r24, r0, r23
  JumpIfFalse  r24, L4
  Const        r25, 32
  Return       r25
L4:
  // if ch == "." { return 46 }
  Const        r26, "."
  Equal        r27, r0, r26
  JumpIfFalse  r27, L5
  Const        r28, 46
  Return       r28
L5:
  // return 0
  Const        r7, 0
  Return       r7

  // fun chr(n: int): string {
func chr (regs=47)
  // let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  Const        r1, "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  Move         r2, r1
  // let lower = "abcdefghijklmnopqrstuvwxyz"
  Const        r3, "abcdefghijklmnopqrstuvwxyz"
  Move         r4, r3
  // if n >= 65 && n < 91 { return upper[n-65:n-64] }
  Const        r5, 65
  LessEq       r6, r5, r0
  Const        r7, 91
  Less         r8, r0, r7
  Move         r9, r6
  JumpIfFalse  r9, L0
  Move         r9, r8
L0:
  JumpIfFalse  r9, L1
  Const        r5, 65
  Sub          r11, r0, r5
  Move         r10, r11
  Const        r13, 64
  Sub          r14, r0, r13
  Move         r12, r14
  Slice        r15, r2, r10, r12
  Return       r15
L1:
  // if n >= 97 && n < 123 { return lower[n-97:n-96] }
  Const        r16, 97
  LessEq       r17, r16, r0
  Const        r18, 123
  Less         r19, r0, r18
  Move         r20, r17
  JumpIfFalse  r20, L2
  Move         r20, r19
L2:
  JumpIfFalse  r20, L3
  Const        r16, 97
  Sub          r22, r0, r16
  Move         r21, r22
  Const        r24, 96
  Sub          r25, r0, r24
  Move         r23, r25
  Slice        r26, r4, r21, r23
  Return       r26
L3:
  // if n >= 48 && n < 58 {
  Const        r27, 48
  LessEq       r28, r27, r0
  Const        r29, 58
  Less         r30, r0, r29
  Move         r31, r28
  JumpIfFalse  r31, L4
  Move         r31, r30
L4:
  JumpIfFalse  r31, L5
  // let digits = "0123456789"
  Const        r32, "0123456789"
  Move         r33, r32
  // return digits[n-48:n-47]
  Const        r27, 48
  Sub          r35, r0, r27
  Move         r34, r35
  Const        r37, 47
  Sub          r38, r0, r37
  Move         r36, r38
  Slice        r39, r33, r34, r36
  Return       r39
L5:
  // if n == 32 { return " " }
  Const        r40, 32
  Equal        r41, r0, r40
  JumpIfFalse  r41, L6
  Const        r42, " "
  Return       r42
L6:
  // if n == 46 { return "." }
  Const        r43, 46
  Equal        r44, r0, r43
  JumpIfFalse  r44, L7
  Const        r45, "."
  Return       r45
L7:
  // return "?"
  Const        r46, "?"
  Return       r46

  // fun bytesOfStr(s: string): list<int> {
func bytesOfStr (regs=16)
  // var bs: list<int> = []
  Const        r1, []
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L1:
  // while i < len(s) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // bs = append(bs, ord(s[i:i+1]))
  Move         r8, r4
  Const        r10, 1
  AddInt       r11, r4, r10
  Move         r9, r11
  Slice        r12, r0, r8, r9
  Move         r7, r12
  Call         r13, ord, r7
  Append       r14, r2, r13
  Move         r2, r14
  // i = i + 1
  Const        r10, 1
  AddInt       r15, r4, r10
  Move         r4, r15
  // while i < len(s) {
  Jump         L1
L0:
  // return bs
  Return       r2

  // fun bytesToDec(bs: list<int>): string {
func bytesToDec (regs=17)
  // var out = ""
  Const        r1, ""
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L2:
  // while i < len(bs) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // out = out + str(bs[i])
  Index        r7, r0, r4
  Str          r8, r7
  Add          r9, r2, r8
  Move         r2, r9
  // if i + 1 < len(bs) { out = out + " " }
  Const        r10, 1
  AddInt       r11, r4, r10
  Len          r12, r0
  LessInt      r13, r11, r12
  JumpIfFalse  r13, L1
  Const        r14, " "
  Add          r15, r2, r14
  Move         r2, r15
L1:
  // i = i + 1
  Const        r10, 1
  AddInt       r16, r4, r10
  Move         r4, r16
  // while i < len(bs) {
  Jump         L2
L0:
  // return out
  Return       r2

  // fun Example() {
func Example (regs=70)
  // let message = "This is a test."
  Const        r0, "This is a test."
  Move         r1, r0
  // let msgBytes = bytesOfStr(message)
  Const        r0, "This is a test."
  Move         r2, r0
  Call         r3, bytesOfStr, r2
  Move         r4, r3
  // print("\"" + message + "\" as bytes: " + bytesToDec(msgBytes))
  Const        r5, "\""
  Const        r0, "This is a test."
  Add          r6, r5, r0
  Const        r7, "\" as bytes: "
  Add          r8, r6, r7
  Move         r9, r4
  Call         r10, bytesToDec, r9
  Add          r11, r8, r10
  Print        r11
  // print("    original bits: " + bytesToBits(msgBytes))
  Const        r12, "    original bits: "
  Move         r13, r4
  Call         r14, bytesToBits, r13
  Add          r15, r12, r14
  Print        r15
  // var bw = NewWriter("MSB")
  Const        r17, "MSB"
  Move         r16, r17
  Call         r18, NewWriter, r16
  Move         r19, r18
  // var i = 0
  Const        r20, 0
  Move         r21, r20
L1:
  // while i < len(msgBytes) {
  Len          r22, r4
  LessInt      r23, r21, r22
  JumpIfFalse  r23, L0
  // bw = WriteBits(bw, msgBytes[i], 7)
  Move         r24, r19
  Index        r27, r4, r21
  Move         r25, r27
  Const        r28, 7
  Move         r26, r28
  Call         r29, WriteBits, r24, r25, r26
  Move         r19, r29
  // i = i + 1
  Const        r30, 1
  AddInt       r31, r21, r30
  Move         r21, r31
  // while i < len(msgBytes) {
  Jump         L1
L0:
  // bw = CloseWriter(bw)
  Move         r32, r19
  Call         r33, CloseWriter, r32
  Move         r19, r33
  // print("Written bitstream: " + bytesToBits(bw.data))
  Const        r34, "Written bitstream: "
  Const        r36, "data"
  Index        r37, r19, r36
  Move         r35, r37
  Call         r38, bytesToBits, r35
  Add          r39, r34, r38
  Print        r39
  // print("Written bytes: " + bytesToHex(bw.data))
  Const        r40, "Written bytes: "
  Const        r36, "data"
  Index        r42, r19, r36
  Move         r41, r42
  Call         r43, bytesToHex, r41
  Add          r44, r40, r43
  Print        r44
  // var br = NewReader(bw.data, "MSB")
  Const        r36, "data"
  Index        r47, r19, r36
  Move         r45, r47
  Const        r17, "MSB"
  Move         r46, r17
  Call2        r48, NewReader, r45, r46
  Move         r49, r48
  // var result = ""
  Const        r50, ""
  Move         r51, r50
L4:
  // while true {
  Const        r52, true
  // let r = ReadBits(br, 7)
  Move         r53, r49
  Const        r28, 7
  Move         r54, r28
  Call2        r55, ReadBits, r53, r54
  Move         r56, r55
  // if r["eof"] { break }
  Const        r57, "eof"
  Index        r58, r56, r57
  JumpIfFalse  r58, L2
  Jump         L3
L2:
  // let v = r["val"] as int
  Const        r59, "val"
  Index        r60, r56, r59
  Cast         r61, r60, int
  Move         r62, r61
  // if v != 0 { result = result + chr(v) }
  Const        r20, 0
  NotEqual     r63, r62, r20
  JumpIfFalse  r63, L4
  Move         r64, r62
  Call         r65, chr, r64
  Add          r66, r51, r65
  Move         r51, r66
  // while true {
  Jump         L4
L3:
  // print("Read back as \"" + result + "\"")
  Const        r67, "Read back as \""
  Add          r68, r67, r51
  Const        r5, "\""
  Add          r69, r68, r5
  Print        r69
  Return       r0
