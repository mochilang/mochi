func __main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun randPerm(n: int): list<int> {
func randPerm (regs=20)
  // var arr: list<int> = []
  Const        r1, []
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L1:
  // while i < n {
  Less         r5, r4, r0
  JumpIfFalse  r5, L0
  // arr = append(arr, i)
  Append       r6, r2, r4
  Move         r2, r6
  // i = i + 1
  Const        r7, 1
  AddInt       r8, r4, r7
  Move         r4, r8
  // while i < n {
  Jump         L1
L0:
  // var idx = n - 1
  Const        r7, 1
  Sub          r9, r0, r7
  Move         r10, r9
L3:
  // while idx > 0 {
  Const        r3, 0
  Less         r11, r3, r10
  JumpIfFalse  r11, L2
  // let j = now() % (idx + 1)
  Now          r12
  Const        r7, 1
  Add          r13, r10, r7
  Mod          r14, r12, r13
  Move         r15, r14
  // let tmp = arr[idx]
  Index        r16, r2, r10
  Move         r17, r16
  // arr[idx] = arr[j]
  Index        r18, r2, r15
  SetIndex     r2, r10, r18
  // arr[j] = tmp
  SetIndex     r2, r15, r17
  // idx = idx - 1
  Const        r7, 1
  Sub          r19, r10, r7
  Move         r10, r19
  // while idx > 0 {
  Jump         L3
L2:
  // return arr
  Return       r2

  // fun even(xs: list<int>): list<int> {
func even (regs=16)
  // var r: list<int> = []
  Const        r1, []
  Move         r2, r1
  // for x in xs {
  IterPrep     r3, r0
  Len          r4, r3
  Const        r5, 0
L2:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // if x % 2 == 0 { r = append(r, x) }
  Const        r9, 2
  Mod          r10, r8, r9
  Const        r11, 0
  Equal        r12, r10, r11
  JumpIfFalse  r12, L1
  Append       r13, r2, r8
  Move         r2, r13
L1:
  // for x in xs {
  Const        r14, 1
  AddInt       r15, r5, r14
  Move         r5, r15
  Jump         L2
L0:
  // return r
  Return       r2

  // fun reduceToEven(xs: list<int>): list<int> {
func reduceToEven (regs=18)
  // var arr = xs
  Move         r1, r0
  // var last = 0
  Const        r2, 0
  Move         r3, r2
  // var i = 0
  Const        r2, 0
  Move         r4, r2
L2:
  // while i < len(arr) {
  Len          r5, r1
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // let e = arr[i]
  Index        r7, r1, r4
  Move         r8, r7
  // if e % 2 == 0 {
  Const        r9, 2
  Mod          r10, r8, r9
  Const        r2, 0
  Equal        r11, r10, r2
  JumpIfFalse  r11, L1
  // arr[last] = e
  SetIndex     r1, r3, r8
  // last = last + 1
  Const        r12, 1
  AddInt       r13, r3, r12
  Move         r3, r13
L1:
  // i = i + 1
  Const        r12, 1
  AddInt       r14, r4, r12
  Move         r4, r14
  // while i < len(arr) {
  Jump         L2
L0:
  // return arr[:last]
  Const        r15, nil
  Move         r16, r3
  Slice        r17, r1, r15, r16
  Return       r17

  // fun listStr(xs: list<int>): string {
func listStr (regs=19)
  // var s = "["
  Const        r1, "["
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L2:
  // while i < len(xs) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // s = s + str(xs[i])
  Index        r7, r0, r4
  Str          r8, r7
  Add          r9, r2, r8
  Move         r2, r9
  // if i + 1 < len(xs) { s = s + " " }
  Const        r10, 1
  AddInt       r11, r4, r10
  Len          r12, r0
  LessInt      r13, r11, r12
  JumpIfFalse  r13, L1
  Const        r14, " "
  Add          r15, r2, r14
  Move         r2, r15
L1:
  // i = i + 1
  Const        r10, 1
  AddInt       r16, r4, r10
  Move         r4, r16
  // while i < len(xs) {
  Jump         L2
L0:
  // s = s + "]"
  Const        r17, "]"
  Add          r18, r2, r17
  Move         r2, r18
  // return s
  Return       r2

  // fun main() {
func main (regs=25)
  // var a = randPerm(20)
  Const        r1, 20
  Move         r0, r1
  Call         r2, randPerm, r0
  Move         r3, r2
  // var cap_a = 20
  Const        r1, 20
  Move         r4, r1
  // print(listStr(a))
  Move         r5, r3
  Call         r6, listStr, r5
  Print        r6
  // print(listStr(even(a)))
  Move         r8, r3
  Call         r9, even, r8
  Move         r7, r9
  Call         r10, listStr, r7
  Print        r10
  // print(listStr(a))
  Move         r11, r3
  Call         r12, listStr, r11
  Print        r12
  // a = reduceToEven(a)
  Move         r13, r3
  Call         r14, reduceToEven, r13
  Move         r3, r14
  // print(listStr(a))
  Move         r15, r3
  Call         r16, listStr, r15
  Print        r16
  // print("a len: " + str(len(a)) + " cap: " + str(cap_a))
  Const        r17, "a len: "
  Len          r18, r3
  Str          r19, r18
  Add          r20, r17, r19
  Const        r21, " cap: "
  Add          r22, r20, r21
  Str          r23, r4
  Add          r24, r22, r23
  Print        r24
  Return       r0
