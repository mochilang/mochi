func main (regs=7)
  // let target = "METHINKS IT IS LIKE A WEASEL"
  Const        r3, "METHINKS IT IS LIKE A WEASEL"
  Move         r0, r3
  SetGlobal    0,0,0,0
  // let chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ "
  Const        r4, "ABCDEFGHIJKLMNOPQRSTUVWXYZ "
  Move         r1, r4
  SetGlobal    1,1,0,0
  // var seed = 1
  Const        r5, 1
  Move         r2, r5
  SetGlobal    2,2,0,0
  // main()
  Call         r6, main, 
  Return       r0

  // fun randInt(s: int, n: int): list<int> {
func randInt (regs=16)
  // let next = (s * 1664525 + 1013904223) % 2147483647
  Const        r5, 1664525
  Mul          r6, r3, r5
  Const        r7, 1013904223
  Add          r8, r6, r7
  Const        r9, 2147483647
  Mod          r10, r8, r9
  Move         r11, r10
  // return [next, next % n]
  Move         r12, r11
  Mod          r14, r11, r4
  Move         r13, r14
  MakeList     r15, 2, r12
  Return       r15

  // fun randChar(): string {
func randChar (regs=16)
  // var r = randInt(seed, len(chars))
  Move         r3, r2
  Len          r5, r1
  Move         r4, r5
  Call2        r6, randInt, r3, r4
  Move         r7, r6
  // seed = r[0]
  Const        r8, 0
  Index        r9, r7, r8
  Move         r2, r9
  SetGlobal    2,2,0,0
  // let idx = r[1] as int
  Const        r10, 1
  Index        r11, r7, r10
  Cast         r12, r11, int
  Move         r13, r12
  // return substring(chars, idx, idx + 1)
  Const        r10, 1
  Add          r14, r13, r10
  Slice        r15, r1, r13, r14
  Return       r15

  // fun randomString(n: int): string {
func randomString (regs=13)
  // var s = ""
  Const        r4, ""
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L1:
  // while i < n {
  Less         r8, r7, r3
  JumpIfFalse  r8, L0
  // s = s + randChar()
  Call         r9, randChar, 
  Add          r10, r5, r9
  Move         r5, r10
  // i = i + 1
  Const        r11, 1
  AddInt       r12, r7, r11
  Move         r7, r12
  // while i < n {
  Jump         L1
L0:
  // return s
  Return       r5

  // fun fitness(s: string): int {
func fitness (regs=17)
  // var h = 0
  Const        r4, 0
  Move         r5, r4
  // var i = 0
  Const        r4, 0
  Move         r6, r4
L2:
  // while i < len(target) {
  Len          r7, r0
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // if substring(s, i, i + 1) != substring(target, i, i + 1) {
  Const        r9, 1
  AddInt       r10, r6, r9
  Slice        r11, r3, r6, r10
  Const        r9, 1
  AddInt       r12, r6, r9
  Slice        r13, r0, r6, r12
  NotEqual     r14, r11, r13
  JumpIfFalse  r14, L1
  // h = h + 1
  Const        r9, 1
  AddInt       r15, r5, r9
  Move         r5, r15
L1:
  // i = i + 1
  Const        r9, 1
  AddInt       r16, r6, r9
  Move         r6, r16
  // while i < len(target) {
  Jump         L2
L0:
  // return h
  Return       r5

  // fun mutate(p: string): string {
func mutate (regs=25)
  // var m = ""
  Const        r4, ""
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L3:
  // while i < len(p) {
  Len          r8, r3
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // var r = randInt(seed, 20)
  Move         r10, r2
  Const        r12, 20
  Move         r11, r12
  Call2        r13, randInt, r10, r11
  Move         r14, r13
  // seed = r[0]
  Const        r6, 0
  Index        r15, r14, r6
  Move         r2, r15
  SetGlobal    2,2,0,0
  // if r[1] == 0 {
  Const        r16, 1
  Index        r17, r14, r16
  Const        r6, 0
  Equal        r18, r17, r6
  JumpIfFalse  r18, L1
  // m = m + randChar()
  Call         r19, randChar, 
  Add          r20, r5, r19
  Move         r5, r20
  // if r[1] == 0 {
  Jump         L2
L1:
  // m = m + substring(p, i, i + 1)
  Const        r16, 1
  AddInt       r21, r7, r16
  Slice        r22, r3, r7, r21
  Add          r23, r5, r22
  Move         r5, r23
L2:
  // i = i + 1
  Const        r16, 1
  AddInt       r24, r7, r16
  Move         r7, r24
  // while i < len(p) {
  Jump         L3
L0:
  // return m
  Return       r5

  // fun main() {
func main (regs=28)
  // var parent = randomString(len(target))
  Len          r4, r0
  Move         r3, r4
  Call         r5, randomString, r3
  Move         r6, r5
  // print(parent)
  Print        r6
  // var best = fitness(parent)
  Move         r7, r6
  Call         r8, fitness, r7
  Move         r9, r8
  // var done = false
  Const        r10, false
  Move         r11, r10
L1:
  // while !done {
  Not          r12, r11
  JumpIfFalse  r12, L0
  // var i = 0
  Const        r13, 0
  Move         r14, r13
L3:
  // while i < 20 {
  Const        r15, 20
  LessInt      r16, r14, r15
  JumpIfFalse  r16, L1
  // let child = mutate(parent)
  Move         r17, r6
  Call         r18, mutate, r17
  Move         r19, r18
  // let f = fitness(child)
  Move         r20, r19
  Call         r21, fitness, r20
  Move         r22, r21
  // if f < best {
  Less         r23, r22, r9
  JumpIfFalse  r23, L2
  // best = f
  Move         r9, r22
  // parent = child
  Move         r6, r19
  // print(parent)
  Print        r6
  // if best == 0 {
  Const        r13, 0
  Equal        r24, r9, r13
  JumpIfFalse  r24, L2
  // done = true
  Const        r25, true
  Move         r11, r25
  // break
  Jump         L1
L2:
  // i = i + 1
  Const        r26, 1
  AddInt       r27, r14, r26
  Move         r14, r27
  // while i < 20 {
  Jump         L3
L0:
  Return       r0
