func main (regs=19)
  // let tests = [
  Const        r1, ["87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"]
  Move         r0, r1
  SetGlobal    0,0,0,0
  // for t in tests {
  IterPrep     r2, r0
  Len          r3, r2
  Const        r4, 0
L1:
  LessInt      r5, r4, r3
  JumpIfFalse  r5, L0
  Index        r6, r2, r4
  Move         r7, r6
  // print(padRight(t, 18) + " -> " + canonicalize(t))
  Move         r8, r7
  Const        r10, 18
  Move         r9, r10
  Call2        r11, padRight, r8, r9
  Const        r12, " -> "
  Add          r13, r11, r12
  Move         r14, r7
  Call         r15, canonicalize, r14
  Add          r16, r13, r15
  Print        r16
  // for t in tests {
  Const        r17, 1
  AddInt       r18, r4, r17
  Move         r4, r18
  Jump         L1
L0:
  Return       r0

  // fun split(s: string, sep: string): list<string> {
func split (regs=33)
  // var parts: list<string> = []
  Const        r3, []
  Move         r4, r3
  // var cur = ""
  Const        r5, ""
  Move         r6, r5
  // var i = 0
  Const        r7, 0
  Move         r8, r7
L3:
  // while i < len(s) {
  Len          r9, r1
  LessInt      r10, r8, r9
  JumpIfFalse  r10, L0
  // if len(sep) > 0 && i + len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
  Len          r11, r2
  Len          r12, r2
  AddInt       r13, r8, r12
  Const        r7, 0
  LessInt      r14, r7, r11
  Len          r15, r1
  LessEqInt    r16, r13, r15
  Len          r17, r2
  AddInt       r18, r8, r17
  Slice        r19, r1, r8, r18
  Equal        r20, r19, r2
  Move         r21, r14
  JumpIfFalse  r21, L1
  Move         r21, r16
  JumpIfFalse  r21, L1
  Move         r21, r20
L1:
  JumpIfFalse  r21, L2
  // parts = append(parts, cur)
  Append       r22, r4, r6
  Move         r4, r22
  // cur = ""
  Const        r5, ""
  Move         r6, r5
  // i = i + len(sep)
  Len          r23, r2
  AddInt       r24, r8, r23
  Move         r8, r24
  // if len(sep) > 0 && i + len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
  Jump         L3
L2:
  // cur = cur + s[i:i+1]
  Move         r25, r8
  Const        r27, 1
  AddInt       r28, r8, r27
  Move         r26, r28
  Slice        r29, r1, r25, r26
  Add          r30, r6, r29
  Move         r6, r30
  // i = i + 1
  Const        r27, 1
  AddInt       r31, r8, r27
  Move         r8, r31
  // while i < len(s) {
  Jump         L3
L0:
  // parts = append(parts, cur)
  Append       r32, r4, r6
  Move         r4, r32
  // return parts
  Return       r4

  // fun join(xs: list<string>, sep: string): string {
func join (regs=15)
  // var res = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L2:
  // while i < len(xs) {
  Len          r7, r1
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // if i > 0 { res = res + sep }
  Const        r5, 0
  LessInt      r9, r5, r6
  JumpIfFalse  r9, L1
  Add          r10, r4, r2
  Move         r4, r10
L1:
  // res = res + xs[i]
  Index        r11, r1, r6
  Add          r12, r4, r11
  Move         r4, r12
  // i = i + 1
  Const        r13, 1
  AddInt       r14, r6, r13
  Move         r6, r14
  // while i < len(xs) {
  Jump         L2
L0:
  // return res
  Return       r4

  // fun repeat(ch: string, n: int): string {
func repeat (regs=11)
  // var out = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L1:
  // while i < n {
  Less         r7, r6, r2
  JumpIfFalse  r7, L0
  // out = out + ch
  Add          r8, r4, r1
  Move         r4, r8
  // i = i + 1
  Const        r9, 1
  AddInt       r10, r6, r9
  Move         r6, r10
  // while i < n {
  Jump         L1
L0:
  // return out
  Return       r4

  // fun parseIntStr(str: string): int {
func parseIntStr (regs=31)
  // var i = 0
  Const        r2, 0
  Move         r3, r2
  // var neg = false
  Const        r4, false
  Move         r5, r4
  // if len(str) > 0 && str[0:1] == "-" {
  Len          r6, r1
  Const        r2, 0
  LessInt      r7, r2, r6
  Const        r2, 0
  Move         r8, r2
  Const        r10, 1
  Move         r9, r10
  Slice        r11, r1, r8, r9
  Const        r12, "-"
  Equal        r13, r11, r12
  Move         r14, r7
  JumpIfFalse  r14, L0
  Move         r14, r13
L0:
  JumpIfFalse  r14, L1
  // neg = true
  Const        r15, true
  Move         r5, r15
  // i = 1
  Const        r10, 1
  Move         r3, r10
L1:
  // var n = 0
  Const        r2, 0
  Move         r16, r2
  // let digits = {
  Const        r17, {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
  Move         r18, r17
L3:
  // while i < len(str) {
  Len          r19, r1
  LessInt      r20, r3, r19
  JumpIfFalse  r20, L2
  // n = n * 10 + digits[str[i:i+1]]
  Const        r21, 10
  MulInt       r22, r16, r21
  Move         r23, r3
  Const        r10, 1
  AddInt       r25, r3, r10
  Move         r24, r25
  Slice        r26, r1, r23, r24
  Index        r27, r18, r26
  Add          r28, r22, r27
  Move         r16, r28
  // i = i + 1
  Const        r10, 1
  AddInt       r29, r3, r10
  Move         r3, r29
  // while i < len(str) {
  Jump         L3
L2:
  // if neg { n = -n }
  JumpIfFalse  r5, L4
  Neg          r30, r16
  Move         r16, r30
L4:
  // return n
  Return       r16

  // fun toBinary(n: int, bits: int): string {
func toBinary (regs=17)
  // var b = ""
  Const        r3, ""
  Move         r4, r3
  // var val = n
  Move         r5, r1
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L1:
  // while i < bits {
  Less         r8, r7, r2
  JumpIfFalse  r8, L0
  // b = str(val % 2) + b
  Const        r9, 2
  Mod          r10, r5, r9
  Str          r11, r10
  Add          r12, r11, r4
  Move         r4, r12
  // val = (val / 2) as int
  Const        r9, 2
  Div          r13, r5, r9
  Cast         r14, r13, int
  Move         r5, r14
  // i = i + 1
  Const        r15, 1
  AddInt       r16, r7, r15
  Move         r7, r16
  // while i < bits {
  Jump         L1
L0:
  // return b
  Return       r4

  // fun binToInt(bits: string): int {
func binToInt (regs=18)
  // var n = 0
  Const        r2, 0
  Move         r3, r2
  // var i = 0
  Const        r2, 0
  Move         r4, r2
L1:
  // while i < len(bits) {
  Len          r5, r1
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // n = n * 2 + parseIntStr(bits[i:i+1])
  Const        r7, 2
  MulInt       r8, r3, r7
  Move         r10, r4
  Const        r12, 1
  AddInt       r13, r4, r12
  Move         r11, r13
  Slice        r14, r1, r10, r11
  Move         r9, r14
  Call         r15, parseIntStr, r9
  Add          r16, r8, r15
  Move         r3, r16
  // i = i + 1
  Const        r12, 1
  AddInt       r17, r4, r12
  Move         r4, r17
  // while i < len(bits) {
  Jump         L1
L0:
  // return n
  Return       r3

  // fun padRight(s: string, width: int): string {
func padRight (regs=8)
  // var out = s
  Move         r3, r1
L1:
  // while len(out) < width {
  Len          r4, r3
  Less         r5, r4, r2
  JumpIfFalse  r5, L0
  // out = out + " "
  Const        r6, " "
  Add          r7, r3, r6
  Move         r3, r7
  // while len(out) < width {
  Jump         L1
L0:
  // return out
  Return       r3

  // fun canonicalize(cidr: string): string {
func canonicalize (regs=70)
  // let parts = split(cidr, "/")
  Move         r2, r1
  Const        r4, "/"
  Move         r3, r4
  Call2        r5, split, r2, r3
  Move         r6, r5
  // let dotted = parts[0]
  Const        r7, 0
  Index        r8, r6, r7
  Move         r9, r8
  // let size = parseIntStr(parts[1])
  Const        r11, 1
  Index        r12, r6, r11
  Move         r10, r12
  Call         r13, parseIntStr, r10
  Move         r14, r13
  // var binParts: list<string> = []
  Const        r15, []
  Move         r16, r15
  // for p in split(dotted, ".") {
  Move         r17, r9
  Const        r19, "."
  Move         r18, r19
  Call2        r20, split, r17, r18
  IterPrep     r21, r20
  Len          r22, r21
  Const        r23, 0
L1:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L0
  Index        r25, r21, r23
  Move         r26, r25
  // binParts = append(binParts, toBinary(parseIntStr(p), 8))
  Move         r29, r26
  Call         r30, parseIntStr, r29
  Move         r27, r30
  Const        r31, 8
  Move         r28, r31
  Call2        r32, toBinary, r27, r28
  Append       r33, r16, r32
  Move         r16, r33
  // for p in split(dotted, ".") {
  Const        r34, 1
  AddInt       r35, r23, r34
  Move         r23, r35
  Jump         L1
L0:
  // var binary = join(binParts, "")
  Move         r36, r16
  Const        r38, ""
  Move         r37, r38
  Call2        r39, join, r36, r37
  Move         r40, r39
  // binary = binary[0:size] + repeat("0", 32 - size)
  Const        r7, 0
  Move         r41, r7
  Move         r42, r14
  Slice        r43, r40, r41, r42
  Const        r46, "0"
  Move         r44, r46
  Const        r47, 32
  Sub          r48, r47, r14
  Move         r45, r48
  Call2        r49, repeat, r44, r45
  Add          r50, r43, r49
  Move         r40, r50
  // var canonParts: list<string> = []
  Const        r15, []
  Move         r51, r15
  // var i = 0
  Const        r7, 0
  Move         r52, r7
L3:
  // while i < len(binary) {
  Len          r53, r40
  LessInt      r54, r52, r53
  JumpIfFalse  r54, L2
  // canonParts = append(canonParts, str(binToInt(binary[i:i+8])))
  Move         r56, r52
  Const        r31, 8
  AddInt       r58, r52, r31
  Move         r57, r58
  Slice        r59, r40, r56, r57
  Move         r55, r59
  Call         r60, binToInt, r55
  Str          r61, r60
  Append       r62, r51, r61
  Move         r51, r62
  // i = i + 8
  Const        r31, 8
  AddInt       r63, r52, r31
  Move         r52, r63
  // while i < len(binary) {
  Jump         L3
L2:
  // return join(canonParts, ".") + "/" + parts[1]
  Move         r64, r51
  Const        r19, "."
  Move         r65, r19
  Call2        r66, join, r64, r65
  Const        r4, "/"
  Add          r67, r66, r4
  Const        r11, 1
  Index        r68, r6, r11
  Add          r69, r67, r68
  Return       r69
