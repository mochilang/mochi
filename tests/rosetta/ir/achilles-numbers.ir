func main (regs=3)
  // var pps: map<int, bool> = {}
  Const        r1, {}
  Move         r0, r1
  SetGlobal    0,0,0,0
  // main()
  Call         r2, main, 
  Return       r0

  // fun pow10(exp: int): int {
func pow10 (regs=10)
  // var n = 1
  Const        r2, 1
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L1:
  // while i < exp {
  Less         r6, r5, r1
  JumpIfFalse  r6, L0
  // n = n * 10
  Const        r7, 10
  MulInt       r8, r3, r7
  Move         r3, r8
  // i = i + 1
  Const        r2, 1
  AddInt       r9, r5, r2
  Move         r5, r9
  // while i < exp {
  Jump         L1
L0:
  // return n
  Return       r3

  // fun totient(n: int): int {
func totient (regs=22)
  // var tot = n
  Move         r2, r1
  // var nn = n
  Move         r3, r1
  // var i = 2
  Const        r4, 2
  Move         r5, r4
L5:
  // while i * i <= nn {
  MulInt       r6, r5, r5
  LessEq       r7, r6, r3
  JumpIfFalse  r7, L0
  // if nn % i == 0 {
  Mod          r8, r3, r5
  Const        r9, 0
  Equal        r10, r8, r9
  JumpIfFalse  r10, L1
L3:
  // while nn % i == 0 {
  Mod          r11, r3, r5
  Const        r9, 0
  Equal        r12, r11, r9
  JumpIfFalse  r12, L2
  // nn = nn / i
  Div          r13, r3, r5
  Move         r3, r13
  // while nn % i == 0 {
  Jump         L3
L2:
  // tot = tot - tot / i
  Div          r14, r2, r5
  Sub          r15, r2, r14
  Move         r2, r15
L1:
  // if i == 2 {
  Const        r4, 2
  EqualInt     r16, r5, r4
  JumpIfFalse  r16, L4
  // i = 1
  Const        r17, 1
  Move         r5, r17
L4:
  // i = i + 2
  Const        r4, 2
  AddInt       r18, r5, r4
  Move         r5, r18
  // while i * i <= nn {
  Jump         L5
L0:
  // if nn > 1 {
  Const        r17, 1
  Less         r19, r17, r3
  JumpIfFalse  r19, L6
  // tot = tot - tot / nn
  Div          r20, r2, r3
  Sub          r21, r2, r20
  Move         r2, r21
L6:
  // return tot
  Return       r2

  // fun getPerfectPowers(maxExp: int) {
func getPerfectPowers (regs=15)
  // let upper = pow10(maxExp)
  Move         r2, r1
  Call         r3, pow10, r2
  Move         r4, r3
  // var i = 2
  Const        r5, 2
  Move         r6, r5
L4:
  // while i * i < upper {
  MulInt       r7, r6, r6
  Less         r8, r7, r4
  JumpIfFalse  r8, L0
  // var p = i
  Move         r9, r6
L3:
  // while true {
  Const        r10, true
  JumpIfFalse  r10, L1
  // p = p * i
  MulInt       r11, r9, r6
  Move         r9, r11
  // if p >= upper { break }
  LessEq       r12, r4, r9
  JumpIfFalse  r12, L2
  Jump         L1
L2:
  // pps[p] = true
  Const        r10, true
  SetIndex     r0, r9, r10
  SetGlobal    0,0,0,0
  // while true {
  Jump         L3
L1:
  // i = i + 1
  Const        r13, 1
  AddInt       r14, r6, r13
  Move         r6, r14
  // while i * i < upper {
  Jump         L4
L0:
  Return       r0

  // fun getAchilles(minExp: int, maxExp: int): map<int, bool> {
func getAchilles (regs=30)
  // let lower = pow10(minExp)
  Move         r3, r1
  Call         r4, pow10, r3
  Move         r5, r4
  // let upper = pow10(maxExp)
  Move         r6, r2
  Call         r7, pow10, r6
  Move         r8, r7
  // var achilles: map<int, bool> = {}
  Const        r9, {}
  Move         r10, r9
  // var b = 1
  Const        r11, 1
  Move         r12, r11
L5:
  // while b * b * b < upper {
  MulInt       r13, r12, r12
  MulInt       r14, r13, r12
  Less         r15, r14, r8
  JumpIfFalse  r15, L0
  // let b3 = b * b * b
  MulInt       r16, r12, r12
  MulInt       r17, r16, r12
  Move         r18, r17
  // var a = 1
  Const        r11, 1
  Move         r19, r11
L4:
  // while true {
  Const        r20, true
  JumpIfFalse  r20, L1
  // let p = b3 * a * a
  MulInt       r21, r18, r19
  MulInt       r22, r21, r19
  Move         r23, r22
  // if p >= upper { break }
  LessEq       r24, r8, r23
  JumpIfFalse  r24, L2
  Jump         L1
L2:
  // if p >= lower {
  LessEq       r25, r5, r23
  JumpIfFalse  r25, L3
  // if !(p in pps) {
  In           r26, r23, r0
  Not          r27, r26
  JumpIfFalse  r27, L3
  // achilles[p] = true
  Const        r20, true
  SetIndex     r10, r23, r20
L3:
  // a = a + 1
  Const        r11, 1
  AddInt       r28, r19, r11
  Move         r19, r28
  // while true {
  Jump         L4
L1:
  // b = b + 1
  Const        r11, 1
  AddInt       r29, r12, r11
  Move         r12, r29
  // while b * b * b < upper {
  Jump         L5
L0:
  // return achilles
  Return       r10

  // fun sortInts(xs: list<int>): list<int> {
func sortInts (regs=32)
  // var res: list<int> = []
  Const        r2, []
  Move         r3, r2
  // var tmp = xs
  Move         r4, r1
L7:
  // while len(tmp) > 0 {
  Len          r5, r4
  Const        r6, 0
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L0
  // var min = tmp[0]
  Const        r6, 0
  Index        r8, r4, r6
  Move         r9, r8
  // var idx = 0
  Const        r6, 0
  Move         r10, r6
  // var i = 1
  Const        r11, 1
  Move         r12, r11
L3:
  // while i < len(tmp) {
  Len          r13, r4
  LessInt      r14, r12, r13
  JumpIfFalse  r14, L1
  // if tmp[i] < min {
  Index        r15, r4, r12
  Less         r16, r15, r9
  JumpIfFalse  r16, L2
  // min = tmp[i]
  Index        r17, r4, r12
  Move         r9, r17
  // idx = i
  Move         r10, r12
L2:
  // i = i + 1
  Const        r11, 1
  AddInt       r18, r12, r11
  Move         r12, r18
  // while i < len(tmp) {
  Jump         L3
L1:
  // res = res + [min]
  Move         r19, r9
  MakeList     r20, 1, r19
  Add          r21, r3, r20
  Move         r3, r21
  // var out: list<int> = []
  Const        r2, []
  Move         r22, r2
  // var j = 0
  Const        r6, 0
  Move         r23, r6
L6:
  // while j < len(tmp) {
  Len          r24, r4
  LessInt      r25, r23, r24
  JumpIfFalse  r25, L4
  // if j != idx { out = out + [tmp[j]] }
  NotEqual     r26, r23, r10
  JumpIfFalse  r26, L5
  Index        r28, r4, r23
  Move         r27, r28
  MakeList     r29, 1, r27
  Add          r30, r22, r29
  Move         r22, r30
L5:
  // j = j + 1
  Const        r11, 1
  AddInt       r31, r23, r11
  Move         r23, r31
  // while j < len(tmp) {
  Jump         L6
L4:
  // tmp = out
  Move         r4, r22
  // while len(tmp) > 0 {
  Jump         L7
L0:
  // return res
  Return       r3

  // fun pad(n: int, width: int): string {
func pad (regs=9)
  // var s = str(n)
  Str          r3, r1
  Move         r4, r3
L1:
  // while len(s) < width {
  Len          r5, r4
  Less         r6, r5, r2
  JumpIfFalse  r6, L0
  // s = " " + s
  Const        r7, " "
  Add          r8, r7, r4
  Move         r4, r8
  // while len(s) < width {
  Jump         L1
L0:
  // return s
  Return       r4

  // fun main() {
func main (regs=98)
  // let maxDigits = 15
  Const        r1, 15
  Move         r2, r1
  // getPerfectPowers(5)
  Const        r4, 5
  Move         r3, r4
  Call         r5, getPerfectPowers, r3
  // let achSet = getAchilles(1, 5)
  Const        r8, 1
  Move         r6, r8
  Const        r4, 5
  Move         r7, r4
  Call2        r9, getAchilles, r6, r7
  Move         r10, r9
  // var ach: list<int> = []
  Const        r11, []
  Move         r12, r11
  // for k in achSet.keys() { ach = ach + [k] }
  Const        r13, "keys"
  Index        r14, r10, r13
  CallV        r15, r14, 0, r0
  IterPrep     r16, r15
  Len          r17, r16
  Const        r18, 0
L1:
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L0
  Index        r20, r16, r18
  Move         r21, r20
  Move         r22, r21
  MakeList     r23, 1, r22
  Add          r24, r12, r23
  Move         r12, r24
  Const        r25, 1
  AddInt       r26, r18, r25
  Move         r18, r26
  Jump         L1
L0:
  // ach = sortInts(ach)
  Move         r27, r12
  Call         r28, sortInts, r27
  Move         r12, r28
  // print("First 50 Achilles numbers:")
  Const        r29, "First 50 Achilles numbers:"
  Print        r29
  // var i = 0
  Const        r30, 0
  Move         r31, r30
L6:
  // while i < 50 {
  Const        r32, 50
  LessInt      r33, r31, r32
  JumpIfFalse  r33, L2
  // var line = ""
  Const        r34, ""
  Move         r35, r34
  // var j = 0
  Const        r30, 0
  Move         r36, r30
L5:
  // while j < 10 {
  Const        r37, 10
  LessInt      r38, r36, r37
  JumpIfFalse  r38, L3
  // line = line + pad(ach[i], 4)
  Index        r41, r12, r31
  Move         r39, r41
  Const        r42, 4
  Move         r40, r42
  Call2        r43, pad, r39, r40
  Add          r44, r35, r43
  Move         r35, r44
  // if j < 9 { line = line + " " }
  Const        r45, 9
  LessInt      r46, r36, r45
  JumpIfFalse  r46, L4
  Const        r47, " "
  Add          r48, r35, r47
  Move         r35, r48
L4:
  // i = i + 1
  Const        r8, 1
  AddInt       r49, r31, r8
  Move         r31, r49
  // j = j + 1
  Const        r8, 1
  AddInt       r50, r36, r8
  Move         r36, r50
  // while j < 10 {
  Jump         L5
L3:
  // print(line)
  Print        r35
  // while i < 50 {
  Jump         L6
L2:
  // print("\nFirst 30 strong Achilles numbers:")
  Const        r51, "\nFirst 30 strong Achilles numbers:"
  Print        r51
  // var strong: list<int> = []
  Const        r11, []
  Move         r52, r11
  // var count = 0
  Const        r30, 0
  Move         r53, r30
  // var idx = 0
  Const        r30, 0
  Move         r54, r30
L9:
  // while count < 30 {
  Const        r55, 30
  LessInt      r56, r53, r55
  JumpIfFalse  r56, L7
  // let tot = totient(ach[idx])
  Index        r58, r12, r54
  Move         r57, r58
  Call         r59, totient, r57
  Move         r60, r59
  // if tot in achSet {
  In           r61, r60, r10
  JumpIfFalse  r61, L8
  // strong = strong + [ach[idx]]
  Index        r63, r12, r54
  Move         r62, r63
  MakeList     r64, 1, r62
  Add          r65, r52, r64
  Move         r52, r65
  // count = count + 1
  Const        r8, 1
  AddInt       r66, r53, r8
  Move         r53, r66
L8:
  // idx = idx + 1
  Const        r8, 1
  AddInt       r67, r54, r8
  Move         r54, r67
  // while count < 30 {
  Jump         L9
L7:
  // i = 0
  Const        r30, 0
  Move         r31, r30
L14:
  // while i < 30 {
  Const        r55, 30
  LessInt      r68, r31, r55
  JumpIfFalse  r68, L10
  // var line = ""
  Const        r34, ""
  Move         r69, r34
  // var j = 0
  Const        r30, 0
  Move         r70, r30
L13:
  // while j < 10 {
  Const        r37, 10
  LessInt      r71, r70, r37
  JumpIfFalse  r71, L11
  // line = line + pad(strong[i], 5)
  Index        r74, r52, r31
  Move         r72, r74
  Const        r4, 5
  Move         r73, r4
  Call2        r75, pad, r72, r73
  Add          r76, r69, r75
  Move         r69, r76
  // if j < 9 { line = line + " " }
  Const        r45, 9
  LessInt      r77, r70, r45
  JumpIfFalse  r77, L12
  Const        r47, " "
  Add          r78, r69, r47
  Move         r69, r78
L12:
  // i = i + 1
  Const        r8, 1
  AddInt       r79, r31, r8
  Move         r31, r79
  // j = j + 1
  Const        r8, 1
  AddInt       r80, r70, r8
  Move         r70, r80
  // while j < 10 {
  Jump         L13
L11:
  // print(line)
  Print        r69
  // while i < 30 {
  Jump         L14
L10:
  // print("\nNumber of Achilles numbers with:")
  Const        r81, "\nNumber of Achilles numbers with:"
  Print        r81
  // let counts = [1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383]
  Const        r82, [1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383]
  Move         r83, r82
  // var d = 2
  Const        r84, 2
  Move         r85, r84
L16:
  // while d <= maxDigits {
  Const        r1, 15
  LessEqInt    r86, r85, r1
  JumpIfFalse  r86, L15
  // let c = counts[d-2]
  Const        r84, 2
  SubInt       r87, r85, r84
  Index        r88, r83, r87
  Move         r89, r88
  // print(pad(d, 2) + " digits: " + str(c))
  Move         r90, r85
  Const        r84, 2
  Move         r91, r84
  Call2        r92, pad, r90, r91
  Const        r93, " digits: "
  Add          r94, r92, r93
  Str          r95, r89
  Add          r96, r94, r95
  Print        r96
  // d = d + 1
  Const        r8, 1
  AddInt       r97, r85, r8
  Move         r85, r97
  // while d <= maxDigits {
  Jump         L16
L15:
  Return       r0
