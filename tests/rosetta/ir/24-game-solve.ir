func main (regs=14)
  // let OP_ADD = 1
  Const        r7, 1
  Move         r0, r7
  SetGlobal    0,0,0,0
  // let OP_SUB = 2
  Const        r8, 2
  Move         r1, r8
  SetGlobal    1,1,0,0
  // let OP_MUL = 3
  Const        r9, 3
  Move         r2, r9
  SetGlobal    2,2,0,0
  // let OP_DIV = 4
  Const        r10, 4
  Move         r3, r10
  SetGlobal    3,3,0,0
  // let n_cards = 4
  Const        r10, 4
  Move         r4, r10
  SetGlobal    4,4,0,0
  // let goal = 24
  Const        r11, 24
  Move         r5, r11
  SetGlobal    5,5,0,0
  // let digit_range = 9
  Const        r12, 9
  Move         r6, r12
  SetGlobal    6,6,0,0
  // main()
  Call         r13, main, 
  Return       r0

  // fun binEval(op: int, l: Expr, r: Expr): Rational {
func binEval (regs=79)
  // let lv = exprEval(l)
  Move         r11, r10
  // let rv = exprEval(r)
  Move         r13, r12
  // if op == OP_ADD {
  Equal        r14, r7, r0
  JumpIfFalse  r14, L0
  // return Rational { num: lv.num*rv.denom + lv.denom*rv.num, denom: lv.denom*rv.denom }
  Const        r15, "num"
  Index        r16, r11, r15
  Const        r17, "denom"
  Index        r18, r13, r17
  Mul          r19, r16, r18
  Const        r17, "denom"
  Index        r20, r11, r17
  Const        r15, "num"
  Index        r21, r13, r15
  Mul          r22, r20, r21
  Add          r23, r19, r22
  Const        r17, "denom"
  Index        r24, r11, r17
  Const        r17, "denom"
  Index        r25, r13, r17
  Mul          r26, r24, r25
  Const        r27, "__name"
  Const        r28, "Rational"
  Const        r29, "num"
  Move         r30, r23
  Const        r31, "denom"
  Move         r32, r26
  MakeMap      r33, 3, r27
  Return       r33
L0:
  // if op == OP_SUB {
  Equal        r34, r7, r1
  JumpIfFalse  r34, L1
  // return Rational { num: lv.num*rv.denom - lv.denom*rv.num, denom: lv.denom*rv.denom }
  Const        r15, "num"
  Index        r35, r11, r15
  Const        r17, "denom"
  Index        r36, r13, r17
  Mul          r37, r35, r36
  Const        r17, "denom"
  Index        r38, r11, r17
  Const        r15, "num"
  Index        r39, r13, r15
  Mul          r40, r38, r39
  Sub          r41, r37, r40
  Const        r17, "denom"
  Index        r42, r11, r17
  Const        r17, "denom"
  Index        r43, r13, r17
  Mul          r44, r42, r43
  Const        r45, "__name"
  Const        r46, "Rational"
  Const        r47, "num"
  Move         r48, r41
  Const        r49, "denom"
  Move         r50, r44
  MakeMap      r51, 3, r45
  Return       r51
L1:
  // if op == OP_MUL {
  Equal        r52, r7, r2
  JumpIfFalse  r52, L2
  // return Rational { num: lv.num*rv.num, denom: lv.denom*rv.denom }
  Const        r15, "num"
  Index        r53, r11, r15
  Const        r15, "num"
  Index        r54, r13, r15
  Mul          r55, r53, r54
  Const        r17, "denom"
  Index        r56, r11, r17
  Const        r17, "denom"
  Index        r57, r13, r17
  Mul          r58, r56, r57
  Const        r59, "__name"
  Const        r60, "Rational"
  Const        r61, "num"
  Move         r62, r55
  Const        r63, "denom"
  Move         r64, r58
  MakeMap      r65, 3, r59
  Return       r65
L2:
  // return Rational { num: lv.num*rv.denom, denom: lv.denom*rv.num }
  Const        r15, "num"
  Index        r66, r11, r15
  Const        r17, "denom"
  Index        r67, r13, r17
  Mul          r68, r66, r67
  Const        r17, "denom"
  Index        r69, r11, r17
  Const        r15, "num"
  Index        r70, r13, r15
  Mul          r71, r69, r70
  Const        r72, "__name"
  Const        r73, "Rational"
  Const        r74, "num"
  Move         r75, r68
  Const        r76, "denom"
  Move         r77, r71
  MakeMap      r78, 3, r72
  Return       r78

  // fun binString(op: int, l: Expr, r: Expr): string {
func binString (regs=24)
  // let ls = exprString(l)
  Move         r11, r10
  // let rs = exprString(r)
  Move         r13, r12
  // var opstr = ""
  Const        r14, ""
  Move         r15, r14
  // if op == OP_ADD { opstr = " + " }
  Equal        r16, r7, r0
  JumpIfFalse  r16, L0
  Const        r17, " + "
  Move         r15, r17
L0:
  // return "(" + ls + opstr + rs + ")"
  Const        r18, "("
  Add          r19, r18, r11
  Add          r20, r19, r15
  Add          r21, r20, r13
  Const        r22, ")"
  Add          r23, r21, r22
  Return       r23

  // fun newNum(n: int): Expr {
func newNum (regs=21)
  // return Num { value: Rational { num: n, denom: 1 } }
  Const        r8, 1
  Const        r9, "__name"
  Const        r10, "Rational"
  Const        r11, "num"
  Move         r12, r7
  Const        r13, "denom"
  Move         r14, r8
  MakeMap      r15, 3, r9
  Const        r16, "__name"
  Const        r17, "Num"
  Const        r18, "value"
  Move         r19, r15
  MakeMap      r20, 2, r16
  Return       r20

  // fun exprEval(x: Expr): Rational {
func exprEval (regs=29)
  // Num(v) => v
  Const        r10, "__name"
  Index        r11, r7, r10
  Const        r12, "Num"
  Equal        r9, r11, r12
  JumpIfFalse  r9, L0
  Const        r13, "value"
  Index        r14, r7, r13
  Move         r8, r14
  Jump         L1
L0:
  // Bin(op, l, r) => binEval(op, l, r)
  Const        r16, "__name"
  Index        r17, r7, r16
  Const        r18, "Bin"
  Equal        r15, r17, r18
  JumpIfFalse  r15, L2
  Const        r19, "op"
  Index        r20, r7, r19
  Const        r21, "left"
  Index        r22, r7, r21
  Const        r23, "right"
  Index        r24, r7, r23
  Move         r25, r20
  Move         r26, r22
  Move         r27, r24
  Call         r28, binEval, r25, r26, r27
  Move         r8, r28
  Jump         L1
L2:
  Const        r8, nil
L1:
  // return match x {
  Return       r8

  // fun exprString(x: Expr): string {
func exprString (regs=32)
  // Num(v) => str(v.num)
  Const        r10, "__name"
  Index        r11, r7, r10
  Const        r12, "Num"
  Equal        r9, r11, r12
  JumpIfFalse  r9, L0
  Const        r13, "value"
  Index        r14, r7, r13
  Const        r15, "num"
  Index        r16, r14, r15
  Str          r17, r16
  Move         r8, r17
  Jump         L1
L0:
  // Bin(op, l, r) => binString(op, l, r)
  Const        r19, "__name"
  Index        r20, r7, r19
  Const        r21, "Bin"
  Equal        r18, r20, r21
  JumpIfFalse  r18, L2
  Const        r22, "op"
  Index        r23, r7, r22
  Const        r24, "left"
  Index        r25, r7, r24
  Const        r26, "right"
  Index        r27, r7, r26
  Move         r28, r23
  Move         r29, r25
  Move         r30, r27
  Call         r31, binString, r28, r29, r30
  Move         r8, r31
  Jump         L1
L2:
  Const        r8, nil
L1:
  // return match x {
  Return       r8

  // fun solve(xs: list<Expr>): bool {
func solve (regs=113)
  // if len(xs) == 1 {
  Len          r8, r7
  Const        r9, 1
  EqualInt     r10, r8, r9
  JumpIfFalse  r10, L0
  // let f = exprEval(xs[0])
  Const        r12, 0
  Index        r13, r7, r12
  Move         r11, r13
  Call         r14, exprEval, r11
  Move         r15, r14
  // if f.denom != 0 && f.num == f.denom * goal {
  Const        r16, "denom"
  Index        r17, r15, r16
  Const        r16, "denom"
  Index        r18, r15, r16
  Mul          r19, r18, r5
  Const        r12, 0
  NotEqual     r20, r17, r12
  Const        r21, "num"
  Index        r22, r15, r21
  Equal        r23, r22, r19
  Move         r24, r20
  JumpIfFalse  r24, L1
  Move         r24, r23
L1:
  JumpIfFalse  r24, L2
  // print(exprString(xs[0]))
  Const        r12, 0
  Index        r26, r7, r12
  Move         r25, r26
  Call         r27, exprString, r25
  Print        r27
  // return true
  Const        r28, true
  Return       r28
L2:
  // return false
  Const        r29, false
  Return       r29
L0:
  // var i = 0
  Const        r12, 0
  Move         r30, r12
L15:
  // while i < len(xs) {
  Len          r31, r7
  LessInt      r32, r30, r31
  JumpIfFalse  r32, L3
  // var j = i + 1
  Const        r9, 1
  AddInt       r33, r30, r9
  Move         r34, r33
L14:
  // while j < len(xs) {
  Len          r35, r7
  LessInt      r36, r34, r35
  JumpIfFalse  r36, L4
  // var rest: list<Expr> = []
  Const        r37, []
  Move         r38, r37
  // var k = 0
  Const        r12, 0
  Move         r39, r12
L8:
  // while k < len(xs) {
  Len          r40, r7
  LessInt      r41, r39, r40
  JumpIfFalse  r41, L5
  // if k != i && k != j { rest = append(rest, xs[k]) }
  NotEqual     r42, r39, r30
  NotEqual     r43, r39, r34
  Move         r44, r42
  JumpIfFalse  r44, L6
  Move         r44, r43
L6:
  JumpIfFalse  r44, L7
  Index        r45, r7, r39
  Append       r46, r38, r45
  Move         r38, r46
L7:
  // k = k + 1
  Const        r9, 1
  AddInt       r47, r39, r9
  Move         r39, r47
  // while k < len(xs) {
  Jump         L8
L5:
  // let a = xs[i]
  Index        r48, r7, r30
  Move         r49, r48
  // let b = xs[j]
  Index        r50, r7, r34
  Move         r51, r50
  // var node = Bin { op: OP_ADD, left: a, right: b }
  Const        r52, "__name"
  Const        r53, "Bin"
  Const        r54, "op"
  Move         r55, r0
  Const        r56, "left"
  Move         r57, r49
  Const        r58, "right"
  Move         r59, r51
  MakeMap      r60, 4, r52
  Move         r61, r60
  // for op in [OP_ADD, OP_SUB, OP_MUL, OP_DIV] {
  Move         r62, r0
  Move         r63, r1
  Move         r64, r2
  Move         r65, r3
  MakeList     r66, 4, r62
  IterPrep     r67, r66
  Len          r68, r67
  Const        r69, 0
L11:
  LessInt      r70, r69, r68
  JumpIfFalse  r70, L9
  Index        r71, r67, r69
  Move         r72, r71
  // node = Bin { op: op, left: a, right: b }
  Const        r73, "__name"
  Const        r74, "Bin"
  Const        r75, "op"
  Move         r76, r72
  Const        r77, "left"
  Move         r78, r49
  Const        r79, "right"
  Move         r80, r51
  MakeMap      r81, 4, r73
  Move         r61, r81
  // if solve(append(rest, node)) { return true }
  Append       r83, r38, r61
  Move         r82, r83
  Call         r84, solve, r82
  JumpIfFalse  r84, L10
  Const        r28, true
  Return       r28
L10:
  // for op in [OP_ADD, OP_SUB, OP_MUL, OP_DIV] {
  Const        r85, 1
  AddInt       r86, r69, r85
  Move         r69, r86
  Jump         L11
L9:
  // node = Bin { op: OP_SUB, left: b, right: a }
  Const        r87, "__name"
  Const        r88, "Bin"
  Const        r89, "op"
  Move         r90, r1
  Const        r91, "left"
  Move         r92, r51
  Const        r93, "right"
  Move         r94, r49
  MakeMap      r95, 4, r87
  Move         r61, r95
  // if solve(append(rest, node)) { return true }
  Append       r97, r38, r61
  Move         r96, r97
  Call         r98, solve, r96
  JumpIfFalse  r98, L12
  Const        r28, true
  Return       r28
L12:
  // node = Bin { op: OP_DIV, left: b, right: a }
  Const        r99, "__name"
  Const        r100, "Bin"
  Const        r101, "op"
  Move         r102, r3
  Const        r103, "left"
  Move         r104, r51
  Const        r105, "right"
  Move         r106, r49
  MakeMap      r107, 4, r99
  Move         r61, r107
  // if solve(append(rest, node)) { return true }
  Append       r109, r38, r61
  Move         r108, r109
  Call         r110, solve, r108
  JumpIfFalse  r110, L13
  Const        r28, true
  Return       r28
L13:
  // j = j + 1
  Const        r9, 1
  AddInt       r111, r34, r9
  Move         r34, r111
  // while j < len(xs) {
  Jump         L14
L4:
  // i = i + 1
  Const        r9, 1
  AddInt       r112, r30, r9
  Move         r30, r112
  // while i < len(xs) {
  Jump         L15
L3:
  // return false
  Const        r29, false
  Return       r29

  // fun main() {
func main (regs=34)
  // var iter = 0
  Const        r7, 0
  Move         r8, r7
L4:
  // while iter < 10 {
  Const        r9, 10
  LessInt      r10, r8, r9
  JumpIfFalse  r10, L0
  // var cards: list<Expr> = []
  Const        r11, []
  Move         r12, r11
  // var i = 0
  Const        r7, 0
  Move         r13, r7
L2:
  // while i < n_cards {
  Less         r14, r13, r4
  JumpIfFalse  r14, L1
  // let n = (now() % (digit_range - 1)) + 1
  Now          r15
  Const        r16, 1
  Sub          r17, r6, r16
  Mod          r18, r15, r17
  Const        r16, 1
  Add          r19, r18, r16
  Move         r20, r19
  // cards = append(cards, newNum(n))
  Move         r21, r20
  Call         r22, newNum, r21
  Append       r23, r12, r22
  Move         r12, r23
  // print(" " + str(n))
  Const        r24, " "
  Str          r25, r20
  Add          r26, r24, r25
  Print        r26
  // i = i + 1
  Const        r16, 1
  AddInt       r27, r13, r16
  Move         r13, r27
  // while i < n_cards {
  Jump         L2
L1:
  // print(":  ")
  Const        r28, ":  "
  Print        r28
  // if !solve(cards) {
  Move         r29, r12
  Call         r30, solve, r29
  Not          r31, r30
  JumpIfFalse  r31, L3
  // print("No solution")
  Const        r32, "No solution"
  Print        r32
L3:
  // iter = iter + 1
  Const        r16, 1
  AddInt       r33, r8, r16
  Move         r8, r33
  // while iter < 10 {
  Jump         L4
L0:
  Return       r0
