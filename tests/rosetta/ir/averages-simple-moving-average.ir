func main (regs=1)
  Return       r0

  // fun indexOf(s: string, ch: string): int {
func indexOf (regs=12)
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L2:
  // while i < len(s) {
  Len          r4, r0
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // if substring(s, i, i+1) == ch {
  Const        r6, 1
  AddInt       r7, r3, r6
  Slice        r8, r0, r3, r7
  Equal        r9, r8, r1
  JumpIfFalse  r9, L1
  // return i
  Return       r3
L1:
  // i = i + 1
  Const        r6, 1
  AddInt       r10, r3, r6
  Move         r3, r10
  // while i < len(s) {
  Jump         L2
L0:
  // return -1
  Const        r6, 1
  NegInt       r11, r6
  Return       r11

  // fun fmt3(x: float): string {
func fmt3 (regs=35)
  // var y = ((x * 1000.0) + 0.5) as int as float / 1000.0
  Const        r1, 1000.0
  MulFloat     r2, r0, r1
  Const        r3, 0.5
  AddFloat     r4, r2, r3
  Cast         r5, r4, int
  Cast         r6, r5, float
  Const        r1, 1000.0
  DivFloat     r7, r6, r1
  Move         r8, r7
  // var s = str(y)
  Str          r9, r8
  Move         r10, r9
  // var dot = indexOf(s, ".")
  Move         r11, r10
  Const        r13, "."
  Move         r12, r13
  Call2        r14, indexOf, r11, r12
  Move         r15, r14
  // if dot == 0 - 1 {
  Const        r16, 0
  Const        r17, 1
  SubInt       r18, r16, r17
  Equal        r19, r15, r18
  JumpIfFalse  r19, L0
  // s = s + ".000"
  Const        r20, ".000"
  Add          r21, r10, r20
  Move         r10, r21
  // if dot == 0 - 1 {
  Jump         L1
L0:
  // var decs = len(s) - dot - 1
  Len          r22, r10
  Sub          r23, r22, r15
  Const        r17, 1
  Sub          r24, r23, r17
  Move         r25, r24
  // if decs > 3 {
  Const        r26, 3
  Less         r27, r26, r25
  JumpIfFalse  r27, L2
  // s = substring(s, 0, dot + 4)
  Const        r16, 0
  Const        r28, 4
  Add          r29, r15, r28
  Slice        r30, r10, r16, r29
  Move         r10, r30
  // if decs > 3 {
  Jump         L1
L2:
  // while decs < 3 {
  Const        r26, 3
  Less         r31, r25, r26
  JumpIfFalse  r31, L1
  // s = s + "0"
  Const        r32, "0"
  Add          r33, r10, r32
  Move         r10, r33
  // decs = decs + 1
  Const        r17, 1
  Add          r34, r25, r17
  Move         r25, r34
  // while decs < 3 {
  Jump         L2
L1:
  // return s
  Return       r10

  // fun pad(s: string, width: int): string {
func pad (regs=7)
  // var out = s
  Move         r2, r0
L1:
  // while len(out) < width {
  Len          r3, r2
  Less         r4, r3, r1
  JumpIfFalse  r4, L0
  // out = " " + out
  Const        r5, " "
  Add          r6, r5, r2
  Move         r2, r6
  // while len(out) < width {
  Jump         L1
L0:
  // return out
  Return       r2

  // fun smaSeries(xs: list<float>, period: int): list<float> {
func smaSeries (regs=24)
  // var res: list<float> = []
  Const        r2, []
  Move         r3, r2
  // var sum = 0.0
  Const        r4, 0.0
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L3:
  // while i < len(xs) {
  Len          r8, r0
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // sum = sum + xs[i]
  Index        r10, r0, r7
  AddFloat     r11, r5, r10
  Move         r5, r11
  // if i >= period {
  LessEq       r12, r1, r7
  JumpIfFalse  r12, L1
  // sum = sum - xs[i - period]
  Sub          r13, r7, r1
  Index        r14, r0, r13
  SubFloat     r15, r5, r14
  Move         r5, r15
L1:
  // var denom = i + 1
  Const        r16, 1
  AddInt       r17, r7, r16
  Move         r18, r17
  // if denom > period { denom = period }
  Less         r19, r1, r18
  JumpIfFalse  r19, L2
  Move         r18, r1
L2:
  // res = append(res, sum / (denom as float))
  Cast         r20, r18, float
  DivFloat     r21, r5, r20
  Append       r22, r3, r21
  Move         r3, r22
  // i = i + 1
  Const        r16, 1
  AddInt       r23, r7, r16
  Move         r7, r23
  // while i < len(xs) {
  Jump         L3
L0:
  // return res
  Return       r3

  // fun main() {
func main (regs=43)
  // var xs = [1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0]
  Const        r0, [1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0]
  Move         r1, r0
  // var sma3 = smaSeries(xs, 3)
  Move         r2, r1
  Const        r4, 3
  Move         r3, r4
  Call2        r5, smaSeries, r2, r3
  Move         r6, r5
  // var sma5 = smaSeries(xs, 5)
  Move         r7, r1
  Const        r9, 5
  Move         r8, r9
  Call2        r10, smaSeries, r7, r8
  Move         r11, r10
  // print("x       sma3   sma5")
  Const        r12, "x       sma3   sma5"
  Print        r12
  // var i = 0
  Const        r13, 0
  Move         r14, r13
L1:
  // while i < len(xs) {
  Const        r15, 10
  LessInt      r16, r14, r15
  JumpIfFalse  r16, L0
  // let line = pad(fmt3(xs[i]), 5) + "  " + pad(fmt3(sma3[i]), 5) + "  " + pad(fmt3(sma5[i]), 5)
  Index        r20, r1, r14
  Move         r19, r20
  Call         r21, fmt3, r19
  Move         r17, r21
  Const        r9, 5
  Move         r18, r9
  Call2        r22, pad, r17, r18
  Const        r23, "  "
  Add          r24, r22, r23
  Index        r28, r6, r14
  Move         r27, r28
  Call         r29, fmt3, r27
  Move         r25, r29
  Const        r9, 5
  Move         r26, r9
  Call2        r30, pad, r25, r26
  Add          r31, r24, r30
  Const        r23, "  "
  Add          r32, r31, r23
  Index        r36, r11, r14
  Move         r35, r36
  Call         r37, fmt3, r35
  Move         r33, r37
  Const        r9, 5
  Move         r34, r9
  Call2        r38, pad, r33, r34
  Add          r39, r32, r38
  Move         r40, r39
  // print(line)
  Print        r40
  // i = i + 1
  Const        r41, 1
  AddInt       r42, r14, r41
  Move         r14, r42
  // while i < len(xs) {
  Jump         L1
L0:
  Return       r0
