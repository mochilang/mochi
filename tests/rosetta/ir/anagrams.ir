func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun sortRunes(s: string): string {
func sortRunes (regs=38)
  // var arr: list<string> = []
  Const        r1, []
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L1:
  // while i < len(s) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // arr = append(arr, s[i:i+1])
  Move         r7, r4
  Const        r9, 1
  AddInt       r10, r4, r9
  Move         r8, r10
  Slice        r11, r0, r7, r8
  Append       r12, r2, r11
  Move         r2, r12
  // i = i + 1
  Const        r9, 1
  AddInt       r13, r4, r9
  Move         r4, r13
  // while i < len(s) {
  Jump         L1
L0:
  // var n = len(arr)
  Len          r14, r2
  Move         r15, r14
  // var m = 0
  Const        r3, 0
  Move         r16, r3
L6:
  // while m < n {
  LessInt      r17, r16, r15
  JumpIfFalse  r17, L2
  // var j = 0
  Const        r3, 0
  Move         r18, r3
L5:
  // while j < n - 1 {
  Const        r9, 1
  SubInt       r19, r15, r9
  LessInt      r20, r18, r19
  JumpIfFalse  r20, L3
  // if arr[j] > arr[j+1] {
  Index        r21, r2, r18
  Const        r9, 1
  AddInt       r22, r18, r9
  Index        r23, r2, r22
  Less         r24, r23, r21
  JumpIfFalse  r24, L4
  // let tmp = arr[j]
  Index        r25, r2, r18
  Move         r26, r25
  // arr[j] = arr[j+1]
  Const        r9, 1
  AddInt       r27, r18, r9
  Index        r28, r2, r27
  SetIndex     r2, r18, r28
  // arr[j+1] = tmp
  Const        r9, 1
  AddInt       r29, r18, r9
  SetIndex     r2, r29, r26
L4:
  // j = j + 1
  Const        r9, 1
  AddInt       r30, r18, r9
  Move         r18, r30
  // while j < n - 1 {
  Jump         L5
L3:
  // m = m + 1
  Const        r9, 1
  AddInt       r31, r16, r9
  Move         r16, r31
  // while m < n {
  Jump         L6
L2:
  // var out = ""
  Const        r32, ""
  Move         r33, r32
  // i = 0
  Const        r3, 0
  Move         r4, r3
L8:
  // while i < n {
  LessInt      r34, r4, r15
  JumpIfFalse  r34, L7
  // out = out + arr[i]
  Index        r35, r2, r4
  Add          r36, r33, r35
  Move         r33, r36
  // i = i + 1
  Const        r9, 1
  AddInt       r37, r4, r9
  Move         r4, r37
  // while i < n {
  Jump         L8
L7:
  // return out
  Return       r33

  // fun sortStrings(xs: list<string>): list<string> {
func sortStrings (regs=27)
  // var res: list<string> = []
  Const        r1, []
  Move         r2, r1
  // var tmp = xs
  Move         r3, r0
L7:
  // while len(tmp) > 0 {
  Len          r4, r3
  Const        r5, 0
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  // var min = tmp[0]
  Const        r5, 0
  Index        r7, r3, r5
  Move         r8, r7
  // var idx = 0
  Const        r5, 0
  Move         r9, r5
  // var i = 1
  Const        r10, 1
  Move         r11, r10
L3:
  // while i < len(tmp) {
  Len          r12, r3
  LessInt      r13, r11, r12
  JumpIfFalse  r13, L1
  // if tmp[i] < min {
  Index        r14, r3, r11
  Less         r15, r14, r8
  JumpIfFalse  r15, L2
  // min = tmp[i]
  Index        r16, r3, r11
  Move         r8, r16
  // idx = i
  Move         r9, r11
L2:
  // i = i + 1
  Const        r10, 1
  AddInt       r17, r11, r10
  Move         r11, r17
  // while i < len(tmp) {
  Jump         L3
L1:
  // res = append(res, min)
  Append       r18, r2, r8
  Move         r2, r18
  // var out: list<string> = []
  Const        r1, []
  Move         r19, r1
  // var j = 0
  Const        r5, 0
  Move         r20, r5
L6:
  // while j < len(tmp) {
  Len          r21, r3
  LessInt      r22, r20, r21
  JumpIfFalse  r22, L4
  // if j != idx {
  NotEqual     r23, r20, r9
  JumpIfFalse  r23, L5
  // out = append(out, tmp[j])
  Index        r24, r3, r20
  Append       r25, r19, r24
  Move         r19, r25
L5:
  // j = j + 1
  Const        r10, 1
  AddInt       r26, r20, r10
  Move         r20, r26
  // while j < len(tmp) {
  Jump         L6
L4:
  // tmp = out
  Move         r3, r19
  // while len(tmp) > 0 {
  Jump         L7
L0:
  // return res
  Return       r2

  // fun main() {
func main (regs=64)
  // let words = ["abel","able","bale","bela","elba","alger","glare","lager","large","regal","angel","angle","galen","glean","lange","caret","carte","cater","crate","trace","elan","lane","lean","lena","neal","evil","levi","live","veil","vile"]
  Const        r0, ["abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"]
  Move         r1, r0
  // var groups: map<string, list<string>> = {}
  Const        r2, {}
  Move         r3, r2
  // var maxLen = 0
  Const        r4, 0
  Move         r5, r4
  // for w in words {
  IterPrep     r6, r1
  Len          r7, r6
  Const        r8, 0
L4:
  LessInt      r9, r8, r7
  JumpIfFalse  r9, L0
  Index        r10, r6, r8
  Move         r11, r10
  // let k = sortRunes(w)
  Move         r12, r11
  Call         r13, sortRunes, r12
  Move         r14, r13
  // if !(k in groups) {
  In           r15, r14, r3
  Not          r16, r15
  JumpIfFalse  r16, L1
  // groups[k] = [w]
  Move         r17, r11
  MakeList     r18, 1, r17
  SetIndex     r3, r14, r18
  // if !(k in groups) {
  Jump         L2
L1:
  // groups[k] = append(groups[k], w)
  Index        r19, r3, r14
  Append       r20, r19, r11
  SetIndex     r3, r14, r20
L2:
  // if len(groups[k]) > maxLen {
  Index        r21, r3, r14
  Len          r22, r21
  LessInt      r23, r5, r22
  JumpIfFalse  r23, L3
  // maxLen = len(groups[k])
  Index        r24, r3, r14
  Len          r25, r24
  Move         r5, r25
L3:
  // for w in words {
  Const        r26, 1
  AddInt       r27, r8, r26
  Move         r8, r27
  Jump         L4
L0:
  // var printed: map<string, bool> = {}
  Const        r2, {}
  Move         r28, r2
  // for w in words {
  IterPrep     r29, r1
  Len          r30, r29
  Const        r31, 0
L9:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L5
  Index        r33, r29, r31
  Move         r11, r33
  // let k = sortRunes(w)
  Move         r34, r11
  Call         r35, sortRunes, r34
  Move         r36, r35
  // if len(groups[k]) == maxLen {
  Index        r37, r3, r36
  Len          r38, r37
  EqualInt     r39, r38, r5
  JumpIfFalse  r39, L6
  // if !(k in printed) {
  In           r40, r36, r28
  Not          r41, r40
  JumpIfFalse  r41, L6
  // var g = sortStrings(groups[k])
  Index        r43, r3, r36
  Move         r42, r43
  Call         r44, sortStrings, r42
  Move         r45, r44
  // var line = "[" + g[0]
  Const        r46, "["
  Const        r4, 0
  Index        r47, r45, r4
  Add          r48, r46, r47
  Move         r49, r48
  // var i = 1
  Const        r50, 1
  Move         r51, r50
L8:
  // while i < len(g) {
  Len          r52, r45
  LessInt      r53, r51, r52
  JumpIfFalse  r53, L7
  // line = line + " " + g[i]
  Const        r54, " "
  Add          r55, r49, r54
  Index        r56, r45, r51
  Add          r57, r55, r56
  Move         r49, r57
  // i = i + 1
  Const        r50, 1
  AddInt       r58, r51, r50
  Move         r51, r58
  // while i < len(g) {
  Jump         L8
L7:
  // line = line + "]"
  Const        r59, "]"
  Add          r60, r49, r59
  Move         r49, r60
  // print(line)
  Print        r49
  // printed[k] = true
  Const        r61, true
  SetIndex     r28, r36, r61
L6:
  // for w in words {
  Const        r62, 1
  AddInt       r63, r31, r62
  Move         r31, r63
  Jump         L9
L5:
  Return       r0
