func main (regs=1)
  Return       r0

  // fun divisors(n: int): list<int> {
func divisors (regs=27)
  // var divs: list<int> = [1]
  Const        r1, [1]
  Move         r2, r1
  // var divs2: list<int> = []
  Const        r3, []
  Move         r4, r3
  // var i = 2
  Const        r5, 2
  Move         r6, r5
L2:
  // while i * i <= n {
  MulInt       r7, r6, r6
  LessEq       r8, r7, r0
  JumpIfFalse  r8, L0
  // if n % i == 0 {
  Mod          r9, r0, r6
  Const        r10, 0
  Equal        r11, r9, r10
  JumpIfFalse  r11, L1
  // let j = (n / i) as int
  Div          r12, r0, r6
  Cast         r13, r12, int
  Move         r14, r13
  // divs = append(divs, i)
  Append       r15, r2, r6
  Move         r2, r15
  // if i != j {
  NotEqual     r16, r6, r14
  JumpIfFalse  r16, L1
  // divs2 = append(divs2, j)
  Append       r17, r4, r14
  Move         r4, r17
L1:
  // i = i + 1
  Const        r18, 1
  AddInt       r19, r6, r18
  Move         r6, r19
  // while i * i <= n {
  Jump         L2
L0:
  // var j = len(divs2) - 1
  Len          r20, r4
  Const        r18, 1
  SubInt       r21, r20, r18
  Move         r22, r21
L4:
  // while j >= 0 {
  Const        r10, 0
  LessEqInt    r23, r10, r22
  JumpIfFalse  r23, L3
  // divs = append(divs, divs2[j])
  Index        r24, r4, r22
  Append       r25, r2, r24
  Move         r2, r25
  // j = j - 1
  Const        r18, 1
  SubInt       r26, r22, r18
  Move         r22, r26
  // while j >= 0 {
  Jump         L4
L3:
  // return divs
  Return       r2

  // fun sum(xs: list<int>): int {
func sum (regs=12)
  // var tot = 0
  Const        r1, 0
  Move         r2, r1
  // for v in xs {
  IterPrep     r3, r0
  Len          r4, r3
  Const        r5, 0
L1:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // tot = tot + v
  Add          r9, r2, r8
  Move         r2, r9
  // for v in xs {
  Const        r10, 1
  AddInt       r11, r5, r10
  Move         r5, r11
  Jump         L1
L0:
  // return tot
  Return       r2

  // fun sumStr(xs: list<int>): string {
func sumStr (regs=18)
  // var s = ""
  Const        r1, ""
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L1:
  // while i < len(xs) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // s = s + str(xs[i]) + " + "
  Index        r7, r0, r4
  Str          r8, r7
  Add          r9, r2, r8
  Const        r10, " + "
  Add          r11, r9, r10
  Move         r2, r11
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r4, r12
  Move         r4, r13
  // while i < len(xs) {
  Jump         L1
L0:
  // return substring(s, 0, len(s) - 3)
  Const        r3, 0
  Len          r14, r2
  Const        r15, 3
  SubInt       r16, r14, r15
  Slice        r17, r2, r3, r16
  Return       r17

  // fun pad2(n: int): string {
func pad2 (regs=8)
  // let s = str(n)
  Str          r1, r0
  Move         r2, r1
  // if len(s) < 2 { return " " + s }
  Len          r3, r2
  Const        r4, 2
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  Const        r6, " "
  Add          r7, r6, r2
  Return       r7
L0:
  // return s
  Return       r2

  // fun pad5(n: int): string {
func pad5 (regs=8)
  // var s = str(n)
  Str          r1, r0
  Move         r2, r1
L1:
  // while len(s) < 5 {
  Len          r3, r2
  Const        r4, 5
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // s = " " + s
  Const        r6, " "
  Add          r7, r6, r2
  Move         r2, r7
  // while len(s) < 5 {
  Jump         L1
L0:
  // return s
  Return       r2

  // fun abundantOdd(searchFrom: int, countFrom: int, countTo: int, printOne: bool): int {
func abundantOdd (regs=44)
  // var count = countFrom
  Move         r4, r1
  // var n = searchFrom
  Move         r5, r0
L4:
  // while count < countTo {
  Less         r6, r4, r2
  JumpIfFalse  r6, L0
  // let divs = divisors(n)
  Move         r7, r5
  Call         r8, divisors, r7
  Move         r9, r8
  // let tot = sum(divs)
  Sum          r10, r9
  Move         r11, r10
  // if tot > n {
  Less         r12, r5, r11
  JumpIfFalse  r12, L1
  // count = count + 1
  Const        r13, 1
  Add          r14, r4, r13
  Move         r4, r14
  // if printOne && count < countTo {
  Less         r15, r4, r2
  Move         r16, r3
  JumpIfFalse  r16, L2
  Move         r16, r15
L2:
  JumpIfFalse  r16, L3
  // n = n + 2
  Const        r17, 2
  Add          r18, r5, r17
  Move         r5, r18
  // continue
  Jump         L4
L3:
  // let s = sumStr(divs)
  Move         r19, r9
  Call         r20, sumStr, r19
  Move         r21, r20
  // if !printOne {
  Not          r22, r3
  JumpIfFalse  r22, L5
  // print(pad2(count) + ". " + pad5(n) + " < " + s + " = " + str(tot))
  Move         r23, r4
  Call         r24, pad2, r23
  Const        r25, ". "
  Add          r26, r24, r25
  Move         r27, r5
  Call         r28, pad5, r27
  Add          r29, r26, r28
  Const        r30, " < "
  Add          r31, r29, r30
  Add          r32, r31, r21
  Const        r33, " = "
  Add          r34, r32, r33
  Str          r35, r11
  Add          r36, r34, r35
  Print        r36
  // if !printOne {
  Jump         L1
L5:
  // print(str(n) + " < " + s + " = " + str(tot))
  Str          r37, r5
  Const        r30, " < "
  Add          r38, r37, r30
  Add          r39, r38, r21
  Const        r33, " = "
  Add          r40, r39, r33
  Str          r41, r11
  Add          r42, r40, r41
  Print        r42
L1:
  // n = n + 2
  Const        r17, 2
  Add          r43, r5, r17
  Move         r5, r43
  // while count < countTo {
  Jump         L4
L0:
  // return n
  Return       r5

  // fun main() {
func main (regs=31)
  // let max = 25
  Const        r0, 25
  Move         r1, r0
  // print("The first " + str(max) + " abundant odd numbers are:")
  Const        r2, "The first "
  Const        r3, "25"
  Const        r4, "The first 25"
  Const        r5, " abundant odd numbers are:"
  Const        r6, "The first 25 abundant odd numbers are:"
  Print        r6
  // let n = abundantOdd(1, 0, max, false)
  Const        r11, 1
  Move         r7, r11
  Const        r12, 0
  Move         r8, r12
  Const        r0, 25
  Move         r9, r0
  Const        r13, false
  Move         r10, r13
  Call         r14, abundantOdd, r7, r8, r9, r10
  Move         r15, r14
  // print("\nThe one thousandth abundant odd number is:")
  Const        r16, "\nThe one thousandth abundant odd number is:"
  Print        r16
  // abundantOdd(n, max, 1000, true)
  Move         r17, r15
  Const        r0, 25
  Move         r18, r0
  Const        r21, 1000
  Move         r19, r21
  Const        r22, true
  Move         r20, r22
  Call         r23, abundantOdd, r17, r18, r19, r20
  // print("\nThe first abundant odd number above one billion is:")
  Const        r24, "\nThe first abundant odd number above one billion is:"
  Print        r24
  // abundantOdd(1000000001, 0, 1, true)
  Const        r29, 1000000001
  Move         r25, r29
  Const        r12, 0
  Move         r26, r12
  Const        r11, 1
  Move         r27, r11
  Const        r22, true
  Move         r28, r22
  Call         r30, abundantOdd, r25, r26, r27, r28
  Return       r0
