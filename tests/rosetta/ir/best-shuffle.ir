func main (regs=1)
  Return       r0

  // fun nextRand(seed: int): int {
func nextRand (regs=7)
  // return (seed * 1664525 + 1013904223) % 2147483647
  Const        r1, 1664525
  Mul          r2, r0, r1
  Const        r3, 1013904223
  Add          r4, r2, r3
  Const        r5, 2147483647
  Mod          r6, r4, r5
  Return       r6

  // fun shuffleChars(s: string, seed: int): list<any> {
func shuffleChars (regs=37)
  // var chars: list<string> = []
  Const        r2, []
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L1:
  // while i < len(s) {
  Len          r6, r0
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L0
  // chars = append(chars, substring(s, i, i + 1))
  Const        r8, 1
  AddInt       r9, r5, r8
  Slice        r10, r0, r5, r9
  Append       r11, r3, r10
  Move         r3, r11
  // i = i + 1
  Const        r8, 1
  AddInt       r12, r5, r8
  Move         r5, r12
  // while i < len(s) {
  Jump         L1
L0:
  // var sd = seed
  Move         r13, r1
  // var idx = len(chars) - 1
  Len          r14, r3
  Const        r8, 1
  SubInt       r15, r14, r8
  Move         r16, r15
L3:
  // while idx > 0 {
  Const        r4, 0
  LessInt      r17, r4, r16
  JumpIfFalse  r17, L2
  // sd = nextRand(sd)
  Move         r18, r13
  Call         r19, nextRand, r18
  Move         r13, r19
  // var j = sd % (idx + 1)
  Const        r8, 1
  AddInt       r20, r16, r8
  Mod          r21, r13, r20
  Move         r22, r21
  // let tmp = chars[idx]
  Index        r23, r3, r16
  Move         r24, r23
  // chars[idx] = chars[j]
  Index        r25, r3, r22
  SetIndex     r3, r16, r25
  // chars[j] = tmp
  SetIndex     r3, r22, r24
  // idx = idx - 1
  Const        r8, 1
  SubInt       r26, r16, r8
  Move         r16, r26
  // while idx > 0 {
  Jump         L3
L2:
  // var res = ""
  Const        r27, ""
  Move         r28, r27
  // i = 0
  Const        r4, 0
  Move         r5, r4
L5:
  // while i < len(chars) {
  Len          r29, r3
  LessInt      r30, r5, r29
  JumpIfFalse  r30, L4
  // res = res + chars[i]
  Index        r31, r3, r5
  Add          r32, r28, r31
  Move         r28, r32
  // i = i + 1
  Const        r8, 1
  AddInt       r33, r5, r8
  Move         r5, r33
  // while i < len(chars) {
  Jump         L5
L4:
  // return [res, sd]
  Move         r34, r28
  Move         r35, r13
  MakeList     r36, 2, r34
  Return       r36

  // fun bestShuffle(s: string, seed: int): list<any> {
func bestShuffle (regs=61)
  // let r = shuffleChars(s, seed)
  Move         r2, r0
  Move         r3, r1
  Call2        r4, shuffleChars, r2, r3
  Move         r5, r4
  // var t = r[0]
  Const        r6, 0
  Index        r7, r5, r6
  Move         r8, r7
  // var sd = r[1]
  Const        r9, 1
  Index        r10, r5, r9
  Move         r11, r10
  // var arr: list<string> = []
  Const        r12, []
  Move         r13, r12
  // var i = 0
  Const        r6, 0
  Move         r14, r6
L1:
  // while i < len(t) {
  Len          r15, r8
  LessInt      r16, r14, r15
  JumpIfFalse  r16, L0
  // arr = append(arr, substring(t, i, i + 1))
  Const        r9, 1
  AddInt       r17, r14, r9
  Slice        r18, r8, r14, r17
  Append       r19, r13, r18
  Move         r13, r19
  // i = i + 1
  Const        r9, 1
  AddInt       r20, r14, r9
  Move         r14, r20
  // while i < len(t) {
  Jump         L1
L0:
  // i = 0
  Const        r6, 0
  Move         r14, r6
L7:
  // while i < len(arr) {
  Len          r21, r13
  LessInt      r22, r14, r21
  JumpIfFalse  r22, L2
  // var j = 0
  Const        r6, 0
  Move         r23, r6
L6:
  // while j < len(arr) {
  Len          r24, r13
  LessInt      r25, r23, r24
  JumpIfFalse  r25, L3
  // if i != j && arr[i] != substring(s, j, j + 1) && arr[j] != substring(s, i, i + 1) {
  NotEqual     r26, r14, r23
  Index        r27, r13, r14
  Const        r9, 1
  AddInt       r28, r23, r9
  Slice        r29, r0, r23, r28
  NotEqual     r30, r27, r29
  Index        r31, r13, r23
  Const        r9, 1
  AddInt       r32, r14, r9
  Slice        r33, r0, r14, r32
  NotEqual     r34, r31, r33
  Move         r35, r26
  JumpIfFalse  r35, L4
  Move         r35, r30
  JumpIfFalse  r35, L4
  Move         r35, r34
L4:
  JumpIfFalse  r35, L5
  // let tmp = arr[i]
  Index        r36, r13, r14
  Move         r37, r36
  // arr[i] = arr[j]
  Index        r38, r13, r23
  SetIndex     r13, r14, r38
  // arr[j] = tmp
  SetIndex     r13, r23, r37
  // break
  Jump         L3
L5:
  // j = j + 1
  Const        r9, 1
  AddInt       r39, r23, r9
  Move         r23, r39
  // while j < len(arr) {
  Jump         L6
L3:
  // i = i + 1
  Const        r9, 1
  AddInt       r40, r14, r9
  Move         r14, r40
  // while i < len(arr) {
  Jump         L7
L2:
  // var count = 0
  Const        r6, 0
  Move         r41, r6
  // i = 0
  Const        r6, 0
  Move         r14, r6
L10:
  // while i < len(arr) {
  Len          r42, r13
  LessInt      r43, r14, r42
  JumpIfFalse  r43, L8
  // if arr[i] == substring(s, i, i + 1) {
  Index        r44, r13, r14
  Const        r9, 1
  AddInt       r45, r14, r9
  Slice        r46, r0, r14, r45
  Equal        r47, r44, r46
  JumpIfFalse  r47, L9
  // count = count + 1
  Const        r9, 1
  AddInt       r48, r41, r9
  Move         r41, r48
L9:
  // i = i + 1
  Const        r9, 1
  AddInt       r49, r14, r9
  Move         r14, r49
  // while i < len(arr) {
  Jump         L10
L8:
  // var out = ""
  Const        r50, ""
  Move         r51, r50
  // i = 0
  Const        r6, 0
  Move         r14, r6
L12:
  // while i < len(arr) {
  Len          r52, r13
  LessInt      r53, r14, r52
  JumpIfFalse  r53, L11
  // out = out + arr[i]
  Index        r54, r13, r14
  Add          r55, r51, r54
  Move         r51, r55
  // i = i + 1
  Const        r9, 1
  AddInt       r56, r14, r9
  Move         r14, r56
  // while i < len(arr) {
  Jump         L12
L11:
  // return [out, sd, count]
  Move         r57, r51
  Move         r58, r11
  Move         r59, r41
  MakeList     r60, 3, r57
  Return       r60

  // fun main() {
func main (regs=30)
  // let ts = ["abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"]
  Const        r0, ["abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"]
  Move         r1, r0
  // var seed = 1
  Const        r2, 1
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L1:
  // while i < len(ts) {
  Const        r6, 6
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L0
  // let r = bestShuffle(ts[i], seed)
  Index        r10, r1, r5
  Move         r8, r10
  Move         r9, r3
  Call2        r11, bestShuffle, r8, r9
  Move         r12, r11
  // let shuf = r[0]
  Const        r4, 0
  Index        r13, r12, r4
  Move         r14, r13
  // seed = r[1]
  Const        r2, 1
  Index        r15, r12, r2
  Move         r3, r15
  // let cnt = r[2]
  Const        r16, 2
  Index        r17, r12, r16
  Move         r18, r17
  // print(ts[i] + " -> " + shuf + " (" + str(cnt) + ")")
  Index        r19, r1, r5
  Const        r20, " -> "
  Add          r21, r19, r20
  Add          r22, r21, r14
  Const        r23, " ("
  Add          r24, r22, r23
  Str          r25, r18
  Add          r26, r24, r25
  Const        r27, ")"
  Add          r28, r26, r27
  Print        r28
  // i = i + 1
  Const        r2, 1
  AddInt       r29, r5, r2
  Move         r5, r29
  // while i < len(ts) {
  Jump         L1
L0:
  Return       r0
