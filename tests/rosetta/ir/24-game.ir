func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun randDigit(): int { return (now() % 9) + 1 }
func randDigit (regs=5)
  // fun randDigit(): int { return (now() % 9) + 1 }
  Now          r0
  Const        r1, 9
  ModInt       r2, r0, r1
  Const        r3, 1
  AddInt       r4, r2, r3
  Return       r4

  // fun main() {
func main (regs=100)
  // var digits = []
  Const        r0, []
  Move         r1, r0
  // for i in 0..4 {
  Const        r2, 0
  Const        r3, 4
  Move         r4, r2
L1:
  LessInt      r5, r4, r3
  JumpIfFalse  r5, L0
  // digits = append(digits, randDigit())
  Call         r6, randDigit, 
  Append       r7, r1, r6
  Move         r1, r7
  // for i in 0..4 {
  Const        r8, 1
  AddInt       r9, r4, r8
  Move         r4, r9
  Jump         L1
L0:
  // var numstr = ""
  Const        r10, ""
  Move         r11, r10
  // for i in 0..4 {
  Const        r2, 0
  Const        r3, 4
  Move         r4, r2
L3:
  LessInt      r12, r4, r3
  JumpIfFalse  r12, L2
  // numstr = numstr + str(digits[i])
  Index        r13, r1, r4
  Str          r14, r13
  Add          r15, r11, r14
  Move         r11, r15
  // for i in 0..4 {
  Const        r16, 1
  AddInt       r17, r4, r16
  Move         r4, r17
  Jump         L3
L2:
  // print("Your numbers: " + numstr + "\n")
  Const        r18, "Your numbers: "
  Add          r19, r18, r11
  Const        r20, "\n"
  Add          r21, r19, r20
  Print        r21
  // print("Enter RPN: ")
  Const        r22, "Enter RPN: "
  Print        r22
  // var expr = input()
  Input        r23
  Move         r24, r23
  // if len(expr) != 7 {
  Len          r25, r24
  Const        r26, 7
  NotEqual     r27, r25, r26
  JumpIfFalse  r27, L4
  // print("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
  Const        r28, "invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)"
  Print        r28
  // return
  Return       r0
L4:
  // var stack = []
  Const        r0, []
  Move         r29, r0
  // var i = 0
  Const        r2, 0
  Move         r4, r2
  // var valid = true
  Const        r30, true
  Move         r31, r30
L14:
  // while i < len(expr) {
  Len          r32, r24
  LessInt      r33, r4, r32
  JumpIfFalse  r33, L5
  // let ch = substring(expr, i, i+1)
  Const        r34, 1
  AddInt       r35, r4, r34
  Slice        r36, r24, r4, r35
  Move         r37, r36
  // if ch >= "0" && ch <= "9" {
  Const        r38, "0"
  LessEq       r39, r38, r37
  Const        r40, "9"
  LessEq       r41, r37, r40
  Move         r42, r39
  JumpIfFalse  r42, L6
  Move         r42, r41
L6:
  JumpIfFalse  r42, L7
  // if len(digits) == 0 {
  Len          r43, r1
  Const        r2, 0
  EqualInt     r44, r43, r2
  JumpIfFalse  r44, L8
  // print("too many numbers.")
  Const        r45, "too many numbers."
  Print        r45
  // return
  Return       r0
L8:
  // var j = 0
  Const        r2, 0
  Move         r46, r2
L10:
  // while digits[j] != int(ch) - int("0") {
  Index        r47, r1, r46
  Sub          r50, r48, r49
  NotEqual     r51, r47, r50
  JumpIfFalse  r51, L9
  // j = j + 1
  Const        r34, 1
  AddInt       r52, r46, r34
  Move         r46, r52
  // if j == len(digits) {
  Len          r53, r1
  EqualInt     r54, r46, r53
  JumpIfFalse  r54, L10
  // print("wrong numbers.")
  Const        r55, "wrong numbers."
  Print        r55
  // return
  Return       r0
L9:
  // digits = digits[:j] + digits[j+1:]
  Const        r56, nil
  Move         r57, r46
  Slice        r58, r1, r56, r57
  Const        r34, 1
  AddInt       r60, r46, r34
  Move         r59, r60
  Const        r61, nil
  Slice        r62, r1, r59, r61
  Add          r63, r58, r62
  Move         r1, r63
  // stack = append(stack, float(int(ch) - int("0")))
  Append       r65, r29, r64
  Move         r29, r65
  // if ch >= "0" && ch <= "9" {
  Jump         L11
L7:
  // if len(stack) < 2 {
  Len          r66, r29
  Const        r67, 2
  LessInt      r68, r66, r67
  JumpIfFalse  r68, L12
  // print("invalid expression syntax.")
  Const        r69, "invalid expression syntax."
  Print        r69
  // valid = false
  Const        r70, false
  Move         r31, r70
  // break
  Jump         L5
L12:
  // var b = stack[len(stack)-1]
  Len          r71, r29
  Const        r34, 1
  SubInt       r72, r71, r34
  Index        r73, r29, r72
  Move         r74, r73
  // var a = stack[len(stack)-2]
  Len          r75, r29
  Const        r67, 2
  SubInt       r76, r75, r67
  Index        r77, r29, r76
  Move         r78, r77
  // if ch == "+" {
  Const        r79, "+"
  Equal        r80, r37, r79
  JumpIfFalse  r80, L13
  // stack[len(stack)-2] = a + b
  Add          r81, r78, r74
  Len          r82, r29
  Const        r67, 2
  SubInt       r83, r82, r67
  SetIndex     r29, r83, r81
L13:
  // stack = stack[:len(stack)-1]
  Const        r84, nil
  Len          r86, r29
  Const        r34, 1
  SubInt       r87, r86, r34
  Move         r85, r87
  Slice        r88, r29, r84, r85
  Move         r29, r88
L11:
  // i = i + 1
  Const        r34, 1
  AddInt       r89, r4, r34
  Move         r4, r89
  // while i < len(expr) {
  Jump         L14
L5:
  // if valid {
  JumpIfFalse  r31, L15
  // if abs(stack[0] - 24.0) > 0.000001 {
  Const        r91, 0.000001
  LessFloat    r92, r91, r90
  JumpIfFalse  r92, L16
  // print("incorrect. " + str(stack[0]) + " != 24")
  Const        r93, "incorrect. "
  Const        r2, 0
  Index        r94, r29, r2
  Str          r95, r94
  Add          r96, r93, r95
  Const        r97, " != 24"
  Add          r98, r96, r97
  Print        r98
  // if abs(stack[0] - 24.0) > 0.000001 {
  Jump         L15
L16:
  // print("correct.")
  Const        r99, "correct."
  Print        r99
L15:
  Return       r0
