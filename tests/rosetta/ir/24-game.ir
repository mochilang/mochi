func __main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun randDigit(): int { return (now() % 9) + 1 }
func randDigit (regs=5)
  // fun randDigit(): int { return (now() % 9) + 1 }
  Now          r0
  Const        r1, 9
  ModInt       r2, r0, r1
  Const        r3, 1
  AddInt       r4, r2, r3
  Return       r4

  // fun main() {
func main (regs=116)
  // var digits = []
  Const        r0, []
  Move         r1, r0
  // for i in 0..4 {
  Const        r2, 0
  Const        r3, 4
  Move         r4, r2
L1:
  LessInt      r5, r4, r3
  JumpIfFalse  r5, L0
  // digits = append(digits, randDigit())
  Call         r6, randDigit, 
  Append       r7, r1, r6
  Move         r1, r7
  // for i in 0..4 {
  Const        r8, 1
  AddInt       r9, r4, r8
  Move         r4, r9
  Jump         L1
L0:
  // var numstr = ""
  Const        r10, ""
  Move         r11, r10
  // for i in 0..4 {
  Const        r2, 0
  Const        r3, 4
  Move         r4, r2
L3:
  LessInt      r12, r4, r3
  JumpIfFalse  r12, L2
  // numstr = numstr + str(digits[i])
  Index        r13, r1, r4
  Str          r14, r13
  Add          r15, r11, r14
  Move         r11, r15
  // for i in 0..4 {
  Const        r16, 1
  AddInt       r17, r4, r16
  Move         r4, r17
  Jump         L3
L2:
  // print("Your numbers: " + numstr + "\n")
  Const        r18, "Your numbers: "
  Add          r19, r18, r11
  Const        r20, "\n"
  Add          r21, r19, r20
  Print        r21
  // print("Enter RPN: ")
  Const        r22, "Enter RPN: "
  Print        r22
  // var expr = input()
  Input        r23
  Move         r24, r23
  // if len(expr) != 7 {
  Len          r25, r24
  Const        r26, 7
  NotEqual     r27, r25, r26
  JumpIfFalse  r27, L4
  // print("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
  Const        r28, "invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)"
  Print        r28
  // return
  Return       r0
L4:
  // var stack = []
  Const        r0, []
  Move         r29, r0
  // var i = 0
  Const        r2, 0
  Move         r4, r2
  // var valid = true
  Const        r30, true
  Move         r31, r30
L18:
  // while i < len(expr) {
  Len          r32, r24
  LessInt      r33, r4, r32
  JumpIfFalse  r33, L5
  // let ch = substring(expr, i, i+1)
  Const        r34, 1
  AddInt       r35, r4, r34
  Slice        r36, r24, r4, r35
  Move         r37, r36
  // if ch >= "0" && ch <= "9" {
  Const        r38, "0"
  LessEq       r39, r38, r37
  Const        r40, "9"
  LessEq       r41, r37, r40
  Move         r42, r39
  JumpIfFalse  r42, L6
  Move         r42, r41
L6:
  JumpIfFalse  r42, L7
  // if len(digits) == 0 {
  Len          r43, r1
  Const        r2, 0
  EqualInt     r44, r43, r2
  JumpIfFalse  r44, L8
  // print("too many numbers.")
  Const        r45, "too many numbers."
  Print        r45
  // return
  Return       r0
L8:
  // var j = 0
  Const        r2, 0
  Move         r46, r2
L10:
  // while digits[j] != int(ch) - int("0") {
  Index        r47, r1, r46
  Cast         r48, r37, int
  Const        r2, 0
  Sub          r49, r48, r2
  NotEqual     r50, r47, r49
  JumpIfFalse  r50, L9
  // j = j + 1
  Const        r34, 1
  AddInt       r51, r46, r34
  Move         r46, r51
  // if j == len(digits) {
  Len          r52, r1
  EqualInt     r53, r46, r52
  JumpIfFalse  r53, L10
  // print("wrong numbers.")
  Const        r54, "wrong numbers."
  Print        r54
  // return
  Return       r0
L9:
  // digits = digits[:j] + digits[j+1:]
  Const        r55, nil
  Move         r56, r46
  Slice        r57, r1, r55, r56
  Const        r34, 1
  AddInt       r59, r46, r34
  Move         r58, r59
  Const        r60, nil
  Slice        r61, r1, r58, r60
  Add          r62, r57, r61
  Move         r1, r62
  // stack = append(stack, float(int(ch) - int("0")))
  Append       r64, r29, r63
  Move         r29, r64
  // if ch >= "0" && ch <= "9" {
  Jump         L11
L7:
  // if len(stack) < 2 {
  Len          r65, r29
  Const        r66, 2
  LessInt      r67, r65, r66
  JumpIfFalse  r67, L12
  // print("invalid expression syntax.")
  Const        r68, "invalid expression syntax."
  Print        r68
  // valid = false
  Const        r69, false
  Move         r31, r69
  // break
  Jump         L5
L12:
  // var b = stack[len(stack)-1]
  Len          r70, r29
  Const        r34, 1
  SubInt       r71, r70, r34
  Index        r72, r29, r71
  Move         r73, r72
  // var a = stack[len(stack)-2]
  Len          r74, r29
  Const        r66, 2
  SubInt       r75, r74, r66
  Index        r76, r29, r75
  Move         r77, r76
  // if ch == "+" {
  Const        r78, "+"
  Equal        r79, r37, r78
  JumpIfFalse  r79, L13
  // stack[len(stack)-2] = a + b
  Add          r80, r77, r73
  Len          r81, r29
  Const        r66, 2
  SubInt       r82, r81, r66
  SetIndex     r29, r82, r80
  // if ch == "+" {
  Jump         L14
L13:
  // } else if ch == "-" {
  Const        r83, "-"
  Equal        r84, r37, r83
  JumpIfFalse  r84, L15
  // stack[len(stack)-2] = a - b
  Sub          r85, r77, r73
  Len          r86, r29
  Const        r66, 2
  SubInt       r87, r86, r66
  SetIndex     r29, r87, r85
  // } else if ch == "-" {
  Jump         L14
L15:
  // } else if ch == "*" {
  Const        r88, "*"
  Equal        r89, r37, r88
  JumpIfFalse  r89, L16
  // stack[len(stack)-2] = a * b
  Mul          r90, r77, r73
  Len          r91, r29
  Const        r66, 2
  SubInt       r92, r91, r66
  SetIndex     r29, r92, r90
  // } else if ch == "*" {
  Jump         L14
L16:
  // } else if ch == "/" {
  Const        r93, "/"
  Equal        r94, r37, r93
  JumpIfFalse  r94, L17
  // stack[len(stack)-2] = a / b
  Div          r95, r77, r73
  Len          r96, r29
  Const        r66, 2
  SubInt       r97, r96, r66
  SetIndex     r29, r97, r95
  // } else if ch == "/" {
  Jump         L14
L17:
  // print(ch + " invalid.")
  Const        r98, " invalid."
  Add          r99, r37, r98
  Print        r99
  // valid = false
  Const        r69, false
  Move         r31, r69
  // break
  Jump         L5
L14:
  // stack = stack[:len(stack)-1]
  Const        r100, nil
  Len          r102, r29
  Const        r34, 1
  SubInt       r103, r102, r34
  Move         r101, r103
  Slice        r104, r29, r100, r101
  Move         r29, r104
L11:
  // i = i + 1
  Const        r34, 1
  AddInt       r105, r4, r34
  Move         r4, r105
  // while i < len(expr) {
  Jump         L18
L5:
  // if valid {
  JumpIfFalse  r31, L19
  // if abs(stack[0] - 24.0) > 0.000001 {
  Const        r107, 0.000001
  LessFloat    r108, r107, r106
  JumpIfFalse  r108, L20
  // print("incorrect. " + str(stack[0]) + " != 24")
  Const        r109, "incorrect. "
  Const        r2, 0
  Index        r110, r29, r2
  Str          r111, r110
  Add          r112, r109, r111
  Const        r113, " != 24"
  Add          r114, r112, r113
  Print        r114
  // if abs(stack[0] - 24.0) > 0.000001 {
  Jump         L19
L20:
  // print("correct.")
  Const        r115, "correct."
  Print        r115
L19:
  Return       r0
