func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun floorf(x: float): float {
func floorf (regs=4)
  // let y = x as int
  Cast         r1, r0, int
  Move         r2, r1
  // return y as float
  Cast         r3, r2, float
  Return       r3

  // fun indexOf(s: string, ch: string): int {
func indexOf (regs=12)
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L2:
  // while i < len(s) {
  Len          r4, r0
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // if substring(s, i, i+1) == ch {
  Const        r6, 1
  AddInt       r7, r3, r6
  Slice        r8, r0, r3, r7
  Equal        r9, r8, r1
  JumpIfFalse  r9, L1
  // return i
  Return       r3
L1:
  // i = i + 1
  Const        r6, 1
  AddInt       r10, r3, r6
  Move         r3, r10
  // while i < len(s) {
  Jump         L2
L0:
  // return -1
  Const        r6, 1
  NegInt       r11, r6
  Return       r11

  // fun fmtF3(x: float): string {
func fmtF3 (regs=35)
  // var y = floorf(x * 1000.0 + 0.5) / 1000.0
  Const        r2, 1000.0
  MulFloat     r3, r0, r2
  Const        r4, 0.5
  AddFloat     r5, r3, r4
  Move         r1, r5
  Call         r6, floorf, r1
  Const        r2, 1000.0
  DivFloat     r7, r6, r2
  Move         r8, r7
  // var s = str(y)
  Str          r9, r8
  Move         r10, r9
  // var dot = indexOf(s, ".")
  Move         r11, r10
  Const        r13, "."
  Move         r12, r13
  Call2        r14, indexOf, r11, r12
  Move         r15, r14
  // if dot == 0 - 1 {
  Const        r16, 0
  Const        r17, 1
  SubInt       r18, r16, r17
  Equal        r19, r15, r18
  JumpIfFalse  r19, L0
  // s = s + ".000"
  Const        r20, ".000"
  Add          r21, r10, r20
  Move         r10, r21
  // if dot == 0 - 1 {
  Jump         L1
L0:
  // var decs = len(s) - dot - 1
  Len          r22, r10
  Sub          r23, r22, r15
  Const        r17, 1
  Sub          r24, r23, r17
  Move         r25, r24
  // if decs > 3 {
  Const        r26, 3
  Less         r27, r26, r25
  JumpIfFalse  r27, L2
  // s = substring(s, 0, dot + 4)
  Const        r16, 0
  Const        r28, 4
  Add          r29, r15, r28
  Slice        r30, r10, r16, r29
  Move         r10, r30
  // if decs > 3 {
  Jump         L1
L2:
  // while decs < 3 {
  Const        r26, 3
  Less         r31, r25, r26
  JumpIfFalse  r31, L1
  // s = s + "0"
  Const        r32, "0"
  Add          r33, r10, r32
  Move         r10, r33
  // decs = decs + 1
  Const        r17, 1
  Add          r34, r25, r17
  Move         r25, r34
  // while decs < 3 {
  Jump         L2
L1:
  // return s
  Return       r10

  // fun padFloat3(x: float, width: int): string {
func padFloat3 (regs=9)
  // var s = fmtF3(x)
  Move         r2, r0
  Call         r3, fmtF3, r2
  Move         r4, r3
L1:
  // while len(s) < width {
  Len          r5, r4
  Less         r6, r5, r1
  JumpIfFalse  r6, L0
  // s = " " + s
  Const        r7, " "
  Add          r8, r7, r4
  Move         r4, r8
  // while len(s) < width {
  Jump         L1
L0:
  // return s
  Return       r4

  // fun fib1000(): list<float> {
func fib1000 (regs=15)
  // var a = 0.0
  Const        r0, 0.0
  Move         r1, r0
  // var b = 1.0
  Const        r2, 1.0
  Move         r3, r2
  // var res: list<float> = []
  Const        r4, []
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L1:
  // while i < 1000 {
  Const        r8, 1000
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // res = append(res, b)
  Append       r10, r5, r3
  Move         r5, r10
  // var t = b
  Move         r11, r3
  // b = b + a
  AddFloat     r12, r3, r1
  Move         r3, r12
  // a = t
  Move         r1, r11
  // i = i + 1
  Const        r13, 1
  AddInt       r14, r7, r13
  Move         r7, r14
  // while i < 1000 {
  Jump         L1
L0:
  // return res
  Return       r5

  // fun leadingDigit(x: float): int {
func leadingDigit (regs=13)
  // if x < 0.0 { x = -x }
  Const        r1, 0.0
  LessFloat    r2, r0, r1
  JumpIfFalse  r2, L0
  Neg          r3, r0
  Move         r0, r3
L0:
  // while x >= 10.0 { x = x / 10.0 }
  Const        r4, 10.0
  LessEqFloat  r5, r4, r0
  JumpIfFalse  r5, L1
  Const        r4, 10.0
  DivFloat     r6, r0, r4
  Move         r0, r6
  Jump         L0
L1:
  // while x > 0.0 && x < 1.0 { x = x * 10.0 }
  Const        r1, 0.0
  LessFloat    r7, r1, r0
  Const        r8, 1.0
  LessFloat    r9, r0, r8
  Move         r10, r7
  JumpIfFalse  r10, L2
  Move         r10, r9
L2:
  JumpIfFalse  r10, L3
  Const        r4, 10.0
  MulFloat     r11, r0, r4
  Move         r0, r11
  Jump         L1
L3:
  // return x as int
  Cast         r12, r0, int
  Return       r12

  // fun show(nums: list<float>, title: string) {
func show (regs=55)
  // var counts = [0,0,0,0,0,0,0,0,0]
  Const        r2, [0, 0, 0, 0, 0, 0, 0, 0, 0]
  Move         r3, r2
  // for n in nums {
  IterPrep     r4, r0
  Len          r5, r4
  Const        r6, 0
L3:
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L0
  Index        r8, r4, r6
  Move         r9, r8
  // let d = leadingDigit(n)
  Move         r10, r9
  Call         r11, leadingDigit, r10
  Move         r12, r11
  // if d >= 1 && d <= 9 {
  Const        r13, 1
  LessEq       r14, r13, r12
  Const        r15, 9
  LessEq       r16, r12, r15
  Move         r17, r14
  JumpIfFalse  r17, L1
  Move         r17, r16
L1:
  JumpIfFalse  r17, L2
  // counts[d-1] = counts[d-1] + 1
  Const        r13, 1
  Sub          r18, r12, r13
  Index        r19, r3, r18
  Const        r13, 1
  Add          r20, r19, r13
  Const        r13, 1
  Sub          r21, r12, r13
  SetIndex     r3, r21, r20
L2:
  // for n in nums {
  Const        r22, 1
  AddInt       r23, r6, r22
  Move         r6, r23
  Jump         L3
L0:
  // let preds = [0.301,0.176,0.125,0.097,0.079,0.067,0.058,0.051,0.046]
  Const        r24, [0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046]
  Move         r25, r24
  // let total = len(nums)
  Len          r26, r0
  Move         r27, r26
  // print(title)
  Print        r1
  // print("Digit  Observed  Predicted")
  Const        r28, "Digit  Observed  Predicted"
  Print        r28
  // var i = 0
  Const        r29, 0
  Move         r30, r29
L5:
  // while i < 9 {
  Const        r15, 9
  LessInt      r31, r30, r15
  JumpIfFalse  r31, L4
  // let obs = (counts[i] as float) / (total as float)
  Index        r32, r3, r30
  Cast         r33, r32, float
  Cast         r34, r27, float
  Div          r35, r33, r34
  Move         r36, r35
  // var line = "  " + str(i+1) + "  " + padFloat3(obs, 9) + "  " + padFloat3(preds[i], 8)
  Const        r37, "  "
  Const        r13, 1
  AddInt       r38, r30, r13
  Str          r39, r38
  Add          r40, r37, r39
  Const        r37, "  "
  Add          r41, r40, r37
  Move         r42, r36
  Const        r15, 9
  Move         r43, r15
  Call2        r44, padFloat3, r42, r43
  Add          r45, r41, r44
  Const        r37, "  "
  Add          r46, r45, r37
  Index        r49, r25, r30
  Move         r47, r49
  Const        r50, 8
  Move         r48, r50
  Call2        r51, padFloat3, r47, r48
  Add          r52, r46, r51
  Move         r53, r52
  // print(line)
  Print        r53
  // i = i + 1
  Const        r13, 1
  AddInt       r54, r30, r13
  Move         r30, r54
  // while i < 9 {
  Jump         L5
L4:
  Return       r0

  // fun main() {
func main (regs=5)
  // show(fib1000(), "First 1000 Fibonacci numbers")
  Call         r2, fib1000, 
  Move         r0, r2
  Const        r3, "First 1000 Fibonacci numbers"
  Move         r1, r3
  Call2        r4, show, r0, r1
  Return       r0
