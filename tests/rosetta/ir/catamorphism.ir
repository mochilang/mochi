func main (regs=20)
  // let n = [1, 2, 3, 4, 5]
  Const        r1, [1, 2, 3, 4, 5]
  Move         r0, r1
  SetGlobal    0,0,0,0
  // print(fold(fun(a: int, b: int): int => add(a, b), n))
  Move         r4, r0
  MakeClosure  r5, fn5, 1, r4
  Move         r2, r5
  Const        r6, [1, 2, 3, 4, 5]
  Move         r3, r6
  Call2        r7, fold, r2, r3
  Print        r7
  // print(fold(fun(a: int, b: int): int => sub(a, b), n))
  Move         r10, r0
  MakeClosure  r11, fn6, 1, r10
  Move         r8, r11
  Const        r12, [1, 2, 3, 4, 5]
  Move         r9, r12
  Call2        r13, fold, r8, r9
  Print        r13
  // print(fold(fun(a: int, b: int): int => mul(a, b), n))
  Move         r16, r0
  MakeClosure  r17, fn7, 1, r16
  Move         r14, r17
  Const        r18, [1, 2, 3, 4, 5]
  Move         r15, r18
  Call2        r19, fold, r14, r15
  Print        r19
  Return       r0

  // fun add(a: int, b: int): int { return a + b }
func add (regs=4)
  // fun add(a: int, b: int): int { return a + b }
  Add          r3, r1, r2
  Return       r3

  // fun sub(a: int, b: int): int { return a - b }
func sub (regs=4)
  // fun sub(a: int, b: int): int { return a - b }
  Sub          r3, r1, r2
  Return       r3

  // fun mul(a: int, b: int): int { return a * b }
func mul (regs=4)
  // fun mul(a: int, b: int): int { return a * b }
  Mul          r3, r1, r2
  Return       r3

  // fun fold(f: fun(int, int): int, xs: list<int>): int {
func fold (regs=15)
  // var r = xs[0]
  Const        r3, 0
  Index        r4, r2, r3
  Move         r5, r4
  // var i = 1
  Const        r6, 1
  Move         r7, r6
L1:
  // while i < len(xs) {
  Len          r8, r2
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // r = f(r, xs[i])
  Move         r10, r5
  Index        r12, r2, r7
  Move         r11, r12
  CallV        r13, r1, 2, r10
  Move         r5, r13
  // i = i + 1
  Const        r6, 1
  AddInt       r14, r7, r6
  Move         r7, r14
  // while i < len(xs) {
  Jump         L1
L0:
  // return r
  Return       r5

  // print(fold(fun(a: int, b: int): int => add(a, b), n))
func fn5 (regs=7)
  // print(fold(fun(a: int, b: int): int => add(a, b), n))
  Move         r4, r2
  Move         r5, r3
  Call2        r6, add, r4, r5
  Return       r6

  // print(fold(fun(a: int, b: int): int => sub(a, b), n))
func fn6 (regs=7)
  // print(fold(fun(a: int, b: int): int => sub(a, b), n))
  Move         r4, r2
  Move         r5, r3
  Call2        r6, sub, r4, r5
  Return       r6

  // print(fold(fun(a: int, b: int): int => mul(a, b), n))
func fn7 (regs=7)
  // print(fold(fun(a: int, b: int): int => mul(a, b), n))
  Move         r4, r2
  Move         r5, r3
  Call2        r6, mul, r4, r5
  Return       r6
