func main (regs=1)
  Return       r0

  // fun digits(n: int): list<int> {
func digits (regs=22)
  // if n == 0 { return [0] }
  Const        r1, 0
  Equal        r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, [0]
  Return       r3
L0:
  // var rev: list<int> = []
  Const        r4, []
  Move         r5, r4
  // var x = n
  Move         r6, r0
L2:
  // while x > 0 {
  Const        r1, 0
  Less         r7, r1, r6
  JumpIfFalse  r7, L1
  // rev = append(rev, x % 10)
  Const        r8, 10
  Mod          r9, r6, r8
  Append       r10, r5, r9
  Move         r5, r10
  // x = (x / 10) as int
  Const        r8, 10
  Div          r11, r6, r8
  Cast         r12, r11, int
  Move         r6, r12
  // while x > 0 {
  Jump         L2
L1:
  // var out: list<int> = []
  Const        r4, []
  Move         r13, r4
  // var i = len(rev) - 1
  Len          r14, r5
  Const        r15, 1
  SubInt       r16, r14, r15
  Move         r17, r16
L4:
  // while i >= 0 {
  Const        r1, 0
  LessEqInt    r18, r1, r17
  JumpIfFalse  r18, L3
  // out = append(out, rev[i])
  Index        r19, r5, r17
  Append       r20, r13, r19
  Move         r13, r20
  // i = i - 1
  Const        r15, 1
  SubInt       r21, r17, r15
  Move         r17, r21
  // while i >= 0 {
  Jump         L4
L3:
  // return out
  Return       r13

  // fun commatize(n: int): string {
func commatize (regs=22)
  // var s = str(n)
  Str          r1, r0
  Move         r2, r1
  // var out = ""
  Const        r3, ""
  Move         r4, r3
  // var i = len(s)
  Len          r5, r2
  Move         r6, r5
L1:
  // while i > 3 {
  Const        r7, 3
  LessInt      r8, r7, r6
  JumpIfFalse  r8, L0
  // out = "," + s[i-3:i] + out
  Const        r9, ","
  Const        r7, 3
  SubInt       r11, r6, r7
  Move         r10, r11
  Move         r12, r6
  Slice        r13, r2, r10, r12
  Add          r14, r9, r13
  Add          r15, r14, r4
  Move         r4, r15
  // i = i - 3
  Const        r7, 3
  SubInt       r16, r6, r7
  Move         r6, r16
  // while i > 3 {
  Jump         L1
L0:
  // out = s[0:i] + out
  Const        r18, 0
  Move         r17, r18
  Move         r19, r6
  Slice        r20, r2, r17, r19
  Add          r21, r20, r4
  Move         r4, r21
  // return out
  Return       r4

  // fun isPrime(n: int): bool {
func isPrime (regs=24)
  // if n < 2 { return false }
  Const        r1, 2
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, false
  Return       r3
L0:
  // if n % 2 == 0 { return n == 2 }
  Const        r1, 2
  Mod          r4, r0, r1
  Const        r5, 0
  Equal        r6, r4, r5
  JumpIfFalse  r6, L1
  Const        r1, 2
  Equal        r7, r0, r1
  Return       r7
L1:
  // if n % 3 == 0 { return n == 3 }
  Const        r8, 3
  Mod          r9, r0, r8
  Const        r5, 0
  Equal        r10, r9, r5
  JumpIfFalse  r10, L2
  Const        r8, 3
  Equal        r11, r0, r8
  Return       r11
L2:
  // var d = 5
  Const        r12, 5
  Move         r13, r12
L6:
  // while d * d <= n {
  MulInt       r14, r13, r13
  LessEq       r15, r14, r0
  JumpIfFalse  r15, L3
  // if n % d == 0 { return false }
  Mod          r16, r0, r13
  Const        r5, 0
  Equal        r17, r16, r5
  JumpIfFalse  r17, L4
  Const        r3, false
  Return       r3
L4:
  // d = d + 2
  Const        r1, 2
  AddInt       r18, r13, r1
  Move         r13, r18
  // if n % d == 0 { return false }
  Mod          r19, r0, r13
  Const        r5, 0
  Equal        r20, r19, r5
  JumpIfFalse  r20, L5
  Const        r3, false
  Return       r3
L5:
  // d = d + 4
  Const        r21, 4
  AddInt       r22, r13, r21
  Move         r13, r22
  // while d * d <= n {
  Jump         L6
L3:
  // return true
  Const        r23, true
  Return       r23

  // fun split(s: string, sep: string): list<string> {
func split (regs=30)
  // var parts: list<string> = []
  Const        r2, []
  Move         r3, r2
  // var cur = ""
  Const        r4, ""
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L3:
  // while i < len(s) {
  Len          r8, r0
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // if i + len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
  Len          r10, r1
  AddInt       r11, r7, r10
  Len          r12, r0
  LessEqInt    r13, r11, r12
  Len          r14, r1
  AddInt       r15, r7, r14
  Slice        r16, r0, r7, r15
  Equal        r17, r16, r1
  Move         r18, r13
  JumpIfFalse  r18, L1
  Move         r18, r17
L1:
  JumpIfFalse  r18, L2
  // parts = append(parts, cur)
  Append       r19, r3, r5
  Move         r3, r19
  // cur = ""
  Const        r4, ""
  Move         r5, r4
  // i = i + len(sep)
  Len          r20, r1
  AddInt       r21, r7, r20
  Move         r7, r21
  // if i + len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
  Jump         L3
L2:
  // cur = cur + s[i:i+1]
  Move         r22, r7
  Const        r24, 1
  AddInt       r25, r7, r24
  Move         r23, r25
  Slice        r26, r0, r22, r23
  Add          r27, r5, r26
  Move         r5, r27
  // i = i + 1
  Const        r24, 1
  AddInt       r28, r7, r24
  Move         r7, r28
  // while i < len(s) {
  Jump         L3
L0:
  // parts = append(parts, cur)
  Append       r29, r3, r5
  Move         r3, r29
  // return parts
  Return       r3

  // fun parseIntStr(str: string): int {
func parseIntStr (regs=30)
  // var i = 0
  Const        r1, 0
  Move         r2, r1
  // var neg = false
  Const        r3, false
  Move         r4, r3
  // if len(str) > 0 && str[0:1] == "-" {
  Len          r5, r0
  Const        r1, 0
  LessInt      r6, r1, r5
  Const        r1, 0
  Move         r7, r1
  Const        r9, 1
  Move         r8, r9
  Slice        r10, r0, r7, r8
  Const        r11, "-"
  Equal        r12, r10, r11
  Move         r13, r6
  JumpIfFalse  r13, L0
  Move         r13, r12
L0:
  JumpIfFalse  r13, L1
  // neg = true
  Const        r14, true
  Move         r4, r14
  // i = 1
  Const        r9, 1
  Move         r2, r9
L1:
  // var n = 0
  Const        r1, 0
  Move         r15, r1
  // let digits = {
  Const        r16, {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
  Move         r17, r16
L3:
  // while i < len(str) {
  Len          r18, r0
  LessInt      r19, r2, r18
  JumpIfFalse  r19, L2
  // n = n * 10 + digits[str[i:i+1]]
  Const        r20, 10
  MulInt       r21, r15, r20
  Move         r22, r2
  Const        r9, 1
  AddInt       r24, r2, r9
  Move         r23, r24
  Slice        r25, r0, r22, r23
  Index        r26, r17, r25
  Add          r27, r21, r26
  Move         r15, r27
  // i = i + 1
  Const        r9, 1
  AddInt       r28, r2, r9
  Move         r2, r28
  // while i < len(str) {
  Jump         L3
L2:
  // if neg { n = -n }
  JumpIfFalse  r4, L4
  Neg          r29, r15
  Move         r15, r29
L4:
  // return n
  Return       r15

  // fun reverseStr(s: string): string {
func reverseStr (regs=15)
  // var out = ""
  Const        r1, ""
  Move         r2, r1
  // var i = len(s) - 1
  Len          r3, r0
  Const        r4, 1
  SubInt       r5, r3, r4
  Move         r6, r5
L1:
  // while i >= 0 {
  Const        r7, 0
  LessEqInt    r8, r7, r6
  JumpIfFalse  r8, L0
  // out = out + s[i:i+1]
  Move         r9, r6
  Const        r4, 1
  AddInt       r11, r6, r4
  Move         r10, r11
  Slice        r12, r0, r9, r10
  Add          r13, r2, r12
  Move         r2, r13
  // i = i - 1
  Const        r4, 1
  SubInt       r14, r6, r4
  Move         r6, r14
  // while i >= 0 {
  Jump         L1
L0:
  // return out
  Return       r2

  // fun pad(s: string, w: int): string {
func pad (regs=7)
  // var out = s
  Move         r2, r0
L1:
  // while len(out) < w { out = " " + out }
  Len          r3, r2
  Less         r4, r3, r1
  JumpIfFalse  r4, L0
  Const        r5, " "
  Add          r6, r5, r2
  Move         r2, r6
  Jump         L1
L0:
  // return out
  Return       r2

  // fun findFirst(list: list<int>): list<int> {
func findFirst (regs=15)
  // var i = 0
  Const        r1, 0
  Move         r2, r1
L2:
  // while i < len(list) {
  Len          r3, r0
  LessInt      r4, r2, r3
  JumpIfFalse  r4, L0
  // if list[i] > 10000000 { return [list[i], i] }
  Index        r5, r0, r2
  Const        r6, 10000000
  Less         r7, r6, r5
  JumpIfFalse  r7, L1
  Index        r10, r0, r2
  Move         r8, r10
  Move         r9, r2
  MakeList     r11, 2, r8
  Return       r11
L1:
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r2, r12
  Move         r2, r13
  // while i < len(list) {
  Jump         L2
L0:
  // return [-1, -1]
  Const        r14, [-1, -1]
  Return       r14

  // fun main() {
func main (regs=194)
  // let ranges = [[0,0],[101,909],[11011,99099],[1110111,9990999],[111101111,119101111]]
  Const        r0, [[0, 0], [101, 909], [11011, 99099], [1110111, 9990999], [111101111, 119101111]]
  Move         r1, r0
  // var cyclops: list<int> = []
  Const        r2, []
  Move         r3, r2
  // for r in ranges {
  IterPrep     r4, r1
  Len          r5, r4
  Const        r6, 0
L7:
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L0
  Index        r8, r4, r6
  Move         r9, r8
  // let start = r[0]
  Const        r10, 0
  Index        r11, r9, r10
  Move         r12, r11
  // let end = r[1]
  Const        r13, 1
  Index        r14, r9, r13
  Move         r15, r14
  // let numDigits = len(str(start))
  Str          r16, r12
  Len          r17, r16
  Move         r18, r17
  // let center = numDigits / 2
  Const        r19, 2
  DivInt       r20, r18, r19
  Move         r21, r20
  // var i = start
  Move         r22, r12
L6:
  // while i <= end {
  LessEq       r23, r22, r15
  JumpIfFalse  r23, L1
  // let ds = digits(i)
  Move         r24, r22
  Call         r25, digits, r24
  Move         r26, r25
  // if ds[center] == 0 {
  Index        r27, r26, r21
  Const        r10, 0
  Equal        r28, r27, r10
  JumpIfFalse  r28, L2
  // var count = 0
  Const        r10, 0
  Move         r29, r10
  // for d in ds { if d == 0 { count = count + 1 } }
  IterPrep     r30, r26
  Len          r31, r30
  Const        r32, 0
L5:
  LessInt      r33, r32, r31
  JumpIfFalse  r33, L3
  Index        r34, r30, r32
  Move         r35, r34
  Const        r10, 0
  Equal        r36, r35, r10
  JumpIfFalse  r36, L4
  Const        r13, 1
  AddInt       r37, r29, r13
  Move         r29, r37
L4:
  Const        r38, 1
  AddInt       r39, r32, r38
  Move         r32, r39
  Jump         L5
L3:
  // if count == 1 { cyclops = append(cyclops, i) }
  Const        r13, 1
  EqualInt     r40, r29, r13
  JumpIfFalse  r40, L2
  Append       r41, r3, r22
  Move         r3, r41
L2:
  // i = i + 1
  Const        r13, 1
  Add          r42, r22, r13
  Move         r22, r42
  // while i <= end {
  Jump         L6
L1:
  // for r in ranges {
  Const        r43, 1
  AddInt       r44, r6, r43
  Move         r6, r44
  Jump         L7
L0:
  // print("The first 50 cyclops numbers are:")
  Const        r45, "The first 50 cyclops numbers are:"
  Print        r45
  // var idx = 0
  Const        r10, 0
  Move         r46, r10
L9:
  // while idx < 50 {
  Const        r47, 50
  LessInt      r48, r46, r47
  JumpIfFalse  r48, L8
  // print(pad(commatize(cyclops[idx]), 6) + " ")
  Index        r52, r3, r46
  Move         r51, r52
  Call         r53, commatize, r51
  Move         r49, r53
  Const        r54, 6
  Move         r50, r54
  Call2        r55, pad, r49, r50
  Const        r56, " "
  Add          r57, r55, r56
  Print        r57
  // idx = idx + 1
  Const        r13, 1
  AddInt       r58, r46, r13
  Move         r46, r58
  // if idx % 10 == 0 { print("\n") }
  Const        r59, 10
  ModInt       r60, r46, r59
  Const        r10, 0
  EqualInt     r61, r60, r10
  JumpIfFalse  r61, L9
  Const        r62, "\n"
  Print        r62
  // while idx < 50 {
  Jump         L9
L8:
  // let fi = findFirst(cyclops)
  Move         r63, r3
  Call         r64, findFirst, r63
  Move         r65, r64
  // print("\nFirst such number > 10 million is " + commatize(fi[0]) + " at zero-based index " + commatize(fi[1]))
  Const        r66, "\nFirst such number > 10 million is "
  Const        r10, 0
  Index        r68, r65, r10
  Move         r67, r68
  Call         r69, commatize, r67
  Add          r70, r66, r69
  Const        r71, " at zero-based index "
  Add          r72, r70, r71
  Const        r13, 1
  Index        r74, r65, r13
  Move         r73, r74
  Call         r75, commatize, r73
  Add          r76, r72, r75
  Print        r76
  // var primes: list<int> = []
  Const        r2, []
  Move         r77, r2
  // for n in cyclops { if isPrime(n) { primes = append(primes, n) } }
  IterPrep     r78, r3
  Len          r79, r78
  Const        r80, 0
L12:
  LessInt      r81, r80, r79
  JumpIfFalse  r81, L10
  Index        r82, r78, r80
  Move         r83, r82
  Move         r84, r83
  Call         r85, isPrime, r84
  JumpIfFalse  r85, L11
  Append       r86, r77, r83
  Move         r77, r86
L11:
  Const        r87, 1
  AddInt       r88, r80, r87
  Move         r80, r88
  Jump         L12
L10:
  // print("\n\nThe first 50 prime cyclops numbers are:")
  Const        r89, "\n\nThe first 50 prime cyclops numbers are:"
  Print        r89
  // idx = 0
  Const        r10, 0
  Move         r46, r10
L14:
  // while idx < 50 {
  Const        r47, 50
  LessInt      r90, r46, r47
  JumpIfFalse  r90, L13
  // print(pad(commatize(primes[idx]), 6) + " ")
  Index        r94, r77, r46
  Move         r93, r94
  Call         r95, commatize, r93
  Move         r91, r95
  Const        r54, 6
  Move         r92, r54
  Call2        r96, pad, r91, r92
  Const        r56, " "
  Add          r97, r96, r56
  Print        r97
  // idx = idx + 1
  Const        r13, 1
  AddInt       r98, r46, r13
  Move         r46, r98
  // if idx % 10 == 0 { print("\n") }
  Const        r59, 10
  ModInt       r99, r46, r59
  Const        r10, 0
  EqualInt     r100, r99, r10
  JumpIfFalse  r100, L14
  Const        r62, "\n"
  Print        r62
  // while idx < 50 {
  Jump         L14
L13:
  // let fp = findFirst(primes)
  Move         r101, r77
  Call         r102, findFirst, r101
  Move         r103, r102
  // print("\nFirst such number > 10 million is " + commatize(fp[0]) + " at zero-based index " + commatize(fp[1]))
  Const        r66, "\nFirst such number > 10 million is "
  Const        r10, 0
  Index        r105, r103, r10
  Move         r104, r105
  Call         r106, commatize, r104
  Add          r107, r66, r106
  Const        r71, " at zero-based index "
  Add          r108, r107, r71
  Const        r13, 1
  Index        r110, r103, r13
  Move         r109, r110
  Call         r111, commatize, r109
  Add          r112, r108, r111
  Print        r112
  // var bpcyclops: list<int> = []
  Const        r2, []
  Move         r113, r2
  // var ppcyclops: list<int> = []
  Const        r2, []
  Move         r114, r2
  // for p in primes {
  IterPrep     r115, r77
  Len          r116, r115
  Const        r117, 0
L18:
  LessInt      r118, r117, r116
  JumpIfFalse  r118, L15
  Index        r119, r115, r117
  Move         r120, r119
  // let ps = str(p)
  Str          r121, r120
  Move         r122, r121
  // let splitp = split(ps, "0")
  Move         r123, r122
  Const        r125, "0"
  Move         r124, r125
  Call2        r126, split, r123, r124
  Move         r127, r126
  // let noMiddle = parseIntStr(splitp[0] + splitp[1])
  Const        r10, 0
  Index        r129, r127, r10
  Const        r13, 1
  Index        r130, r127, r13
  Add          r131, r129, r130
  Move         r128, r131
  Call         r132, parseIntStr, r128
  Move         r133, r132
  // if isPrime(noMiddle) { bpcyclops = append(bpcyclops, p) }
  Move         r134, r133
  Call         r135, isPrime, r134
  JumpIfFalse  r135, L16
  Append       r136, r113, r120
  Move         r113, r136
L16:
  // if ps == reverseStr(ps) { ppcyclops = append(ppcyclops, p) }
  Move         r137, r122
  Call         r138, reverseStr, r137
  Equal        r139, r122, r138
  JumpIfFalse  r139, L17
  Append       r140, r114, r120
  Move         r114, r140
L17:
  // for p in primes {
  Const        r141, 1
  AddInt       r142, r117, r141
  Move         r117, r142
  Jump         L18
L15:
  // print("\n\nThe first 50 blind prime cyclops numbers are:")
  Const        r143, "\n\nThe first 50 blind prime cyclops numbers are:"
  Print        r143
  // idx = 0
  Const        r10, 0
  Move         r46, r10
L20:
  // while idx < 50 {
  Const        r47, 50
  LessInt      r144, r46, r47
  JumpIfFalse  r144, L19
  // print(pad(commatize(bpcyclops[idx]), 6) + " ")
  Index        r148, r113, r46
  Move         r147, r148
  Call         r149, commatize, r147
  Move         r145, r149
  Const        r54, 6
  Move         r146, r54
  Call2        r150, pad, r145, r146
  Const        r56, " "
  Add          r151, r150, r56
  Print        r151
  // idx = idx + 1
  Const        r13, 1
  AddInt       r152, r46, r13
  Move         r46, r152
  // if idx % 10 == 0 { print("\n") }
  Const        r59, 10
  ModInt       r153, r46, r59
  Const        r10, 0
  EqualInt     r154, r153, r10
  JumpIfFalse  r154, L20
  Const        r62, "\n"
  Print        r62
  // while idx < 50 {
  Jump         L20
L19:
  // let fb = findFirst(bpcyclops)
  Move         r155, r113
  Call         r156, findFirst, r155
  Move         r157, r156
  // print("\nFirst such number > 10 million is " + commatize(fb[0]) + " at zero-based index " + commatize(fb[1]))
  Const        r66, "\nFirst such number > 10 million is "
  Const        r10, 0
  Index        r159, r157, r10
  Move         r158, r159
  Call         r160, commatize, r158
  Add          r161, r66, r160
  Const        r71, " at zero-based index "
  Add          r162, r161, r71
  Const        r13, 1
  Index        r164, r157, r13
  Move         r163, r164
  Call         r165, commatize, r163
  Add          r166, r162, r165
  Print        r166
  // print("\n\nThe first 50 palindromic prime cyclops numbers are:")
  Const        r167, "\n\nThe first 50 palindromic prime cyclops numbers are:"
  Print        r167
  // idx = 0
  Const        r10, 0
  Move         r46, r10
L22:
  // while idx < 50 {
  Const        r47, 50
  LessInt      r168, r46, r47
  JumpIfFalse  r168, L21
  // print(pad(commatize(ppcyclops[idx]), 9) + " ")
  Index        r172, r114, r46
  Move         r171, r172
  Call         r173, commatize, r171
  Move         r169, r173
  Const        r174, 9
  Move         r170, r174
  Call2        r175, pad, r169, r170
  Const        r56, " "
  Add          r176, r175, r56
  Print        r176
  // idx = idx + 1
  Const        r13, 1
  AddInt       r177, r46, r13
  Move         r46, r177
  // if idx % 8 == 0 { print("\n") }
  Const        r178, 8
  ModInt       r179, r46, r178
  Const        r10, 0
  EqualInt     r180, r179, r10
  JumpIfFalse  r180, L22
  Const        r62, "\n"
  Print        r62
  // while idx < 50 {
  Jump         L22
L21:
  // let fpp = findFirst(ppcyclops)
  Move         r181, r114
  Call         r182, findFirst, r181
  Move         r183, r182
  // print("\n\nFirst such number > 10 million is " + commatize(fpp[0]) + " at zero-based index " + commatize(fpp[1]))
  Const        r184, "\n\nFirst such number > 10 million is "
  Const        r10, 0
  Index        r186, r183, r10
  Move         r185, r186
  Call         r187, commatize, r185
  Add          r188, r184, r187
  Const        r71, " at zero-based index "
  Add          r189, r188, r71
  Const        r13, 1
  Index        r191, r183, r13
  Move         r190, r191
  Call         r192, commatize, r190
  Add          r193, r189, r192
  Print        r193
  Return       r0
