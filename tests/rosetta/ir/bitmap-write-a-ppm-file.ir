func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun newBitmap(w: int, h: int, c: Colour): Bitmap {
func newBitmap (regs=25)
  // var rows: list<list<Colour>> = []
  Const        r3, []
  Move         r4, r3
  // var y = 0
  Const        r5, 0
  Move         r6, r5
L3:
  // while y < h {
  Less         r7, r6, r1
  JumpIfFalse  r7, L0
  // var row: list<Colour> = []
  Const        r3, []
  Move         r8, r3
  // var x = 0
  Const        r5, 0
  Move         r9, r5
L2:
  // while x < w {
  Less         r10, r9, r0
  JumpIfFalse  r10, L1
  // row = append(row, c)
  Append       r11, r8, r2
  Move         r8, r11
  // x = x + 1
  Const        r12, 1
  AddInt       r13, r9, r12
  Move         r9, r13
  // while x < w {
  Jump         L2
L1:
  // rows = append(rows, row)
  Append       r14, r4, r8
  Move         r4, r14
  // y = y + 1
  Const        r12, 1
  AddInt       r15, r6, r12
  Move         r6, r15
  // while y < h {
  Jump         L3
L0:
  // return Bitmap{width: w, height: h, pixels: rows}
  Const        r16, "__name"
  Const        r17, "Bitmap"
  Const        r18, "width"
  Move         r19, r0
  Const        r20, "height"
  Move         r21, r1
  Const        r22, "pixels"
  Move         r23, r4
  MakeMap      r24, 4, r16
  Return       r24

  // fun setPixel(b: Bitmap, x: int, y: int, c: Colour) {
func setPixel (regs=9)
  // var rows = b.pixels
  Const        r4, "pixels"
  Index        r5, r0, r4
  Move         r6, r5
  // var row = rows[y]
  Index        r7, r6, r2
  Move         r8, r7
  // row[x] = c
  SetIndex     r8, r1, r3
  // rows[y] = row
  SetIndex     r6, r2, r8
  // b.pixels = rows
  Const        r4, "pixels"
  SetIndex     r0, r4, r6
  Return       r0

  // fun fillRect(b: Bitmap, x: int, y: int, w: int, h: int, c: Colour) {
func fillRect (regs=20)
  // var yy = y
  Move         r6, r2
L3:
  // while yy < y + h {
  Add          r7, r2, r4
  Less         r8, r6, r7
  JumpIfFalse  r8, L0
  // var xx = x
  Move         r9, r1
L2:
  // while xx < x + w {
  Add          r10, r1, r3
  Less         r11, r9, r10
  JumpIfFalse  r11, L1
  // setPixel(b, xx, yy, c)
  Move         r12, r0
  Move         r13, r9
  Move         r14, r6
  Move         r15, r5
  Call         r16, setPixel, r12, r13, r14, r15
  // xx = xx + 1
  Const        r17, 1
  Add          r18, r9, r17
  Move         r9, r18
  // while xx < x + w {
  Jump         L2
L1:
  // yy = yy + 1
  Const        r17, 1
  Add          r19, r6, r17
  Move         r6, r19
  // while yy < y + h {
  Jump         L3
L0:
  Return       r0

  // fun pad(n: int, width: int): string {
func pad (regs=8)
  // var s = str(n)
  Str          r2, r0
  Move         r3, r2
L1:
  // while len(s) < width { s = " " + s }
  Len          r4, r3
  Less         r5, r4, r1
  JumpIfFalse  r5, L0
  Const        r6, " "
  Add          r7, r6, r3
  Move         r3, r7
  Jump         L1
L0:
  // return s
  Return       r3

  // fun writePPMP3(b: Bitmap): string {
func writePPMP3 (regs=86)
  // var maxv = 0
  Const        r1, 0
  Move         r2, r1
  // var y = 0
  Const        r1, 0
  Move         r3, r1
L6:
  // while y < b.height {
  Const        r4, "height"
  Index        r5, r0, r4
  Less         r6, r3, r5
  JumpIfFalse  r6, L0
  // var x = 0
  Const        r1, 0
  Move         r7, r1
L5:
  // while x < b.width {
  Const        r8, "width"
  Index        r9, r0, r8
  Less         r10, r7, r9
  JumpIfFalse  r10, L1
  // let p = b.pixels[y][x]
  Const        r11, "pixels"
  Index        r12, r0, r11
  Index        r13, r12, r3
  Index        r14, r13, r7
  Move         r15, r14
  // if p.R > maxv { maxv = p.R }
  Const        r16, "R"
  Index        r17, r15, r16
  Less         r18, r2, r17
  JumpIfFalse  r18, L2
  Const        r16, "R"
  Index        r19, r15, r16
  Move         r2, r19
L2:
  // if p.G > maxv { maxv = p.G }
  Const        r20, "G"
  Index        r21, r15, r20
  Less         r22, r2, r21
  JumpIfFalse  r22, L3
  Const        r20, "G"
  Index        r23, r15, r20
  Move         r2, r23
L3:
  // if p.B > maxv { maxv = p.B }
  Const        r24, "B"
  Index        r25, r15, r24
  Less         r26, r2, r25
  JumpIfFalse  r26, L4
  Const        r24, "B"
  Index        r27, r15, r24
  Move         r2, r27
L4:
  // x = x + 1
  Const        r28, 1
  AddInt       r29, r7, r28
  Move         r7, r29
  // while x < b.width {
  Jump         L5
L1:
  // y = y + 1
  Const        r28, 1
  AddInt       r30, r3, r28
  Move         r3, r30
  // while y < b.height {
  Jump         L6
L0:
  // var out = "P3\n# generated from Bitmap.writeppmp3\n" + str(b.width) + " " + str(b.height) + "\n" + str(maxv) + "\n"
  Const        r31, "P3\n# generated from Bitmap.writeppmp3\n"
  Const        r8, "width"
  Index        r32, r0, r8
  Str          r33, r32
  Add          r34, r31, r33
  Const        r35, " "
  Add          r36, r34, r35
  Const        r4, "height"
  Index        r37, r0, r4
  Str          r38, r37
  Add          r39, r36, r38
  Const        r40, "\n"
  Add          r41, r39, r40
  Str          r42, r2
  Add          r43, r41, r42
  Const        r40, "\n"
  Add          r44, r43, r40
  Move         r45, r44
  // var numsize = len(str(maxv))
  Str          r46, r2
  Len          r47, r46
  Move         r48, r47
  // y = b.height - 1
  Const        r4, "height"
  Index        r49, r0, r4
  Const        r28, 1
  Sub          r50, r49, r28
  Move         r3, r50
L12:
  // while y >= 0 {
  Const        r1, 0
  LessEq       r51, r1, r3
  JumpIfFalse  r51, L7
  // var line = ""
  Const        r52, ""
  Move         r53, r52
  // var x = 0
  Const        r1, 0
  Move         r54, r1
L9:
  // while x < b.width {
  Const        r8, "width"
  Index        r55, r0, r8
  Less         r56, r54, r55
  JumpIfFalse  r56, L8
  // let p = b.pixels[y][x]
  Const        r11, "pixels"
  Index        r57, r0, r11
  Index        r58, r57, r3
  Index        r59, r58, r54
  Move         r60, r59
  // line = line + "   " + pad(p.R, numsize) + " " + pad(p.G, numsize) + " " + pad(p.B, numsize)
  Const        r61, "   "
  Add          r62, r53, r61
  Const        r16, "R"
  Index        r65, r60, r16
  Move         r63, r65
  Move         r64, r48
  Call2        r66, pad, r63, r64
  Add          r67, r62, r66
  Const        r35, " "
  Add          r68, r67, r35
  Const        r20, "G"
  Index        r71, r60, r20
  Move         r69, r71
  Move         r70, r48
  Call2        r72, pad, r69, r70
  Add          r73, r68, r72
  Const        r35, " "
  Add          r74, r73, r35
  Const        r24, "B"
  Index        r77, r60, r24
  Move         r75, r77
  Move         r76, r48
  Call2        r78, pad, r75, r76
  Add          r79, r74, r78
  Move         r53, r79
  // x = x + 1
  Const        r28, 1
  AddInt       r80, r54, r28
  Move         r54, r80
  // while x < b.width {
  Jump         L9
L8:
  // out = out + line
  Add          r81, r45, r53
  Move         r45, r81
  // if y > 0 { out = out + "\n" } else { out = out + "\n" }
  Const        r1, 0
  Less         r82, r1, r3
  JumpIfFalse  r82, L10
  Const        r40, "\n"
  Add          r83, r45, r40
  Move         r45, r83
  Jump         L11
L10:
  Const        r40, "\n"
  Add          r84, r45, r40
  Move         r45, r84
L11:
  // y = y - 1
  Const        r28, 1
  Sub          r85, r3, r28
  Move         r3, r85
  // while y >= 0 {
  Jump         L12
L7:
  // return out
  Return       r45

  // fun main() {
func main (regs=57)
  // let black = Colour{R:0,G:0,B:0}
  Const        r0, 0
  Const        r0, 0
  Const        r0, 0
  Const        r1, "__name"
  Const        r2, "Colour"
  Const        r3, "R"
  Move         r4, r0
  Const        r5, "G"
  Move         r6, r0
  Const        r7, "B"
  Move         r8, r0
  MakeMap      r9, 4, r1
  Move         r10, r9
  // let white = Colour{R:255,G:255,B:255}
  Const        r11, 255
  Const        r11, 255
  Const        r11, 255
  Const        r12, "__name"
  Const        r13, "Colour"
  Const        r14, "R"
  Move         r15, r11
  Const        r16, "G"
  Move         r17, r11
  Const        r18, "B"
  Move         r19, r11
  MakeMap      r20, 4, r12
  Move         r21, r20
  // var bm = newBitmap(4,4, black)
  Const        r25, 4
  Move         r22, r25
  Const        r25, 4
  Move         r23, r25
  Move         r24, r10
  Call         r26, newBitmap, r22, r23, r24
  Move         r27, r26
  // fillRect(bm, 1, 0, 1, 2, white)
  Move         r28, r27
  Const        r34, 1
  Move         r29, r34
  Const        r0, 0
  Move         r30, r0
  Const        r34, 1
  Move         r31, r34
  Const        r35, 2
  Move         r32, r35
  Move         r33, r21
  Call         r36, fillRect, r28, r29, r30, r31, r32, r33
  // setPixel(bm, 3, 3, Colour{R:127,G:0,B:63})
  Move         r37, r27
  Const        r41, 3
  Move         r38, r41
  Const        r41, 3
  Move         r39, r41
  Const        r42, 127
  Const        r0, 0
  Const        r43, 63
  Const        r44, "__name"
  Const        r45, "Colour"
  Const        r46, "R"
  Move         r47, r42
  Const        r48, "G"
  Move         r49, r0
  Const        r50, "B"
  Move         r51, r43
  MakeMap      r52, 4, r44
  Move         r40, r52
  Call         r53, setPixel, r37, r38, r39, r40
  // let ppm = writePPMP3(bm)
  Move         r54, r27
  Call         r55, writePPMP3, r54
  Move         r56, r55
  // print(ppm)
  Print        r56
  Return       r0
