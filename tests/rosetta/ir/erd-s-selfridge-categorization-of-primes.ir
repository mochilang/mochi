func main (regs=3)
  // var prevCats: map<int,int> = {}
  Const        r1, {}
  Move         r0, r1
  SetGlobal    0,0,0,0
  // main()
  Call         r2, main, 
  Return       r0

  // fun generatePrimes(n: int): list<int> {
func generatePrimes (regs=26)
  // var primes: list<int> = [2]
  Const        r2, [2]
  Move         r3, r2
  // var cand = 3
  Const        r4, 3
  Move         r5, r4
L6:
  // while len(primes) < n {
  Len          r6, r3
  Less         r7, r6, r1
  JumpIfFalse  r7, L0
  // var isP = true
  Const        r8, true
  Move         r9, r8
  // var i = 0
  Const        r10, 0
  Move         r11, r10
L4:
  // while i < len(primes) {
  Len          r12, r3
  LessInt      r13, r11, r12
  JumpIfFalse  r13, L1
  // let p = primes[i]
  Index        r14, r3, r11
  Move         r15, r14
  // if p * p > cand { break }
  Mul          r16, r15, r15
  Less         r17, r5, r16
  JumpIfFalse  r17, L2
  Jump         L1
L2:
  // if cand % p == 0 {
  Mod          r18, r5, r15
  Const        r10, 0
  Equal        r19, r18, r10
  JumpIfFalse  r19, L3
  // isP = false
  Const        r20, false
  Move         r9, r20
  // break
  Jump         L1
L3:
  // i = i + 1
  Const        r21, 1
  AddInt       r22, r11, r21
  Move         r11, r22
  // while i < len(primes) {
  Jump         L4
L1:
  // if isP { primes = append(primes, cand) }
  JumpIfFalse  r9, L5
  Append       r23, r3, r5
  Move         r3, r23
L5:
  // cand = cand + 2
  Const        r24, 2
  AddInt       r25, r5, r24
  Move         r5, r25
  // while len(primes) < n {
  Jump         L6
L0:
  // return primes
  Return       r3

  // fun primeFactors(n: int, primes: list<int>): list<int> {
func primeFactors (regs=25)
  // var factors: list<int> = []
  Const        r3, []
  Move         r4, r3
  // var num = n
  Move         r5, r1
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L4:
  // while i < len(primes) && primes[i] * primes[i] <= num {
  Index        r8, r2, r7
  Index        r9, r2, r7
  Mul          r10, r8, r9
  Len          r11, r2
  LessInt      r12, r7, r11
  LessEq       r13, r10, r5
  Move         r14, r12
  JumpIfFalse  r14, L0
  Move         r14, r13
L0:
  JumpIfFalse  r14, L1
  // let p = primes[i]
  Index        r15, r2, r7
  Move         r16, r15
L3:
  // while num % p == 0 {
  Mod          r17, r5, r16
  Const        r6, 0
  Equal        r18, r17, r6
  JumpIfFalse  r18, L2
  // factors = append(factors, p)
  Append       r19, r4, r16
  Move         r4, r19
  // num = num / p
  Div          r20, r5, r16
  Move         r5, r20
  // while num % p == 0 {
  Jump         L3
L2:
  // i = i + 1
  Const        r21, 1
  AddInt       r22, r7, r21
  Move         r7, r22
  // while i < len(primes) && primes[i] * primes[i] <= num {
  Jump         L4
L1:
  // if num > 1 { factors = append(factors, num) }
  Const        r21, 1
  Less         r23, r21, r5
  JumpIfFalse  r23, L5
  Append       r24, r4, r5
  Move         r4, r24
L5:
  // return factors
  Return       r4

  // fun cat(p: int, primes: list<int>): int {
func cat (regs=58)
  // if contains(prevCats, p) { return prevCats[p] }
  JumpIfFalse  r3, L0
  Index        r4, r0, r1
  Return       r4
L0:
  // var pf = primeFactors(p + 1, primes)
  Const        r7, 1
  Add          r8, r1, r7
  Move         r5, r8
  Move         r6, r2
  Call2        r9, primeFactors, r5, r6
  Move         r10, r9
  // var all23 = true
  Const        r11, true
  Move         r12, r11
  // for f in pf {
  IterPrep     r13, r10
  Len          r14, r13
  Const        r15, 0
L4:
  LessInt      r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r17, r13, r15
  Move         r18, r17
  // if f != 2 && f != 3 {
  Const        r19, 2
  NotEqual     r20, r18, r19
  Const        r21, 3
  NotEqual     r22, r18, r21
  Move         r23, r20
  JumpIfFalse  r23, L2
  Move         r23, r22
L2:
  JumpIfFalse  r23, L3
  // all23 = false
  Const        r24, false
  Move         r12, r24
  // break
  Jump         L1
L3:
  // for f in pf {
  Const        r25, 1
  AddInt       r26, r15, r25
  Move         r15, r26
  Jump         L4
L1:
  // if all23 {
  JumpIfFalse  r12, L5
  // prevCats[p] = 1
  Const        r7, 1
  SetIndex     r0, r1, r7
  SetGlobal    0,0,0,0
  // return 1
  Const        r7, 1
  Return       r7
L5:
  // if p > 2 {
  Const        r19, 2
  Less         r27, r19, r1
  JumpIfFalse  r27, L6
  // var unique: list<int> = []
  Const        r28, []
  Move         r29, r28
  // var last = -1
  Const        r7, 1
  NegInt       r30, r7
  Move         r31, r30
  // for f in pf {
  IterPrep     r32, r10
  Len          r33, r32
  Const        r34, 0
L9:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L7
  Index        r36, r32, r34
  Move         r18, r36
  // if f != last {
  NotEqual     r37, r18, r31
  JumpIfFalse  r37, L8
  // unique = append(unique, f)
  Append       r38, r29, r18
  Move         r29, r38
  // last = f
  Move         r31, r18
L8:
  // for f in pf {
  Const        r39, 1
  AddInt       r40, r34, r39
  Move         r34, r40
  Jump         L9
L7:
  // pf = unique
  Move         r10, r29
L6:
  // var c = 2
  Const        r19, 2
  Move         r41, r19
L15:
  // while c <= 11 {
  Const        r42, 11
  LessEqInt    r43, r41, r42
  JumpIfFalse  r43, L10
  // var ok = true
  Const        r11, true
  Move         r44, r11
  // for f in pf {
  IterPrep     r45, r10
  Len          r46, r45
  Const        r47, 0
L13:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L11
  Index        r49, r45, r47
  Move         r18, r49
  // if cat(f, primes) >= c {
  Move         r50, r18
  Move         r51, r2
  Call2        r52, cat, r50, r51
  LessEq       r53, r41, r52
  JumpIfFalse  r53, L12
  // ok = false
  Const        r24, false
  Move         r44, r24
  // break
  Jump         L11
L12:
  // for f in pf {
  Const        r54, 1
  AddInt       r55, r47, r54
  Move         r47, r55
  Jump         L13
L11:
  // if ok {
  JumpIfFalse  r44, L14
  // prevCats[p] = c
  SetIndex     r0, r1, r41
  SetGlobal    0,0,0,0
  // return c
  Return       r41
L14:
  // c = c + 1
  Const        r7, 1
  AddInt       r56, r41, r7
  Move         r41, r56
  // while c <= 11 {
  Jump         L15
L10:
  // prevCats[p] = 12
  Const        r57, 12
  SetIndex     r0, r1, r57
  SetGlobal    0,0,0,0
  // return 12
  Const        r57, 12
  Return       r57

  // fun padLeft(n: int, width: int): string {
func padLeft (regs=9)
  // var s = str(n)
  Str          r3, r1
  Move         r4, r3
L1:
  // while len(s) < width { s = " " + s }
  Len          r5, r4
  Less         r6, r5, r2
  JumpIfFalse  r6, L0
  Const        r7, " "
  Add          r8, r7, r4
  Move         r4, r8
  Jump         L1
L0:
  // return s
  Return       r4

  // fun main() {
func main (regs=98)
  // let primes = generatePrimes(1000)
  Const        r2, 1000
  Move         r1, r2
  Call         r3, generatePrimes, r1
  Move         r4, r3
  // var es: list<list<int>> = []
  Const        r5, []
  Move         r6, r5
  // for _ in 0..12 { es = append(es, []) }
  Const        r7, 0
  Const        r8, 12
  Move         r9, r7
L1:
  LessInt      r10, r9, r8
  JumpIfFalse  r10, L0
  Const        r5, []
  Append       r11, r6, r5
  Move         r6, r11
  Const        r12, 1
  AddInt       r13, r9, r12
  Move         r9, r13
  Jump         L1
L0:
  // print("First 200 primes:\n")
  Const        r14, "First 200 primes:\n"
  Print        r14
  // var idx = 0
  Const        r7, 0
  Move         r15, r7
L3:
  // while idx < 200 {
  Const        r16, 200
  LessInt      r17, r15, r16
  JumpIfFalse  r17, L2
  // let p = primes[idx]
  Index        r18, r4, r15
  Move         r19, r18
  // let c = cat(p, primes)
  Move         r20, r19
  Move         r21, r4
  Call2        r22, cat, r20, r21
  Move         r23, r22
  // es[c-1] = append(es[c-1], p)
  Const        r24, 1
  Sub          r25, r23, r24
  Index        r26, r6, r25
  Append       r27, r26, r19
  Const        r24, 1
  Sub          r28, r23, r24
  SetIndex     r6, r28, r27
  // idx = idx + 1
  Const        r24, 1
  AddInt       r29, r15, r24
  Move         r15, r29
  // while idx < 200 {
  Jump         L3
L2:
  // var c = 1
  Const        r24, 1
  Move         r30, r24
L6:
  // while c <= 6 {
  Const        r31, 6
  LessEqInt    r32, r30, r31
  JumpIfFalse  r32, L4
  // if len(es[c-1]) > 0 {
  Const        r24, 1
  SubInt       r33, r30, r24
  Index        r34, r6, r33
  Len          r35, r34
  Const        r7, 0
  LessInt      r36, r7, r35
  JumpIfFalse  r36, L5
  // print("Category " + str(c) + ":")
  Const        r37, "Category "
  Str          r38, r30
  Add          r39, r37, r38
  Const        r40, ":"
  Add          r41, r39, r40
  Print        r41
  // print(str(es[c-1]))
  Const        r24, 1
  SubInt       r42, r30, r24
  Index        r43, r6, r42
  Str          r44, r43
  Print        r44
  // print("")
  Const        r45, ""
  Print        r45
L5:
  // c = c + 1
  Const        r24, 1
  AddInt       r46, r30, r24
  Move         r30, r46
  // while c <= 6 {
  Jump         L6
L4:
  // print("First thousand primes:\n")
  Const        r47, "First thousand primes:\n"
  Print        r47
L8:
  // while idx < 1000 {
  Const        r2, 1000
  LessInt      r48, r15, r2
  JumpIfFalse  r48, L7
  // let p = primes[idx]
  Index        r49, r4, r15
  Move         r50, r49
  // let cv = cat(p, primes)
  Move         r51, r50
  Move         r52, r4
  Call2        r53, cat, r51, r52
  Move         r54, r53
  // es[cv-1] = append(es[cv-1], p)
  Const        r24, 1
  Sub          r55, r54, r24
  Index        r56, r6, r55
  Append       r57, r56, r50
  Const        r24, 1
  Sub          r58, r54, r24
  SetIndex     r6, r58, r57
  // idx = idx + 1
  Const        r24, 1
  AddInt       r59, r15, r24
  Move         r15, r59
  // while idx < 1000 {
  Jump         L8
L7:
  // c = 1
  Const        r24, 1
  Move         r30, r24
L11:
  // while c <= 12 {
  Const        r8, 12
  LessEqInt    r60, r30, r8
  JumpIfFalse  r60, L9
  // let e = es[c-1]
  Const        r24, 1
  SubInt       r61, r30, r24
  Index        r62, r6, r61
  Move         r63, r62
  // if len(e) > 0 {
  Len          r64, r63
  Const        r7, 0
  LessInt      r65, r7, r64
  JumpIfFalse  r65, L10
  // let line = "Category " + padLeft(c,2) + ": First = " + padLeft(e[0],7) + "  Last = " + padLeft(e[len(e)-1],8) + "  Count = " + padLeft(len(e),6)
  Const        r37, "Category "
  Move         r66, r30
  Const        r68, 2
  Move         r67, r68
  Call2        r69, padLeft, r66, r67
  Add          r70, r37, r69
  Const        r71, ": First = "
  Add          r72, r70, r71
  Const        r7, 0
  Index        r75, r63, r7
  Move         r73, r75
  Const        r76, 7
  Move         r74, r76
  Call2        r77, padLeft, r73, r74
  Add          r78, r72, r77
  Const        r79, "  Last = "
  Add          r80, r78, r79
  Len          r83, r63
  Const        r24, 1
  SubInt       r84, r83, r24
  Index        r85, r63, r84
  Move         r81, r85
  Const        r86, 8
  Move         r82, r86
  Call2        r87, padLeft, r81, r82
  Add          r88, r80, r87
  Const        r89, "  Count = "
  Add          r90, r88, r89
  Len          r93, r63
  Move         r91, r93
  Const        r31, 6
  Move         r92, r31
  Call2        r94, padLeft, r91, r92
  Add          r95, r90, r94
  Move         r96, r95
  // print(line)
  Print        r96
L10:
  // c = c + 1
  Const        r24, 1
  AddInt       r97, r30, r24
  Move         r30, r97
  // while c <= 12 {
  Jump         L11
L9:
  Return       r0
