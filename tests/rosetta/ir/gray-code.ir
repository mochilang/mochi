func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun xor(a: int, b: int): int {
func xor (regs=21)
  // var res = 0
  Const        r2, 0
  Move         r3, r2
  // var bit = 1
  Const        r4, 1
  Move         r5, r4
  // var x = a
  Move         r6, r0
  // var y = b
  Move         r7, r1
L3:
  // while x > 0 || y > 0 {
  Const        r2, 0
  Less         r8, r2, r6
  Const        r2, 0
  Less         r9, r2, r7
  Move         r10, r8
  JumpIfTrue   r10, L0
  Move         r10, r9
L0:
  JumpIfFalse  r10, L1
  // if ((x % 2 + y % 2) % 2 == 1) { res = res + bit }
  Const        r11, 2
  Mod          r12, r6, r11
  Const        r11, 2
  Mod          r13, r7, r11
  Add          r14, r12, r13
  Const        r11, 2
  Mod          r15, r14, r11
  Const        r4, 1
  Equal        r16, r15, r4
  JumpIfFalse  r16, L2
  AddInt       r17, r3, r5
  Move         r3, r17
L2:
  // x = x / 2
  Const        r11, 2
  Div          r18, r6, r11
  Move         r6, r18
  // y = y / 2
  Const        r11, 2
  Div          r19, r7, r11
  Move         r7, r19
  // bit = bit * 2
  Const        r11, 2
  MulInt       r20, r5, r11
  Move         r5, r20
  // while x > 0 || y > 0 {
  Jump         L3
L1:
  // return res
  Return       r3

  // fun enc(b: int): int { return xor(b, b / 2) }
func enc (regs=6)
  // fun enc(b: int): int { return xor(b, b / 2) }
  Move         r1, r0
  Const        r3, 2
  Div          r4, r0, r3
  Move         r2, r4
  Call2        r5, xor, r1, r2
  Return       r5

  // fun dec(g: int): int {
func dec (regs=10)
  // var b = 0
  Const        r1, 0
  Move         r2, r1
  // var x = g
  Move         r3, r0
L1:
  // while x > 0 {
  Const        r1, 0
  Less         r4, r1, r3
  JumpIfFalse  r4, L0
  // b = xor(b, x)
  Move         r5, r2
  Move         r6, r3
  Call2        r7, xor, r5, r6
  Move         r2, r7
  // x = x / 2
  Const        r8, 2
  Div          r9, r3, r8
  Move         r3, r9
  // while x > 0 {
  Jump         L1
L0:
  // return b
  Return       r2

  // fun binary(n: int): string {
func binary (regs=16)
  // if n == 0 { return "0" }
  Const        r1, 0
  Equal        r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, "0"
  Return       r3
L0:
  // var s = ""
  Const        r4, ""
  Move         r5, r4
  // var x = n
  Move         r6, r0
L4:
  // while x > 0 {
  Const        r1, 0
  Less         r7, r1, r6
  JumpIfFalse  r7, L1
  // if x % 2 == 1 { s = "1" + s } else { s = "0" + s }
  Const        r8, 2
  Mod          r9, r6, r8
  Const        r10, 1
  Equal        r11, r9, r10
  JumpIfFalse  r11, L2
  Const        r12, "1"
  Add          r13, r12, r5
  Move         r5, r13
  Jump         L3
L2:
  Const        r3, "0"
  Add          r14, r3, r5
  Move         r5, r14
L3:
  // x = x / 2
  Const        r8, 2
  Div          r15, r6, r8
  Move         r6, r15
  // while x > 0 {
  Jump         L4
L1:
  // return s
  Return       r5

  // fun pad5(s: string): string {
func pad5 (regs=7)
  // var p = s
  Move         r1, r0
L1:
  // while len(p) < 5 { p = "0" + p }
  Len          r2, r1
  Const        r3, 5
  LessInt      r4, r2, r3
  JumpIfFalse  r4, L0
  Const        r5, "0"
  Add          r6, r5, r1
  Move         r1, r6
  Jump         L1
L0:
  // return p
  Return       r1

  // fun main() {
func main (regs=35)
  // print("decimal  binary   gray    decoded")
  Const        r0, "decimal  binary   gray    decoded"
  Print        r0
  // var b = 0
  Const        r1, 0
  Move         r2, r1
L1:
  // while b < 32 {
  Const        r3, 32
  LessInt      r4, r2, r3
  JumpIfFalse  r4, L0
  // let g = enc(b)
  Move         r5, r2
  Call         r6, enc, r5
  Move         r7, r6
  // let d = dec(g)
  Move         r8, r7
  Call         r9, dec, r8
  Move         r10, r9
  // print("  " + pad5(binary(b)) + "   " + pad5(binary(g)) + "   " + pad5(binary(d)) + "  " + str(d))
  Const        r11, "  "
  Move         r13, r2
  Call         r14, binary, r13
  Move         r12, r14
  Call         r15, pad5, r12
  Add          r16, r11, r15
  Const        r17, "   "
  Add          r18, r16, r17
  Move         r20, r7
  Call         r21, binary, r20
  Move         r19, r21
  Call         r22, pad5, r19
  Add          r23, r18, r22
  Const        r17, "   "
  Add          r24, r23, r17
  Move         r26, r10
  Call         r27, binary, r26
  Move         r25, r27
  Call         r28, pad5, r25
  Add          r29, r24, r28
  Const        r11, "  "
  Add          r30, r29, r11
  Str          r31, r10
  Add          r32, r30, r31
  Print        r32
  // b = b + 1
  Const        r33, 1
  AddInt       r34, r2, r33
  Move         r2, r34
  // while b < 32 {
  Jump         L1
L0:
  Return       r0
