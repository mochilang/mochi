func __main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun primeFactors(n: int): list<int> {
func primeFactors (regs=26)
  // var factors: list<int> = []
  Const        r1, []
  Move         r2, r1
  // var last = 0
  Const        r3, 0
  Move         r4, r3
  // var x = n
  Move         r5, r0
L2:
  // while x % 2 == 0 {
  Const        r6, 2
  Mod          r7, r5, r6
  Const        r3, 0
  Equal        r8, r7, r3
  JumpIfFalse  r8, L0
  // if last == 2 { return [] }
  Const        r6, 2
  EqualInt     r9, r4, r6
  JumpIfFalse  r9, L1
  Const        r1, []
  Return       r1
L1:
  // factors = append(factors, 2)
  Const        r6, 2
  Append       r10, r2, r6
  Move         r2, r10
  // last = 2
  Const        r6, 2
  Move         r4, r6
  // x = x / 2
  Const        r6, 2
  Div          r11, r5, r6
  Move         r5, r11
  // while x % 2 == 0 {
  Jump         L2
L0:
  // var p = 3
  Const        r12, 3
  Move         r13, r12
L7:
  // while p * p <= x {
  MulInt       r14, r13, r13
  LessEq       r15, r14, r5
  JumpIfFalse  r15, L3
L6:
  // while x % p == 0 {
  Mod          r16, r5, r13
  Const        r3, 0
  Equal        r17, r16, r3
  JumpIfFalse  r17, L4
  // if last == p { return [] }
  EqualInt     r18, r4, r13
  JumpIfFalse  r18, L5
  Const        r1, []
  Return       r1
L5:
  // factors = append(factors, p)
  Append       r19, r2, r13
  Move         r2, r19
  // last = p
  Move         r4, r13
  // x = x / p
  Div          r20, r5, r13
  Move         r5, r20
  // while x % p == 0 {
  Jump         L6
L4:
  // p = p + 2
  Const        r6, 2
  AddInt       r21, r13, r6
  Move         r13, r21
  // while p * p <= x {
  Jump         L7
L3:
  // if x > 1 {
  Const        r22, 1
  Less         r23, r22, r5
  JumpIfFalse  r23, L8
  // if last == x { return [] }
  Equal        r24, r4, r5
  JumpIfFalse  r24, L9
  Const        r1, []
  Return       r1
L9:
  // factors = append(factors, x)
  Append       r25, r2, r5
  Move         r2, r25
L8:
  // return factors
  Return       r2

  // fun isGiuga(n: int): bool {
func isGiuga (regs=23)
  // let facs = primeFactors(n)
  Move         r1, r0
  Call         r2, primeFactors, r1
  Move         r3, r2
  // if len(facs) <= 2 { return false }
  Len          r4, r3
  Const        r5, 2
  LessEqInt    r6, r4, r5
  JumpIfFalse  r6, L0
  Const        r7, false
  Return       r7
L0:
  // for f in facs { if ((n / f - 1) % f) != 0 { return false } }
  IterPrep     r8, r3
  Len          r9, r8
  Const        r10, 0
L3:
  LessInt      r11, r10, r9
  JumpIfFalse  r11, L1
  Index        r12, r8, r10
  Move         r13, r12
  Div          r14, r0, r13
  Const        r15, 1
  Sub          r16, r14, r15
  Mod          r17, r16, r13
  Const        r18, 0
  NotEqual     r19, r17, r18
  JumpIfFalse  r19, L2
  Const        r7, false
  Return       r7
L2:
  Const        r20, 1
  AddInt       r21, r10, r20
  Move         r10, r21
  Jump         L3
L1:
  // return true
  Const        r22, true
  Return       r22

  // fun main() {
func main (regs=16)
  // var known: list<int> = [30, 858, 1722, 66198]
  Const        r0, [30, 858, 1722, 66198]
  Move         r1, r0
  // var nums: list<int> = []
  Const        r2, []
  Move         r3, r2
  // for n in known { if isGiuga(n) { nums = append(nums, n) } }
  IterPrep     r4, r1
  Len          r5, r4
  Const        r6, 0
L2:
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L0
  Index        r8, r4, r6
  Move         r9, r8
  Move         r10, r9
  Call         r11, isGiuga, r10
  JumpIfFalse  r11, L1
  Append       r12, r3, r9
  Move         r3, r12
L1:
  Const        r13, 1
  AddInt       r14, r6, r13
  Move         r6, r14
  Jump         L2
L0:
  // print("The first 4 Giuga numbers are:")
  Const        r15, "The first 4 Giuga numbers are:"
  Print        r15
  // print(nums)
  Print        r3
  Return       r0
