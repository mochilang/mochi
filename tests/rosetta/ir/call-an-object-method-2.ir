func main (regs=8)
  // let funcs = newFactory()
  Call         r3, newFactory, 
  Move         r0, r3
  SetGlobal    0,0,0,0
  // let New = funcs[0]
  Const        r4, 0
  Index        r5, r0, r4
  Move         r1, r5
  SetGlobal    1,1,0,0
  // let Count = funcs[1]
  Const        r6, 1
  Index        r7, r0, r6
  Move         r2, r7
  SetGlobal    2,2,0,0
  Return       r0

  // fun newFactory(): list<fun()> {
func newFactory (regs=12)
  // var sn = 0
  Const        r3, 0
  Move         r4, r3
  // fun New(): Box {
  Move         r5, r4
  MakeClosure  r6, New, 1, r5
  // fun Count(): int { return sn }
  Move         r7, r4
  MakeClosure  r8, Count, 1, r7
  // return [New, Count]
  Move         r9, r6
  Move         r10, r8
  MakeList     r11, 2, r9
  Return       r11

  // fun TellSecret(): int {
func Box.TellSecret (regs=5)
  // return secret
  Return       r4

  // fun New(): Box {
func New (regs=20)
  // sn = sn + 1
  Const        r4, 1
  Add          r5, r3, r4
  Move         r3, r5
  // var b = Box{ secret: sn }
  Const        r6, "__name"
  Const        r7, "Box"
  Const        r8, "secret"
  Move         r9, r3
  // fun TellSecret(): int {
  Const        r10, "TellSecret"
  // var b = Box{ secret: sn }
  MakeClosure  r11, Box.TellSecret, 2, r0
  MakeMap      r12, 3, r6
  Move         r13, r12
  // if sn == 1 {
  Const        r4, 1
  Equal        r14, r3, r4
  JumpIfFalse  r14, L0
  // b.Contents = "rabbit"
  Const        r15, "rabbit"
  Const        r16, "Contents"
  SetIndex     r13, r16, r15
  // if sn == 1 {
  Jump         L1
L0:
  // } else if sn == 2 {
  Const        r17, 2
  Equal        r18, r3, r17
  JumpIfFalse  r18, L1
  // b.Contents = "rock"
  Const        r19, "rock"
  Const        r16, "Contents"
  SetIndex     r13, r16, r19
L1:
  // return b
  Return       r13

  // fun Count(): int { return sn }
func Count (regs=4)
  // fun Count(): int { return sn }
  Return       r3
