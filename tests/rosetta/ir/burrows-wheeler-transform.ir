func main (regs=5)
  // let stx = "\002"
  Const        r2, "\x02"
  Move         r0, r2
  SetGlobal    0,0,0,0
  // let etx = "\003"
  Const        r3, "\x03"
  Move         r1, r3
  SetGlobal    1,1,0,0
  // main()
  Call         r4, main, 
  Return       r0

  // fun contains(s: string, ch: string): bool {
func contains (regs=15)
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L2:
  // while i < len(s) {
  Len          r6, r2
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L0
  // if substring(s, i, i+1) == ch { return true }
  Const        r8, 1
  AddInt       r9, r5, r8
  Slice        r10, r2, r5, r9
  Equal        r11, r10, r3
  JumpIfFalse  r11, L1
  Const        r12, true
  Return       r12
L1:
  // i = i + 1
  Const        r8, 1
  AddInt       r13, r5, r8
  Move         r5, r13
  // while i < len(s) {
  Jump         L2
L0:
  // return false
  Const        r14, false
  Return       r14

  // fun sortStrings(xs: list<string>): list<string> {
func sortStrings (regs=24)
  // var arr = xs
  Move         r3, r2
  // var n = len(arr)
  Len          r4, r3
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L4:
  // while i < n {
  LessInt      r8, r7, r5
  JumpIfFalse  r8, L0
  // var j = 0
  Const        r6, 0
  Move         r9, r6
L3:
  // while j < n - 1 {
  Const        r10, 1
  SubInt       r11, r5, r10
  LessInt      r12, r9, r11
  JumpIfFalse  r12, L1
  // if arr[j] > arr[j+1] {
  Index        r13, r3, r9
  Const        r10, 1
  AddInt       r14, r9, r10
  Index        r15, r3, r14
  Less         r16, r15, r13
  JumpIfFalse  r16, L2
  // let tmp = arr[j]
  Index        r17, r3, r9
  Move         r18, r17
  // arr[j] = arr[j+1]
  Const        r10, 1
  AddInt       r19, r9, r10
  Index        r20, r3, r19
  SetIndex     r3, r9, r20
  // arr[j+1] = tmp
  Const        r10, 1
  AddInt       r21, r9, r10
  SetIndex     r3, r21, r18
L2:
  // j = j + 1
  Const        r10, 1
  AddInt       r22, r9, r10
  Move         r9, r22
  // while j < n - 1 {
  Jump         L3
L1:
  // i = i + 1
  Const        r10, 1
  AddInt       r23, r7, r10
  Move         r7, r23
  // while i < n {
  Jump         L4
L0:
  // return arr
  Return       r3

  // fun bwt(s: string): map<string, any> {
func bwt (regs=45)
  // if contains(s, stx) || contains(s, etx) {
  Move         r3, r2
  Move         r4, r0
  Call2        r5, contains, r3, r4
  Move         r6, r5
  JumpIfTrue   r6, L0
  Move         r7, r2
  Move         r8, r1
  Call2        r9, contains, r7, r8
  Move         r6, r9
L0:
  JumpIfFalse  r6, L1
  // return {"err": true, "res": ""}
  Const        r10, {"err": true, "res": ""}
  Return       r10
L1:
  // s = stx + s + etx
  Add          r11, r0, r2
  Add          r12, r11, r1
  Move         r2, r12
  // let le = len(s)
  Len          r13, r2
  Move         r14, r13
  // var table: list<string> = []
  Const        r15, []
  Move         r16, r15
  // var i = 0
  Const        r17, 0
  Move         r18, r17
L3:
  // while i < le {
  LessInt      r19, r18, r14
  JumpIfFalse  r19, L2
  // let rot = substring(s, i, le) + substring(s, 0, i)
  Slice        r20, r2, r18, r14
  Const        r17, 0
  Slice        r21, r2, r17, r18
  Add          r22, r20, r21
  Move         r23, r22
  // table = append(table, rot)
  Append       r24, r16, r23
  Move         r16, r24
  // i = i + 1
  Const        r25, 1
  AddInt       r26, r18, r25
  Move         r18, r26
  // while i < le {
  Jump         L3
L2:
  // table = sortStrings(table)
  Move         r27, r16
  Call         r28, sortStrings, r27
  Move         r16, r28
  // var last = ""
  Const        r29, ""
  Move         r30, r29
  // i = 0
  Const        r17, 0
  Move         r18, r17
L5:
  // while i < le {
  LessInt      r31, r18, r14
  JumpIfFalse  r31, L4
  // last = last + substring(table[i], le-1, le)
  Index        r32, r16, r18
  Const        r25, 1
  SubInt       r33, r14, r25
  Slice        r34, r32, r33, r14
  Add          r35, r30, r34
  Move         r30, r35
  // i = i + 1
  Const        r25, 1
  AddInt       r36, r18, r25
  Move         r18, r36
  // while i < le {
  Jump         L5
L4:
  // return {"err": false, "res": last}
  Const        r37, "err"
  Const        r38, false
  Const        r39, "res"
  Move         r40, r37
  Move         r41, r38
  Move         r42, r39
  Move         r43, r30
  MakeMap      r44, 2, r40
  Return       r44

  // fun ibwt(r: string): string {
func ibwt (regs=34)
  // let le = len(r)
  Len          r3, r2
  Move         r4, r3
  // var table: list<string> = []
  Const        r5, []
  Move         r6, r5
  // var i = 0
  Const        r7, 0
  Move         r8, r7
L1:
  // while i < le {
  LessInt      r9, r8, r4
  JumpIfFalse  r9, L0
  // table = append(table, "")
  Const        r10, ""
  Append       r11, r6, r10
  Move         r6, r11
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r8, r12
  Move         r8, r13
  // while i < le {
  Jump         L1
L0:
  // var n = 0
  Const        r7, 0
  Move         r14, r7
L5:
  // while n < le {
  LessInt      r15, r14, r4
  JumpIfFalse  r15, L2
  // i = 0
  Const        r7, 0
  Move         r8, r7
L4:
  // while i < le {
  LessInt      r16, r8, r4
  JumpIfFalse  r16, L3
  // table[i] = substring(r, i, i+1) + table[i]
  Const        r12, 1
  AddInt       r17, r8, r12
  Slice        r18, r2, r8, r17
  Index        r19, r6, r8
  Add          r20, r18, r19
  SetIndex     r6, r8, r20
  // i = i + 1
  Const        r12, 1
  AddInt       r21, r8, r12
  Move         r8, r21
  // while i < le {
  Jump         L4
L3:
  // table = sortStrings(table)
  Move         r22, r6
  Call         r23, sortStrings, r22
  Move         r6, r23
  // n = n + 1
  Const        r12, 1
  AddInt       r24, r14, r12
  Move         r14, r24
  // while n < le {
  Jump         L5
L2:
  // i = 0
  Const        r7, 0
  Move         r8, r7
L8:
  // while i < le {
  LessInt      r25, r8, r4
  JumpIfFalse  r25, L6
  // if substring(table[i], le-1, le) == etx {
  Index        r26, r6, r8
  Const        r12, 1
  SubInt       r27, r4, r12
  Slice        r28, r26, r27, r4
  Equal        r29, r28, r1
  JumpIfFalse  r29, L7
  // return substring(table[i], 1, le-1)
  Index        r30, r6, r8
  Const        r12, 1
  Const        r12, 1
  SubInt       r31, r4, r12
  Slice        r32, r30, r12, r31
  Return       r32
L7:
  // i = i + 1
  Const        r12, 1
  AddInt       r33, r8, r12
  Move         r8, r33
  // while i < le {
  Jump         L8
L6:
  // return ""
  Const        r10, ""
  Return       r10

  // fun makePrintable(s: string): string {
func makePrintable (regs=21)
  // var out = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L4:
  // while i < len(s) {
  Len          r7, r2
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // let ch = substring(s, i, i+1)
  Const        r9, 1
  AddInt       r10, r6, r9
  Slice        r11, r2, r6, r10
  Move         r12, r11
  // if ch == stx { out = out + "^" }
  Equal        r13, r12, r0
  JumpIfFalse  r13, L1
  Const        r14, "^"
  Add          r15, r4, r14
  Move         r4, r15
  Jump         L2
L1:
  // else if ch == etx { out = out + "|" }
  Equal        r16, r12, r1
  JumpIfFalse  r16, L3
  Const        r17, "|"
  Add          r18, r4, r17
  Move         r4, r18
  Jump         L2
L3:
  // else { out = out + ch }
  Add          r19, r4, r12
  Move         r4, r19
L2:
  // i = i + 1
  Const        r9, 1
  AddInt       r20, r6, r9
  Move         r6, r20
  // while i < len(s) {
  Jump         L4
L0:
  // return out
  Return       r4

  // fun main() {
func main (regs=35)
  // let examples = [
  Const        r2, ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"]
  Move         r3, r2
  // for t in examples {
  Const        r4, ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"]
  IterPrep     r5, r4
  Len          r6, r5
  Const        r7, 0
L3:
  LessInt      r8, r7, r6
  JumpIfFalse  r8, L0
  Index        r9, r5, r7
  Move         r10, r9
  // print(makePrintable(t))
  Move         r11, r10
  Call         r12, makePrintable, r11
  Print        r12
  // let res = bwt(t)
  Move         r13, r10
  Call         r14, bwt, r13
  Move         r15, r14
  // if res["err"] {
  Const        r16, "err"
  Index        r17, r15, r16
  JumpIfFalse  r17, L1
  // print(" --> ERROR: String can't contain STX or ETX")
  Const        r18, " --> ERROR: String can't contain STX or ETX"
  Print        r18
  // print(" -->")
  Const        r19, " -->"
  Print        r19
  // if res["err"] {
  Jump         L2
L1:
  // let enc = res["res"] as string
  Const        r20, "res"
  Index        r21, r15, r20
  Cast         r22, r21, string
  Move         r23, r22
  // print(" --> " + makePrintable(enc))
  Const        r24, " --> "
  Move         r25, r23
  Call         r26, makePrintable, r25
  Add          r27, r24, r26
  Print        r27
  // let r = ibwt(enc)
  Move         r28, r23
  Call         r29, ibwt, r28
  Move         r30, r29
  // print(" --> " + r)
  Const        r24, " --> "
  Add          r31, r24, r30
  Print        r31
L2:
  // print("")
  Const        r32, ""
  Print        r32
  // for t in examples {
  Const        r33, 1
  AddInt       r34, r7, r33
  Move         r7, r34
  Jump         L3
L0:
  Return       r0
