func main (regs=6)
  // demo([[25.0,15.0,-5.0],[15.0,18.0,0.0],[-5.0,0.0,11.0]])
  Const        r1, [[25.0, 15.0, -5.0], [15.0, 18.0, 0.0], [-5.0, 0.0, 11.0]]
  Move         r0, r1
  Call         r2, demo, r0
  // demo([[18.0,22.0,54.0,42.0],[22.0,70.0,86.0,62.0],[54.0,86.0,174.0,134.0],[42.0,62.0,134.0,106.0]])
  Const        r4, [[18.0, 22.0, 54.0, 42.0], [22.0, 70.0, 86.0, 62.0], [54.0, 86.0, 174.0, 134.0], [42.0, 62.0, 134.0, 106.0]]
  Move         r3, r4
  Call         r5, demo, r3
  Return       r0

  // fun sqrtApprox(x: float): float {
func sqrtApprox (regs=12)
  // var guess = x
  Move         r1, r0
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L1:
  // while i < 20 {
  Const        r4, 20
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // guess = (guess + x / guess) / 2.0
  Div          r6, r0, r1
  Add          r7, r1, r6
  Const        r8, 2.0
  DivFloat     r9, r7, r8
  Move         r1, r9
  // i = i + 1
  Const        r10, 1
  AddInt       r11, r3, r10
  Move         r3, r11
  // while i < 20 {
  Jump         L1
L0:
  // return guess
  Return       r1

  // fun cholesky(a: list<list<float>>): list<list<float>> {
func cholesky (regs=42)
  // let n = len(a)
  Len          r1, r0
  Move         r2, r1
  // var l: list<list<float>> = []
  Const        r3, []
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L3:
  // while i < n {
  LessInt      r7, r6, r2
  JumpIfFalse  r7, L0
  // var row: list<float> = []
  Const        r3, []
  Move         r8, r3
  // var j = 0
  Const        r5, 0
  Move         r9, r5
L2:
  // while j < n {
  LessInt      r10, r9, r2
  JumpIfFalse  r10, L1
  // row = append(row, 0.0)
  Const        r11, 0.0
  Append       r12, r8, r11
  Move         r8, r12
  // j = j + 1
  Const        r13, 1
  AddInt       r14, r9, r13
  Move         r9, r14
  // while j < n {
  Jump         L2
L1:
  // l = append(l, row)
  Append       r15, r4, r8
  Move         r4, r15
  // i = i + 1
  Const        r13, 1
  AddInt       r16, r6, r13
  Move         r6, r16
  // while i < n {
  Jump         L3
L0:
  // i = 0
  Const        r5, 0
  Move         r6, r5
L11:
  // while i < n {
  LessInt      r17, r6, r2
  JumpIfFalse  r17, L4
  // var j = 0
  Const        r5, 0
  Move         r18, r5
L10:
  // while j <= i {
  LessEqInt    r19, r18, r6
  JumpIfFalse  r19, L5
  // var sum = a[i][j]
  Index        r20, r0, r6
  Index        r21, r20, r18
  Move         r22, r21
  // var k = 0
  Const        r5, 0
  Move         r23, r5
L7:
  // while k < j {
  LessInt      r24, r23, r18
  JumpIfFalse  r24, L6
  // sum = sum - l[i][k] * l[j][k]
  Index        r25, r4, r6
  Index        r26, r25, r23
  Index        r27, r4, r18
  Index        r28, r27, r23
  Mul          r29, r26, r28
  Sub          r30, r22, r29
  Move         r22, r30
  // k = k + 1
  Const        r13, 1
  AddInt       r31, r23, r13
  Move         r23, r31
  // while k < j {
  Jump         L7
L6:
  // if i == j {
  EqualInt     r32, r6, r18
  JumpIfFalse  r32, L8
  // l[i][j] = sqrtApprox(sum)
  Index        r33, r4, r6
  Move         r34, r22
  Call         r35, sqrtApprox, r34
  SetIndex     r33, r18, r35
  // if i == j {
  Jump         L9
L8:
  // l[i][j] = sum / l[j][j]
  Index        r36, r4, r6
  Index        r37, r4, r18
  Index        r38, r37, r18
  Div          r39, r22, r38
  SetIndex     r36, r18, r39
L9:
  // j = j + 1
  Const        r13, 1
  AddInt       r40, r18, r13
  Move         r18, r40
  // while j <= i {
  Jump         L10
L5:
  // i = i + 1
  Const        r13, 1
  AddInt       r41, r6, r13
  Move         r6, r41
  // while i < n {
  Jump         L11
L4:
  // return l
  Return       r4

  // fun printMat(m: list<list<float>>) {
func printMat (regs=24)
  // var i = 0
  Const        r1, 0
  Move         r2, r1
L4:
  // while i < len(m) {
  Len          r3, r0
  LessInt      r4, r2, r3
  JumpIfFalse  r4, L0
  // var line = ""
  Const        r5, ""
  Move         r6, r5
  // var j = 0
  Const        r1, 0
  Move         r7, r1
L3:
  // while j < len(m[i]) {
  Index        r8, r0, r2
  Len          r9, r8
  LessInt      r10, r7, r9
  JumpIfFalse  r10, L1
  // line = line + str(m[i][j])
  Index        r11, r0, r2
  Index        r12, r11, r7
  Str          r13, r12
  Add          r14, r6, r13
  Move         r6, r14
  // if j < len(m[i]) - 1 { line = line + " " }
  Index        r15, r0, r2
  Len          r16, r15
  Const        r17, 1
  SubInt       r18, r16, r17
  LessInt      r19, r7, r18
  JumpIfFalse  r19, L2
  Const        r20, " "
  Add          r21, r6, r20
  Move         r6, r21
L2:
  // j = j + 1
  Const        r17, 1
  AddInt       r22, r7, r17
  Move         r7, r22
  // while j < len(m[i]) {
  Jump         L3
L1:
  // print(line)
  Print        r6
  // i = i + 1
  Const        r17, 1
  AddInt       r23, r2, r17
  Move         r2, r23
  // while i < len(m) {
  Jump         L4
L0:
  Return       r0

  // fun demo(a: list<list<float>>) {
func demo (regs=10)
  // print("A:")
  Const        r1, "A:"
  Print        r1
  // printMat(a)
  Move         r2, r0
  Call         r3, printMat, r2
  // let l = cholesky(a)
  Move         r4, r0
  Call         r5, cholesky, r4
  Move         r6, r5
  // print("L:")
  Const        r7, "L:"
  Print        r7
  // printMat(l)
  Move         r8, r6
  Call         r9, printMat, r8
  Return       r0
