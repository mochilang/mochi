func main (regs=13)
  // let FASTA = ">Rosetta_Example_1\n" +
  Const        r1, ">Rosetta_Example_1\n"
  // "THERECANBENOSPACE\n" +
  Const        r2, "THERECANBENOSPACE\n"
  // let FASTA = ">Rosetta_Example_1\n" +
  Const        r3, ">Rosetta_Example_1\nTHERECANBENOSPACE\n"
  // ">Rosetta_Example_2\n" +
  Const        r4, ">Rosetta_Example_2\n"
  // "THERECANBENOSPACE\n" +
  Const        r5, ">Rosetta_Example_1\nTHERECANBENOSPACE\n>Rosetta_Example_2\n"
  // "THERECANBESEVERAL\n" +
  Const        r6, "THERECANBESEVERAL\n"
  // ">Rosetta_Example_2\n" +
  Const        r7, ">Rosetta_Example_1\nTHERECANBENOSPACE\n>Rosetta_Example_2\nTHERECANBESEVERAL\n"
  // "LINESBUTTHEYALLMUST\n" +
  Const        r8, "LINESBUTTHEYALLMUST\n"
  // "THERECANBESEVERAL\n" +
  Const        r9, ">Rosetta_Example_1\nTHERECANBENOSPACE\n>Rosetta_Example_2\nTHERECANBESEVERAL\nLINESBUTTHEYALLMUST\n"
  // "BECONCATENATED"
  Const        r10, "BECONCATENATED"
  // "LINESBUTTHEYALLMUST\n" +
  Const        r11, ">Rosetta_Example_1\nTHERECANBENOSPACE\n>Rosetta_Example_2\nTHERECANBESEVERAL\nLINESBUTTHEYALLMUST\nBECONCATENATED"
  // let FASTA = ">Rosetta_Example_1\n" +
  Move         r0, r11
  SetGlobal    0,0,0,0
  // main()
  Call         r12, main, 
  Return       r0

  // fun splitLines(s: string): list<string> {
func splitLines (regs=21)
  // var lines: list<string> = []
  Const        r2, []
  Move         r3, r2
  // var start = 0
  Const        r4, 0
  Move         r5, r4
  // var i = 0
  Const        r4, 0
  Move         r6, r4
L2:
  // while i < len(s) {
  Len          r7, r1
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // if substring(s, i, i+1) == "\n" {
  Const        r9, 1
  AddInt       r10, r6, r9
  Slice        r11, r1, r6, r10
  Const        r12, "\n"
  Equal        r13, r11, r12
  JumpIfFalse  r13, L1
  // lines = append(lines, substring(s, start, i))
  Slice        r14, r1, r5, r6
  Append       r15, r3, r14
  Move         r3, r15
  // i = i + 1
  Const        r9, 1
  AddInt       r16, r6, r9
  Move         r6, r16
  // start = i
  Move         r5, r6
  // if substring(s, i, i+1) == "\n" {
  Jump         L2
L1:
  // i = i + 1
  Const        r9, 1
  AddInt       r17, r6, r9
  Move         r6, r17
  // while i < len(s) {
  Jump         L2
L0:
  // lines = append(lines, substring(s, start, len(s)))
  Len          r18, r1
  Slice        r19, r1, r5, r18
  Append       r20, r3, r19
  Move         r3, r20
  // return lines
  Return       r3

  // fun parseFasta(text: string): list<string> {
func parseFasta (regs=48)
  // var key = ""
  Const        r2, ""
  Move         r3, r2
  // var val = ""
  Const        r2, ""
  Move         r4, r2
  // var out: list<string> = []
  Const        r5, []
  Move         r6, r5
  // for line in splitLines(text) {
  Move         r7, r1
  Call         r8, splitLines, r7
  IterPrep     r9, r8
  Len          r10, r9
  Const        r11, 0
L9:
  LessInt      r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r13, r9, r11
  Move         r14, r13
  // if line == "" {
  Const        r2, ""
  Equal        r15, r14, r2
  JumpIfFalse  r15, L1
  // continue
  Jump         L2
L1:
  // if substring(line, 0, 1) == ">" {
  Const        r16, 0
  Const        r17, 1
  Slice        r18, r14, r16, r17
  Const        r19, ">"
  Equal        r20, r18, r19
  JumpIfFalse  r20, L3
  // if key != "" {
  Const        r2, ""
  NotEqual     r21, r3, r2
  JumpIfFalse  r21, L4
  // out = append(out, key + ": " + val)
  Const        r22, ": "
  Add          r23, r3, r22
  Add          r24, r23, r4
  Append       r25, r6, r24
  Move         r6, r25
L4:
  // var hdr = substring(line, 1, len(line))
  Const        r17, 1
  Len          r26, r14
  Slice        r27, r14, r17, r26
  Move         r28, r27
  // var idx = 0
  Const        r16, 0
  Move         r29, r16
L7:
  // while idx < len(hdr) && substring(hdr, idx, idx+1) != " " {
  Len          r30, r28
  LessInt      r31, r29, r30
  Const        r17, 1
  AddInt       r32, r29, r17
  Slice        r33, r28, r29, r32
  Const        r34, " "
  NotEqual     r35, r33, r34
  Move         r36, r31
  JumpIfFalse  r36, L5
  Move         r36, r35
L5:
  JumpIfFalse  r36, L6
  // idx = idx + 1
  Const        r17, 1
  AddInt       r37, r29, r17
  Move         r29, r37
  // while idx < len(hdr) && substring(hdr, idx, idx+1) != " " {
  Jump         L7
L6:
  // key = substring(hdr, 0, idx)
  Const        r16, 0
  Slice        r38, r28, r16, r29
  Move         r3, r38
  // val = ""
  Const        r2, ""
  Move         r4, r2
  // if substring(line, 0, 1) == ">" {
  Jump         L2
L3:
  // if key == "" {
  Const        r2, ""
  Equal        r39, r3, r2
  JumpIfFalse  r39, L8
  // print("missing header")
  Const        r40, "missing header"
  Print        r40
  // return []
  Const        r5, []
  Return       r5
L8:
  // val = val + line
  Add          r41, r4, r14
  Move         r4, r41
L2:
  // for line in splitLines(text) {
  Const        r42, 1
  AddInt       r43, r11, r42
  Move         r11, r43
  Jump         L9
L0:
  // if key != "" {
  Const        r2, ""
  NotEqual     r44, r3, r2
  JumpIfFalse  r44, L10
  // out = append(out, key + ": " + val)
  Const        r22, ": "
  Add          r45, r3, r22
  Add          r46, r45, r4
  Append       r47, r6, r46
  Move         r6, r47
L10:
  // return out
  Return       r6

  // fun main() {
func main (regs=12)
  // let res = parseFasta(FASTA)
  Move         r1, r0
  Call         r2, parseFasta, r1
  Move         r3, r2
  // for line in res {
  IterPrep     r4, r3
  Len          r5, r4
  Const        r6, 0
L1:
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L0
  Index        r8, r4, r6
  Move         r9, r8
  // print(line)
  Print        r9
  // for line in res {
  Const        r10, 1
  AddInt       r11, r6, r10
  Move         r6, r11
  Jump         L1
L0:
  Return       r0
