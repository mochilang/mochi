func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun pow(base: float, exp: float): float {
func pow (regs=11)
  // var result = 1.0
  Const        r2, 1.0
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L1:
  // while i < int(exp) {
  Less         r7, r5, r6
  JumpIfFalse  r7, L0
  // result = result * base
  MulFloat     r8, r3, r0
  Move         r3, r8
  // i = i + 1
  Const        r9, 1
  AddInt       r10, r5, r9
  Move         r5, r10
  // while i < int(exp) {
  Jump         L1
L0:
  // return result
  Return       r3

  // fun main() {
func main (regs=20)
  // print("2^8 = " + str(pow(2.0, 8.0)))
  Const        r0, "2^8 = "
  Const        r3, 2.0
  Move         r1, r3
  Const        r4, 8.0
  Move         r2, r4
  Call2        r5, pow, r1, r2
  Str          r6, r5
  Add          r7, r0, r6
  Print        r7
  // print("4\u00B3 = " + str(pow(4.0, 3.0)))
  Const        r8, "4Â³ = "
  Const        r11, 4.0
  Move         r9, r11
  Const        r12, 3.0
  Move         r10, r12
  Call2        r13, pow, r9, r10
  Str          r14, r13
  Add          r15, r8, r14
  Print        r15
  // print("2 + 2 = 4")
  Const        r16, "2 + 2 = 4"
  Print        r16
  // print("2 + 3 = 5")
  Const        r17, "2 + 3 = 5"
  Print        r17
  // print("2 + 4 = 6")
  Const        r18, "2 + 4 = 6"
  Print        r18
  // print("3 + 5 = 8")
  Const        r19, "3 + 5 = 8"
  Print        r19
  Return       r0
