func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun trimSpace(s: string): string {
func trimSpace (regs=27)
  // var start = 0
  Const        r1, 0
  Move         r2, r1
L2:
  // while start < len(s) && s[start:start+1] == " " {
  Len          r3, r0
  LessInt      r4, r2, r3
  Move         r5, r2
  Const        r7, 1
  AddInt       r8, r2, r7
  Move         r6, r8
  Slice        r9, r0, r5, r6
  Const        r10, " "
  Equal        r11, r9, r10
  Move         r12, r4
  JumpIfFalse  r12, L0
  Move         r12, r11
L0:
  JumpIfFalse  r12, L1
  // start = start + 1
  Const        r7, 1
  AddInt       r13, r2, r7
  Move         r2, r13
  // while start < len(s) && s[start:start+1] == " " {
  Jump         L2
L1:
  // var end = len(s)
  Len          r14, r0
  Move         r15, r14
L5:
  // while end > start && s[end-1:end] == " " {
  LessInt      r16, r2, r15
  Const        r7, 1
  SubInt       r18, r15, r7
  Move         r17, r18
  Move         r19, r15
  Slice        r20, r0, r17, r19
  Const        r10, " "
  Equal        r21, r20, r10
  Move         r22, r16
  JumpIfFalse  r22, L3
  Move         r22, r21
L3:
  JumpIfFalse  r22, L4
  // end = end - 1
  Const        r7, 1
  SubInt       r23, r15, r7
  Move         r15, r23
  // while end > start && s[end-1:end] == " " {
  Jump         L5
L4:
  // return s[start:end]
  Move         r24, r2
  Move         r25, r15
  Slice        r26, r0, r24, r25
  Return       r26

  // fun isUpper(ch: string): bool {
func isUpper (regs=6)
  // return ch >= "A" && ch <= "Z"
  Const        r1, "A"
  LessEq       r2, r1, r0
  Const        r3, "Z"
  LessEq       r4, r0, r3
  Move         r5, r2
  JumpIfFalse  r5, L0
  Move         r5, r4
L0:
  Return       r5

  // fun padLeft(s: string, w: int): string {
func padLeft (regs=14)
  // var res = ""
  Const        r2, ""
  Move         r3, r2
  // var n = w - len(s)
  Len          r4, r0
  Sub          r5, r1, r4
  Move         r6, r5
L1:
  // while n > 0 {
  Const        r7, 0
  Less         r8, r7, r6
  JumpIfFalse  r8, L0
  // res = res + " "
  Const        r9, " "
  Add          r10, r3, r9
  Move         r3, r10
  // n = n - 1
  Const        r11, 1
  Sub          r12, r6, r11
  Move         r6, r12
  // while n > 0 {
  Jump         L1
L0:
  // return res + s
  Add          r13, r3, r0
  Return       r13

  // fun snakeToCamel(s: string): string {
func snakeToCamel (regs=36)
  // s = trimSpace(s)
  Move         r1, r0
  Call         r2, trimSpace, r1
  Move         r0, r2
  // var out = ""
  Const        r3, ""
  Move         r4, r3
  // var up = false
  Const        r5, false
  Move         r6, r5
  // var i = 0
  Const        r7, 0
  Move         r8, r7
L3:
  // while i < len(s) {
  Len          r9, r0
  LessInt      r10, r8, r9
  JumpIfFalse  r10, L0
  // let ch = s[i:i+1]
  Move         r11, r8
  Const        r13, 1
  AddInt       r14, r8, r13
  Move         r12, r14
  Slice        r15, r0, r11, r12
  Move         r16, r15
  // if ch == "_" || ch == "-" || ch == " " || ch == "." {
  Const        r17, "_"
  Equal        r18, r16, r17
  Const        r19, "-"
  Equal        r20, r16, r19
  Const        r21, " "
  Equal        r22, r16, r21
  Const        r23, "."
  Equal        r24, r16, r23
  Move         r25, r18
  JumpIfTrue   r25, L1
  Move         r25, r20
  JumpIfTrue   r25, L1
  Move         r25, r22
  JumpIfTrue   r25, L1
  Move         r25, r24
L1:
  JumpIfFalse  r25, L2
  // up = true
  Const        r26, true
  Move         r6, r26
  // i = i + 1
  Const        r13, 1
  AddInt       r27, r8, r13
  Move         r8, r27
  // continue
  Jump         L3
L2:
  // if i == 0 {
  Const        r7, 0
  EqualInt     r28, r8, r7
  JumpIfFalse  r28, L4
  // out = out + lower(ch)
  Lower        r29, r16
  Add          r30, r4, r29
  Move         r4, r30
  // up = false
  Const        r5, false
  Move         r6, r5
  // i = i + 1
  Const        r13, 1
  AddInt       r31, r8, r13
  Move         r8, r31
  // continue
  Jump         L3
L4:
  // if up {
  JumpIfFalse  r6, L5
  // out = out + upper(ch)
  Upper        r32, r16
  Add          r33, r4, r32
  Move         r4, r33
  // up = false
  Const        r5, false
  Move         r6, r5
  // if up {
  Jump         L6
L5:
  // out = out + ch
  Add          r34, r4, r16
  Move         r4, r34
L6:
  // i = i + 1
  Const        r13, 1
  AddInt       r35, r8, r13
  Move         r8, r35
  // while i < len(s) {
  Jump         L3
L0:
  // return out
  Return       r4

  // fun camelToSnake(s: string): string {
func camelToSnake (regs=88)
  // s = trimSpace(s)
  Move         r1, r0
  Call         r2, trimSpace, r1
  Move         r0, r2
  // var out = ""
  Const        r3, ""
  Move         r4, r3
  // var prevUnd = false
  Const        r5, false
  Move         r6, r5
  // var i = 0
  Const        r7, 0
  Move         r8, r7
L5:
  // while i < len(s) {
  Len          r9, r0
  LessInt      r10, r8, r9
  JumpIfFalse  r10, L0
  // let ch = s[i:i+1]
  Move         r11, r8
  Const        r13, 1
  AddInt       r14, r8, r13
  Move         r12, r14
  Slice        r15, r0, r11, r12
  Move         r16, r15
  // if ch == " " || ch == "-" || ch == "." {
  Const        r17, " "
  Equal        r18, r16, r17
  Const        r19, "-"
  Equal        r20, r16, r19
  Const        r21, "."
  Equal        r22, r16, r21
  Move         r23, r18
  JumpIfTrue   r23, L1
  Move         r23, r20
  JumpIfTrue   r23, L1
  Move         r23, r22
L1:
  JumpIfFalse  r23, L2
  // if !prevUnd && len(out) > 0 {
  Not          r24, r6
  Len          r25, r4
  Const        r7, 0
  LessInt      r26, r7, r25
  Move         r27, r24
  JumpIfFalse  r27, L3
  Move         r27, r26
L3:
  JumpIfFalse  r27, L4
  // out = out + "_"
  Const        r28, "_"
  Add          r29, r4, r28
  Move         r4, r29
  // prevUnd = true
  Const        r30, true
  Move         r6, r30
L4:
  // i = i + 1
  Const        r13, 1
  AddInt       r31, r8, r13
  Move         r8, r31
  // continue
  Jump         L5
L2:
  // if ch == "_" {
  Const        r28, "_"
  Equal        r32, r16, r28
  JumpIfFalse  r32, L6
  // if !prevUnd && len(out) > 0 {
  Not          r33, r6
  Len          r34, r4
  Const        r7, 0
  LessInt      r35, r7, r34
  Move         r36, r33
  JumpIfFalse  r36, L7
  Move         r36, r35
L7:
  JumpIfFalse  r36, L8
  // out = out + "_"
  Const        r28, "_"
  Add          r37, r4, r28
  Move         r4, r37
  // prevUnd = true
  Const        r30, true
  Move         r6, r30
L8:
  // i = i + 1
  Const        r13, 1
  AddInt       r38, r8, r13
  Move         r8, r38
  // continue
  Jump         L5
L6:
  // if isUpper(ch) {
  Move         r39, r16
  Call         r40, isUpper, r39
  JumpIfFalse  r40, L9
  // if i > 0 && (!prevUnd) {
  Const        r7, 0
  LessInt      r41, r7, r8
  Move         r42, r41
  JumpIfFalse  r42, L10
  Not          r43, r6
  Move         r42, r43
L10:
  JumpIfFalse  r42, L11
  // out = out + "_"
  Const        r28, "_"
  Add          r44, r4, r28
  Move         r4, r44
L11:
  // out = out + lower(ch)
  Lower        r45, r16
  Add          r46, r4, r45
  Move         r4, r46
  // prevUnd = false
  Const        r5, false
  Move         r6, r5
  // if isUpper(ch) {
  Jump         L12
L9:
  // out = out + lower(ch)
  Lower        r47, r16
  Add          r48, r4, r47
  Move         r4, r48
  // prevUnd = false
  Const        r5, false
  Move         r6, r5
L12:
  // i = i + 1
  Const        r13, 1
  AddInt       r49, r8, r13
  Move         r8, r49
  // while i < len(s) {
  Jump         L5
L0:
  // var start = 0
  Const        r7, 0
  Move         r50, r7
L15:
  // while start < len(out) && out[start:start+1] == "_" { start = start + 1 }
  Len          r51, r4
  LessInt      r52, r50, r51
  Move         r53, r50
  Const        r13, 1
  AddInt       r55, r50, r13
  Move         r54, r55
  Slice        r56, r4, r53, r54
  Const        r28, "_"
  Equal        r57, r56, r28
  Move         r58, r52
  JumpIfFalse  r58, L13
  Move         r58, r57
L13:
  JumpIfFalse  r58, L14
  Const        r13, 1
  AddInt       r59, r50, r13
  Move         r50, r59
  Jump         L15
L14:
  // var end = len(out)
  Len          r60, r4
  Move         r61, r60
L18:
  // while end > start && out[end-1:end] == "_" { end = end - 1 }
  LessInt      r62, r50, r61
  Const        r13, 1
  SubInt       r64, r61, r13
  Move         r63, r64
  Move         r65, r61
  Slice        r66, r4, r63, r65
  Const        r28, "_"
  Equal        r67, r66, r28
  Move         r68, r62
  JumpIfFalse  r68, L16
  Move         r68, r67
L16:
  JumpIfFalse  r68, L17
  Const        r13, 1
  SubInt       r69, r61, r13
  Move         r61, r69
  Jump         L18
L17:
  // out = out[start:end]
  Move         r70, r50
  Move         r71, r61
  Slice        r72, r4, r70, r71
  Move         r4, r72
  // var res = ""
  Const        r3, ""
  Move         r73, r3
  // var j = 0
  Const        r7, 0
  Move         r74, r7
  // var lastUnd = false
  Const        r5, false
  Move         r75, r5
L23:
  // while j < len(out) {
  Len          r76, r4
  LessInt      r77, r74, r76
  JumpIfFalse  r77, L19
  // let c = out[j:j+1]
  Move         r78, r74
  Const        r13, 1
  AddInt       r80, r74, r13
  Move         r79, r80
  Slice        r81, r4, r78, r79
  Move         r82, r81
  // if c == "_" {
  Const        r28, "_"
  Equal        r83, r82, r28
  JumpIfFalse  r83, L20
  // if !lastUnd { res = res + c }
  Not          r84, r75
  JumpIfFalse  r84, L21
  Add          r85, r73, r82
  Move         r73, r85
L21:
  // lastUnd = true
  Const        r30, true
  Move         r75, r30
  // if c == "_" {
  Jump         L22
L20:
  // res = res + c
  Add          r86, r73, r82
  Move         r73, r86
  // lastUnd = false
  Const        r5, false
  Move         r75, r5
L22:
  // j = j + 1
  Const        r13, 1
  AddInt       r87, r74, r13
  Move         r74, r87
  // while j < len(out) {
  Jump         L23
L19:
  // return res
  Return       r73

  // fun main() {
func main (regs=36)
  // let samples = [
  Const        r0, ["snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "ɛrgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "]
  Move         r1, r0
  // print("=== To snake_case ===")
  Const        r2, "=== To snake_case ==="
  Print        r2
  // for s in samples {
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
L1:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // print(padLeft(s, 34) + " => " + camelToSnake(s))
  Move         r9, r8
  Const        r11, 34
  Move         r10, r11
  Call2        r12, padLeft, r9, r10
  Const        r13, " => "
  Add          r14, r12, r13
  Move         r15, r8
  Call         r16, camelToSnake, r15
  Add          r17, r14, r16
  Print        r17
  // for s in samples {
  Const        r18, 1
  AddInt       r19, r5, r18
  Move         r5, r19
  Jump         L1
L0:
  // print("")
  Const        r20, ""
  Print        r20
  // print("=== To camelCase ===")
  Const        r21, "=== To camelCase ==="
  Print        r21
  // for s in samples {
  IterPrep     r22, r1
  Len          r23, r22
  Const        r24, 0
L3:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L2
  Index        r26, r22, r24
  Move         r8, r26
  // print(padLeft(s, 34) + " => " + snakeToCamel(s))
  Move         r27, r8
  Const        r11, 34
  Move         r28, r11
  Call2        r29, padLeft, r27, r28
  Const        r13, " => "
  Add          r30, r29, r13
  Move         r31, r8
  Call         r32, snakeToCamel, r31
  Add          r33, r30, r32
  Print        r33
  // for s in samples {
  Const        r34, 1
  AddInt       r35, r24, r34
  Move         r24, r35
  Jump         L3
L2:
  Return       r0
