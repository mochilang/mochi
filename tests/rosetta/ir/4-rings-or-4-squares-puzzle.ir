func main (regs=38)
  // let r1 = getCombs(1, 7, true)
  Const        r6, 1
  Move         r3, r6
  Const        r7, 7
  Move         r4, r7
  Const        r8, true
  Move         r5, r8
  Call         r9, getCombs, r3, r4, r5
  Move         r0, r9
  SetGlobal    0,0,0,0
  // print(str(r1["count"]) + " unique solutions in 1 to 7")
  Const        r10, "count"
  Index        r11, r0, r10
  Str          r12, r11
  Const        r13, " unique solutions in 1 to 7"
  Add          r14, r12, r13
  Print        r14
  // print(r1["list"])
  Const        r15, "list"
  Index        r16, r0, r15
  Print        r16
  // let r2 = getCombs(3, 9, true)
  Const        r20, 3
  Move         r17, r20
  Const        r21, 9
  Move         r18, r21
  Const        r8, true
  Move         r19, r8
  Call         r22, getCombs, r17, r18, r19
  Move         r1, r22
  SetGlobal    1,1,0,0
  // print(str(r2["count"]) + " unique solutions in 3 to 9")
  Const        r10, "count"
  Index        r23, r1, r10
  Str          r24, r23
  Const        r25, " unique solutions in 3 to 9"
  Add          r26, r24, r25
  Print        r26
  // print(r2["list"])
  Const        r15, "list"
  Index        r27, r1, r15
  Print        r27
  // let r3 = getCombs(0, 9, false)
  Const        r31, 0
  Move         r28, r31
  Const        r21, 9
  Move         r29, r21
  Const        r32, false
  Move         r30, r32
  Call         r33, getCombs, r28, r29, r30
  Move         r2, r33
  SetGlobal    2,2,0,0
  // print(str(r3["count"]) + " non-unique solutions in 0 to 9")
  Const        r10, "count"
  Index        r34, r2, r10
  Str          r35, r34
  Const        r36, " non-unique solutions in 0 to 9"
  Add          r37, r35, r36
  Print        r37
  Return       r0

  // fun validComb(a: int, b: int, c: int, d: int, e: int, f: int, g: int): bool {
func validComb (regs=24)
  // let square1 = a + b
  Add          r10, r3, r4
  Move         r11, r10
  // let square2 = b + c + d
  Add          r12, r4, r5
  Add          r13, r12, r6
  Move         r14, r13
  // let square3 = d + e + f
  Add          r15, r6, r7
  Add          r16, r15, r8
  Move         r17, r16
  // let square4 = f + g
  Add          r18, r8, r9
  Move         r19, r18
  // return square1 == square2 && square2 == square3 && square3 == square4
  Equal        r20, r11, r14
  Equal        r21, r14, r17
  Equal        r22, r17, r19
  Move         r23, r20
  JumpIfFalse  r23, L0
  Move         r23, r21
  JumpIfFalse  r23, L0
  Move         r23, r22
L0:
  Return       r23

  // fun isUnique(a: int, b: int, c: int, d: int, e: int, f: int, g: int): bool {
func isUnique (regs=35)
  // var nums = [a,b,c,d,e,f,g]
  Move         r10, r3
  Move         r11, r4
  Move         r12, r5
  Move         r13, r6
  Move         r14, r7
  Move         r15, r8
  Move         r16, r9
  MakeList     r17, 7, r10
  Move         r18, r17
  // var i = 0
  Const        r19, 0
  Move         r20, r19
L4:
  // while i < len(nums) {
  Len          r21, r18
  LessInt      r22, r20, r21
  JumpIfFalse  r22, L0
  // var j = i + 1
  Const        r23, 1
  AddInt       r24, r20, r23
  Move         r25, r24
L3:
  // while j < len(nums) {
  Len          r26, r18
  LessInt      r27, r25, r26
  JumpIfFalse  r27, L1
  // if nums[i] == nums[j] { return false }
  Index        r28, r18, r20
  Index        r29, r18, r25
  Equal        r30, r28, r29
  JumpIfFalse  r30, L2
  Const        r31, false
  Return       r31
L2:
  // j = j + 1
  Const        r23, 1
  AddInt       r32, r25, r23
  Move         r25, r32
  // while j < len(nums) {
  Jump         L3
L1:
  // i = i + 1
  Const        r23, 1
  AddInt       r33, r20, r23
  Move         r20, r33
  // while i < len(nums) {
  Jump         L4
L0:
  // return true
  Const        r34, true
  Return       r34

  // fun getCombs(low: int, high: int, unique: bool): map<string, any> {
func getCombs (regs=81)
  // var valid = []
  Const        r6, []
  Move         r7, r6
  // var count = 0
  Const        r8, 0
  Move         r9, r8
  // for b in low..(high + 1) {
  Const        r10, 1
  Add          r11, r4, r10
  Move         r12, r3
L17:
  LessInt      r13, r12, r11
  JumpIfFalse  r13, L0
  // for c in low..(high + 1) {
  Const        r10, 1
  Add          r14, r4, r10
  Move         r15, r3
L16:
  LessInt      r16, r15, r14
  JumpIfFalse  r16, L1
  // for d in low..(high + 1) {
  Const        r10, 1
  Add          r17, r4, r10
  Move         r18, r3
L15:
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L2
  // let s = b + c + d
  Add          r20, r12, r15
  Add          r21, r20, r18
  Move         r22, r21
  // for e in low..(high + 1) {
  Const        r10, 1
  Add          r23, r4, r10
  Move         r24, r3
L14:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L3
  // for f in low..(high + 1) {
  Const        r10, 1
  Add          r26, r4, r10
  Move         r27, r3
L13:
  LessInt      r28, r27, r26
  JumpIfFalse  r28, L4
  // let a = s - b
  Sub          r29, r22, r12
  Move         r30, r29
  // let g = s - f
  Sub          r31, r22, r27
  Move         r32, r31
  // if a < low || a > high { continue }
  Less         r33, r30, r3
  Less         r34, r4, r30
  Move         r35, r33
  JumpIfTrue   r35, L5
  Move         r35, r34
L5:
  JumpIfFalse  r35, L6
  Jump         L7
L6:
  // if g < low || g > high { continue }
  Less         r36, r32, r3
  Less         r37, r4, r32
  Move         r38, r36
  JumpIfTrue   r38, L8
  Move         r38, r37
L8:
  JumpIfFalse  r38, L9
  Jump         L7
L9:
  // if d + e + f != s { continue }
  Add          r39, r18, r24
  Add          r40, r39, r27
  NotEqual     r41, r40, r22
  JumpIfFalse  r41, L10
  Jump         L7
L10:
  // if f + g != s { continue }
  Add          r42, r27, r32
  NotEqual     r43, r42, r22
  JumpIfFalse  r43, L11
  Jump         L7
L11:
  // if !unique || isUnique(a,b,c,d,e,f,g) {
  Not          r44, r5
  Move         r45, r44
  JumpIfTrue   r45, L12
  Move         r46, r30
  Move         r47, r12
  Move         r48, r15
  Move         r49, r18
  Move         r50, r24
  Move         r51, r27
  Move         r52, r32
  Call         r53, isUnique, r46, r47, r48, r49, r50, r51, r52
  Move         r45, r53
L12:
  JumpIfFalse  r45, L7
  // valid = append(valid, [a,b,c,d,e,f,g])
  Move         r54, r30
  Move         r55, r12
  Move         r56, r15
  Move         r57, r18
  Move         r58, r24
  Move         r59, r27
  Move         r60, r32
  MakeList     r61, 7, r54
  Append       r62, r7, r61
  Move         r7, r62
  // count = count + 1
  Const        r10, 1
  AddInt       r63, r9, r10
  Move         r9, r63
L7:
  // for f in low..(high + 1) {
  Const        r64, 1
  AddInt       r65, r27, r64
  Move         r27, r65
  Jump         L13
L4:
  // for e in low..(high + 1) {
  Const        r66, 1
  AddInt       r67, r24, r66
  Move         r24, r67
  Jump         L14
L3:
  // for d in low..(high + 1) {
  Const        r68, 1
  AddInt       r69, r18, r68
  Move         r18, r69
  Jump         L15
L2:
  // for c in low..(high + 1) {
  Const        r70, 1
  AddInt       r71, r15, r70
  Move         r15, r71
  Jump         L16
L1:
  // for b in low..(high + 1) {
  Const        r72, 1
  AddInt       r73, r12, r72
  Move         r12, r73
  Jump         L17
L0:
  // return {"count": count, "list": valid}
  Const        r74, "count"
  Const        r75, "list"
  Move         r76, r74
  Move         r77, r9
  Move         r78, r75
  Move         r79, r7
  MakeMap      r80, 2, r76
  Return       r80
