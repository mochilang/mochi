func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun ord(ch: string): int {
func ord (regs=17)
  // if ch == "5" { return 0x35 }
  Const        r1, "5"
  Equal        r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, 53
  Return       r3
L0:
  // if ch == "T" { return 0x54 }
  Const        r4, "T"
  Equal        r5, r0, r4
  JumpIfFalse  r5, L1
  Const        r6, 84
  Return       r6
L1:
  // if ch == " " { return 0x20 }
  Const        r7, " "
  Equal        r8, r0, r7
  JumpIfFalse  r8, L2
  Const        r9, 32
  Return       r9
L2:
  // if ch == "é" { return 0xe9 }
  Const        r10, "é"
  Equal        r11, r0, r10
  JumpIfFalse  r11, L3
  Const        r12, 233
  Return       r12
L3:
  // if ch == "🐺" { return 0x1f43a }
  Const        r13, "🐺"
  Equal        r14, r0, r13
  JumpIfFalse  r14, L4
  Const        r15, 128058
  Return       r15
L4:
  // return 0
  Const        r16, 0
  Return       r16

  // fun hex(n: int): string {
func hex (regs=20)
  // let digits = "0123456789abcdef"
  Const        r1, "0123456789abcdef"
  Move         r2, r1
  // if n == 0 { return "0x0" }
  Const        r3, 0
  Equal        r4, r0, r3
  JumpIfFalse  r4, L0
  Const        r5, "0x0"
  Return       r5
L0:
  // var m = n
  Move         r6, r0
  // var out = ""
  Const        r7, ""
  Move         r8, r7
L2:
  // while m > 0 {
  Const        r3, 0
  Less         r9, r3, r6
  JumpIfFalse  r9, L1
  // let d = m % 16
  Const        r10, 16
  Mod          r11, r6, r10
  Move         r12, r11
  // out = substring(digits, d, d+1) + out
  Const        r13, 1
  Add          r14, r12, r13
  Slice        r15, r2, r12, r14
  Add          r16, r15, r8
  Move         r8, r16
  // m = m / 16
  Const        r10, 16
  Div          r17, r6, r10
  Move         r6, r17
  // while m > 0 {
  Jump         L2
L1:
  // return "0x" + out
  Const        r18, "0x"
  Add          r19, r18, r8
  Return       r19

  // fun quote(s: string): string {
func quote (regs=4)
  // return "'" + s + "'"
  Const        r1, "'"
  Add          r2, r1, r0
  Const        r1, "'"
  Add          r3, r2, r1
  Return       r3

  // fun analyze(s: string) {
func analyze (regs=46)
  // let le = len(s)
  Len          r1, r0
  Move         r2, r1
  // print("Analyzing " + quote(s) + " which has a length of " + str(le) + ":")
  Const        r3, "Analyzing "
  Move         r4, r0
  Call         r5, quote, r4
  Add          r6, r3, r5
  Const        r7, " which has a length of "
  Add          r8, r6, r7
  Str          r9, r2
  Add          r10, r8, r9
  Const        r11, ":"
  Add          r12, r10, r11
  Print        r12
  // if le > 1 {
  Const        r13, 1
  LessInt      r14, r13, r2
  JumpIfFalse  r14, L0
  // var i = 1
  Const        r13, 1
  Move         r15, r13
L2:
  // while i < le {
  LessInt      r16, r15, r2
  JumpIfFalse  r16, L0
  // let cur = substring(s, i, i+1)
  Const        r13, 1
  AddInt       r17, r15, r13
  Slice        r18, r0, r15, r17
  Move         r19, r18
  // let prev = substring(s, i-1, i)
  Const        r13, 1
  SubInt       r20, r15, r13
  Slice        r21, r0, r20, r15
  Move         r22, r21
  // if cur != prev {
  NotEqual     r23, r19, r22
  JumpIfFalse  r23, L1
  // print("  Not all characters in the string are the same.")
  Const        r24, "  Not all characters in the string are the same."
  Print        r24
  // print("  " + quote(cur) + " (" + hex(ord(cur)) + ") is different at position " + str(i+1) + ".")
  Const        r25, "  "
  Move         r26, r19
  Call         r27, quote, r26
  Add          r28, r25, r27
  Const        r29, " ("
  Add          r30, r28, r29
  Move         r32, r19
  Call         r33, ord, r32
  Move         r31, r33
  Call         r34, hex, r31
  Add          r35, r30, r34
  Const        r36, ") is different at position "
  Add          r37, r35, r36
  Const        r13, 1
  AddInt       r38, r15, r13
  Str          r39, r38
  Add          r40, r37, r39
  Const        r41, "."
  Add          r42, r40, r41
  Print        r42
  // print("")
  Const        r43, ""
  Print        r43
  // return
  Return       r0
L1:
  // i = i + 1
  Const        r13, 1
  AddInt       r44, r15, r13
  Move         r15, r44
  // while i < le {
  Jump         L2
L0:
  // print("  All characters in the string are the same.")
  Const        r45, "  All characters in the string are the same."
  Print        r45
  // print("")
  Const        r43, ""
  Print        r43
  Return       r0

  // fun main() {
func main (regs=11)
  // let strings = [
  Const        r0, ["", "   ", "2", "333", ".55", "tttTTT", "4444 444k", "pépé", "🐶🐶🐺🐶", "🎄🎄🎄🎄"]
  Move         r1, r0
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L1:
  // while i < len(strings) {
  Const        r4, 10
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // analyze(strings[i])
  Index        r7, r1, r3
  Move         r6, r7
  Call         r8, analyze, r6
  // i = i + 1
  Const        r9, 1
  AddInt       r10, r3, r9
  Move         r3, r10
  // while i < len(strings) {
  Jump         L1
L0:
  Return       r0
