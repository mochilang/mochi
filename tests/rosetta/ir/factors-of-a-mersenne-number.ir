func main (regs=3)
  // let qlimit = 50000
  Const        r1, 50000
  Move         r0, r1
  SetGlobal    0,0,0,0
  // main()
  Call         r2, main, 
  Return       r0

  // fun powf(base: float, exp: int): float {
func powf (regs=11)
  // var result = 1.0
  Const        r3, 1.0
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L1:
  // while i < exp {
  Less         r7, r6, r2
  JumpIfFalse  r7, L0
  // result = result * base
  MulFloat     r8, r4, r1
  Move         r4, r8
  // i = i + 1
  Const        r9, 1
  AddInt       r10, r6, r9
  Move         r6, r10
  // while i < exp {
  Jump         L1
L0:
  // return result
  Return       r4

  // fun sqrtApprox(x: float): float {
func sqrtApprox (regs=15)
  // if x <= 0.0 { return 0.0 }
  Const        r2, 0.0
  LessEqFloat  r3, r1, r2
  JumpIfFalse  r3, L0
  Const        r2, 0.0
  Return       r2
L0:
  // var g = x
  Move         r4, r1
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L2:
  // while i < 20 {
  Const        r7, 20
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L1
  // g = (g + x / g) / 2.0
  Div          r9, r1, r4
  Add          r10, r4, r9
  Const        r11, 2.0
  DivFloat     r12, r10, r11
  Move         r4, r12
  // i = i + 1
  Const        r13, 1
  AddInt       r14, r6, r13
  Move         r6, r14
  // while i < 20 {
  Jump         L2
L1:
  // return g
  Return       r4

  // fun modPow(base: int, exp: int, mod: int): int {
func modPow (regs=20)
  // var result = 1 % mod
  Const        r4, 1
  Mod          r5, r4, r3
  Move         r6, r5
  // var b = base % mod
  Mod          r7, r1, r3
  Move         r8, r7
  // var e = exp
  Move         r9, r2
L2:
  // while e > 0 {
  Const        r10, 0
  Less         r11, r10, r9
  JumpIfFalse  r11, L0
  // if e % 2 == 1 { result = (result * b) % mod }
  Const        r12, 2
  Mod          r13, r9, r12
  Const        r4, 1
  Equal        r14, r13, r4
  JumpIfFalse  r14, L1
  Mul          r15, r6, r8
  Mod          r16, r15, r3
  Move         r6, r16
L1:
  // b = (b * b) % mod
  Mul          r17, r8, r8
  Mod          r18, r17, r3
  Move         r8, r18
  // e = e / 2
  Const        r12, 2
  Div          r19, r9, r12
  Move         r9, r19
  // while e > 0 {
  Jump         L2
L0:
  // return result
  Return       r6

  // fun mtest(m: int) {
func mtest (regs=75)
  // if m < 4 {
  Const        r2, 4
  Less         r3, r1, r2
  JumpIfFalse  r3, L0
  // print(str(m) + " < 4.  M" + str(m) + " not tested.")
  Str          r4, r1
  Const        r5, " < 4.  M"
  Add          r6, r4, r5
  Str          r7, r1
  Add          r8, r6, r7
  Const        r9, " not tested."
  Add          r10, r8, r9
  Print        r10
  // return
  Return       r0
L0:
  // let flimit = sqrtApprox(powf(2.0, m) - 1.0)
  Const        r14, 2.0
  Move         r12, r14
  Move         r13, r1
  Call2        r15, powf, r12, r13
  Const        r16, 1.0
  SubFloat     r17, r15, r16
  Move         r11, r17
  Call         r18, sqrtApprox, r11
  Move         r19, r18
  // var qlast = 0
  Const        r20, 0
  Move         r21, r20
  // if flimit < qlimit {
  Less         r22, r19, r0
  JumpIfFalse  r22, L1
  // qlast = flimit as int
  Cast         r23, r19, int
  Move         r21, r23
  // if flimit < qlimit {
  Jump         L2
L1:
  // qlast = qlimit
  Move         r21, r0
L2:
  // var composite: list<bool> = []
  Const        r24, []
  Move         r25, r24
  // var i = 0
  Const        r20, 0
  Move         r26, r20
L4:
  // while i <= qlast {
  LessEq       r27, r26, r21
  JumpIfFalse  r27, L3
  // composite = append(composite, false)
  Const        r28, false
  Append       r29, r25, r28
  Move         r25, r29
  // i = i + 1
  Const        r30, 1
  AddInt       r31, r26, r30
  Move         r26, r31
  // while i <= qlast {
  Jump         L4
L3:
  // let sq = sqrtApprox(qlast as float) as int
  Cast         r33, r21, float
  Move         r32, r33
  Call         r34, sqrtApprox, r32
  Cast         r35, r34, int
  Move         r36, r35
  // var q = 3
  Const        r37, 3
  Move         r38, r37
L11:
  // while true {
  Const        r39, true
  JumpIfFalse  r39, L5
  // if q <= sq {
  LessEq       r40, r38, r36
  JumpIfFalse  r40, L6
  // var j = q * q
  MulInt       r41, r38, r38
  Move         r42, r41
L7:
  // while j <= qlast {
  LessEq       r43, r42, r21
  JumpIfFalse  r43, L6
  // composite[j] = true
  Const        r39, true
  SetIndex     r25, r42, r39
  // j = j + q
  AddInt       r44, r42, r38
  Move         r42, r44
  // while j <= qlast {
  Jump         L7
L6:
  // let q8 = q % 8
  Const        r45, 8
  ModInt       r46, r38, r45
  Move         r47, r46
  // if (q8 == 1 || q8 == 7) && modPow(2, m, q) == 1 {
  Const        r30, 1
  EqualInt     r48, r47, r30
  Const        r49, 7
  EqualInt     r50, r47, r49
  Move         r51, r48
  JumpIfTrue   r51, L8
  Move         r51, r50
L8:
  Const        r55, 2
  Move         r52, r55
  Move         r53, r1
  Move         r54, r38
  Call         r56, modPow, r52, r53, r54
  Const        r30, 1
  Equal        r57, r56, r30
  Move         r58, r51
  JumpIfFalse  r58, L9
  Move         r58, r57
L9:
  JumpIfFalse  r58, L10
  // print("M" + str(m) + " has factor " + str(q))
  Const        r59, "M"
  Str          r60, r1
  Add          r61, r59, r60
  Const        r62, " has factor "
  Add          r63, r61, r62
  Str          r64, r38
  Add          r65, r63, r64
  Print        r65
  // return
  Return       r0
L10:
  // while true {
  Const        r39, true
  JumpIfFalse  r39, L11
  // q = q + 2
  Const        r55, 2
  AddInt       r66, r38, r55
  Move         r38, r66
  // if q > qlast {
  Less         r67, r21, r38
  JumpIfFalse  r67, L12
  // print("No factors of M" + str(m) + " found.")
  Const        r68, "No factors of M"
  Str          r69, r1
  Add          r70, r68, r69
  Const        r71, " found."
  Add          r72, r70, r71
  Print        r72
  // return
  Return       r0
L12:
  // if !composite[q] { break }
  Index        r73, r25, r38
  Not          r74, r73
  JumpIfFalse  r74, L10
  Jump         L11
L5:
  Return       r0

  // fun main() {
func main (regs=7)
  // mtest(31)
  Const        r2, 31
  Move         r1, r2
  Call         r3, mtest, r1
  // mtest(67)
  Const        r5, 67
  Move         r4, r5
  Call         r6, mtest, r4
  Return       r0
