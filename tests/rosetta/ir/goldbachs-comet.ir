func __main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun sieve(limit: int): list<bool> {
func sieve (regs=21)
  // var primes: list<bool> = []
  Const        r1, []
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L1:
  // while i < limit {
  Less         r5, r4, r0
  JumpIfFalse  r5, L0
  // primes = append(primes, true)
  Const        r6, true
  Append       r7, r2, r6
  Move         r2, r7
  // i = i + 1
  Const        r8, 1
  AddInt       r9, r4, r8
  Move         r4, r9
  // while i < limit {
  Jump         L1
L0:
  // primes[0] = false
  Const        r10, false
  Const        r3, 0
  SetIndex     r2, r3, r10
  // primes[1] = false
  Const        r10, false
  Const        r8, 1
  SetIndex     r2, r8, r10
  // var p = 2
  Const        r11, 2
  Move         r12, r11
L5:
  // while p * p < limit {
  MulInt       r13, r12, r12
  Less         r14, r13, r0
  JumpIfFalse  r14, L2
  // if primes[p] {
  Index        r15, r2, r12
  JumpIfFalse  r15, L3
  // var k = p * p
  MulInt       r16, r12, r12
  Move         r17, r16
L4:
  // while k < limit {
  Less         r18, r17, r0
  JumpIfFalse  r18, L3
  // primes[k] = false
  Const        r10, false
  SetIndex     r2, r17, r10
  // k = k + p
  AddInt       r19, r17, r12
  Move         r17, r19
  // while k < limit {
  Jump         L4
L3:
  // p = p + 1
  Const        r8, 1
  AddInt       r20, r12, r8
  Move         r12, r20
  // while p * p < limit {
  Jump         L5
L2:
  // return primes
  Return       r2

  // fun goldbachCount(primes: list<bool>, n: int): int {
func goldbachCount (regs=15)
  // var c = 0
  Const        r2, 0
  Move         r3, r2
  // var i = 1
  Const        r4, 1
  Move         r5, r4
L3:
  // while i <= n / 2 {
  Const        r6, 2
  Div          r7, r1, r6
  LessEq       r8, r5, r7
  JumpIfFalse  r8, L0
  // if primes[i] && primes[n - i] { c = c + 1 }
  Index        r9, r0, r5
  Move         r10, r9
  JumpIfFalse  r10, L1
  Sub          r11, r1, r5
  Index        r12, r0, r11
  Move         r10, r12
L1:
  JumpIfFalse  r10, L2
  Const        r4, 1
  AddInt       r13, r3, r4
  Move         r3, r13
L2:
  // i = i + 1
  Const        r4, 1
  AddInt       r14, r5, r4
  Move         r5, r14
  // while i <= n / 2 {
  Jump         L3
L0:
  // return c
  Return       r3

  // fun pad(n: int): string {
func pad (regs=12)
  // if n < 10 { return "  " + str(n) }
  Const        r1, 10
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, "  "
  Str          r4, r0
  Add          r5, r3, r4
  Return       r5
L0:
  // if n < 100 { return " " + str(n) }
  Const        r6, 100
  Less         r7, r0, r6
  JumpIfFalse  r7, L1
  Const        r8, " "
  Str          r9, r0
  Add          r10, r8, r9
  Return       r10
L1:
  // return str(n)
  Str          r11, r0
  Return       r11

  // fun main() {
func main (regs=39)
  // var primes = sieve(1000)
  Const        r1, 1000
  Move         r0, r1
  Call         r2, sieve, r0
  Move         r3, r2
  // print("The first 100 Goldbach numbers:")
  Const        r4, "The first 100 Goldbach numbers:"
  Print        r4
  // var line = ""
  Const        r5, ""
  Move         r6, r5
  // var n = 2
  Const        r7, 2
  Move         r8, r7
  // var count = 0
  Const        r9, 0
  Move         r10, r9
L1:
  // while count < 100 {
  Const        r11, 100
  LessInt      r12, r10, r11
  JumpIfFalse  r12, L0
  // let v = goldbachCount(primes, 2 * n)
  Move         r13, r3
  Const        r7, 2
  MulInt       r15, r7, r8
  Move         r14, r15
  Call2        r16, goldbachCount, r13, r14
  Move         r17, r16
  // line = line + pad(v) + " "
  Move         r18, r17
  Call         r19, pad, r18
  Add          r20, r6, r19
  Const        r21, " "
  Add          r22, r20, r21
  Move         r6, r22
  // count = count + 1
  Const        r23, 1
  AddInt       r24, r10, r23
  Move         r10, r24
  // n = n + 1
  Const        r23, 1
  AddInt       r25, r8, r23
  Move         r8, r25
  // if count % 10 == 0 {
  Const        r26, 10
  ModInt       r27, r10, r26
  Const        r9, 0
  EqualInt     r28, r27, r9
  JumpIfFalse  r28, L1
  // print(substring(line, 0, len(line)-1))
  Const        r9, 0
  Len          r29, r6
  Const        r23, 1
  SubInt       r30, r29, r23
  Slice        r31, r6, r9, r30
  Print        r31
  // line = ""
  Const        r5, ""
  Move         r6, r5
  // while count < 100 {
  Jump         L1
L0:
  // let val = goldbachCount(primes, 1000)
  Move         r32, r3
  Const        r1, 1000
  Move         r33, r1
  Call2        r34, goldbachCount, r32, r33
  Move         r35, r34
  // print("\nThe 1,000th Goldbach number = " + str(val))
  Const        r36, "\nThe 1,000th Goldbach number = "
  Str          r37, r35
  Add          r38, r36, r37
  Print        r38
  Return       r0
