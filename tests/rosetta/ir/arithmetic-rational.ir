func main (regs=1)
  Return       r0

  // fun intSqrt(x: int): int {
func intSqrt (regs=20)
  // if x < 2 { return x }
  Const        r1, 2
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Return       r0
L0:
  // var left = 1
  Const        r3, 1
  Move         r4, r3
  // var right = x / 2
  Const        r1, 2
  Div          r5, r0, r1
  Move         r6, r5
  // var ans = 0
  Const        r7, 0
  Move         r8, r7
L4:
  // while left <= right {
  LessEq       r9, r4, r6
  JumpIfFalse  r9, L1
  // let mid = left + (right - left) / 2
  Sub          r10, r6, r4
  Const        r1, 2
  Div          r11, r10, r1
  Add          r12, r4, r11
  Move         r13, r12
  // let sq = mid * mid
  Mul          r14, r13, r13
  Move         r15, r14
  // if sq == x { return mid }
  Equal        r16, r15, r0
  JumpIfFalse  r16, L2
  Return       r13
L2:
  // if sq < x {
  Less         r17, r15, r0
  JumpIfFalse  r17, L3
  // left = mid + 1
  Const        r3, 1
  Add          r18, r13, r3
  Move         r4, r18
  // ans = mid
  Move         r8, r13
  // if sq < x {
  Jump         L4
L3:
  // right = mid - 1
  Const        r3, 1
  Sub          r19, r13, r3
  Move         r6, r19
  // while left <= right {
  Jump         L4
L1:
  // return ans
  Return       r8

  // fun sumRecip(n: int): int {
func sumRecip (regs=19)
  // var s = 1
  Const        r1, 1
  Move         r2, r1
  // let limit = intSqrt(n)
  Move         r3, r0
  Call         r4, intSqrt, r3
  Move         r5, r4
  // var f = 2
  Const        r6, 2
  Move         r7, r6
L2:
  // while f <= limit {
  LessEq       r8, r7, r5
  JumpIfFalse  r8, L0
  // if n % f == 0 {
  Mod          r9, r0, r7
  Const        r10, 0
  Equal        r11, r9, r10
  JumpIfFalse  r11, L1
  // s = s + n / f
  Div          r12, r0, r7
  Add          r13, r2, r12
  Move         r2, r13
  // let f2 = n / f
  Div          r14, r0, r7
  Move         r15, r14
  // if f2 != f { s = s + f }
  NotEqual     r16, r15, r7
  JumpIfFalse  r16, L1
  Add          r17, r2, r7
  Move         r2, r17
L1:
  // f = f + 1
  Const        r1, 1
  AddInt       r18, r7, r1
  Move         r7, r18
  // while f <= limit {
  Jump         L2
L0:
  // return s
  Return       r2

  // fun main() {
func main (regs=34)
  // let nums = [6, 28, 120, 496, 672, 8128, 30240, 32760, 523776]
  Const        r0, [6, 28, 120, 496, 672, 8128, 30240, 32760, 523776]
  Move         r1, r0
  // for n in nums {
  Const        r2, [6, 28, 120, 496, 672, 8128, 30240, 32760, 523776]
  IterPrep     r3, r2
  Len          r4, r3
  Const        r5, 0
L3:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // let s = sumRecip(n)
  Move         r9, r8
  Call         r10, sumRecip, r9
  Move         r11, r10
  // if s % n == 0 {
  Mod          r12, r11, r8
  Const        r13, 0
  Equal        r14, r12, r13
  JumpIfFalse  r14, L1
  // let val = s / n
  Div          r15, r11, r8
  Move         r16, r15
  // var perfect = ""
  Const        r17, ""
  Move         r18, r17
  // if val == 1 { perfect = "perfect!" }
  Const        r19, 1
  Equal        r20, r16, r19
  JumpIfFalse  r20, L2
  Const        r21, "perfect!"
  Move         r18, r21
L2:
  // print("Sum of recipr. factors of " + str(n) + " = " + str(val) + " exactly " + perfect)
  Const        r22, "Sum of recipr. factors of "
  Str          r23, r8
  Add          r24, r22, r23
  Const        r25, " = "
  Add          r26, r24, r25
  Str          r27, r16
  Add          r28, r26, r27
  Const        r29, " exactly "
  Add          r30, r28, r29
  Add          r31, r30, r18
  Print        r31
L1:
  // for n in nums {
  Const        r32, 1
  AddInt       r33, r5, r32
  Move         r5, r33
  Jump         L3
L0:
  Return       r0
