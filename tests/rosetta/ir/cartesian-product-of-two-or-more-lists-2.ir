func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun listStr(xs: list<int>): string {
func listStr (regs=19)
  // var s = "["
  Const        r1, "["
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L2:
  // while i < len(xs) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // s = s + str(xs[i])
  Index        r7, r0, r4
  Str          r8, r7
  Add          r9, r2, r8
  Move         r2, r9
  // if i < len(xs)-1 { s = s + " " }
  Len          r10, r0
  Const        r11, 1
  SubInt       r12, r10, r11
  LessInt      r13, r4, r12
  JumpIfFalse  r13, L1
  Const        r14, " "
  Add          r15, r2, r14
  Move         r2, r15
L1:
  // i = i + 1
  Const        r11, 1
  AddInt       r16, r4, r11
  Move         r4, r16
  // while i < len(xs) {
  Jump         L2
L0:
  // s = s + "]"
  Const        r17, "]"
  Add          r18, r2, r17
  Move         r2, r18
  // return s
  Return       r2

  // fun llStr(lst: list<list<int>>): string {
func llStr (regs=20)
  // var s = "["
  Const        r1, "["
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L2:
  // while i < len(lst) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // s = s + listStr(lst[i])
  Index        r8, r0, r4
  Move         r7, r8
  Call         r9, listStr, r7
  Add          r10, r2, r9
  Move         r2, r10
  // if i < len(lst)-1 { s = s + " " }
  Len          r11, r0
  Const        r12, 1
  SubInt       r13, r11, r12
  LessInt      r14, r4, r13
  JumpIfFalse  r14, L1
  Const        r15, " "
  Add          r16, r2, r15
  Move         r2, r16
L1:
  // i = i + 1
  Const        r12, 1
  AddInt       r17, r4, r12
  Move         r4, r17
  // while i < len(lst) {
  Jump         L2
L0:
  // s = s + "]"
  Const        r18, "]"
  Add          r19, r2, r18
  Move         r2, r19
  // return s
  Return       r2

  // fun cartN(lists: any): list<list<int>> {
func cartN (regs=58)
  // if lists == null { return [] }
  Const        r1, nil
  Equal        r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, []
  Return       r3
L0:
  // let a = lists as list<list<int>>
  Cast         r4, r0, [[int]]
  Move         r5, r4
  // if len(a) == 0 { return [[]] }
  Len          r6, r5
  Const        r7, 0
  EqualInt     r8, r6, r7
  JumpIfFalse  r8, L1
  Const        r9, [[]]
  Return       r9
L1:
  // var c = 1
  Const        r10, 1
  Move         r11, r10
  // for xs in a { c = c * len(xs) }
  IterPrep     r12, r5
  Len          r13, r12
  Const        r14, 0
L3:
  LessInt      r15, r14, r13
  JumpIfFalse  r15, L2
  Index        r16, r12, r14
  Move         r17, r16
  Len          r18, r17
  MulInt       r19, r11, r18
  Move         r11, r19
  Const        r20, 1
  AddInt       r21, r14, r20
  Move         r14, r21
  Jump         L3
L2:
  // if c == 0 { return [] }
  Const        r7, 0
  EqualInt     r22, r11, r7
  JumpIfFalse  r22, L4
  Const        r3, []
  Return       r3
L4:
  // var res: list<list<int>> = []
  Const        r3, []
  Move         r23, r3
  // var idx: list<int> = []
  Const        r3, []
  Move         r24, r3
  // for _ in a { idx = append(idx, 0) }
  IterPrep     r25, r5
  Len          r26, r25
  Const        r27, 0
L6:
  LessInt      r28, r27, r26
  JumpIfFalse  r28, L5
  Index        r29, r25, r27
  Move         r30, r29
  Const        r7, 0
  Append       r31, r24, r7
  Move         r24, r31
  Const        r32, 1
  AddInt       r33, r27, r32
  Move         r27, r33
  Jump         L6
L5:
  // var n = len(a)
  Len          r34, r5
  Move         r35, r34
  // var count = 0
  Const        r7, 0
  Move         r36, r7
L13:
  // while count < c {
  LessInt      r37, r36, r11
  JumpIfFalse  r37, L7
  // var row: list<int> = []
  Const        r3, []
  Move         r38, r3
  // var j = 0
  Const        r7, 0
  Move         r39, r7
L9:
  // while j < n {
  LessInt      r40, r39, r35
  JumpIfFalse  r40, L8
  // row = append(row, a[j][idx[j]])
  Index        r41, r5, r39
  Index        r42, r24, r39
  Index        r43, r41, r42
  Append       r44, r38, r43
  Move         r38, r44
  // j = j + 1
  Const        r10, 1
  AddInt       r45, r39, r10
  Move         r39, r45
  // while j < n {
  Jump         L9
L8:
  // res = append(res, row)
  Append       r46, r23, r38
  Move         r23, r46
  // var k = n - 1
  Const        r10, 1
  SubInt       r47, r35, r10
  Move         r48, r47
L12:
  // while k >= 0 {
  Const        r7, 0
  LessEqInt    r49, r7, r48
  JumpIfFalse  r49, L10
  // idx[k] = idx[k] + 1
  Index        r50, r24, r48
  Const        r10, 1
  Add          r51, r50, r10
  SetIndex     r24, r48, r51
  // if idx[k] < len(a[k]) { break }
  Index        r52, r24, r48
  Index        r53, r5, r48
  Len          r54, r53
  Less         r55, r52, r54
  JumpIfFalse  r55, L11
  Jump         L10
L11:
  // idx[k] = 0
  Const        r7, 0
  SetIndex     r24, r48, r7
  // k = k - 1
  Const        r10, 1
  SubInt       r56, r48, r10
  Move         r48, r56
  // while k >= 0 {
  Jump         L12
L10:
  // count = count + 1
  Const        r10, 1
  AddInt       r57, r36, r10
  Move         r36, r57
  // while count < c {
  Jump         L13
L7:
  // return res
  Return       r23

  // fun main() {
func main (regs=58)
  // print(llStr(cartN([[1,2],[3,4]])))
  Const        r2, [[1, 2], [3, 4]]
  Move         r1, r2
  Call         r3, cartN, r1
  Move         r0, r3
  Call         r4, llStr, r0
  Print        r4
  // print(llStr(cartN([[3,4],[1,2]])))
  Const        r7, [[3, 4], [1, 2]]
  Move         r6, r7
  Call         r8, cartN, r6
  Move         r5, r8
  Call         r9, llStr, r5
  Print        r9
  // print(llStr(cartN([[1,2],[]])))
  Const        r12, [[1, 2], []]
  Move         r11, r12
  Call         r13, cartN, r11
  Move         r10, r13
  Call         r14, llStr, r10
  Print        r14
  // print(llStr(cartN([[],[1,2]])))
  Const        r17, [[], [1, 2]]
  Move         r16, r17
  Call         r18, cartN, r16
  Move         r15, r18
  Call         r19, llStr, r15
  Print        r19
  // print("")
  Const        r20, ""
  Print        r20
  // print("[")
  Const        r21, "["
  Print        r21
  // for p in cartN([[1776,1789],[7,12],[4,14,23],[0,1]]) {
  Const        r23, [[1776, 1789], [7, 12], [4, 14, 23], [0, 1]]
  Move         r22, r23
  Call         r24, cartN, r22
  IterPrep     r25, r24
  Len          r26, r25
  Const        r27, 0
L1:
  LessInt      r28, r27, r26
  JumpIfFalse  r28, L0
  Index        r29, r25, r27
  Move         r30, r29
  // print(" "+listStr(p))
  Const        r31, " "
  Move         r32, r30
  Call         r33, listStr, r32
  Add          r34, r31, r33
  Print        r34
  // for p in cartN([[1776,1789],[7,12],[4,14,23],[0,1]]) {
  Const        r35, 1
  AddInt       r36, r27, r35
  Move         r27, r36
  Jump         L1
L0:
  // print("]")
  Const        r37, "]"
  Print        r37
  // print(llStr(cartN([[1,2,3],[30],[500,100]])))
  Const        r40, [[1, 2, 3], [30], [500, 100]]
  Move         r39, r40
  Call         r41, cartN, r39
  Move         r38, r41
  Call         r42, llStr, r38
  Print        r42
  // print(llStr(cartN([[1,2,3],[],[500,100]])))
  Const        r45, [[1, 2, 3], [], [500, 100]]
  Move         r44, r45
  Call         r46, cartN, r44
  Move         r43, r46
  Call         r47, llStr, r43
  Print        r47
  // print("")
  Const        r20, ""
  Print        r20
  // print(llStr(cartN(null)))
  Const        r50, nil
  Move         r49, r50
  Call         r51, cartN, r49
  Move         r48, r51
  Call         r52, llStr, r48
  Print        r52
  // print(llStr(cartN([])))
  Const        r55, []
  Move         r54, r55
  Call         r56, cartN, r54
  Move         r53, r56
  Call         r57, llStr, r53
  Print        r57
  Return       r0
