func main (regs=2)
  // let dim = 16
  Const        r1, 16
  Move         r0, r1
  SetGlobal    0,0,0,0
  Return       r0

  // fun newPile(d: int): list<list<int>> {
func newPile (regs=15)
  // var b: list<list<int>> = []
  Const        r2, []
  Move         r3, r2
  // var y = 0
  Const        r4, 0
  Move         r5, r4
L3:
  // while y < d {
  Less         r6, r5, r1
  JumpIfFalse  r6, L0
  // var row: list<int> = []
  Const        r2, []
  Move         r7, r2
  // var x = 0
  Const        r4, 0
  Move         r8, r4
L2:
  // while x < d {
  Less         r9, r8, r1
  JumpIfFalse  r9, L1
  // row = append(row, 0)
  Const        r4, 0
  Append       r10, r7, r4
  Move         r7, r10
  // x = x + 1
  Const        r11, 1
  AddInt       r12, r8, r11
  Move         r8, r12
  // while x < d {
  Jump         L2
L1:
  // b = append(b, row)
  Append       r13, r3, r7
  Move         r3, r13
  // y = y + 1
  Const        r11, 1
  AddInt       r14, r5, r11
  Move         r5, r14
  // while y < d {
  Jump         L3
L0:
  // return b
  Return       r3

  // fun handlePile(pile: list<list<int>>, x: int, y: int): list<list<int>> {
func handlePile (regs=84)
  // if pile[y][x] >= 4 {
  Index        r4, r1, r3
  Index        r5, r4, r2
  Const        r6, 4
  LessEq       r7, r6, r5
  JumpIfFalse  r7, L0
  // pile[y][x] = pile[y][x] - 4
  Index        r8, r1, r3
  Index        r9, r1, r3
  Index        r10, r9, r2
  Const        r6, 4
  Sub          r11, r10, r6
  SetIndex     r8, r2, r11
  // if y > 0 {
  Const        r12, 0
  Less         r13, r12, r3
  JumpIfFalse  r13, L1
  // pile[y-1][x] = pile[y-1][x] + 1
  Const        r14, 1
  Sub          r15, r3, r14
  Index        r16, r1, r15
  Const        r14, 1
  Sub          r17, r3, r14
  Index        r18, r1, r17
  Index        r19, r18, r2
  Const        r14, 1
  Add          r20, r19, r14
  SetIndex     r16, r2, r20
  // if pile[y-1][x] >= 4 { pile = handlePile(pile, x, y-1) }
  Const        r14, 1
  Sub          r21, r3, r14
  Index        r22, r1, r21
  Index        r23, r22, r2
  Const        r6, 4
  LessEq       r24, r6, r23
  JumpIfFalse  r24, L1
  Move         r25, r1
  Move         r26, r2
  Const        r14, 1
  Sub          r28, r3, r14
  Move         r27, r28
  Call         r29, handlePile, r25, r26, r27
  Move         r1, r29
L1:
  // if x > 0 {
  Const        r12, 0
  Less         r30, r12, r2
  JumpIfFalse  r30, L2
  // pile[y][x-1] = pile[y][x-1] + 1
  Index        r31, r1, r3
  Index        r32, r1, r3
  Const        r14, 1
  Sub          r33, r2, r14
  Index        r34, r32, r33
  Const        r14, 1
  Add          r35, r34, r14
  Const        r14, 1
  Sub          r36, r2, r14
  SetIndex     r31, r36, r35
  // if pile[y][x-1] >= 4 { pile = handlePile(pile, x-1, y) }
  Index        r37, r1, r3
  Const        r14, 1
  Sub          r38, r2, r14
  Index        r39, r37, r38
  Const        r6, 4
  LessEq       r40, r6, r39
  JumpIfFalse  r40, L2
  Move         r41, r1
  Const        r14, 1
  Sub          r44, r2, r14
  Move         r42, r44
  Move         r43, r3
  Call         r45, handlePile, r41, r42, r43
  Move         r1, r45
L2:
  // if y < dim - 1 {
  Const        r14, 1
  Sub          r46, r0, r14
  Less         r47, r3, r46
  JumpIfFalse  r47, L3
  // pile[y+1][x] = pile[y+1][x] + 1
  Const        r14, 1
  Add          r48, r3, r14
  Index        r49, r1, r48
  Const        r14, 1
  Add          r50, r3, r14
  Index        r51, r1, r50
  Index        r52, r51, r2
  Const        r14, 1
  Add          r53, r52, r14
  SetIndex     r49, r2, r53
  // if pile[y+1][x] >= 4 { pile = handlePile(pile, x, y+1) }
  Const        r14, 1
  Add          r54, r3, r14
  Index        r55, r1, r54
  Index        r56, r55, r2
  Const        r6, 4
  LessEq       r57, r6, r56
  JumpIfFalse  r57, L3
  Move         r58, r1
  Move         r59, r2
  Const        r14, 1
  Add          r61, r3, r14
  Move         r60, r61
  Call         r62, handlePile, r58, r59, r60
  Move         r1, r62
L3:
  // if x < dim - 1 {
  Const        r14, 1
  Sub          r63, r0, r14
  Less         r64, r2, r63
  JumpIfFalse  r64, L4
  // pile[y][x+1] = pile[y][x+1] + 1
  Index        r65, r1, r3
  Index        r66, r1, r3
  Const        r14, 1
  Add          r67, r2, r14
  Index        r68, r66, r67
  Const        r14, 1
  Add          r69, r68, r14
  Const        r14, 1
  Add          r70, r2, r14
  SetIndex     r65, r70, r69
  // if pile[y][x+1] >= 4 { pile = handlePile(pile, x+1, y) }
  Index        r71, r1, r3
  Const        r14, 1
  Add          r72, r2, r14
  Index        r73, r71, r72
  Const        r6, 4
  LessEq       r74, r6, r73
  JumpIfFalse  r74, L4
  Move         r75, r1
  Const        r14, 1
  Add          r78, r2, r14
  Move         r76, r78
  Move         r77, r3
  Call         r79, handlePile, r75, r76, r77
  Move         r1, r79
L4:
  // pile = handlePile(pile, x, y)
  Move         r80, r1
  Move         r81, r2
  Move         r82, r3
  Call         r83, handlePile, r80, r81, r82
  Move         r1, r83
L0:
  // return pile
  Return       r1

  // fun drawPile(pile: list<list<int>>, d: int) {
func drawPile (regs=22)
  // let chars = [" ", "░", "▓", "█"]
  Const        r3, [" ", "░", "▓", "█"]
  Move         r4, r3
  // var row = 0
  Const        r5, 0
  Move         r6, r5
L4:
  // while row < d {
  Less         r7, r6, r2
  JumpIfFalse  r7, L0
  // var line = ""
  Const        r8, ""
  Move         r9, r8
  // var col = 0
  Const        r5, 0
  Move         r10, r5
L3:
  // while col < d {
  Less         r11, r10, r2
  JumpIfFalse  r11, L1
  // var v = pile[row][col]
  Index        r12, r1, r6
  Index        r13, r12, r10
  Move         r14, r13
  // if v > 3 { v = 3 }
  Const        r15, 3
  Less         r16, r15, r14
  JumpIfFalse  r16, L2
  Const        r15, 3
  Move         r14, r15
L2:
  // line = line + chars[v]
  Index        r17, r4, r14
  Add          r18, r9, r17
  Move         r9, r18
  // col = col + 1
  Const        r19, 1
  AddInt       r20, r10, r19
  Move         r10, r20
  // while col < d {
  Jump         L3
L1:
  // print(line)
  Print        r9
  // row = row + 1
  Const        r19, 1
  AddInt       r21, r6, r19
  Move         r6, r21
  // while row < d {
  Jump         L4
L0:
  Return       r0

  // fun main() {
func main (regs=15)
  // var pile = newPile(16)
  Const        r2, 16
  Move         r1, r2
  Call         r3, newPile, r1
  Move         r4, r3
  // let hdim = 7
  Const        r5, 7
  Move         r6, r5
  // pile[hdim][hdim] = 16
  Const        r5, 7
  Index        r7, r4, r5
  Const        r2, 16
  Const        r5, 7
  SetIndex     r7, r5, r2
  // pile = handlePile(pile, hdim, hdim)
  Move         r8, r4
  Const        r5, 7
  Move         r9, r5
  Const        r5, 7
  Move         r10, r5
  Call         r11, handlePile, r8, r9, r10
  Move         r4, r11
  // drawPile(pile, 16)
  Move         r12, r4
  Const        r2, 16
  Move         r13, r2
  Call2        r14, drawPile, r12, r13
  Return       r0
