func main (regs=42)
  // var c1 = cds{ i:1, s:"one", b:[117,110,105,116], m:{1:true} }
  Const        r2, 1
  Const        r3, "one"
  Const        r4, [117, 110, 105, 116]
  Const        r5, {"1": true}
  Const        r6, "__name"
  Const        r7, "cds"
  Const        r8, "i"
  Move         r9, r2
  Const        r10, "s"
  Move         r11, r3
  Const        r12, "b"
  Move         r13, r4
  Const        r14, "m"
  Move         r15, r5
  MakeMap      r16, 5, r6
  Move         r0, r16
  SetGlobal    0,0,0,0
  // var c2 = deepcopy(c1)
  Move         r17, r0
  Call         r18, deepcopy, r17
  Move         r1, r18
  SetGlobal    1,1,0,0
  // print(cdsStr(c1))
  Move         r19, r0
  Call         r20, cdsStr, r19
  Print        r20
  // print(cdsStr(c2))
  Move         r21, r1
  Call         r22, cdsStr, r21
  Print        r22
  // c1 = cds{ i:0, s:"nil", b:[122,101,114,111], m:{1:false} }
  Const        r23, 0
  Const        r24, "nil"
  Const        r25, [122, 101, 114, 111]
  Const        r26, {"1": false}
  Const        r27, "__name"
  Const        r28, "cds"
  Const        r29, "i"
  Move         r30, r23
  Const        r31, "s"
  Move         r32, r24
  Const        r33, "b"
  Move         r34, r25
  Const        r35, "m"
  Move         r36, r26
  MakeMap      r37, 5, r27
  Move         r0, r37
  SetGlobal    0,0,0,0
  // print(cdsStr(c1))
  Move         r38, r0
  Call         r39, cdsStr, r38
  Print        r39
  // print(cdsStr(c2))
  Move         r40, r1
  Call         r41, cdsStr, r40
  Print        r41
  Return       r0

  // fun copyList(src: list<int>): list<int> {
func copyList (regs=14)
  // var out: list<int> = []
  Const        r3, []
  Move         r4, r3
  // for v in src { out = append(out, v) }
  IterPrep     r5, r2
  Len          r6, r5
  Const        r7, 0
L1:
  LessInt      r8, r7, r6
  JumpIfFalse  r8, L0
  Index        r9, r5, r7
  Move         r10, r9
  Append       r11, r4, r10
  Move         r4, r11
  Const        r12, 1
  AddInt       r13, r7, r12
  Move         r7, r13
  Jump         L1
L0:
  // return out
  Return       r4

  // fun copyMap(src: map<int,bool>): map<int,bool> {
func copyMap (regs=14)
  // var out: map<int,bool> = {}
  Const        r3, {}
  Move         r4, r3
  // for k in src { out[k] = src[k] }
  IterPrep     r5, r2
  Len          r6, r5
  Const        r7, 0
L1:
  LessInt      r8, r7, r6
  JumpIfFalse  r8, L0
  Index        r9, r5, r7
  Move         r10, r9
  Index        r11, r2, r10
  SetIndex     r4, r10, r11
  Const        r12, 1
  AddInt       r13, r7, r12
  Move         r7, r13
  Jump         L1
L0:
  // return out
  Return       r4

  // fun deepcopy(c: cds): cds {
func deepcopy (regs=26)
  // return cds{ i:c.i, s:c.s, b: copyList(c.b), m: copyMap(c.m) }
  Const        r3, "i"
  Index        r4, r2, r3
  Const        r5, "s"
  Index        r6, r2, r5
  Const        r8, "b"
  Index        r9, r2, r8
  Move         r7, r9
  Call         r10, copyList, r7
  Const        r12, "m"
  Index        r13, r2, r12
  Move         r11, r13
  Call         r14, copyMap, r11
  Const        r15, "__name"
  Const        r16, "cds"
  Const        r17, "i"
  Move         r18, r4
  Const        r19, "s"
  Move         r20, r6
  Const        r21, "b"
  Move         r22, r10
  Const        r23, "m"
  Move         r24, r14
  MakeMap      r25, 5, r15
  Return       r25

  // fun cdsStr(c: cds): string {
func cdsStr (regs=66)
  // var bs = "["; var i=0; while i < len(c.b) { bs = bs+str(c.b[i]); if i < len(c.b)-1 { bs=bs+" " }; i=i+1 } bs = bs+"]"
  Const        r3, "["
  Move         r4, r3
  Const        r5, 0
  Move         r6, r5
L2:
  Const        r7, "b"
  Index        r8, r2, r7
  Len          r9, r8
  LessInt      r10, r6, r9
  JumpIfFalse  r10, L0
  Const        r7, "b"
  Index        r11, r2, r7
  Index        r12, r11, r6
  Str          r13, r12
  Add          r14, r4, r13
  Move         r4, r14
  Const        r7, "b"
  Index        r15, r2, r7
  Len          r16, r15
  Const        r17, 1
  SubInt       r18, r16, r17
  LessInt      r19, r6, r18
  JumpIfFalse  r19, L1
  Const        r20, " "
  Add          r21, r4, r20
  Move         r4, r21
L1:
  Const        r17, 1
  AddInt       r22, r6, r17
  Move         r6, r22
  Jump         L2
L0:
  Const        r23, "]"
  Add          r24, r4, r23
  Move         r4, r24
  // var ms = "map["; var first=true; for k in c.m { if !first { ms=ms+" " }; ms = ms + str(k)+":"+str(c.m[k]); first=false } ms=ms+"]"
  Const        r25, "map["
  Move         r26, r25
  Const        r27, true
  Move         r28, r27
  Const        r29, "m"
  Index        r30, r2, r29
  IterPrep     r31, r30
  Len          r32, r31
  Const        r33, 0
L5:
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L3
  Index        r35, r31, r33
  Move         r36, r35
  Not          r37, r28
  JumpIfFalse  r37, L4
  Const        r20, " "
  Add          r38, r26, r20
  Move         r26, r38
L4:
  Str          r39, r36
  Add          r40, r26, r39
  Const        r41, ":"
  Add          r42, r40, r41
  Const        r29, "m"
  Index        r43, r2, r29
  Index        r44, r43, r36
  Str          r45, r44
  Add          r46, r42, r45
  Move         r26, r46
  Const        r47, false
  Move         r28, r47
  Const        r48, 1
  AddInt       r49, r33, r48
  Move         r33, r49
  Jump         L5
L3:
  Const        r23, "]"
  Add          r50, r26, r23
  Move         r26, r50
  // return "{"+str(c.i)+" "+c.s+" "+bs+" "+ms+"}"
  Const        r51, "{"
  Const        r52, "i"
  Index        r53, r2, r52
  Str          r54, r53
  Add          r55, r51, r54
  Const        r20, " "
  Add          r56, r55, r20
  Const        r57, "s"
  Index        r58, r2, r57
  Add          r59, r56, r58
  Const        r20, " "
  Add          r60, r59, r20
  Add          r61, r60, r4
  Const        r20, " "
  Add          r62, r61, r20
  Add          r63, r62, r26
  Const        r64, "}"
  Add          r65, r63, r64
  Return       r65
