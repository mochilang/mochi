func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun entropy(s: string): float {
func entropy (regs=56)
  // var counts: map<string,int> = {}
  Const        r1, {}
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L3:
  // while i < len(s) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // let ch = substring(s, i, i+1)
  Const        r7, 1
  AddInt       r8, r4, r7
  Slice        r9, r0, r4, r8
  Move         r10, r9
  // if ch in counts { counts[ch] = counts[ch] + 1 } else { counts[ch] = 1 }
  In           r11, r10, r2
  JumpIfFalse  r11, L1
  Index        r12, r2, r10
  Const        r7, 1
  Add          r13, r12, r7
  SetIndex     r2, r10, r13
  Jump         L2
L1:
  Const        r7, 1
  SetIndex     r2, r10, r7
L2:
  // i = i + 1
  Const        r7, 1
  AddInt       r14, r4, r7
  Move         r4, r14
  // while i < len(s) {
  Jump         L3
L0:
  // var hm = 0.0
  Const        r15, 0.0
  Move         r16, r15
  // for k in keys(counts) {
  IterPrep     r18, r17
  Len          r19, r18
  Const        r20, 0
L5:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L4
  Index        r22, r18, r20
  Move         r23, r22
  // let c = counts[k] as float
  Index        r24, r2, r23
  Cast         r25, r24, float
  Move         r26, r25
  // hm = hm + c * (math.log(c) / math.log(2.0))
  Const        r28, "log"
  Index        r29, r27, r28
  Move         r30, r26
  CallV        r31, r29, 1, r30
  Const        r28, "log"
  Index        r33, r32, r28
  Const        r35, 2.0
  Move         r34, r35
  CallV        r36, r33, 1, r34
  Div          r37, r31, r36
  Mul          r38, r26, r37
  AddFloat     r39, r16, r38
  Move         r16, r39
  // for k in keys(counts) {
  Const        r40, 1
  AddInt       r41, r20, r40
  Move         r20, r41
  Jump         L5
L4:
  // let l = len(s) as float
  Len          r42, r0
  Cast         r43, r42, float
  Move         r44, r43
  // return (math.log(l) / math.log(2.0)) - hm / l
  Const        r28, "log"
  Index        r46, r45, r28
  Move         r47, r44
  CallV        r48, r46, 1, r47
  Const        r28, "log"
  Index        r50, r49, r28
  Const        r35, 2.0
  Move         r51, r35
  CallV        r52, r50, 1, r51
  Div          r53, r48, r52
  DivFloat     r54, r16, r44
  SubFloat     r55, r53, r54
  Return       r55

  // fun fibonacciWord(n: int): string {
func fibonacciWord (regs=11)
  // var a = "1"
  Const        r1, "1"
  Move         r2, r1
  // var b = "0"
  Const        r3, "0"
  Move         r4, r3
  // var i = 1
  Const        r5, 1
  Move         r6, r5
L1:
  // while i < n {
  Less         r7, r6, r0
  JumpIfFalse  r7, L0
  // let tmp = b
  Move         r8, r4
  // b = b + a
  Add          r9, r4, r2
  Move         r4, r9
  // a = tmp
  Move         r2, r8
  // i = i + 1
  Const        r5, 1
  AddInt       r10, r6, r5
  Move         r6, r10
  // while i < n {
  Jump         L1
L0:
  // return a
  Return       r2

  // fun main() {
func main (regs=62)
  // print(pad("N",3) + pad("Length",9) + "  Entropy      Word")
  Const        r2, "N"
  Move         r0, r2
  Const        r3, 3
  Move         r1, r3
  Call2        r4, pad, r0, r1
  Const        r7, "Length"
  Move         r5, r7
  Const        r8, 9
  Move         r6, r8
  Call2        r9, pad, r5, r6
  Add          r10, r4, r9
  Const        r11, "  Entropy      Word"
  Add          r12, r10, r11
  Print        r12
  // var n = 1
  Const        r13, 1
  Move         r14, r13
L1:
  // while n < 10 {
  Const        r15, 10
  LessInt      r16, r14, r15
  JumpIfFalse  r16, L0
  // let s = fibonacciWord(n)
  Move         r17, r14
  Call         r18, fibonacciWord, r17
  Move         r19, r18
  // print(pad(str(n),3) + pad(str(len(s)),9) + "  " + fmt(entropy(s)) + "  " + s)
  Str          r22, r14
  Move         r20, r22
  Const        r3, 3
  Move         r21, r3
  Call2        r23, pad, r20, r21
  Len          r26, r19
  Str          r27, r26
  Move         r24, r27
  Const        r8, 9
  Move         r25, r8
  Call2        r28, pad, r24, r25
  Add          r29, r23, r28
  Const        r30, "  "
  Add          r31, r29, r30
  Move         r33, r19
  Call         r34, entropy, r33
  Move         r32, r34
  Call         r35, fmt, r32
  Add          r36, r31, r35
  Const        r30, "  "
  Add          r37, r36, r30
  Add          r38, r37, r19
  Print        r38
  // n = n + 1
  Const        r13, 1
  AddInt       r39, r14, r13
  Move         r14, r39
  // while n < 10 {
  Jump         L1
L0:
  // while n <= 37 {
  Const        r40, 37
  LessEqInt    r41, r14, r40
  JumpIfFalse  r41, L2
  // let s = fibonacciWord(n)
  Move         r42, r14
  Call         r43, fibonacciWord, r42
  Move         r44, r43
  // print(pad(str(n),3) + pad(str(len(s)),9) + "  " + fmt(entropy(s)))
  Str          r47, r14
  Move         r45, r47
  Const        r3, 3
  Move         r46, r3
  Call2        r48, pad, r45, r46
  Len          r51, r44
  Str          r52, r51
  Move         r49, r52
  Const        r8, 9
  Move         r50, r8
  Call2        r53, pad, r49, r50
  Add          r54, r48, r53
  Const        r30, "  "
  Add          r55, r54, r30
  Move         r57, r44
  Call         r58, entropy, r57
  Move         r56, r58
  Call         r59, fmt, r56
  Add          r60, r55, r59
  Print        r60
  // n = n + 1
  Const        r13, 1
  AddInt       r61, r14, r13
  Move         r14, r61
  // while n <= 37 {
  Jump         L0
L2:
  Return       r0

  // fun pad(s: string, w: int): string { var t=s; while len(t)<w { t=" "+t }; return t }
func pad (regs=7)
  // fun pad(s: string, w: int): string { var t=s; while len(t)<w { t=" "+t }; return t }
  Move         r2, r0
L1:
  Len          r3, r2
  Less         r4, r3, r1
  JumpIfFalse  r4, L0
  Const        r5, " "
  Add          r6, r5, r2
  Move         r2, r6
  Jump         L1
L0:
  Return       r2

  // fun fmt(x: float): string { var y = floorf(x*100000000.0+0.5)/100000000.0; var s=str(y); var dot=indexOf(s,"."); if dot==0-1 { s=s+".00000000" } else { var d=len(s)-dot-1; while d<8 { s=s+"0"; d=d+1 } } return s }
func fmt (regs=31)
  // fun fmt(x: float): string { var y = floorf(x*100000000.0+0.5)/100000000.0; var s=str(y); var dot=indexOf(s,"."); if dot==0-1 { s=s+".00000000" } else { var d=len(s)-dot-1; while d<8 { s=s+"0"; d=d+1 } } return s }
  Const        r2, 100000000.0
  MulFloat     r3, r0, r2
  Const        r4, 0.5
  AddFloat     r5, r3, r4
  Move         r1, r5
  Call         r6, floorf, r1
  Const        r2, 100000000.0
  DivFloat     r7, r6, r2
  Move         r8, r7
  Str          r9, r8
  Move         r10, r9
  Move         r11, r10
  Const        r13, "."
  Move         r12, r13
  Call2        r14, indexOf, r11, r12
  Move         r15, r14
  Const        r16, 0
  Const        r17, 1
  SubInt       r18, r16, r17
  Equal        r19, r15, r18
  JumpIfFalse  r19, L0
  Const        r20, ".00000000"
  Add          r21, r10, r20
  Move         r10, r21
  Jump         L1
L0:
  Len          r22, r10
  Sub          r23, r22, r15
  Const        r17, 1
  Sub          r24, r23, r17
  Move         r25, r24
L2:
  Const        r26, 8
  Less         r27, r25, r26
  JumpIfFalse  r27, L1
  Const        r28, "0"
  Add          r29, r10, r28
  Move         r10, r29
  Const        r17, 1
  Add          r30, r25, r17
  Move         r25, r30
  Jump         L2
L1:
  Return       r10

  // fun floorf(x: float): float { let y = x as int; return y as float }
func floorf (regs=4)
  // fun floorf(x: float): float { let y = x as int; return y as float }
  Cast         r1, r0, int
  Move         r2, r1
  Cast         r3, r2, float
  Return       r3

  // fun indexOf(s: string, ch: string): int { var i=0; while i<len(s){ if substring(s,i,i+1)==ch {return i} i=i+1 } return 0-1 }
func indexOf (regs=12)
  // fun indexOf(s: string, ch: string): int { var i=0; while i<len(s){ if substring(s,i,i+1)==ch {return i} i=i+1 } return 0-1 }
  Const        r2, 0
  Move         r3, r2
L2:
  Len          r4, r0
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  Const        r6, 1
  AddInt       r7, r3, r6
  Slice        r8, r0, r3, r7
  Equal        r9, r8, r1
  JumpIfFalse  r9, L1
  Return       r3
L1:
  Const        r6, 1
  AddInt       r10, r3, r6
  Move         r3, r10
  Jump         L2
L0:
  Const        r2, 0
  Const        r6, 1
  SubInt       r11, r2, r6
  Return       r11
