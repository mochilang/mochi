func main (regs=69)
  // print("expI tests")
  Const        r0, "expI tests"
  Print        r0
  // printExpI(2, 10)
  Const        r3, 2
  Move         r1, r3
  Const        r4, 10
  Move         r2, r4
  Call2        r5, printExpI, r1, r2
  // printExpI(2, -10)
  Const        r3, 2
  Move         r6, r3
  Const        r4, 10
  NegInt       r8, r4
  Move         r7, r8
  Call2        r9, printExpI, r6, r7
  // printExpI(-2, 10)
  Const        r3, 2
  NegInt       r12, r3
  Move         r10, r12
  Const        r4, 10
  Move         r11, r4
  Call2        r13, printExpI, r10, r11
  // printExpI(-2, 11)
  Const        r3, 2
  NegInt       r16, r3
  Move         r14, r16
  Const        r17, 11
  Move         r15, r17
  Call2        r18, printExpI, r14, r15
  // printExpI(11, 0)
  Const        r17, 11
  Move         r19, r17
  Const        r21, 0
  Move         r20, r21
  Call2        r22, printExpI, r19, r20
  // print("overflow undetected")
  Const        r23, "overflow undetected"
  Print        r23
  // printExpI(10, 10)
  Const        r4, 10
  Move         r24, r4
  Const        r4, 10
  Move         r25, r4
  Call2        r26, printExpI, r24, r25
  // print("\nexpF tests:")
  Const        r27, "\nexpF tests:"
  Print        r27
  // printExpF(2.0, 10)
  Const        r30, 2.0
  Move         r28, r30
  Const        r4, 10
  Move         r29, r4
  Call2        r31, printExpF, r28, r29
  // printExpF(2.0, -10)
  Const        r30, 2.0
  Move         r32, r30
  Const        r4, 10
  NegInt       r34, r4
  Move         r33, r34
  Call2        r35, printExpF, r32, r33
  // printExpF(-2.0, 10)
  Const        r30, 2.0
  NegFloat     r38, r30
  Move         r36, r38
  Const        r4, 10
  Move         r37, r4
  Call2        r39, printExpF, r36, r37
  // printExpF(-2.0, 11)
  Const        r30, 2.0
  NegFloat     r42, r30
  Move         r40, r42
  Const        r17, 11
  Move         r41, r17
  Call2        r43, printExpF, r40, r41
  // printExpF(11.0, 0)
  Const        r46, 11.0
  Move         r44, r46
  Const        r21, 0
  Move         r45, r21
  Call2        r47, printExpF, r44, r45
  // print("disallowed in expI, allowed here")
  Const        r48, "disallowed in expI, allowed here"
  Print        r48
  // printExpF(0.0, -1)
  Const        r51, 0.0
  Move         r49, r51
  Const        r52, 1
  Const        r53, -1
  Move         r50, r53
  Call2        r54, printExpF, r49, r50
  // print("other interesting cases for 32 bit float type")
  Const        r55, "other interesting cases for 32 bit float type"
  Print        r55
  // printExpF(10.0, 39)
  Const        r58, 10.0
  Move         r56, r58
  Const        r59, 39
  Move         r57, r59
  Call2        r60, printExpF, r56, r57
  // printExpF(10.0, -39)
  Const        r58, 10.0
  Move         r61, r58
  Const        r59, 39
  NegInt       r63, r59
  Move         r62, r63
  Call2        r64, printExpF, r61, r62
  // printExpF(-10.0, 39)
  Const        r58, 10.0
  NegFloat     r67, r58
  Move         r65, r67
  Const        r59, 39
  Move         r66, r59
  Call2        r68, printExpF, r65, r66
  Return       r0

  // fun printExpI(b: int, p: int) {
func printExpI (regs=25)
  // if p < 0 {
  Const        r2, 0
  Less         r3, r1, r2
  JumpIfFalse  r3, L0
  // print(str(b) + "^" + str(p) + ": negative power not allowed")
  Str          r4, r0
  Const        r5, "^"
  Add          r6, r4, r5
  Str          r7, r1
  Add          r8, r6, r7
  Const        r9, ": negative power not allowed"
  Add          r10, r8, r9
  Print        r10
  // return
  Return       r0
L0:
  // var r = 1
  Const        r11, 1
  Move         r12, r11
  // var i = 1
  Const        r11, 1
  Move         r13, r11
L2:
  // while i <= p {
  LessEq       r14, r13, r1
  JumpIfFalse  r14, L1
  // r = r * b
  Mul          r15, r12, r0
  Move         r12, r15
  // i = i + 1
  Const        r11, 1
  AddInt       r16, r13, r11
  Move         r13, r16
  // while i <= p {
  Jump         L2
L1:
  // print(str(b) + "^" + str(p) + ": " + str(r))
  Str          r17, r0
  Const        r5, "^"
  Add          r18, r17, r5
  Str          r19, r1
  Add          r20, r18, r19
  Const        r21, ": "
  Add          r22, r20, r21
  Str          r23, r12
  Add          r24, r22, r23
  Print        r24
  Return       r0

  // fun expF(b: float, p: int): float {
func expF (regs=20)
  // var neg = false
  Const        r2, false
  Move         r3, r2
  // if p < 0 {
  Const        r4, 0
  Less         r5, r1, r4
  JumpIfFalse  r5, L0
  // neg = true
  Const        r6, true
  Move         r3, r6
  // p = -p
  Neg          r7, r1
  Move         r1, r7
L0:
  // var r = 1.0
  Const        r8, 1.0
  Move         r9, r8
  // var pow = b
  Move         r10, r0
L3:
  // while p > 0 {
  Const        r4, 0
  Less         r11, r4, r1
  JumpIfFalse  r11, L1
  // if p % 2 == 1 { r = r * pow }
  Const        r12, 2
  Mod          r13, r1, r12
  Const        r14, 1
  Equal        r15, r13, r14
  JumpIfFalse  r15, L2
  MulFloat     r16, r9, r10
  Move         r9, r16
L2:
  // pow = pow * pow
  Mul          r17, r10, r10
  Move         r10, r17
  // p = p / 2
  Const        r12, 2
  Div          r18, r1, r12
  Move         r1, r18
  // while p > 0 {
  Jump         L3
L1:
  // if neg { r = 1.0 / r }
  JumpIfFalse  r3, L4
  Const        r8, 1.0
  DivFloat     r19, r8, r9
  Move         r9, r19
L4:
  // return r
  Return       r9

  // fun printExpF(b: float, p: int) {
func printExpF (regs=25)
  // if b == 0.0 && p < 0 {
  Const        r2, 0
  Less         r3, r1, r2
  Const        r4, 0.0
  EqualFloat   r5, r0, r4
  Move         r6, r5
  JumpIfFalse  r6, L0
  Move         r6, r3
L0:
  JumpIfFalse  r6, L1
  // print(str(b) + "^" + str(p) + ": +Inf")
  Str          r7, r0
  Const        r8, "^"
  Add          r9, r7, r8
  Str          r10, r1
  Add          r11, r9, r10
  Const        r12, ": +Inf"
  Add          r13, r11, r12
  Print        r13
  // return
  Return       r0
L1:
  // print(str(b) + "^" + str(p) + ": " + str(expF(b, p)))
  Str          r14, r0
  Const        r8, "^"
  Add          r15, r14, r8
  Str          r16, r1
  Add          r17, r15, r16
  Const        r18, ": "
  Add          r19, r17, r18
  Move         r20, r0
  Move         r21, r1
  Call2        r22, expF, r20, r21
  Str          r23, r22
  Add          r24, r19, r23
  Print        r24
  Return       r0
