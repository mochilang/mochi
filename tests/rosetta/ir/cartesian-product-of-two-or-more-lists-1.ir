func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun cart2(a: list<int>, b: list<int>): list<list<int>> {
func cart2 (regs=24)
  // var p: list<list<int>> = []
  Const        r2, []
  Move         r3, r2
  // for x in a {
  IterPrep     r4, r0
  Len          r5, r4
  Const        r6, 0
L3:
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L0
  Index        r8, r4, r6
  Move         r9, r8
  // for y in b {
  IterPrep     r10, r1
  Len          r11, r10
  Const        r12, 0
L2:
  LessInt      r13, r12, r11
  JumpIfFalse  r13, L1
  Index        r14, r10, r12
  Move         r15, r14
  // p = append(p, [x, y])
  Move         r16, r9
  Move         r17, r15
  MakeList     r18, 2, r16
  Append       r19, r3, r18
  Move         r3, r19
  // for y in b {
  Const        r20, 1
  AddInt       r21, r12, r20
  Move         r12, r21
  Jump         L2
L1:
  // for x in a {
  Const        r22, 1
  AddInt       r23, r6, r22
  Move         r6, r23
  Jump         L3
L0:
  // return p
  Return       r3

  // fun llStr(lst: list<list<int>>): string {
func llStr (regs=31)
  // var s = "["
  Const        r1, "["
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L5:
  // while i < len(lst) {
  Len          r5, r0
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // var row = lst[i]
  Index        r7, r0, r4
  Move         r8, r7
  // s = s + "["
  Const        r1, "["
  Add          r9, r2, r1
  Move         r2, r9
  // var j = 0
  Const        r3, 0
  Move         r10, r3
L3:
  // while j < len(row) {
  Len          r11, r8
  LessInt      r12, r10, r11
  JumpIfFalse  r12, L1
  // s = s + str(row[j])
  Index        r13, r8, r10
  Str          r14, r13
  Add          r15, r2, r14
  Move         r2, r15
  // if j < len(row) - 1 { s = s + " " }
  Len          r16, r8
  Const        r17, 1
  SubInt       r18, r16, r17
  LessInt      r19, r10, r18
  JumpIfFalse  r19, L2
  Const        r20, " "
  Add          r21, r2, r20
  Move         r2, r21
L2:
  // j = j + 1
  Const        r17, 1
  AddInt       r22, r10, r17
  Move         r10, r22
  // while j < len(row) {
  Jump         L3
L1:
  // s = s + "]"
  Const        r23, "]"
  Add          r24, r2, r23
  Move         r2, r24
  // if i < len(lst) - 1 { s = s + " " }
  Len          r25, r0
  Const        r17, 1
  SubInt       r26, r25, r17
  LessInt      r27, r4, r26
  JumpIfFalse  r27, L4
  Const        r20, " "
  Add          r28, r2, r20
  Move         r2, r28
L4:
  // i = i + 1
  Const        r17, 1
  AddInt       r29, r4, r17
  Move         r4, r29
  // while i < len(lst) {
  Jump         L5
L0:
  // s = s + "]"
  Const        r23, "]"
  Add          r30, r2, r23
  Move         r2, r30
  // return s
  Return       r2

  // fun main() {
func main (regs=27)
  // print(llStr(cart2([1,2], [3,4])))
  Const        r3, [1, 2]
  Move         r1, r3
  Const        r4, [3, 4]
  Move         r2, r4
  Call2        r5, cart2, r1, r2
  Move         r0, r5
  Call         r6, llStr, r0
  Print        r6
  // print(llStr(cart2([3,4], [1,2])))
  Const        r10, [3, 4]
  Move         r8, r10
  Const        r11, [1, 2]
  Move         r9, r11
  Call2        r12, cart2, r8, r9
  Move         r7, r12
  Call         r13, llStr, r7
  Print        r13
  // print(llStr(cart2([1,2], [])))
  Const        r17, [1, 2]
  Move         r15, r17
  Const        r18, []
  Move         r16, r18
  Call2        r19, cart2, r15, r16
  Move         r14, r19
  Call         r20, llStr, r14
  Print        r20
  // print(llStr(cart2([], [1,2])))
  Const        r18, []
  Move         r22, r18
  Const        r24, [1, 2]
  Move         r23, r24
  Call2        r25, cart2, r22, r23
  Move         r21, r25
  Call         r26, llStr, r21
  Print        r26
  Return       r0
