func main (regs=40)
  // let rows = 5
  Const        r4, 5
  Move         r0, r4
  SetGlobal    0,0,0,0
  // let cols = 5
  Const        r4, 5
  Move         r1, r4
  SetGlobal    1,1,0,0
  // var board: list<list<int>> = []
  Const        r5, []
  Move         r2, r5
  SetGlobal    2,2,0,0
  // var r = 0
  Const        r6, 0
  Move         r3, r6
  SetGlobal    3,3,0,0
L3:
  // while r < rows {
  LessInt      r7, r3, r0
  JumpIfFalse  r7, L0
  // var row: list<int> = []
  Const        r5, []
  Move         r8, r5
  // var c = 0
  Const        r6, 0
  Move         r9, r6
L2:
  // while c < cols {
  LessInt      r10, r9, r1
  JumpIfFalse  r10, L1
  // row = append(row, (r+c)%2)
  AddInt       r11, r3, r9
  Const        r12, 2
  ModInt       r13, r11, r12
  Append       r14, r8, r13
  Move         r8, r14
  // c = c + 1
  Const        r15, 1
  AddInt       r16, r9, r15
  Move         r9, r16
  // while c < cols {
  Jump         L2
L1:
  // board = append(board, row)
  Append       r17, r2, r8
  Move         r2, r17
  SetGlobal    2,2,0,0
  // r = r + 1
  Const        r15, 1
  AddInt       r18, r3, r15
  Move         r3, r18
  SetGlobal    3,3,0,0
  // while r < rows {
  Jump         L3
L0:
  // print("start")
  Const        r19, "start"
  Print        r19
  // for row in board { print(str(row)) }
  IterPrep     r20, r2
  Len          r21, r20
  Const        r22, 0
L5:
  LessInt      r23, r22, r21
  JumpIfFalse  r23, L4
  Index        r24, r20, r22
  Move         r25, r24
  Str          r26, r25
  Print        r26
  Const        r27, 1
  AddInt       r28, r22, r27
  Move         r22, r28
  Jump         L5
L4:
  // board = step(board)
  Move         r29, r2
  Call         r30, step, r29
  Move         r2, r30
  SetGlobal    2,2,0,0
  // print("after")
  Const        r31, "after"
  Print        r31
  // for row in board { print(str(row)) }
  IterPrep     r32, r2
  Len          r33, r32
  Const        r34, 0
L7:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L6
  Index        r36, r32, r34
  Move         r25, r36
  Str          r37, r25
  Print        r37
  Const        r38, 1
  AddInt       r39, r34, r38
  Move         r34, r39
  Jump         L7
L6:
  Return       r0

  // fun step(b: list<list<int>>): list<list<int>> {
func step (regs=17)
  // var nb = b
  Move         r5, r4
  // var r = 0
  Const        r6, 0
  Move         r3, r6
  SetGlobal    3,3,0,0
L3:
  // while r < rows {
  Less         r7, r3, r0
  JumpIfFalse  r7, L0
  // var c = 0
  Const        r6, 0
  Move         r8, r6
L2:
  // while c < cols {
  Less         r9, r8, r1
  JumpIfFalse  r9, L1
  // nb[r][c] = 1 - b[r][c]
  Index        r10, r5, r3
  Const        r11, 1
  Index        r12, r4, r3
  Index        r13, r12, r8
  Sub          r14, r11, r13
  SetIndex     r10, r8, r14
  // c = c + 1
  Const        r11, 1
  AddInt       r15, r8, r11
  Move         r8, r15
  // while c < cols {
  Jump         L2
L1:
  // r = r + 1
  Const        r11, 1
  AddInt       r16, r3, r11
  Move         r3, r16
  SetGlobal    3,3,0,0
  // while r < rows {
  Jump         L3
L0:
  // return nb
  Return       r5
