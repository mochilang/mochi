func __main (regs=18)
  // var lines = ["alpha", "beta", "gamma"]
  Const        r3, ["alpha", "beta", "gamma"]
  Move         r0, r3
  SetGlobal    0,0,0,0
  // var blocks = text2block(lines)
  Move         r4, r0
  Call         r5, text2block, r4
  Move         r1, r5
  SetGlobal    1,1,0,0
  // var outLines = block2text(blocks)
  Move         r6, r1
  Call         r7, block2text, r6
  Move         r2, r7
  SetGlobal    2,2,0,0
  // for l in outLines {
  IterPrep     r8, r2
  Len          r9, r8
  Const        r10, 0
L2:
  LessInt      r11, r10, r9
  JumpIfFalse  r11, L0
  Index        r12, r8, r10
  Move         r13, r12
  // if l != "" {
  Const        r14, ""
  NotEqual     r15, r13, r14
  JumpIfFalse  r15, L1
  // print(l)
  Print        r13
L1:
  // for l in outLines {
  Const        r16, 1
  AddInt       r17, r10, r16
  Move         r10, r17
  Jump         L2
L0:
  Return       r0

  // fun repeat(s: string, n: int): string {
func repeat (regs=13)
  // var out = ""
  Const        r5, ""
  Move         r6, r5
  // var i = 0
  Const        r7, 0
  Move         r8, r7
L1:
  // while i < n {
  Less         r9, r8, r4
  JumpIfFalse  r9, L0
  // out = out + s
  Add          r10, r6, r3
  Move         r6, r10
  // i = i + 1
  Const        r11, 1
  AddInt       r12, r8, r11
  Move         r8, r12
  // while i < n {
  Jump         L1
L0:
  // return out
  Return       r6

  // fun trimRightSpace(s: string): string {
func trimRightSpace (regs=22)
  // var i = len(s) - 1
  Len          r4, r3
  Const        r5, 1
  SubInt       r6, r4, r5
  Move         r7, r6
L2:
  // while i >= 0 && s[i:i+1] == " " {
  Const        r8, 0
  LessEqInt    r9, r8, r7
  Move         r10, r7
  Const        r5, 1
  AddInt       r12, r7, r5
  Move         r11, r12
  Slice        r13, r3, r10, r11
  Const        r14, " "
  Equal        r15, r13, r14
  Move         r16, r9
  JumpIfFalse  r16, L0
  Move         r16, r15
L0:
  JumpIfFalse  r16, L1
  // i = i - 1
  Const        r5, 1
  SubInt       r17, r7, r5
  Move         r7, r17
  // while i >= 0 && s[i:i+1] == " " {
  Jump         L2
L1:
  // return s[:i+1]
  Const        r18, nil
  Const        r5, 1
  AddInt       r20, r7, r5
  Move         r19, r20
  Slice        r21, r3, r18, r19
  Return       r21

  // fun block2text(block: list<string>): list<string> {
func block2text (regs=17)
  // var out: list<string> = []
  Const        r4, []
  Move         r5, r4
  // for b in block {
  IterPrep     r6, r3
  Len          r7, r6
  Const        r8, 0
L1:
  LessInt      r9, r8, r7
  JumpIfFalse  r9, L0
  Index        r10, r6, r8
  Move         r11, r10
  // out = append(out, trimRightSpace(b))
  Move         r12, r11
  Call         r13, trimRightSpace, r12
  Append       r14, r5, r13
  Move         r5, r14
  // for b in block {
  Const        r15, 1
  AddInt       r16, r8, r15
  Move         r8, r16
  Jump         L1
L0:
  // return out
  Return       r5

  // fun text2block(lines: list<string>): list<string> {
func text2block (regs=47)
  // var out: list<string> = []
  Const        r4, []
  Move         r5, r4
  // var count = 0
  Const        r6, 0
  Move         r7, r6
  // for line in lines {
  IterPrep     r8, r3
  Len          r9, r8
  Const        r10, 0
L3:
  LessInt      r11, r10, r9
  JumpIfFalse  r11, L0
  Index        r12, r8, r10
  Move         r13, r12
  // var s = line
  Move         r14, r13
  // let le = len(s)
  Len          r15, r14
  Move         r16, r15
  // if le > 64 {
  Const        r17, 64
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L1
  // s = s[:64]
  Const        r19, nil
  Const        r17, 64
  Move         r20, r17
  Slice        r21, r14, r19, r20
  Move         r14, r21
  // if le > 64 {
  Jump         L2
L1:
  // } else if le < 64 {
  Const        r17, 64
  LessInt      r22, r16, r17
  JumpIfFalse  r22, L2
  // s = s + repeat(" ", 64 - le)
  Const        r25, " "
  Move         r23, r25
  Const        r17, 64
  SubInt       r26, r17, r16
  Move         r24, r26
  Call2        r27, repeat, r23, r24
  Add          r28, r14, r27
  Move         r14, r28
L2:
  // out = append(out, s)
  Append       r29, r5, r14
  Move         r5, r29
  // count = count + 1
  Const        r30, 1
  AddInt       r31, r7, r30
  Move         r7, r31
  // for line in lines {
  Const        r32, 1
  AddInt       r33, r10, r32
  Move         r10, r33
  Jump         L3
L0:
  // if count % 16 != 0 {
  Const        r34, 16
  ModInt       r35, r7, r34
  Const        r6, 0
  NotEqual     r36, r35, r6
  JumpIfFalse  r36, L4
  // let pad = 16 - count % 16
  Const        r34, 16
  Const        r34, 16
  ModInt       r37, r7, r34
  SubInt       r38, r34, r37
  Move         r39, r38
  // var i = 0
  Const        r6, 0
  Move         r40, r6
L5:
  // while i < pad {
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L4
  // out = append(out, repeat(" ", 64))
  Const        r25, " "
  Move         r42, r25
  Const        r17, 64
  Move         r43, r17
  Call2        r44, repeat, r42, r43
  Append       r45, r5, r44
  Move         r5, r45
  // i = i + 1
  Const        r30, 1
  AddInt       r46, r40, r30
  Move         r40, r46
  // while i < pad {
  Jump         L5
L4:
  // return out
  Return       r5
