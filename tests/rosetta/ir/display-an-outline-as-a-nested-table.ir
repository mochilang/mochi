func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun split(s: string, sep: string): list<string> {
func split (regs=28)
  // var out: list<string> = []
  Const        r2, []
  Move         r3, r2
  // var cur = ""
  Const        r4, ""
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L3:
  // while i < len(s) {
  Len          r8, r0
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // if i + len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
  Len          r10, r1
  AddInt       r11, r7, r10
  Len          r12, r0
  LessEqInt    r13, r11, r12
  Len          r14, r1
  AddInt       r15, r7, r14
  Slice        r16, r0, r7, r15
  Equal        r17, r16, r1
  Move         r18, r13
  JumpIfFalse  r18, L1
  Move         r18, r17
L1:
  JumpIfFalse  r18, L2
  // out = append(out, cur)
  Append       r19, r3, r5
  Move         r3, r19
  // cur = ""
  Const        r4, ""
  Move         r5, r4
  // i = i + len(sep)
  Len          r20, r1
  AddInt       r21, r7, r20
  Move         r7, r21
  // if i + len(sep) <= len(s) && substring(s, i, i+len(sep)) == sep {
  Jump         L3
L2:
  // cur = cur + substring(s, i, i+1)
  Const        r22, 1
  AddInt       r23, r7, r22
  Slice        r24, r0, r7, r23
  Add          r25, r5, r24
  Move         r5, r25
  // i = i + 1
  Const        r22, 1
  AddInt       r26, r7, r22
  Move         r7, r26
  // while i < len(s) {
  Jump         L3
L0:
  // out = append(out, cur)
  Append       r27, r3, r5
  Move         r3, r27
  // return out
  Return       r3

  // fun join(xs: list<string>, sep: string): string {
func join (regs=14)
  // var res = ""
  Const        r2, ""
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L2:
  // while i < len(xs) {
  Len          r6, r0
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L0
  // if i > 0 { res = res + sep }
  Const        r4, 0
  LessInt      r8, r4, r5
  JumpIfFalse  r8, L1
  Add          r9, r3, r1
  Move         r3, r9
L1:
  // res = res + xs[i]
  Index        r10, r0, r5
  Add          r11, r3, r10
  Move         r3, r11
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r5, r12
  Move         r5, r13
  // while i < len(xs) {
  Jump         L2
L0:
  // return res
  Return       r3

  // fun trimLeftSpaces(s: string): string {
func trimLeftSpaces (regs=18)
  // var i = 0
  Const        r1, 0
  Move         r2, r1
L2:
  // while i < len(s) && s[i:i+1] == " " { i = i + 1 }
  Len          r3, r0
  LessInt      r4, r2, r3
  Move         r5, r2
  Const        r7, 1
  AddInt       r8, r2, r7
  Move         r6, r8
  Slice        r9, r0, r5, r6
  Const        r10, " "
  Equal        r11, r9, r10
  Move         r12, r4
  JumpIfFalse  r12, L0
  Move         r12, r11
L0:
  JumpIfFalse  r12, L1
  Const        r7, 1
  AddInt       r13, r2, r7
  Move         r2, r13
  Jump         L2
L1:
  // return s[i:len(s)]
  Move         r14, r2
  Len          r16, r0
  Move         r15, r16
  Slice        r17, r0, r14, r15
  Return       r17

  // fun makeIndent(outline: string, tab: int): list<map<string, any>> {
func makeIndent (regs=33)
  // let lines = split(outline, "\n")
  Move         r2, r0
  Const        r4, "\n"
  Move         r3, r4
  Call2        r5, split, r2, r3
  Move         r6, r5
  // var nodes: list<map<string, any>> = []
  Const        r7, []
  Move         r8, r7
  // for line in lines {
  IterPrep     r9, r6
  Len          r10, r9
  Const        r11, 0
L1:
  LessInt      r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r13, r9, r11
  Move         r14, r13
  // let line2 = trimLeftSpaces(line)
  Move         r15, r14
  Call         r16, trimLeftSpaces, r15
  Move         r17, r16
  // let level = (len(line) - len(line2)) / tab
  Len          r18, r14
  Len          r19, r17
  SubInt       r20, r18, r19
  Div          r21, r20, r1
  Move         r22, r21
  // nodes = append(nodes, {"level": level, "name": line2})
  Const        r23, "level"
  Const        r24, "name"
  Move         r25, r23
  Move         r26, r22
  Move         r27, r24
  Move         r28, r17
  MakeMap      r29, 2, r25
  Append       r30, r8, r29
  Move         r8, r30
  // for line in lines {
  Const        r31, 1
  AddInt       r32, r11, r31
  Move         r11, r32
  Jump         L1
L0:
  // return nodes
  Return       r8

  // fun toNest(nodes: list<map<string, any>>, start: int, level: int, n: map<string, any>) {
func toNest (regs=43)
  // if level == 0 { n["name"] = nodes[0]["name"] }
  Const        r4, 0
  Equal        r5, r2, r4
  JumpIfFalse  r5, L0
  Const        r4, 0
  Index        r6, r0, r4
  Const        r7, "name"
  Index        r8, r6, r7
  Const        r7, "name"
  SetIndex     r3, r7, r8
L0:
  // var i = start + 1
  Const        r9, 1
  Add          r10, r1, r9
  Move         r11, r10
L4:
  // while i < len(nodes) {
  Len          r12, r0
  Less         r13, r11, r12
  JumpIfFalse  r13, L1
  // let node = nodes[i]
  Index        r14, r0, r11
  Move         r15, r14
  // let lev = node["level"] as int
  Const        r16, "level"
  Index        r17, r15, r16
  Cast         r18, r17, int
  Move         r19, r18
  // if lev == level + 1 {
  Const        r9, 1
  Add          r20, r2, r9
  Equal        r21, r19, r20
  JumpIfFalse  r21, L2
  // var child = {"name": node["name"], "children": []}
  Const        r7, "name"
  Const        r7, "name"
  Index        r22, r15, r7
  Const        r23, "children"
  Const        r24, []
  Move         r25, r7
  Move         r26, r22
  Move         r27, r23
  Move         r28, r24
  MakeMap      r29, 2, r25
  Move         r30, r29
  // toNest(nodes, i, level+1, child)
  Move         r31, r0
  Move         r32, r11
  Const        r9, 1
  Add          r35, r2, r9
  Move         r33, r35
  Move         r34, r30
  Call         r36, toNest, r31, r32, r33, r34
  // var cs = n["children"] as list<any>
  Const        r23, "children"
  Index        r37, r3, r23
  Cast         r38, r37, [any]
  Move         r39, r38
  // cs = append(cs, child)
  Append       r40, r39, r30
  Move         r39, r40
  // n["children"] = cs
  Const        r23, "children"
  SetIndex     r3, r23, r39
  // if lev == level + 1 {
  Jump         L3
L2:
  // } else if lev <= level {
  LessEq       r41, r19, r2
  JumpIfFalse  r41, L3
  // return
  Return       r0
L3:
  // i = i + 1
  Const        r9, 1
  Add          r42, r11, r9
  Move         r11, r42
  // while i < len(nodes) {
  Jump         L4
L1:
  Return       r0

  // fun countLeaves(n: map<string, any>): int {
func countLeaves (regs=22)
  // let kids = n["children"] as list<any>
  Const        r1, "children"
  Index        r2, r0, r1
  Cast         r3, r2, [any]
  Move         r4, r3
  // if len(kids) == 0 { return 1 }
  Len          r5, r4
  Const        r6, 0
  EqualInt     r7, r5, r6
  JumpIfFalse  r7, L0
  Const        r8, 1
  Return       r8
L0:
  // var total = 0
  Const        r6, 0
  Move         r9, r6
  // for k in kids { total = total + countLeaves(k as map<string, any>) }
  IterPrep     r10, r4
  Len          r11, r10
  Const        r12, 0
L2:
  LessInt      r13, r12, r11
  JumpIfFalse  r13, L1
  Index        r14, r10, r12
  Move         r15, r14
  Cast         r17, r15, {string: any}
  Move         r16, r17
  Call         r18, countLeaves, r16
  Add          r19, r9, r18
  Move         r9, r19
  Const        r20, 1
  AddInt       r21, r12, r20
  Move         r12, r21
  Jump         L2
L1:
  // return total
  Return       r9

  // fun nodesByDepth(root: map<string, any>, depth: int): list<list<map<string, any>>> {
func nodesByDepth (regs=36)
  // var levels: list<list<map<string, any>>> = []
  Const        r2, []
  Move         r3, r2
  // var current: list<map<string, any>> = [root]
  Move         r4, r0
  MakeList     r5, 1, r4
  Move         r6, r5
  // var d = 0
  Const        r7, 0
  Move         r8, r7
L5:
  // while d < depth {
  Less         r9, r8, r1
  JumpIfFalse  r9, L0
  // levels = append(levels, current)
  Append       r10, r3, r6
  Move         r3, r10
  // var next: list<map<string, any>> = []
  Const        r2, []
  Move         r11, r2
  // for n in current {
  IterPrep     r12, r6
  Len          r13, r12
  Const        r14, 0
L4:
  LessInt      r15, r14, r13
  JumpIfFalse  r15, L1
  Index        r16, r12, r14
  Move         r17, r16
  // let kids = n["children"] as list<any>
  Const        r18, "children"
  Index        r19, r17, r18
  Cast         r20, r19, [any]
  Move         r21, r20
  // for k in kids { next = append(next, k as map<string, any>) }
  IterPrep     r22, r21
  Len          r23, r22
  Const        r24, 0
L3:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L2
  Index        r26, r22, r24
  Move         r27, r26
  Cast         r28, r27, {string: any}
  Append       r29, r11, r28
  Move         r11, r29
  Const        r30, 1
  AddInt       r31, r24, r30
  Move         r24, r31
  Jump         L3
L2:
  // for n in current {
  Const        r32, 1
  AddInt       r33, r14, r32
  Move         r14, r33
  Jump         L4
L1:
  // current = next
  Move         r6, r11
  // d = d + 1
  Const        r34, 1
  AddInt       r35, r8, r34
  Move         r8, r35
  // while d < depth {
  Jump         L5
L0:
  // return levels
  Return       r3

  // fun toMarkup(n: map<string, any>, cols: list<string>, depth: int): string {
func toMarkup (regs=79)
  // var lines: list<string> = []
  Const        r3, []
  Move         r4, r3
  // lines = append(lines, "{| class=\"wikitable\" style=\"text-align: center;\"")
  Const        r5, "{| class=\"wikitable\" style=\"text-align: center;\""
  Append       r6, r4, r5
  Move         r4, r6
  // let l1 = "|-"
  Const        r7, "|-"
  Move         r8, r7
  // lines = append(lines, l1)
  Append       r9, r4, r8
  Move         r4, r9
  // let span = countLeaves(n)
  Move         r10, r0
  Call         r11, countLeaves, r10
  Move         r12, r11
  // lines = append(lines, "| style=\"background: " + cols[0] + " \" colSpan=" + str(span) + " | " + (n["name"] as string))
  Const        r13, "| style=\"background: "
  Const        r14, 0
  Index        r15, r1, r14
  Add          r16, r13, r15
  Const        r17, " \" colSpan="
  Add          r18, r16, r17
  Str          r19, r12
  Add          r20, r18, r19
  Const        r21, " | "
  Add          r22, r20, r21
  Const        r23, "name"
  Index        r24, r0, r23
  Cast         r25, r24, string
  Add          r26, r22, r25
  Append       r27, r4, r26
  Move         r4, r27
  // lines = append(lines, l1)
  Append       r28, r4, r8
  Move         r4, r28
  // let lvls = nodesByDepth(n, depth)
  Move         r29, r0
  Move         r30, r2
  Call2        r31, nodesByDepth, r29, r30
  Move         r32, r31
  // var lvl = 1
  Const        r33, 1
  Move         r34, r33
L7:
  // while lvl < depth {
  Less         r35, r34, r2
  JumpIfFalse  r35, L0
  // let nodes = lvls[lvl]
  Index        r36, r32, r34
  Move         r37, r36
  // if len(nodes) == 0 {
  Len          r38, r37
  Const        r14, 0
  EqualInt     r39, r38, r14
  JumpIfFalse  r39, L1
  // lines = append(lines, "|  |")
  Const        r40, "|  |"
  Append       r41, r4, r40
  Move         r4, r41
  // if len(nodes) == 0 {
  Jump         L2
L1:
  // var idx = 0
  Const        r14, 0
  Move         r42, r14
L5:
  // while idx < len(nodes) {
  Len          r43, r37
  LessInt      r44, r42, r43
  JumpIfFalse  r44, L2
  // let node = nodes[idx]
  Index        r45, r37, r42
  Move         r46, r45
  // span = countLeaves(node)
  Move         r47, r46
  Call         r48, countLeaves, r47
  Move         r12, r48
  // var col = lvl
  Move         r49, r34
  // if lvl == 1 { col = idx + 1 }
  Const        r33, 1
  EqualInt     r50, r34, r33
  JumpIfFalse  r50, L3
  Const        r33, 1
  AddInt       r51, r42, r33
  Move         r49, r51
L3:
  // if col >= len(cols) { col = len(cols) - 1 }
  Len          r52, r1
  LessEqInt    r53, r52, r49
  JumpIfFalse  r53, L4
  Len          r54, r1
  Const        r33, 1
  SubInt       r55, r54, r33
  Move         r49, r55
L4:
  // let cell = "| style=\"background: " + cols[col] + " \" colspan=" + str(span) + " | " + (node["name"] as string)
  Const        r13, "| style=\"background: "
  Index        r56, r1, r49
  Add          r57, r13, r56
  Const        r58, " \" colspan="
  Add          r59, r57, r58
  Str          r60, r12
  Add          r61, r59, r60
  Const        r21, " | "
  Add          r62, r61, r21
  Const        r23, "name"
  Index        r63, r46, r23
  Cast         r64, r63, string
  Add          r65, r62, r64
  Move         r66, r65
  // lines = append(lines, cell)
  Append       r67, r4, r66
  Move         r4, r67
  // idx = idx + 1
  Const        r33, 1
  AddInt       r68, r42, r33
  Move         r42, r68
  // while idx < len(nodes) {
  Jump         L5
L2:
  // if lvl < depth - 1 { lines = append(lines, l1) }
  Const        r33, 1
  Sub          r69, r2, r33
  Less         r70, r34, r69
  JumpIfFalse  r70, L6
  Append       r71, r4, r8
  Move         r4, r71
L6:
  // lvl = lvl + 1
  Const        r33, 1
  AddInt       r72, r34, r33
  Move         r34, r72
  // while lvl < depth {
  Jump         L7
L0:
  // lines = append(lines, "|}")
  Const        r73, "|}"
  Append       r74, r4, r73
  Move         r4, r74
  // return join(lines, "\n")
  Move         r75, r4
  Const        r77, "\n"
  Move         r76, r77
  Call2        r78, join, r75, r76
  Return       r78

  // fun main() {
func main (regs=98)
  // let outline = "Display an outline as a nested table.\n" +
  Const        r0, "Display an outline as a nested table.\n"
  // "    Parse the outline to a tree,\n" +
  Const        r1, "    Parse the outline to a tree,\n"
  // let outline = "Display an outline as a nested table.\n" +
  Add          r2, r0, r1
  // "        measuring the indent of each line,\n" +
  Const        r3, "        measuring the indent of each line,\n"
  // "    Parse the outline to a tree,\n" +
  Add          r4, r2, r3
  // "        translating the indentation to a nested structure,\n" +
  Const        r5, "        translating the indentation to a nested structure,\n"
  // "        measuring the indent of each line,\n" +
  Add          r6, r4, r5
  // "        and padding the tree to even depth.\n" +
  Const        r7, "        and padding the tree to even depth.\n"
  // "        translating the indentation to a nested structure,\n" +
  Add          r8, r6, r7
  // "    count the leaves descending from each node,\n" +
  Const        r9, "    count the leaves descending from each node,\n"
  // "        and padding the tree to even depth.\n" +
  Add          r10, r8, r9
  // "        defining the width of a leaf as 1,\n" +
  Const        r11, "        defining the width of a leaf as 1,\n"
  // "    count the leaves descending from each node,\n" +
  Add          r12, r10, r11
  // "        and the width of a parent node as a sum.\n" +
  Const        r13, "        and the width of a parent node as a sum.\n"
  // "        defining the width of a leaf as 1,\n" +
  Add          r14, r12, r13
  // "            (The sum of the widths of its children)\n" +
  Const        r15, "            (The sum of the widths of its children)\n"
  // "        and the width of a parent node as a sum.\n" +
  Add          r16, r14, r15
  // "    and write out a table with 'colspan' values\n" +
  Const        r17, "    and write out a table with 'colspan' values\n"
  // "            (The sum of the widths of its children)\n" +
  Add          r18, r16, r17
  // "        either as a wiki table,\n" +
  Const        r19, "        either as a wiki table,\n"
  // "    and write out a table with 'colspan' values\n" +
  Add          r20, r18, r19
  // "        or as HTML."
  Const        r21, "        or as HTML."
  // "        either as a wiki table,\n" +
  Add          r22, r20, r21
  // let outline = "Display an outline as a nested table.\n" +
  Move         r23, r22
  // let yellow = "#ffffe6;"
  Const        r24, "#ffffe6;"
  Move         r25, r24
  // let orange = "#ffebd2;"
  Const        r26, "#ffebd2;"
  Move         r27, r26
  // let green = "#f0fff0;"
  Const        r28, "#f0fff0;"
  Move         r29, r28
  // let blue = "#e6ffff;"
  Const        r30, "#e6ffff;"
  Move         r31, r30
  // let pink = "#ffeeff;"
  Const        r32, "#ffeeff;"
  Move         r33, r32
  // let cols = [yellow, orange, green, blue, pink]
  Move         r34, r25
  Move         r35, r27
  Move         r36, r29
  Move         r37, r31
  Move         r38, r33
  MakeList     r39, 5, r34
  Move         r40, r39
  // let nodes = makeIndent(outline, 4)
  Move         r41, r23
  Const        r43, 4
  Move         r42, r43
  Call2        r44, makeIndent, r41, r42
  Move         r45, r44
  // var n = {"name": "", "children": []}
  Const        r46, {"children": [], "name": ""}
  Move         r47, r46
  // toNest(nodes, 0, 0, n)
  Move         r48, r45
  Const        r52, 0
  Move         r49, r52
  Const        r52, 0
  Move         r50, r52
  Move         r51, r47
  Call         r53, toNest, r48, r49, r50, r51
  // print(toMarkup(n, cols, 4))
  Move         r54, r47
  Move         r55, r40
  Const        r43, 4
  Move         r56, r43
  Call         r57, toMarkup, r54, r55, r56
  Print        r57
  // print("\n")
  Const        r58, "\n"
  Print        r58
  // let outline2 = "Display an outline as a nested table.\n" +
  Const        r0, "Display an outline as a nested table.\n"
  // "    Parse the outline to a tree,\n" +
  Const        r1, "    Parse the outline to a tree,\n"
  // let outline2 = "Display an outline as a nested table.\n" +
  Add          r59, r0, r1
  // "        measuring the indent of each line,\n" +
  Const        r3, "        measuring the indent of each line,\n"
  // "    Parse the outline to a tree,\n" +
  Add          r60, r59, r3
  // "        translating the indentation to a nested structure,\n" +
  Const        r5, "        translating the indentation to a nested structure,\n"
  // "        measuring the indent of each line,\n" +
  Add          r61, r60, r5
  // "        and padding the tree to even depth.\n" +
  Const        r7, "        and padding the tree to even depth.\n"
  // "        translating the indentation to a nested structure,\n" +
  Add          r62, r61, r7
  // "    count the leaves descending from each node,\n" +
  Const        r9, "    count the leaves descending from each node,\n"
  // "        and padding the tree to even depth.\n" +
  Add          r63, r62, r9
  // "        defining the width of a leaf as 1,\n" +
  Const        r11, "        defining the width of a leaf as 1,\n"
  // "    count the leaves descending from each node,\n" +
  Add          r64, r63, r11
  // "        and the width of a parent node as a sum.\n" +
  Const        r13, "        and the width of a parent node as a sum.\n"
  // "        defining the width of a leaf as 1,\n" +
  Add          r65, r64, r13
  // "            (The sum of the widths of its children)\n" +
  Const        r15, "            (The sum of the widths of its children)\n"
  // "        and the width of a parent node as a sum.\n" +
  Add          r66, r65, r15
  // "            Propagating the sums upward as necessary.\n" +
  Const        r67, "            Propagating the sums upward as necessary.\n"
  // "            (The sum of the widths of its children)\n" +
  Add          r68, r66, r67
  // "    and write out a table with 'colspan' values\n" +
  Const        r17, "    and write out a table with 'colspan' values\n"
  // "            Propagating the sums upward as necessary.\n" +
  Add          r69, r68, r17
  // "        either as a wiki table,\n" +
  Const        r19, "        either as a wiki table,\n"
  // "    and write out a table with 'colspan' values\n" +
  Add          r70, r69, r19
  // "        or as HTML.\n" +
  Const        r71, "        or as HTML.\n"
  // "        either as a wiki table,\n" +
  Add          r72, r70, r71
  // "    Optionally add color to the nodes."
  Const        r73, "    Optionally add color to the nodes."
  // "        or as HTML.\n" +
  Add          r74, r72, r73
  // let outline2 = "Display an outline as a nested table.\n" +
  Move         r75, r74
  // let cols2 = [blue, yellow, orange, green, pink]
  Move         r76, r31
  Move         r77, r25
  Move         r78, r27
  Move         r79, r29
  Move         r80, r33
  MakeList     r81, 5, r76
  Move         r82, r81
  // let nodes2 = makeIndent(outline2, 4)
  Move         r83, r75
  Const        r43, 4
  Move         r84, r43
  Call2        r85, makeIndent, r83, r84
  Move         r86, r85
  // var n2 = {"name": "", "children": []}
  Const        r87, {"children": [], "name": ""}
  Move         r88, r87
  // toNest(nodes2, 0, 0, n2)
  Move         r89, r86
  Const        r52, 0
  Move         r90, r52
  Const        r52, 0
  Move         r91, r52
  Move         r92, r88
  Call         r93, toNest, r89, r90, r91, r92
  // print(toMarkup(n2, cols2, 4))
  Move         r94, r88
  Move         r95, r82
  Const        r43, 4
  Move         r96, r43
  Call         r97, toMarkup, r94, r95, r96
  Print        r97
  Return       r0
