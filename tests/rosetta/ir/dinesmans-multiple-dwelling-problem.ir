func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun absInt(n: int): int {
func absInt (regs=4)
  // if n < 0 { return -n }
  Const        r1, 0
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Neg          r3, r0
  Return       r3
L0:
  // return n
  Return       r0

  // fun main() {
func main (regs=66)
  // var b = 1
  Const        r0, 1
  Move         r1, r0
L14:
  // while b <= 5 {
  Const        r2, 5
  LessEqInt    r3, r1, r2
  JumpIfFalse  r3, L0
  // if b != 5 {
  Const        r2, 5
  NotEqual     r4, r1, r2
  JumpIfFalse  r4, L1
  // var c = 1
  Const        r0, 1
  Move         r5, r0
L13:
  // while c <= 5 {
  Const        r2, 5
  LessEqInt    r6, r5, r2
  JumpIfFalse  r6, L1
  // if c != 1 && c != b {
  Const        r0, 1
  NotEqual     r7, r5, r0
  NotEqual     r8, r5, r1
  Move         r9, r7
  JumpIfFalse  r9, L2
  Move         r9, r8
L2:
  JumpIfFalse  r9, L3
  // var f = 1
  Const        r0, 1
  Move         r10, r0
L12:
  // while f <= 5 {
  Const        r2, 5
  LessEqInt    r11, r10, r2
  JumpIfFalse  r11, L3
  // if f != 1 && f != 5 && f != b && f != c && absInt(f - c) > 1 {
  SubInt       r13, r10, r5
  Move         r12, r13
  Call         r14, absInt, r12
  Const        r0, 1
  Less         r15, r0, r14
  Const        r0, 1
  NotEqual     r16, r10, r0
  Const        r2, 5
  NotEqual     r17, r10, r2
  NotEqual     r18, r10, r1
  NotEqual     r19, r10, r5
  Move         r20, r16
  JumpIfFalse  r20, L4
  Move         r20, r17
  JumpIfFalse  r20, L4
  Move         r20, r18
  JumpIfFalse  r20, L4
  Move         r20, r19
  JumpIfFalse  r20, L4
  Move         r20, r15
L4:
  JumpIfFalse  r20, L5
  // var m = 1
  Const        r0, 1
  Move         r21, r0
L11:
  // while m <= 5 {
  Const        r2, 5
  LessEqInt    r22, r21, r2
  JumpIfFalse  r22, L5
  // if m != b && m != c && m != f && m > c {
  LessInt      r23, r5, r21
  NotEqual     r24, r21, r1
  NotEqual     r25, r21, r5
  NotEqual     r26, r21, r10
  Move         r27, r24
  JumpIfFalse  r27, L6
  Move         r27, r25
  JumpIfFalse  r27, L6
  Move         r27, r26
  JumpIfFalse  r27, L6
  Move         r27, r23
L6:
  JumpIfFalse  r27, L7
  // var s = 1
  Const        r0, 1
  Move         r28, r0
L10:
  // while s <= 5 {
  Const        r2, 5
  LessEqInt    r29, r28, r2
  JumpIfFalse  r29, L7
  // if s != b && s != c && s != f && s != m && absInt(s - f) > 1 {
  SubInt       r31, r28, r10
  Move         r30, r31
  Call         r32, absInt, r30
  Const        r0, 1
  Less         r33, r0, r32
  NotEqual     r34, r28, r1
  NotEqual     r35, r28, r5
  NotEqual     r36, r28, r10
  NotEqual     r37, r28, r21
  Move         r38, r34
  JumpIfFalse  r38, L8
  Move         r38, r35
  JumpIfFalse  r38, L8
  Move         r38, r36
  JumpIfFalse  r38, L8
  Move         r38, r37
  JumpIfFalse  r38, L8
  Move         r38, r33
L8:
  JumpIfFalse  r38, L9
  // print("Baker in " + str(b) + ", Cooper in " + str(c) + ", Fletcher in " + str(f) + ", Miller in " + str(m) + ", Smith in " + str(s) + ".")
  Const        r39, "Baker in "
  Str          r40, r1
  Add          r41, r39, r40
  Const        r42, ", Cooper in "
  Add          r43, r41, r42
  Str          r44, r5
  Add          r45, r43, r44
  Const        r46, ", Fletcher in "
  Add          r47, r45, r46
  Str          r48, r10
  Add          r49, r47, r48
  Const        r50, ", Miller in "
  Add          r51, r49, r50
  Str          r52, r21
  Add          r53, r51, r52
  Const        r54, ", Smith in "
  Add          r55, r53, r54
  Str          r56, r28
  Add          r57, r55, r56
  Const        r58, "."
  Add          r59, r57, r58
  Print        r59
  // return
  Return       r0
L9:
  // s = s + 1
  Const        r0, 1
  AddInt       r60, r28, r0
  Move         r28, r60
  // while s <= 5 {
  Jump         L10
L7:
  // m = m + 1
  Const        r0, 1
  AddInt       r61, r21, r0
  Move         r21, r61
  // while m <= 5 {
  Jump         L11
L5:
  // f = f + 1
  Const        r0, 1
  AddInt       r62, r10, r0
  Move         r10, r62
  // while f <= 5 {
  Jump         L12
L3:
  // c = c + 1
  Const        r0, 1
  AddInt       r63, r5, r0
  Move         r5, r63
  // while c <= 5 {
  Jump         L13
L1:
  // b = b + 1
  Const        r0, 1
  AddInt       r64, r1, r0
  Move         r1, r64
  // while b <= 5 {
  Jump         L14
L0:
  // print("No solution found.")
  Const        r65, "No solution found."
  Print        r65
  Return       r0
