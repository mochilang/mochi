func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun sqrtApprox(x: float): float {
func sqrtApprox (regs=14)
  // if x <= 0.0 { return 0.0 }
  Const        r1, 0.0
  LessEqFloat  r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r1, 0.0
  Return       r1
L0:
  // var guess = x
  Move         r3, r0
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L2:
  // while i < 20 {
  Const        r6, 20
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L1
  // guess = (guess + x / guess) / 2.0
  Div          r8, r0, r3
  Add          r9, r3, r8
  Const        r10, 2.0
  DivFloat     r11, r9, r10
  Move         r3, r11
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r5, r12
  Move         r5, r13
  // while i < 20 {
  Jump         L2
L1:
  // return guess
  Return       r3

  // fun powf(base: float, exp: int): float {
func powf (regs=10)
  // var result = 1.0
  Const        r2, 1.0
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L1:
  // while i < exp {
  Less         r6, r5, r1
  JumpIfFalse  r6, L0
  // result = result * base
  MulFloat     r7, r3, r0
  Move         r3, r7
  // i = i + 1
  Const        r8, 1
  AddInt       r9, r5, r8
  Move         r5, r9
  // while i < exp {
  Jump         L1
L0:
  // return result
  Return       r3

  // fun normalize(v: V3): V3 {
func normalize (regs=33)
  // let len = sqrtApprox(v.x*v.x + v.y*v.y + v.z*v.z)
  Const        r2, "x"
  Index        r3, r0, r2
  Const        r2, "x"
  Index        r4, r0, r2
  Mul          r5, r3, r4
  Const        r6, "y"
  Index        r7, r0, r6
  Const        r6, "y"
  Index        r8, r0, r6
  Mul          r9, r7, r8
  Const        r10, "z"
  Index        r11, r0, r10
  Const        r10, "z"
  Index        r12, r0, r10
  Mul          r13, r11, r12
  Add          r14, r5, r9
  Add          r15, r14, r13
  Move         r1, r15
  Call         r16, sqrtApprox, r1
  Move         r17, r16
  // return V3{ x: v.x/len, y: v.y/len, z: v.z/len }
  Const        r2, "x"
  Index        r18, r0, r2
  Div          r19, r18, r17
  Const        r6, "y"
  Index        r20, r0, r6
  Div          r21, r20, r17
  Const        r10, "z"
  Index        r22, r0, r10
  Div          r23, r22, r17
  Const        r24, "__name"
  Const        r25, "V3"
  Const        r26, "x"
  Move         r27, r19
  Const        r28, "y"
  Move         r29, r21
  Const        r30, "z"
  Move         r31, r23
  MakeMap      r32, 4, r24
  Return       r32

  // fun dot(a: V3, b: V3): float {
func dot (regs=20)
  // let d = a.x*b.x + a.y*b.y + a.z*b.z
  Const        r2, "x"
  Index        r3, r0, r2
  Const        r2, "x"
  Index        r4, r1, r2
  Mul          r5, r3, r4
  Const        r6, "y"
  Index        r7, r0, r6
  Const        r6, "y"
  Index        r8, r1, r6
  Mul          r9, r7, r8
  Const        r10, "z"
  Index        r11, r0, r10
  Const        r10, "z"
  Index        r12, r1, r10
  Mul          r13, r11, r12
  Add          r14, r5, r9
  Add          r15, r14, r13
  Move         r16, r15
  // if d < 0.0 { return -d }
  Const        r17, 0.0
  LessFloat    r18, r16, r17
  JumpIfFalse  r18, L0
  Neg          r19, r16
  Return       r19
L0:
  // return 0.0
  Const        r17, 0.0
  Return       r17

  // fun drawSphere(r: int, k: int, ambient: float, light: V3, shades: string) {
func drawSphere (regs=84)
  // var i = -r
  Neg          r5, r0
  Move         r6, r5
L7:
  // while i <= r {
  LessEq       r7, r6, r0
  JumpIfFalse  r7, L0
  // let x = (i as float) + 0.5
  Cast         r8, r6, float
  Const        r9, 0.5
  AddFloat     r10, r8, r9
  Move         r11, r10
  // var line = ""
  Const        r12, ""
  Move         r13, r12
  // var j = -(2*r)
  Const        r14, 2
  Mul          r15, r14, r0
  Neg          r16, r15
  Move         r17, r16
L6:
  // while j <= 2*r {
  Const        r14, 2
  Mul          r18, r14, r0
  LessEq       r19, r17, r18
  JumpIfFalse  r19, L1
  // let y = (j as float)/2.0 + 0.5
  Cast         r20, r17, float
  Const        r21, 2.0
  DivFloat     r22, r20, r21
  Const        r9, 0.5
  AddFloat     r23, r22, r9
  Move         r24, r23
  // if x*x + y*y <= (r as float)*(r as float) {
  MulFloat     r25, r11, r11
  MulFloat     r26, r24, r24
  Cast         r27, r0, float
  Cast         r28, r0, float
  Mul          r29, r27, r28
  AddFloat     r30, r25, r26
  LessEqFloat  r31, r30, r29
  JumpIfFalse  r31, L2
  // var zsq = (r as float)*(r as float) - x*x - y*y
  Cast         r32, r0, float
  Cast         r33, r0, float
  Mul          r34, r32, r33
  MulFloat     r35, r11, r11
  MulFloat     r36, r24, r24
  SubFloat     r37, r34, r35
  SubFloat     r38, r37, r36
  Move         r39, r38
  // var vec = normalize(V3{ x: x, y: y, z: sqrtApprox(zsq) })
  Move         r41, r39
  Call         r42, sqrtApprox, r41
  Const        r43, "__name"
  Const        r44, "V3"
  Const        r45, "x"
  Move         r46, r11
  Const        r47, "y"
  Move         r48, r24
  Const        r49, "z"
  Move         r50, r42
  MakeMap      r51, 4, r43
  Move         r40, r51
  Call         r52, normalize, r40
  Move         r53, r52
  // var b = powf(dot(light, vec), k) + ambient
  Move         r56, r3
  Move         r57, r53
  Call2        r58, dot, r56, r57
  Move         r54, r58
  Move         r55, r1
  Call2        r59, powf, r54, r55
  Add          r60, r59, r2
  Move         r61, r60
  // var intensity = ((1.0 - b) * ((len(shades) as float) - 1.0)) as int
  Const        r62, 1.0
  SubFloat     r63, r62, r61
  Len          r64, r4
  Cast         r65, r64, float
  Const        r62, 1.0
  SubFloat     r66, r65, r62
  MulFloat     r67, r63, r66
  Cast         r68, r67, int
  Move         r69, r68
  // if intensity < 0 { intensity = 0 }
  Const        r70, 0
  Less         r71, r69, r70
  JumpIfFalse  r71, L3
  Const        r70, 0
  Move         r69, r70
L3:
  // if intensity >= len(shades) { intensity = len(shades) - 1 }
  Len          r72, r4
  LessEqInt    r73, r72, r69
  JumpIfFalse  r73, L4
  Len          r74, r4
  Const        r75, 1
  SubInt       r76, r74, r75
  Move         r69, r76
L4:
  // line = line + substring(shades, intensity, intensity + 1)
  Const        r75, 1
  AddInt       r77, r69, r75
  Slice        r78, r4, r69, r77
  Add          r79, r13, r78
  Move         r13, r79
  // if x*x + y*y <= (r as float)*(r as float) {
  Jump         L5
L2:
  // line = line + " "
  Const        r80, " "
  Add          r81, r13, r80
  Move         r13, r81
L5:
  // j = j + 1
  Const        r75, 1
  Add          r82, r17, r75
  Move         r17, r82
  // while j <= 2*r {
  Jump         L6
L1:
  // print(line)
  Print        r13
  // i = i + 1
  Const        r75, 1
  Add          r83, r6, r75
  Move         r6, r83
  // while i <= r {
  Jump         L7
L0:
  Return       r0

  // fun main() {
func main (regs=35)
  // let shades = ".:!*oe&#%@"
  Const        r0, ".:!*oe&#%@"
  Move         r1, r0
  // var light = normalize(V3{ x: 30.0, y: 30.0, z: -50.0 })
  Const        r3, 30.0
  Const        r3, 30.0
  Const        r4, 50.0
  Const        r5, -50.0
  Const        r6, "__name"
  Const        r7, "V3"
  Const        r8, "x"
  Move         r9, r3
  Const        r10, "y"
  Move         r11, r3
  Const        r12, "z"
  Move         r13, r5
  MakeMap      r14, 4, r6
  Move         r2, r14
  Call         r15, normalize, r2
  Move         r16, r15
  // drawSphere(20, 4, 0.1, light, shades)
  Const        r22, 20
  Move         r17, r22
  Const        r23, 4
  Move         r18, r23
  Const        r24, 0.1
  Move         r19, r24
  Move         r20, r16
  Move         r21, r1
  Call         r25, drawSphere, r17, r18, r19, r20, r21
  // drawSphere(10, 2, 0.4, light, shades)
  Const        r31, 10
  Move         r26, r31
  Const        r32, 2
  Move         r27, r32
  Const        r33, 0.4
  Move         r28, r33
  Move         r29, r16
  Move         r30, r1
  Call         r34, drawSphere, r26, r27, r28, r29, r30
  Return       r0
