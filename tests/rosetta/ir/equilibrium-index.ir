func main (regs=6)
  // var seed = now() % 2147483647
  Now          r1
  Const        r2, 2147483647
  ModInt       r3, r1, r2
  Cast         r4, r3, bigint
  Move         r0, r4
  SetGlobal    0,0,0,0
  // main()
  Call         r5, main, 
  Return       r0

  // fun randN(n: int): int {
func randN (regs=9)
  // seed = (seed * 1664525 + 1013904223) % 2147483647
  Const        r2, 1664525
  Mul          r3, r0, r2
  Const        r4, 1013904223
  Add          r5, r3, r4
  Const        r6, 2147483647
  Mod          r7, r5, r6
  Move         r0, r7
  SetGlobal    0,0,0,0
  // return seed % n
  Mod          r8, r0, r1
  Return       r8

  // fun eqIndices(xs: list<int>): list<int> {
func eqIndices (regs=23)
  // var r = 0
  Const        r2, 0
  Move         r3, r2
  // var i = 0
  Const        r2, 0
  Move         r4, r2
L1:
  // while i < len(xs) {
  Len          r5, r1
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // r = r + xs[i]
  Index        r7, r1, r4
  Add          r8, r3, r7
  Move         r3, r8
  // i = i + 1
  Const        r9, 1
  AddInt       r10, r4, r9
  Move         r4, r10
  // while i < len(xs) {
  Jump         L1
L0:
  // var l = 0
  Const        r2, 0
  Move         r11, r2
  // var eq: list<int> = []
  Const        r12, []
  Move         r13, r12
  // i = 0
  Const        r2, 0
  Move         r4, r2
L4:
  // while i < len(xs) {
  Len          r14, r1
  LessInt      r15, r4, r14
  JumpIfFalse  r15, L2
  // r = r - xs[i]
  Index        r16, r1, r4
  Sub          r17, r3, r16
  Move         r3, r17
  // if l == r {
  Equal        r18, r11, r3
  JumpIfFalse  r18, L3
  // eq = append(eq, i)
  Append       r19, r13, r4
  Move         r13, r19
L3:
  // l = l + xs[i]
  Index        r20, r1, r4
  Add          r21, r11, r20
  Move         r11, r21
  // i = i + 1
  Const        r9, 1
  AddInt       r22, r4, r9
  Move         r4, r22
  // while i < len(xs) {
  Jump         L4
L2:
  // return eq
  Return       r13

  // fun main() {
func main (regs=25)
  // print(eqIndices([-7, 1, 5, 2, -4, 3, 0]))
  Const        r2, [-7, 1, 5, 2, -4, 3, 0]
  Move         r1, r2
  Call         r3, eqIndices, r1
  Print        r3
  // var verylong: list<int> = []
  Const        r4, []
  Move         r5, r4
  // var i = 0
  Const        r6, 0
  Move         r7, r6
L1:
  // while i < 10000 {
  Const        r8, 10000
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // seed = (seed * 1664525 + 1013904223) % 2147483647
  Const        r10, 1664525
  Mul          r11, r0, r10
  Const        r12, 1013904223
  Add          r13, r11, r12
  Const        r14, 2147483647
  Mod          r15, r13, r14
  Move         r0, r15
  SetGlobal    0,0,0,0
  // verylong = append(verylong, seed % 1001 - 500)
  Const        r16, 1001
  Mod          r17, r0, r16
  Const        r18, 500
  Sub          r19, r17, r18
  Append       r20, r5, r19
  Move         r5, r20
  // i = i + 1
  Const        r21, 1
  AddInt       r22, r7, r21
  Move         r7, r22
  // while i < 10000 {
  Jump         L1
L0:
  // print(eqIndices(verylong))
  Move         r23, r5
  Call         r24, eqIndices, r23
  Print        r24
  Return       r0
