func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun bigrat(a: int, b: int): bigrat { return (a as bigrat) / (b as bigrat) }
func bigrat (regs=5)
  // fun bigrat(a: int, b: int): bigrat { return (a as bigrat) / (b as bigrat) }
  Cast         r2, r0, bigrat
  Cast         r3, r1, bigrat
  Div          r4, r2, r3
  Return       r4

  // fun calkinWilf(n: int): list<bigrat> {
func calkinWilf (regs=33)
  // var seq: list<bigrat> = []
  Const        r1, []
  Move         r2, r1
  // seq = append(seq, bigrat(1,1))
  Const        r5, 1
  Move         r3, r5
  Const        r5, 1
  Move         r4, r5
  Call2        r6, bigrat, r3, r4
  Append       r7, r2, r6
  Move         r2, r7
  // var i = 1
  Const        r5, 1
  Move         r8, r5
L1:
  // while i < n {
  Less         r9, r8, r0
  JumpIfFalse  r9, L0
  // var prev = seq[i-1]
  Const        r5, 1
  SubInt       r10, r8, r5
  Index        r11, r2, r10
  Move         r12, r11
  // let a = num(prev)
  Move         r14, r13
  // let b = denom(prev)
  Move         r16, r15
  // let f = a / b
  Div          r17, r14, r16
  Move         r18, r17
  // var t: bigrat = bigrat(f,1)
  Move         r19, r18
  Const        r5, 1
  Move         r20, r5
  Call2        r21, bigrat, r19, r20
  Move         r22, r21
  // t = t * (2 as bigrat)
  Const        r23, 2
  Cast         r24, r23, bigrat
  Mul          r25, r22, r24
  Move         r22, r25
  // t = t - prev
  Sub          r26, r22, r12
  Move         r22, r26
  // t = t + (1 as bigrat)
  Const        r5, 1
  Cast         r27, r5, bigrat
  Add          r28, r22, r27
  Move         r22, r28
  // t = (1 as bigrat) / t
  Const        r5, 1
  Cast         r29, r5, bigrat
  Div          r30, r29, r22
  Move         r22, r30
  // seq = append(seq, t)
  Append       r31, r2, r22
  Move         r2, r31
  // i = i + 1
  Const        r5, 1
  AddInt       r32, r8, r5
  Move         r8, r32
  // while i < n {
  Jump         L1
L0:
  // return seq
  Return       r2

  // fun toContinued(r: bigrat): list<int> {
func toContinued (regs=27)
  // var a = num(r)
  Move         r2, r1
  // var b = denom(r)
  Move         r4, r3
  // var res: list<int> = []
  Const        r5, []
  Move         r6, r5
L0:
  // while true {
  Const        r7, true
  // res = append(res, (a / b) as int)
  Div          r8, r2, r4
  Cast         r9, r8, int
  Append       r10, r6, r9
  Move         r6, r10
  // let t = a % b
  Mod          r11, r2, r4
  Move         r12, r11
  // a = b
  Move         r2, r4
  // b = t
  Move         r4, r12
  // if a == 1 { break }
  Const        r13, 1
  Equal        r14, r2, r13
  JumpIfFalse  r14, L0
  // if len(res) % 2 == 0 {
  Len          r15, r6
  Const        r16, 2
  ModInt       r17, r15, r16
  Const        r18, 0
  EqualInt     r19, r17, r18
  JumpIfFalse  r19, L1
  // res[len(res)-1] = res[len(res)-1] - 1
  Len          r20, r6
  Const        r13, 1
  SubInt       r21, r20, r13
  Index        r22, r6, r21
  Const        r13, 1
  Sub          r23, r22, r13
  Len          r24, r6
  Const        r13, 1
  SubInt       r25, r24, r13
  SetIndex     r6, r25, r23
  // res = append(res, 1)
  Const        r13, 1
  Append       r26, r6, r13
  Move         r6, r26
L1:
  // return res
  Return       r6

  // fun termNumber(cf: list<int>): int {
func termNumber (regs=18)
  // var b = ""
  Const        r1, ""
  Move         r2, r1
  // var d = "1"
  Const        r3, "1"
  Move         r4, r3
  // for n in cf {
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
L3:
  LessInt      r8, r7, r6
  JumpIfFalse  r8, L0
  Index        r9, r5, r7
  Move         r10, r9
  // b = repeat(d, n) + b
  Add          r12, r11, r2
  Move         r2, r12
  // if d == "1" { d = "0" } else { d = "1" }
  Const        r3, "1"
  Equal        r13, r4, r3
  JumpIfFalse  r13, L1
  Const        r14, "0"
  Move         r4, r14
  Jump         L2
L1:
  Const        r3, "1"
  Move         r4, r3
L2:
  // for n in cf {
  Const        r15, 1
  AddInt       r16, r7, r15
  Move         r7, r16
  Jump         L3
L0:
  // return parseIntStr(b, 2)
  Return       r17

  // fun commatize(n: int): string {
func commatize (regs=37)
  // var s = str(n)
  Str          r1, r0
  Move         r2, r1
  // var out = ""
  Const        r3, ""
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
  // var cnt = 0
  Const        r5, 0
  Move         r7, r5
  // var neg = false
  Const        r8, false
  Move         r9, r8
  // if s[0:1] == "-" { neg = true; s = s[1:] }
  Const        r5, 0
  Move         r10, r5
  Const        r12, 1
  Move         r11, r12
  Slice        r13, r2, r10, r11
  Const        r14, "-"
  Equal        r15, r13, r14
  JumpIfFalse  r15, L0
  Const        r16, true
  Move         r9, r16
  Const        r12, 1
  Move         r17, r12
  Const        r18, nil
  Slice        r19, r2, r17, r18
  Move         r2, r19
L0:
  // i = len(s)-1
  Len          r20, r2
  Const        r12, 1
  SubInt       r21, r20, r12
  Move         r6, r21
L4:
  // while i >= 0 {
  Const        r5, 0
  LessEqInt    r22, r5, r6
  JumpIfFalse  r22, L1
  // out = s[i:i+1] + out
  Move         r23, r6
  Const        r12, 1
  AddInt       r25, r6, r12
  Move         r24, r25
  Slice        r26, r2, r23, r24
  Add          r27, r26, r4
  Move         r4, r27
  // cnt = cnt + 1
  Const        r12, 1
  AddInt       r28, r7, r12
  Move         r7, r28
  // if cnt == 3 && i != 0 { out = "," + out; cnt = 0 }
  Const        r29, 3
  EqualInt     r30, r7, r29
  Const        r5, 0
  NotEqual     r31, r6, r5
  Move         r32, r30
  JumpIfFalse  r32, L2
  Move         r32, r31
L2:
  JumpIfFalse  r32, L3
  Const        r33, ","
  Add          r34, r33, r4
  Move         r4, r34
  Const        r5, 0
  Move         r7, r5
L3:
  // i = i - 1
  Const        r12, 1
  SubInt       r35, r6, r12
  Move         r6, r35
  // while i >= 0 {
  Jump         L4
L1:
  // if neg { out = "-" + out }
  JumpIfFalse  r9, L5
  Const        r14, "-"
  Add          r36, r14, r4
  Move         r4, r36
L5:
  // return out
  Return       r4

  // fun main() {
func main (regs=58)
  // let cw = calkinWilf(20)
  Const        r1, 20
  Move         r0, r1
  Call         r2, calkinWilf, r0
  Move         r3, r2
  // print("The first 20 terms of the Calkin-Wilf sequnence are:")
  Const        r4, "The first 20 terms of the Calkin-Wilf sequnence are:"
  Print        r4
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L2:
  // while i < 20 {
  Const        r1, 20
  LessInt      r7, r6, r1
  JumpIfFalse  r7, L0
  // let r = cw[i]
  Index        r8, r3, r6
  Move         r9, r8
  // let s = str(num(r))
  Str          r11, r10
  Move         r12, r11
  // if denom(r) != 1 { s = s + "/" + str(denom(r)) }
  Const        r14, 1
  NotEqual     r15, r13, r14
  JumpIfFalse  r15, L1
  Const        r16, "/"
  Add          r17, r12, r16
  Str          r19, r18
  Add          r20, r17, r19
  Move         r12, r20
L1:
  // print((i+1 as int).padStart(2, " ") + ": " + s)
  Const        r14, 1
  AddInt       r21, r6, r14
  Const        r24, 2
  Move         r22, r24
  Const        r25, " "
  Move         r23, r25
  CallV        r26, r21, 2, r22
  Const        r27, ": "
  Add          r28, r26, r27
  Add          r29, r28, r12
  Print        r29
  // i = i + 1
  Const        r14, 1
  AddInt       r30, r6, r14
  Move         r6, r30
  // while i < 20 {
  Jump         L2
L0:
  // let r = bigrat(83116, 51639)
  Const        r33, 83116
  Move         r31, r33
  Const        r34, 51639
  Move         r32, r34
  Call2        r35, bigrat, r31, r32
  Move         r36, r35
  // let cf = toContinued(r)
  Move         r37, r36
  Call         r38, toContinued, r37
  Move         r39, r38
  // let tn = termNumber(cf)
  Move         r40, r39
  Call         r41, termNumber, r40
  Move         r42, r41
  // print("" + str(num(r)) + "/" + str(denom(r)) + " is the " + commatize(tn) + "th term of the sequence.")
  Const        r43, ""
  Str          r45, r44
  Add          r46, r43, r45
  Const        r16, "/"
  Add          r47, r46, r16
  Str          r49, r48
  Add          r50, r47, r49
  Const        r51, " is the "
  Add          r52, r50, r51
  Move         r53, r42
  Call         r54, commatize, r53
  Add          r55, r52, r54
  Const        r56, "th term of the sequence."
  Add          r57, r55, r56
  Print        r57
  Return       r0
