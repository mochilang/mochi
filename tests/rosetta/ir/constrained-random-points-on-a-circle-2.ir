func main (regs=104)
  // let nPts = 100
  Const        r14, 100
  Move         r0, r14
  SetGlobal    0,0,0,0
  // let rMin = 10
  Const        r15, 10
  Move         r1, r15
  SetGlobal    1,1,0,0
  // let rMax = 15
  Const        r16, 15
  Move         r2, r16
  SetGlobal    2,2,0,0
  // let span = rMax + 1 + rMax
  Const        r17, 1
  AddInt       r18, r2, r17
  AddInt       r19, r18, r2
  Cast         r20, r19, bigint
  Move         r3, r20
  SetGlobal    3,3,0,0
  // var poss: list<list<int>> = []
  Const        r21, []
  Move         r4, r21
  SetGlobal    4,4,0,0
  // let min2 = rMin * rMin
  Const        r22, 100
  Cast         r23, r22, bigint
  Move         r5, r23
  SetGlobal    5,5,0,0
  // let max2 = rMax * rMax
  Const        r24, 225
  Cast         r25, r24, bigint
  Move         r6, r25
  SetGlobal    6,6,0,0
  // var y = -rMax
  Const        r26, -15
  Move         r7, r26
  SetGlobal    7,7,0,0
L5:
  // while y <= rMax {
  LessEqInt    r27, r7, r2
  JumpIfFalse  r27, L0
  // var x = -rMax
  Const        r28, -15
  Move         r29, r28
L4:
  // while x <= rMax {
  LessEqInt    r30, r29, r2
  JumpIfFalse  r30, L1
  // let r2 = x * x + y * y
  MulInt       r31, r29, r29
  MulInt       r32, r7, r7
  AddInt       r33, r31, r32
  Move         r34, r33
  // if r2 >= min2 && r2 <= max2 {
  LessEq       r35, r5, r34
  LessEq       r36, r34, r6
  Move         r37, r35
  JumpIfFalse  r37, L2
  Move         r37, r36
L2:
  JumpIfFalse  r37, L3
  // poss = append(poss, [x, y])
  Move         r38, r29
  Move         r39, r7
  MakeList     r40, 2, r38
  Append       r41, r4, r40
  Move         r4, r41
  SetGlobal    4,4,0,0
L3:
  // x = x + 1
  Const        r17, 1
  AddInt       r42, r29, r17
  Move         r29, r42
  // while x <= rMax {
  Jump         L4
L1:
  // y = y + 1
  Const        r17, 1
  AddInt       r43, r7, r17
  Move         r7, r43
  SetGlobal    7,7,0,0
  // while y <= rMax {
  Jump         L5
L0:
  // print(str(len(poss)) + " possible points")
  Len          r44, r4
  Str          r45, r44
  Const        r46, " possible points"
  Add          r47, r45, r46
  Print        r47
  // var rows: list<list<string>> = []
  Const        r21, []
  Move         r8, r21
  SetGlobal    8,8,0,0
  // var r = 0
  Const        r48, 0
  Move         r9, r48
  SetGlobal    9,9,0,0
L9:
  // while r < span {
  Less         r49, r9, r3
  JumpIfFalse  r49, L6
  // var row: list<string> = []
  Const        r21, []
  Move         r50, r21
  // var c = 0
  Const        r48, 0
  Move         r51, r48
L8:
  // while c < span * 2 {
  Const        r52, 2
  Mul          r53, r3, r52
  Less         r54, r51, r53
  JumpIfFalse  r54, L7
  // row = append(row, " ")
  Const        r55, " "
  Append       r56, r50, r55
  Move         r50, r56
  // c = c + 1
  Const        r17, 1
  AddInt       r57, r51, r17
  Move         r51, r57
  // while c < span * 2 {
  Jump         L8
L7:
  // rows = append(rows, row)
  Append       r58, r8, r50
  Move         r8, r58
  SetGlobal    8,8,0,0
  // r = r + 1
  Const        r17, 1
  AddInt       r59, r9, r17
  Move         r9, r59
  SetGlobal    9,9,0,0
  // while r < span {
  Jump         L9
L6:
  // var u = 0
  Const        r48, 0
  Move         r10, r48
  SetGlobal    10,10,0,0
  // var seen: map<string, bool> = {}
  Const        r60, {}
  Move         r11, r60
  SetGlobal    11,11,0,0
  // var n = 0
  Const        r48, 0
  Move         r12, r48
  SetGlobal    12,12,0,0
L12:
  // while n < nPts {
  LessInt      r61, r12, r0
  JumpIfFalse  r61, L10
  // var i = now() % len(poss)
  Now          r62
  Len          r63, r4
  ModInt       r64, r62, r63
  Move         r65, r64
  // let x = poss[i][0]
  Index        r66, r4, r65
  Const        r48, 0
  Index        r67, r66, r48
  Move         r68, r67
  // let yy = poss[i][1]
  Index        r69, r4, r65
  Const        r17, 1
  Index        r70, r69, r17
  Move         r71, r70
  // let row = yy + rMax
  Add          r72, r71, r2
  Move         r73, r72
  // let col = (x + rMax) * 2
  Add          r74, r68, r2
  Const        r52, 2
  Mul          r75, r74, r52
  Move         r76, r75
  // rows[row][col] = "*"
  Index        r77, r8, r73
  Const        r78, "*"
  SetIndex     r77, r76, r78
  SetGlobal    8,8,0,0
  // let key = str(row) + "," + str(col)
  Str          r79, r73
  Const        r80, ","
  Add          r81, r79, r80
  Str          r82, r76
  Add          r83, r81, r82
  Move         r84, r83
  // if !seen[key] {
  Index        r85, r11, r84
  Not          r86, r85
  JumpIfFalse  r86, L11
  // seen[key] = true
  Const        r87, true
  SetIndex     r11, r84, r87
  SetGlobal    11,11,0,0
  // u = u + 1
  Const        r17, 1
  AddInt       r88, r10, r17
  Move         r10, r88
  SetGlobal    10,10,0,0
L11:
  // n = n + 1
  Const        r17, 1
  AddInt       r89, r12, r17
  Move         r12, r89
  SetGlobal    12,12,0,0
  // while n < nPts {
  Jump         L12
L10:
  // var i2 = 0
  Const        r48, 0
  Move         r13, r48
  SetGlobal    13,13,0,0
L16:
  // while i2 < span {
  Less         r90, r13, r3
  JumpIfFalse  r90, L13
  // var line = ""
  Const        r91, ""
  Move         r92, r91
  // var j = 0
  Const        r48, 0
  Move         r93, r48
L15:
  // while j < span * 2 {
  Const        r52, 2
  Mul          r94, r3, r52
  Less         r95, r93, r94
  JumpIfFalse  r95, L14
  // line = line + rows[i2][j]
  Index        r96, r8, r13
  Index        r97, r96, r93
  Add          r98, r92, r97
  Move         r92, r98
  // j = j + 1
  Const        r17, 1
  AddInt       r99, r93, r17
  Move         r93, r99
  // while j < span * 2 {
  Jump         L15
L14:
  // print(line)
  Print        r92
  // i2 = i2 + 1
  Const        r17, 1
  AddInt       r100, r13, r17
  Move         r13, r100
  SetGlobal    13,13,0,0
  // while i2 < span {
  Jump         L16
L13:
  // print(str(u) + " unique points")
  Str          r101, r10
  Const        r102, " unique points"
  Add          r103, r101, r102
  Print        r103
  Return       r0
