func main (regs=52)
  // let PI = 3.141592653589793
  Const        r10, 3.141592653589793
  Move         r0, r10
  SetGlobal    0,0,0,0
  // let degreesIncr = 0.1 * PI / 180.0
  Const        r11, 0.1
  Const        r12, 0.3141592653589793
  Const        r13, 180.0
  Const        r14, 0.0017453292519943296
  Move         r1, r14
  SetGlobal    1,1,0,0
  // let turns = 2.0
  Const        r15, 2.0
  Move         r2, r15
  SetGlobal    2,2,0,0
  // let stop = 360.0 * turns * 10.0 * degreesIncr
  Const        r16, 360.0
  MulFloat     r17, r16, r2
  Const        r18, 10.0
  MulFloat     r19, r17, r18
  MulFloat     r20, r19, r1
  Move         r3, r20
  SetGlobal    3,3,0,0
  // let width = 600.0
  Const        r21, 600.0
  Move         r4, r21
  SetGlobal    4,4,0,0
  // let centre = width / 2.0
  Const        r15, 2.0
  DivFloat     r22, r4, r15
  Move         r5, r22
  SetGlobal    5,5,0,0
  // let a = 1.0
  Const        r23, 1.0
  Move         r6, r23
  SetGlobal    6,6,0,0
  // let b = 20.0
  Const        r24, 20.0
  Move         r7, r24
  SetGlobal    7,7,0,0
  // var theta = 0.0
  Const        r25, 0.0
  Move         r8, r25
  SetGlobal    8,8,0,0
  // var count = 0
  Const        r26, 0
  Move         r9, r26
  SetGlobal    9,9,0,0
L2:
  // while theta < stop {
  LessFloat    r27, r8, r3
  JumpIfFalse  r27, L0
  // let r = a + b * theta
  MulFloat     r28, r7, r8
  AddFloat     r29, r6, r28
  Move         r30, r29
  // let x = r * cosApprox(theta)
  Move         r31, r8
  Call         r32, cosApprox, r31
  MulFloat     r33, r30, r32
  Move         r34, r33
  // let y = r * sinApprox(theta)
  Move         r35, r8
  Call         r36, sinApprox, r35
  MulFloat     r37, r30, r36
  Move         r38, r37
  // if count % 100 == 0 {
  Const        r39, 100
  ModInt       r40, r9, r39
  Const        r26, 0
  EqualInt     r41, r40, r26
  JumpIfFalse  r41, L1
  // print(str(centre + x) + "," + str(centre - y))
  AddFloat     r42, r5, r34
  Str          r43, r42
  Const        r44, ","
  Add          r45, r43, r44
  SubFloat     r46, r5, r38
  Str          r47, r46
  Add          r48, r45, r47
  Print        r48
L1:
  // theta = theta + degreesIncr
  AddFloat     r49, r8, r1
  Move         r8, r49
  SetGlobal    8,8,0,0
  // count = count + 1
  Const        r50, 1
  AddInt       r51, r9, r50
  Move         r9, r51
  SetGlobal    9,9,0,0
  // while theta < stop {
  Jump         L2
L0:
  Return       r0

  // fun sinApprox(x: float): float {
func sinApprox (regs=30)
  // var term = x
  Move         r11, r10
  // var sum = x
  Move         r12, r10
  // var n = 1
  Const        r13, 1
  Move         r14, r13
L1:
  // while n <= 10 {
  Const        r15, 10
  LessEqInt    r16, r14, r15
  JumpIfFalse  r16, L0
  // let denom = ((2*n)*(2*n+1)) as float
  Const        r17, 2
  MulInt       r18, r17, r14
  Const        r17, 2
  MulInt       r19, r17, r14
  Const        r13, 1
  AddInt       r20, r19, r13
  MulInt       r21, r18, r20
  Cast         r22, r21, float
  Move         r23, r22
  // term = -term * x * x / denom
  Neg          r24, r11
  Mul          r25, r24, r10
  Mul          r26, r25, r10
  Div          r27, r26, r23
  Move         r11, r27
  // sum = sum + term
  Add          r28, r12, r11
  Move         r12, r28
  // n = n + 1
  Const        r13, 1
  AddInt       r29, r14, r13
  Move         r14, r29
  // while n <= 10 {
  Jump         L1
L0:
  // return sum
  Return       r12

  // fun cosApprox(x: float): float {
func cosApprox (regs=31)
  // var term = 1.0
  Const        r11, 1.0
  Move         r12, r11
  // var sum = 1.0
  Const        r11, 1.0
  Move         r13, r11
  // var n = 1
  Const        r14, 1
  Move         r15, r14
L1:
  // while n <= 10 {
  Const        r16, 10
  LessEqInt    r17, r15, r16
  JumpIfFalse  r17, L0
  // let denom = ((2*n-1)*(2*n)) as float
  Const        r18, 2
  MulInt       r19, r18, r15
  Const        r14, 1
  SubInt       r20, r19, r14
  Const        r18, 2
  MulInt       r21, r18, r15
  MulInt       r22, r20, r21
  Cast         r23, r22, float
  Move         r24, r23
  // term = -term * x * x / denom
  NegFloat     r25, r12
  MulFloat     r26, r25, r10
  MulFloat     r27, r26, r10
  DivFloat     r28, r27, r24
  Move         r12, r28
  // sum = sum + term
  AddFloat     r29, r13, r12
  Move         r13, r29
  // n = n + 1
  Const        r14, 1
  AddInt       r30, r15, r14
  Move         r15, r30
  // while n <= 10 {
  Jump         L1
L0:
  // return sum
  Return       r13
