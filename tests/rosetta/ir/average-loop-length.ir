func main (regs=1)
  Return       r0

  // fun absf(x: float): float {
func absf (regs=4)
  // if x < 0.0 { return -x }
  Const        r1, 0.0
  LessFloat    r2, r0, r1
  JumpIfFalse  r2, L0
  Neg          r3, r0
  Return       r3
L0:
  // return x
  Return       r0

  // fun floorf(x: float): float {
func floorf (regs=4)
  // let y = x as int
  Cast         r1, r0, int
  Move         r2, r1
  // return y as float
  Cast         r3, r2, float
  Return       r3

  // fun indexOf(s: string, ch: string): int {
func indexOf (regs=12)
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L2:
  // while i < len(s) {
  Len          r4, r0
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // if substring(s, i, i+1) == ch {
  Const        r6, 1
  AddInt       r7, r3, r6
  Slice        r8, r0, r3, r7
  Equal        r9, r8, r1
  JumpIfFalse  r9, L1
  // return i
  Return       r3
L1:
  // i = i + 1
  Const        r6, 1
  AddInt       r10, r3, r6
  Move         r3, r10
  // while i < len(s) {
  Jump         L2
L0:
  // return -1
  Const        r6, 1
  NegInt       r11, r6
  Return       r11

  // fun fmtF(x: float): string {
func fmtF (regs=35)
  // var y = floorf(x * 10000.0 + 0.5) / 10000.0
  Const        r2, 10000.0
  MulFloat     r3, r0, r2
  Const        r4, 0.5
  AddFloat     r5, r3, r4
  Move         r1, r5
  Call         r6, floorf, r1
  Const        r2, 10000.0
  DivFloat     r7, r6, r2
  Move         r8, r7
  // var s = str(y)
  Str          r9, r8
  Move         r10, r9
  // var dot = indexOf(s, ".")
  Move         r11, r10
  Const        r13, "."
  Move         r12, r13
  Call2        r14, indexOf, r11, r12
  Move         r15, r14
  // if dot == 0 - 1 {
  Const        r16, 0
  Const        r17, 1
  SubInt       r18, r16, r17
  Equal        r19, r15, r18
  JumpIfFalse  r19, L0
  // s = s + ".0000"
  Const        r20, ".0000"
  Add          r21, r10, r20
  Move         r10, r21
  // if dot == 0 - 1 {
  Jump         L1
L0:
  // var decs = len(s) - dot - 1
  Len          r22, r10
  Sub          r23, r22, r15
  Const        r17, 1
  Sub          r24, r23, r17
  Move         r25, r24
  // if decs > 4 {
  Const        r26, 4
  Less         r27, r26, r25
  JumpIfFalse  r27, L2
  // s = substring(s, 0, dot + 5)
  Const        r16, 0
  Const        r28, 5
  Add          r29, r15, r28
  Slice        r30, r10, r16, r29
  Move         r10, r30
  // if decs > 4 {
  Jump         L1
L2:
  // while decs < 4 {
  Const        r26, 4
  Less         r31, r25, r26
  JumpIfFalse  r31, L1
  // s = s + "0"
  Const        r32, "0"
  Add          r33, r10, r32
  Move         r10, r33
  // decs = decs + 1
  Const        r17, 1
  Add          r34, r25, r17
  Move         r25, r34
  // while decs < 4 {
  Jump         L2
L1:
  // return s
  Return       r10

  // fun padInt(n: int, width: int): string {
func padInt (regs=8)
  // var s = str(n)
  Str          r2, r0
  Move         r3, r2
L1:
  // while len(s) < width {
  Len          r4, r3
  Less         r5, r4, r1
  JumpIfFalse  r5, L0
  // s = " " + s
  Const        r6, " "
  Add          r7, r6, r3
  Move         r3, r7
  // while len(s) < width {
  Jump         L1
L0:
  // return s
  Return       r3

  // fun padFloat(x: float, width: int): string {
func padFloat (regs=9)
  // var s = fmtF(x)
  Move         r2, r0
  Call         r3, fmtF, r2
  Move         r4, r3
L1:
  // while len(s) < width {
  Len          r5, r4
  Less         r6, r5, r1
  JumpIfFalse  r6, L0
  // s = " " + s
  Const        r7, " "
  Add          r8, r7, r4
  Move         r4, r8
  // while len(s) < width {
  Jump         L1
L0:
  // return s
  Return       r4

  // fun avgLen(n: int): float {
func avgLen (regs=31)
  // let tests = 10000
  Const        r1, 10000
  Move         r2, r1
  // var sum = 0
  Const        r3, 0
  Move         r4, r3
  // var seed = 1
  Const        r5, 1
  Move         r6, r5
  // var t = 0
  Const        r3, 0
  Move         r7, r3
L5:
  // while t < tests {
  Const        r1, 10000
  LessInt      r8, r7, r1
  JumpIfFalse  r8, L0
  // var visited: list<bool> = []
  Const        r9, []
  Move         r10, r9
  // var i = 0
  Const        r3, 0
  Move         r11, r3
L2:
  // while i < n {
  Less         r12, r11, r0
  JumpIfFalse  r12, L1
  // visited = append(visited, false)
  Const        r13, false
  Append       r14, r10, r13
  Move         r10, r14
  // i = i + 1
  Const        r5, 1
  AddInt       r15, r11, r5
  Move         r11, r15
  // while i < n {
  Jump         L2
L1:
  // var x = 0
  Const        r3, 0
  Move         r16, r3
L4:
  // while !visited[x] {
  Index        r17, r10, r16
  Not          r18, r17
  JumpIfFalse  r18, L3
  // visited[x] = true
  Const        r19, true
  SetIndex     r10, r16, r19
  // sum = sum + 1
  Const        r5, 1
  AddInt       r20, r4, r5
  Move         r4, r20
  // seed = (seed * 1664525 + 1013904223) % 2147483647
  Const        r21, 1664525
  MulInt       r22, r6, r21
  Const        r23, 1013904223
  AddInt       r24, r22, r23
  Const        r25, 2147483647
  ModInt       r26, r24, r25
  Move         r6, r26
  // x = seed % n
  Mod          r27, r6, r0
  Move         r16, r27
  // while !visited[x] {
  Jump         L4
L3:
  // t = t + 1
  Const        r5, 1
  AddInt       r28, r7, r5
  Move         r7, r28
  // while t < tests {
  Jump         L5
L0:
  // return (sum as float) / tests
  Cast         r29, r4, float
  Const        r1, 10000
  Div          r30, r29, r1
  Return       r30

  // fun ana(n: int): float {
func ana (regs=13)
  // var nn = n as float
  Cast         r1, r0, float
  Move         r2, r1
  // var term = 1.0
  Const        r3, 1.0
  Move         r4, r3
  // var sum = 1.0
  Const        r3, 1.0
  Move         r5, r3
  // var i = nn - 1.0
  Const        r3, 1.0
  SubFloat     r6, r2, r3
  Move         r7, r6
L1:
  // while i >= 1.0 {
  Const        r3, 1.0
  LessEqFloat  r8, r3, r7
  JumpIfFalse  r8, L0
  // term = term * (i / nn)
  DivFloat     r9, r7, r2
  MulFloat     r10, r4, r9
  Move         r4, r10
  // sum = sum + term
  AddFloat     r11, r5, r4
  Move         r5, r11
  // i = i - 1.0
  Const        r3, 1.0
  SubFloat     r12, r7, r3
  Move         r7, r12
  // while i >= 1.0 {
  Jump         L1
L0:
  // return sum
  Return       r5

  // fun main() {
func main (regs=48)
  // let nmax = 20
  Const        r0, 20
  Move         r1, r0
  // print(" N    average    analytical    (error)")
  Const        r2, " N    average    analytical    (error)"
  Print        r2
  // print("===  =========  ============  =========")
  Const        r3, "===  =========  ============  ========="
  Print        r3
  // var n = 1
  Const        r4, 1
  Move         r5, r4
L1:
  // while n <= nmax {
  Const        r0, 20
  LessEqInt    r6, r5, r0
  JumpIfFalse  r6, L0
  // let a = avgLen(n)
  Move         r7, r5
  Call         r8, avgLen, r7
  Move         r9, r8
  // let b = ana(n)
  Move         r10, r5
  Call         r11, ana, r10
  Move         r12, r11
  // let err = absf(a - b) / b * 100.0
  Sub          r14, r9, r12
  Move         r13, r14
  Call         r15, absf, r13
  Div          r16, r15, r12
  Const        r17, 100.0
  MulFloat     r18, r16, r17
  Move         r19, r18
  // var line = padInt(n, 3) + "  " + padFloat(a, 9) + "  " + padFloat(b, 12) + "  (" + padFloat(err, 6) + "%)"
  Move         r20, r5
  Const        r22, 3
  Move         r21, r22
  Call2        r23, padInt, r20, r21
  Const        r24, "  "
  Add          r25, r23, r24
  Move         r26, r9
  Const        r28, 9
  Move         r27, r28
  Call2        r29, padFloat, r26, r27
  Add          r30, r25, r29
  Const        r24, "  "
  Add          r31, r30, r24
  Move         r32, r12
  Const        r34, 12
  Move         r33, r34
  Call2        r35, padFloat, r32, r33
  Add          r36, r31, r35
  Const        r37, "  ("
  Add          r38, r36, r37
  Move         r39, r19
  Const        r41, 6
  Move         r40, r41
  Call2        r42, padFloat, r39, r40
  Add          r43, r38, r42
  Const        r44, "%)"
  Add          r45, r43, r44
  Move         r46, r45
  // print(line)
  Print        r46
  // n = n + 1
  Const        r4, 1
  AddInt       r47, r5, r4
  Move         r5, r47
  // while n <= nmax {
  Jump         L1
L0:
  Return       r0
