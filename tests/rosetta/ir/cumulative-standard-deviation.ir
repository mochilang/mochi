func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun sqrtApprox(x: float): float {
func sqrtApprox (regs=14)
  // if x <= 0.0 { return 0.0 }
  Const        r1, 0.0
  LessEqFloat  r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r1, 0.0
  Return       r1
L0:
  // var g = x
  Move         r3, r0
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L2:
  // while i < 20 {
  Const        r6, 20
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L1
  // g = (g + x / g) / 2.0
  Div          r8, r0, r3
  Add          r9, r3, r8
  Const        r10, 2.0
  DivFloat     r11, r9, r10
  Move         r3, r11
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r5, r12
  Move         r5, r13
  // while i < 20 {
  Jump         L2
L1:
  // return g
  Return       r3

  // fun newRsdv(): Rsdv {
func newRsdv (regs=10)
  // return Rsdv{ n: 0.0, a: 0.0, q: 0.0 }
  Const        r0, 0.0
  Const        r0, 0.0
  Const        r0, 0.0
  Const        r1, "__name"
  Const        r2, "Rsdv"
  Const        r3, "n"
  Move         r4, r0
  Const        r5, "a"
  Move         r6, r0
  Const        r7, "q"
  Move         r8, r0
  MakeMap      r9, 4, r1
  Return       r9

  // fun add(r: Rsdv, x: float): Rsdv {
func add (regs=31)
  // let n1 = r.n + 1.0
  Const        r2, "n"
  Index        r3, r0, r2
  Const        r4, 1.0
  AddFloat     r5, r3, r4
  Move         r6, r5
  // let a1 = r.a + (x - r.a) / n1
  Const        r7, "a"
  Index        r8, r0, r7
  Const        r7, "a"
  Index        r9, r0, r7
  Sub          r10, r1, r9
  DivFloat     r11, r10, r6
  AddFloat     r12, r8, r11
  Move         r13, r12
  // let q1 = r.q + (x - r.a) * (x - a1)
  Const        r14, "q"
  Index        r15, r0, r14
  Const        r7, "a"
  Index        r16, r0, r7
  Sub          r17, r1, r16
  SubFloat     r18, r1, r13
  MulFloat     r19, r17, r18
  AddFloat     r20, r15, r19
  Move         r21, r20
  // return Rsdv{ n: n1, a: a1, q: q1 }
  Const        r22, "__name"
  Const        r23, "Rsdv"
  Const        r24, "n"
  Move         r25, r6
  Const        r26, "a"
  Move         r27, r13
  Const        r28, "q"
  Move         r29, r21
  MakeMap      r30, 4, r22
  Return       r30

  // fun sd(r: Rsdv): float {
func sd (regs=8)
  // return sqrtApprox(r.q / r.n)
  Const        r2, "q"
  Index        r3, r0, r2
  Const        r4, "n"
  Index        r5, r0, r4
  Div          r6, r3, r5
  Move         r1, r6
  Call         r7, sqrtApprox, r1
  Return       r7

  // fun main() {
func main (regs=17)
  // var r = newRsdv()
  Call         r0, newRsdv, 
  Move         r1, r0
  // for x in [2.0, 4.0, 4.0, 4.0, 5.0, 5.0, 7.0, 9.0] {
  Const        r2, [2.0, 4.0, 4.0, 4.0, 5.0, 5.0, 7.0, 9.0]
  IterPrep     r3, r2
  Len          r4, r3
  Const        r5, 0
L1:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // r = add(r, x)
  Move         r9, r1
  Move         r10, r8
  Call2        r11, add, r9, r10
  Move         r1, r11
  // print(str(sd(r)))
  Move         r12, r1
  Call         r13, sd, r12
  Str          r14, r13
  Print        r14
  // for x in [2.0, 4.0, 4.0, 4.0, 5.0, 5.0, 7.0, 9.0] {
  Const        r15, 1
  AddInt       r16, r5, r15
  Move         r5, r16
  Jump         L1
L0:
  Return       r0
