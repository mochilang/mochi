func main (regs=43)
  // let PI = 3.141592653589793
  Const        r7, 3.141592653589793
  Move         r0, r7
  SetGlobal    0,0,0,0
  // let dt = 0.01
  Const        r8, 0.01
  Move         r1, r8
  SetGlobal    1,1,0,0
  // var s = 0.0
  Const        r9, 0.0
  Move         r2, r9
  SetGlobal    2,2,0,0
  // var t1 = 0.0
  Const        r9, 0.0
  Move         r3, r9
  SetGlobal    3,3,0,0
  // var k1 = sinApprox(0.0)
  Const        r9, 0.0
  Move         r10, r9
  Call         r11, sinApprox, r10
  Move         r4, r11
  SetGlobal    4,4,0,0
  // var i = 1
  Const        r12, 1
  Move         r5, r12
  SetGlobal    5,5,0,0
L1:
  // while i <= 200 {
  Const        r13, 200
  LessEqInt    r14, r5, r13
  JumpIfFalse  r14, L0
  // let t2 = (i as float) * dt
  Cast         r15, r5, float
  MulFloat     r16, r15, r1
  Move         r17, r16
  // let k2 = sinApprox(t2 * PI)
  MulFloat     r19, r17, r0
  Move         r18, r19
  Call         r20, sinApprox, r18
  Move         r21, r20
  // s = s + (k1 + k2) * 0.5 * (t2 - t1)
  Add          r22, r4, r21
  Const        r23, 0.5
  MulFloat     r24, r22, r23
  SubFloat     r25, r17, r3
  MulFloat     r26, r24, r25
  AddFloat     r27, r2, r26
  Move         r2, r27
  SetGlobal    2,2,0,0
  // t1 = t2
  Move         r3, r17
  SetGlobal    3,3,0,0
  // k1 = k2
  Move         r4, r21
  SetGlobal    4,4,0,0
  // i = i + 1
  Const        r12, 1
  AddInt       r28, r5, r12
  Move         r5, r28
  SetGlobal    5,5,0,0
  // while i <= 200 {
  Jump         L1
L0:
  // var i2 = 1
  Const        r12, 1
  Move         r6, r12
  SetGlobal    6,6,0,0
L3:
  // while i2 <= 50 {
  Const        r29, 50
  LessEqInt    r30, r6, r29
  JumpIfFalse  r30, L2
  // let t2 = 2.0 + (i2 as float) * dt
  Const        r31, 2.0
  Cast         r32, r6, float
  MulFloat     r33, r32, r1
  AddFloat     r34, r31, r33
  Move         r35, r34
  // let k2 = 0.0
  Const        r9, 0.0
  Move         r36, r9
  // s = s + (k1 + k2) * 0.5 * (t2 - t1)
  AddFloat     r37, r4, r36
  Const        r23, 0.5
  MulFloat     r38, r37, r23
  SubFloat     r39, r35, r3
  MulFloat     r40, r38, r39
  AddFloat     r41, r2, r40
  Move         r2, r41
  SetGlobal    2,2,0,0
  // t1 = t2
  Move         r3, r35
  SetGlobal    3,3,0,0
  // k1 = k2
  Move         r4, r36
  SetGlobal    4,4,0,0
  // i2 = i2 + 1
  Const        r12, 1
  AddInt       r42, r6, r12
  Move         r6, r42
  SetGlobal    6,6,0,0
  // while i2 <= 50 {
  Jump         L3
L2:
  // print(s)
  Print        r2
  Return       r0

  // fun sinApprox(x: float): float {
func sinApprox (regs=27)
  // var term = x
  Move         r8, r7
  // var sum = x
  Move         r9, r7
  // var n = 1
  Const        r10, 1
  Move         r11, r10
L1:
  // while n <= 12 {
  Const        r12, 12
  LessEqInt    r13, r11, r12
  JumpIfFalse  r13, L0
  // let denom = ((2 * n) * (2 * n + 1)) as float
  Const        r14, 2
  MulInt       r15, r14, r11
  Const        r14, 2
  MulInt       r16, r14, r11
  Const        r10, 1
  AddInt       r17, r16, r10
  MulInt       r18, r15, r17
  Cast         r19, r18, float
  Move         r20, r19
  // term = -term * x * x / denom
  Neg          r21, r8
  Mul          r22, r21, r7
  Mul          r23, r22, r7
  Div          r24, r23, r20
  Move         r8, r24
  // sum = sum + term
  Add          r25, r9, r8
  Move         r9, r25
  // n = n + 1
  Const        r10, 1
  AddInt       r26, r11, r10
  Move         r11, r26
  // while n <= 12 {
  Jump         L1
L0:
  // return sum
  Return       r9
