func main (regs=50)
  // let strings = [
  Const        r3, ["", "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln ", "..1111111111111111111111111111111111111111111111111111111111111117777888", "I never give 'em hell, I just tell the truth, and they think it's hell. ", "                                                   ---  Harry S Truman  ", "The better the 4-wheel drive, the further you'll be from help when ya get stuck!", "headmistressship", "aardvark", "😍😀🙌💃😍😍😍🙌"]
  Move         r0, r3
  SetGlobal    0,0,0,0
  // let chars = [
  Const        r4, [[" "], ["-"], ["7"], ["."], [" ", "-", "r"], ["e"], ["s"], ["a"], ["😍"]]
  Move         r1, r4
  SetGlobal    1,1,0,0
  // var i = 0
  Const        r5, 0
  Move         r2, r5
  SetGlobal    2,2,0,0
L3:
  // while i < len(strings) {
  Const        r6, 9
  LessInt      r7, r2, r6
  JumpIfFalse  r7, L0
  // var j = 0
  Const        r5, 0
  Move         r8, r5
  // let s = strings[i]
  Index        r9, r0, r2
  Move         r10, r9
L2:
  // while j < len(chars[i]) {
  Index        r11, r1, r2
  Len          r12, r11
  LessInt      r13, r8, r12
  JumpIfFalse  r13, L1
  // let c = chars[i][j]
  Index        r14, r1, r2
  Index        r15, r14, r8
  Move         r16, r15
  // let ss = squeeze(s, c)
  Move         r17, r10
  Move         r18, r16
  Call2        r19, squeeze, r17, r18
  Move         r20, r19
  // print("specified character = '" + c + "'")
  Const        r21, "specified character = '"
  Add          r22, r21, r16
  Const        r23, "'"
  Add          r24, r22, r23
  Print        r24
  // print("original : length = " + padLeft(len(s), 2) + ", string = «««" + s + "»»»")
  Const        r25, "original : length = "
  Len          r28, r10
  Move         r26, r28
  Const        r29, 2
  Move         r27, r29
  Call2        r30, padLeft, r26, r27
  Add          r31, r25, r30
  Const        r32, ", string = «««"
  Add          r33, r31, r32
  Add          r34, r33, r10
  Const        r35, "»»»"
  Add          r36, r34, r35
  Print        r36
  // print("squeezed : length = " + padLeft(len(ss), 2) + ", string = «««" + ss + "»»»")
  Const        r37, "squeezed : length = "
  Len          r40, r20
  Move         r38, r40
  Const        r29, 2
  Move         r39, r29
  Call2        r41, padLeft, r38, r39
  Add          r42, r37, r41
  Const        r32, ", string = «««"
  Add          r43, r42, r32
  Add          r44, r43, r20
  Const        r35, "»»»"
  Add          r45, r44, r35
  Print        r45
  // print("")
  Const        r46, ""
  Print        r46
  // j = j + 1
  Const        r47, 1
  AddInt       r48, r8, r47
  Move         r8, r48
  // while j < len(chars[i]) {
  Jump         L2
L1:
  // i = i + 1
  Const        r47, 1
  AddInt       r49, r2, r47
  Move         r2, r49
  SetGlobal    2,2,0,0
  // while i < len(strings) {
  Jump         L3
L0:
  Return       r0

  // fun padLeft(n: int, width: int): string {
func padLeft (regs=11)
  // var s = str(n)
  Str          r5, r3
  Move         r6, r5
L1:
  // while len(s) < width {
  Len          r7, r6
  Less         r8, r7, r4
  JumpIfFalse  r8, L0
  // s = " " + s
  Const        r9, " "
  Add          r10, r9, r6
  Move         r6, r10
  // while len(s) < width {
  Jump         L1
L0:
  // return s
  Return       r6

  // fun squeeze(s: string, ch: string): string {
func squeeze (regs=22)
  // var out = ""
  Const        r5, ""
  Move         r6, r5
  // var prev = false
  Const        r7, false
  Move         r8, r7
  // var i = 0
  Const        r9, 0
  Move         r2, r9
  SetGlobal    2,2,0,0
L3:
  // while i < len(s) {
  Len          r10, r3
  LessInt      r11, r2, r10
  JumpIfFalse  r11, L0
  // let c = substring(s, i, i+1)
  Const        r12, 1
  AddInt       r13, r2, r12
  Slice        r14, r3, r2, r13
  Move         r15, r14
  // if c == ch {
  Equal        r16, r15, r4
  JumpIfFalse  r16, L1
  // if !prev {
  Not          r17, r8
  JumpIfFalse  r17, L2
  // out = out + c
  Add          r18, r6, r15
  Move         r6, r18
  // prev = true
  Const        r19, true
  Move         r8, r19
  // if c == ch {
  Jump         L2
L1:
  // out = out + c
  Add          r20, r6, r15
  Move         r6, r20
  // prev = false
  Const        r7, false
  Move         r8, r7
L2:
  // i = i + 1
  Const        r12, 1
  AddInt       r21, r2, r12
  Move         r2, r21
  SetGlobal    2,2,0,0
  // while i < len(s) {
  Jump         L3
L0:
  // return out
  Return       r6
