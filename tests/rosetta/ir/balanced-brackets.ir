func main (regs=2)
  // var seed = 1
  Const        r1, 1
  Move         r0, r1
  SetGlobal    0,0,0,0
  Return       r0

  // fun prng(max: int): int {
func prng (regs=9)
  // seed = (seed * 1103515245 + 12345) % 2147483648
  Const        r2, 1103515245
  Mul          r3, r0, r2
  Const        r4, 12345
  Add          r5, r3, r4
  Const        r6, 2147483648
  Mod          r7, r5, r6
  Move         r0, r7
  SetGlobal    0,0,0,0
  // return seed % max
  Mod          r8, r0, r1
  Return       r8

  // fun gen(n: int): string {
func gen (regs=36)
  // var arr: list<string> = []
  Const        r2, []
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L1:
  // while i < n {
  Less         r6, r5, r1
  JumpIfFalse  r6, L0
  // arr = append(arr, "[")
  Const        r7, "["
  Append       r8, r3, r7
  Move         r3, r8
  // arr = append(arr, "]")
  Const        r9, "]"
  Append       r10, r3, r9
  Move         r3, r10
  // i = i + 1
  Const        r11, 1
  AddInt       r12, r5, r11
  Move         r5, r12
  // while i < n {
  Jump         L1
L0:
  // var j = len(arr) - 1
  Len          r13, r3
  Const        r11, 1
  SubInt       r14, r13, r11
  Move         r15, r14
L3:
  // while j > 0 {
  Const        r4, 0
  LessInt      r16, r4, r15
  JumpIfFalse  r16, L2
  // let k = prng(j + 1)
  Const        r11, 1
  AddInt       r18, r15, r11
  Move         r17, r18
  Call         r19, prng, r17
  Move         r20, r19
  // let tmp = arr[j]
  Index        r21, r3, r15
  Move         r22, r21
  // arr[j] = arr[k]
  Index        r23, r3, r20
  SetIndex     r3, r15, r23
  // arr[k] = tmp
  SetIndex     r3, r20, r22
  // j = j - 1
  Const        r11, 1
  SubInt       r24, r15, r11
  Move         r15, r24
  // while j > 0 {
  Jump         L3
L2:
  // var out = ""
  Const        r25, ""
  Move         r26, r25
  // for ch in arr {
  IterPrep     r27, r3
  Len          r28, r27
  Const        r29, 0
L5:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L4
  Index        r31, r27, r29
  Move         r32, r31
  // out = out + ch
  Add          r33, r26, r32
  Move         r26, r33
  // for ch in arr {
  Const        r34, 1
  AddInt       r35, r29, r34
  Move         r29, r35
  Jump         L5
L4:
  // return out
  Return       r26

  // fun testBalanced(s: string) {
func testBalanced (regs=22)
  // var open = 0
  Const        r2, 0
  Move         r3, r2
  // var i = 0
  Const        r2, 0
  Move         r4, r2
L2:
  // while i < len(s) {
  Len          r5, r1
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // let c = s[i:i+1]
  Move         r7, r4
  Const        r9, 1
  AddInt       r10, r4, r9
  Move         r8, r10
  Slice        r11, r1, r7, r8
  Move         r12, r11
  // if c == "[" {
  Const        r13, "["
  Equal        r14, r12, r13
  JumpIfFalse  r14, L1
  // open = open + 1
  Const        r9, 1
  AddInt       r15, r3, r9
  Move         r3, r15
L1:
  // i = i + 1
  Const        r9, 1
  AddInt       r16, r4, r9
  Move         r4, r16
  // while i < len(s) {
  Jump         L2
L0:
  // if open == 0 {
  Const        r2, 0
  EqualInt     r17, r3, r2
  JumpIfFalse  r17, L3
  // print(s + ": ok")
  Const        r18, ": ok"
  Add          r19, r1, r18
  Print        r19
  // if open == 0 {
  Jump         L4
L3:
  // print(s + ": not ok")
  Const        r20, ": not ok"
  Add          r21, r1, r20
  Print        r21
L4:
  Return       r0

  // fun main() {
func main (regs=14)
  // var i = 0
  Const        r1, 0
  Move         r2, r1
L1:
  // while i < 10 {
  Const        r3, 10
  LessInt      r4, r2, r3
  JumpIfFalse  r4, L0
  // testBalanced(gen(i))
  Move         r6, r2
  Call         r7, gen, r6
  Move         r5, r7
  Call         r8, testBalanced, r5
  // i = i + 1
  Const        r9, 1
  AddInt       r10, r2, r9
  Move         r2, r10
  // while i < 10 {
  Jump         L1
L0:
  // testBalanced("()")
  Const        r12, "()"
  Move         r11, r12
  Call         r13, testBalanced, r11
  Return       r0
