func __main (regs=15)
  // let x1 = [36.0, 40.0, 7.0, 39.0, 41.0, 15.0]
  Const        r3, [36.0, 40.0, 7.0, 39.0, 41.0, 15.0]
  Move         r0, r3
  SetGlobal    0,0,0,0
  // let x2 = [15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0]
  Const        r4, [15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0]
  Move         r1, r4
  SetGlobal    1,1,0,0
  // let x3 = [
  Const        r5, [0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578]
  Move         r2, r5
  SetGlobal    2,2,0,0
  // print(str(fivenum(x1)))
  Move         r6, r0
  Call         r7, fivenum, r6
  Str          r8, r7
  Print        r8
  // print(str(fivenum(x2)))
  Move         r9, r1
  Call         r10, fivenum, r9
  Str          r11, r10
  Print        r11
  // print(str(fivenum(x3)))
  Move         r12, r2
  Call         r13, fivenum, r12
  Str          r14, r13
  Print        r14
  Return       r0

  // fun sortFloat(xs: list<float>): list<float> {
func sortFloat (regs=25)
  // var arr = xs
  Move         r4, r3
  // var n = len(arr)
  Len          r5, r4
  Move         r6, r5
  // var i = 0
  Const        r7, 0
  Move         r8, r7
L4:
  // while i < n {
  LessInt      r9, r8, r6
  JumpIfFalse  r9, L0
  // var j = 0
  Const        r7, 0
  Move         r10, r7
L3:
  // while j < n - 1 {
  Const        r11, 1
  SubInt       r12, r6, r11
  LessInt      r13, r10, r12
  JumpIfFalse  r13, L1
  // if arr[j] > arr[j+1] {
  Index        r14, r4, r10
  Const        r11, 1
  AddInt       r15, r10, r11
  Index        r16, r4, r15
  Less         r17, r16, r14
  JumpIfFalse  r17, L2
  // let t = arr[j]
  Index        r18, r4, r10
  Move         r19, r18
  // arr[j] = arr[j+1]
  Const        r11, 1
  AddInt       r20, r10, r11
  Index        r21, r4, r20
  SetIndex     r4, r10, r21
  // arr[j+1] = t
  Const        r11, 1
  AddInt       r22, r10, r11
  SetIndex     r4, r22, r19
L2:
  // j = j + 1
  Const        r11, 1
  AddInt       r23, r10, r11
  Move         r10, r23
  // while j < n - 1 {
  Jump         L3
L1:
  // i = i + 1
  Const        r11, 1
  AddInt       r24, r8, r11
  Move         r8, r24
  // while i < n {
  Jump         L4
L0:
  // return arr
  Return       r4

  // fun median(s: list<float>): float {
func median (regs=20)
  // let n = len(s)
  Len          r4, r3
  Move         r5, r4
  // if n % 2 == 1 { return s[n/2] }
  Const        r6, 2
  ModInt       r7, r5, r6
  Const        r8, 1
  EqualInt     r9, r7, r8
  JumpIfFalse  r9, L0
  Const        r6, 2
  DivInt       r10, r5, r6
  Index        r11, r3, r10
  Return       r11
L0:
  // return (s[n/2-1] + s[n/2]) / 2.0
  Const        r6, 2
  DivInt       r12, r5, r6
  Const        r8, 1
  SubInt       r13, r12, r8
  Index        r14, r3, r13
  Const        r6, 2
  DivInt       r15, r5, r6
  Index        r16, r3, r15
  Add          r17, r14, r16
  Const        r18, 2.0
  DivFloat     r19, r17, r18
  Return       r19

  // fun fivenum(xs: list<float>): list<float> {
func fivenum (regs=34)
  // var s = sortFloat(xs)
  Move         r4, r3
  Call         r5, sortFloat, r4
  Move         r6, r5
  // let n = len(s)
  Len          r7, r6
  Move         r8, r7
  // let q1 = s[(n-1)/4]
  Const        r9, 1
  SubInt       r10, r8, r9
  Const        r11, 4
  DivInt       r12, r10, r11
  Index        r13, r6, r12
  Move         r14, r13
  // let med = median(s)
  Move         r15, r6
  Call         r16, median, r15
  Move         r17, r16
  // let q3 = s[(3*(n-1))/4]
  Const        r18, 3
  Const        r9, 1
  SubInt       r19, r8, r9
  MulInt       r20, r18, r19
  Const        r11, 4
  DivInt       r21, r20, r11
  Index        r22, r6, r21
  Move         r23, r22
  // return [s[0], q1, med, q3, s[n-1]]
  Const        r29, 0
  Index        r30, r6, r29
  Move         r24, r30
  Move         r25, r14
  Move         r26, r17
  Move         r27, r23
  Const        r9, 1
  SubInt       r31, r8, r9
  Index        r32, r6, r31
  Move         r28, r32
  MakeList     r33, 5, r24
  Return       r33
