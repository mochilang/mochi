func main (regs=18)
  // print(str(beatingProbability(4, 9, 6, 6)))
  Const        r4, 4
  Move         r0, r4
  Const        r5, 9
  Move         r1, r5
  Const        r6, 6
  Move         r2, r6
  Const        r6, 6
  Move         r3, r6
  Call         r7, beatingProbability, r0, r1, r2, r3
  Str          r8, r7
  Print        r8
  // print(str(beatingProbability(10, 5, 7, 6)))
  Const        r13, 10
  Move         r9, r13
  Const        r14, 5
  Move         r10, r14
  Const        r15, 7
  Move         r11, r15
  Const        r6, 6
  Move         r12, r6
  Call         r16, beatingProbability, r9, r10, r11, r12
  Str          r17, r16
  Print        r17
  Return       r0

  // fun powInt(base: int, exp: int): int {
func powInt (regs=14)
  // var r = 1
  Const        r2, 1
  Move         r3, r2
  // var b = base
  Move         r4, r0
  // var e = exp
  Move         r5, r1
L2:
  // while e > 0 {
  Const        r6, 0
  Less         r7, r6, r5
  JumpIfFalse  r7, L0
  // if e % 2 == 1 { r = r * b }
  Const        r8, 2
  Mod          r9, r5, r8
  Const        r2, 1
  Equal        r10, r9, r2
  JumpIfFalse  r10, L1
  Mul          r11, r3, r4
  Move         r3, r11
L1:
  // b = b * b
  Mul          r12, r4, r4
  Move         r4, r12
  // e = e / 2 as int
  Const        r8, 2
  Div          r13, r5, r8
  Move         r5, r13
  // while e > 0 {
  Jump         L2
L0:
  // return r
  Return       r3

  // fun minInt(x: int, y: int): int {
func minInt (regs=3)
  // if x < y { return x }
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Return       r0
L0:
  // return y
  Return       r1

  // fun throwDie(nSides: int, nDice: int, s: int, counts: list<int>) {
func throwDie (regs=19)
  // if nDice == 0 {
  Const        r4, 0
  Equal        r5, r1, r4
  JumpIfFalse  r5, L0
  // counts[s] = counts[s] + 1
  Index        r6, r3, r2
  Const        r7, 1
  Add          r8, r6, r7
  SetIndex     r3, r2, r8
  // return
  Return       r0
L0:
  // var i = 1
  Const        r7, 1
  Move         r9, r7
L2:
  // while i <= nSides {
  LessEq       r10, r9, r0
  JumpIfFalse  r10, L1
  // throwDie(nSides, nDice - 1, s + i, counts)
  Move         r11, r0
  Const        r7, 1
  Sub          r15, r1, r7
  Move         r12, r15
  Add          r16, r2, r9
  Move         r13, r16
  Move         r14, r3
  Call         r17, throwDie, r11, r12, r13, r14
  // i = i + 1
  Const        r7, 1
  AddInt       r18, r9, r7
  Move         r9, r18
  // while i <= nSides {
  Jump         L2
L1:
  Return       r0

  // fun beatingProbability(nSides1: int, nDice1: int, nSides2: int, nDice2: int): float {
func beatingProbability (regs=59)
  // let len1 = (nSides1 + 1) * nDice1
  Const        r4, 1
  Add          r5, r0, r4
  Mul          r6, r5, r1
  Move         r7, r6
  // var c1: list<int> = []
  Const        r8, []
  Move         r9, r8
  // var i = 0
  Const        r10, 0
  Move         r11, r10
L1:
  // while i < len1 {
  Less         r12, r11, r7
  JumpIfFalse  r12, L0
  // c1 = append(c1, 0)
  Const        r10, 0
  Append       r13, r9, r10
  Move         r9, r13
  // i = i + 1
  Const        r4, 1
  AddInt       r14, r11, r4
  Move         r11, r14
  // while i < len1 {
  Jump         L1
L0:
  // throwDie(nSides1, nDice1, 0, c1)
  Move         r15, r0
  Move         r16, r1
  Const        r10, 0
  Move         r17, r10
  Move         r18, r9
  Call         r19, throwDie, r15, r16, r17, r18
  // let len2 = (nSides2 + 1) * nDice2
  Const        r4, 1
  Add          r20, r2, r4
  Mul          r21, r20, r3
  Move         r22, r21
  // var c2: list<int> = []
  Const        r8, []
  Move         r23, r8
  // var j = 0
  Const        r10, 0
  Move         r24, r10
L3:
  // while j < len2 {
  Less         r25, r24, r22
  JumpIfFalse  r25, L2
  // c2 = append(c2, 0)
  Const        r10, 0
  Append       r26, r23, r10
  Move         r23, r26
  // j = j + 1
  Const        r4, 1
  AddInt       r27, r24, r4
  Move         r24, r27
  // while j < len2 {
  Jump         L3
L2:
  // throwDie(nSides2, nDice2, 0, c2)
  Move         r28, r2
  Move         r29, r3
  Const        r10, 0
  Move         r30, r10
  Move         r31, r23
  Call         r32, throwDie, r28, r29, r30, r31
  // let p12 = (powInt(nSides1, nDice1) as float) * (powInt(nSides2, nDice2) as float)
  Move         r33, r0
  Move         r34, r1
  Call2        r35, powInt, r33, r34
  Cast         r36, r35, float
  Move         r37, r2
  Move         r38, r3
  Call2        r39, powInt, r37, r38
  Cast         r40, r39, float
  Mul          r41, r36, r40
  Move         r42, r41
  // var tot = 0.0
  Const        r43, 0.0
  Move         r44, r43
  // i = 0
  Const        r10, 0
  Move         r11, r10
L7:
  // while i < len1 {
  Less         r45, r11, r7
  JumpIfFalse  r45, L4
  // j = 0
  Const        r10, 0
  Move         r24, r10
  // let m = minInt(i, len2)
  Move         r46, r11
  Move         r47, r22
  Call2        r48, minInt, r46, r47
  Move         r49, r48
L6:
  // while j < m {
  Less         r50, r24, r49
  JumpIfFalse  r50, L5
  // tot = tot + (c1[i] * c2[j] as float) / p12
  Index        r51, r9, r11
  Index        r52, r23, r24
  Cast         r53, r52, float
  Mul          r54, r51, r53
  Div          r55, r54, r42
  AddFloat     r56, r44, r55
  Move         r44, r56
  // j = j + 1
  Const        r4, 1
  AddInt       r57, r24, r4
  Move         r24, r57
  // while j < m {
  Jump         L6
L5:
  // i = i + 1
  Const        r4, 1
  AddInt       r58, r11, r4
  Move         r11, r58
  // while i < len1 {
  Jump         L7
L4:
  // return tot
  Return       r44
