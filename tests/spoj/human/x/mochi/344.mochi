// Solution for SPOJ POKER - Poker
// https://www.spoj.com/problems/POKER/

let rankVals = {
  "2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9,
  "T":10,"J":11,"Q":12,"K":13,"A":14,
}

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " { if cur != "" { parts = append(parts, cur); cur = "" } }
    else { cur = cur + ch }
    i = i + 1
  }
  if cur != "" { parts = append(parts, cur) }
  return parts
}

fun sortInts(arr: list<int>): list<int> {
  var i = 1
  while i < len(arr) {
    var j = i
    while j > 0 && arr[j-1] > arr[j] {
      let tmp = arr[j-1]
      arr[j-1] = arr[j]
      arr[j] = tmp
      j = j - 1
    }
    i = i + 1
  }
  return arr
}

fun classify(cards: list<string>): string {
  var vals: list<int> = []
  let suit0 = cards[0][1:2]
  var flush = 1
  var idx = 0
  while idx < 5 {
    let c = cards[idx]
    vals = append(vals, rankVals[c[0:1]] as int)
    if c[1:2] != suit0 { flush = 0 }
    idx = idx + 1
  }
  vals = sortInts(vals)
  var straight = 1
  idx = 1
  while idx < 5 {
    if vals[idx] != vals[0] + idx {
      straight = 0
      break
    }
    idx = idx + 1
  }
  if straight == 0 {
    if vals[0]==2 && vals[1]==3 && vals[2]==4 && vals[3]==5 && vals[4]==14 {
      straight = 1
    }
  }
  var groups: list<int> = []
  var count = 1
  idx = 1
  while idx < 5 {
    if vals[idx] == vals[idx-1] {
      count = count + 1
    } else {
      groups = append(groups, count)
      count = 1
    }
    idx = idx + 1
  }
  groups = append(groups, count)
  groups = sortInts(groups)
  let maxCount = groups[len(groups)-1]
  var second = 0
  if len(groups) > 1 { second = groups[len(groups)-2] }
  if flush == 1 && straight == 1 && vals[0] == 10 && vals[4] == 14 { return "royal flush" }
  if flush == 1 && straight == 1 { return "straight flush" }
  if maxCount == 4 { return "four of a kind" }
  if maxCount == 3 && second == 2 { return "full house" }
  if flush == 1 { return "flush" }
  if straight == 1 { return "straight" }
  if maxCount == 3 { return "three of a kind" }
  if maxCount == 2 && second == 2 { return "two pairs" }
  if maxCount == 2 { return "pair" }
  return "high card"
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let t = tLine as int
  var case = 0
  while case < t {
    let line = input()
    let cards = splitSpaces(line)
    print(classify(cards))
    case = case + 1
  }
}

main()
