// Solution for SPOJ BALL - Billiard
// https://www.spoj.com/problems/BALL1/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseInts(line: string): list<int> {
  var nums: list<int> = []
  var i = 0
  var cur = 0
  var sign = 1
  var inNum = false
  while i < len(line) {
    let ch = line[i:i+1]
    if ch == "-" {
      sign = -1
      i = i + 1
    } else if ch >= "0" && ch <= "9" {
      cur = cur * 10 + (digits[ch] as int)
      inNum = true
      i = i + 1
    } else {
      if inNum {
        nums = append(nums, sign * cur)
        cur = 0
        sign = 1
        inNum = false
      }
      i = i + 1
    }
  }
  if inNum {
    nums = append(nums, sign * cur)
  }
  return nums
}

fun gcd(a: int, b: int): int {
  var x = if a < 0 { -a } else { a }
  var y = if b < 0 { -b } else { b }
  while y != 0 {
    let t = x % y
    x = y
    y = t
  }
  return x
}

fun main() {
  let first = input()
  if first == "" { return }
  let t = parseInts(first)[0]
  var case = 0
  while case < t {
    var line = input()
    while line == "" { line = input() }
    let vals = parseInts(line)
    let x = vals[0]
    let y = vals[1]
    let a = vals[2]
    let b = vals[3]
    let g = gcd(x - 1, y - 1)
    if (a - 1) % g == 0 && (b - 1) % g == 0 {
      print(2)
    } else {
      let s = (x - 1) / g + (y - 1) / g
      if s % 2 == 0 {
        print(4 * s)
      } else {
        print(4 * s + 2)
      }
    }
    case = case + 1
  }
}

main()
