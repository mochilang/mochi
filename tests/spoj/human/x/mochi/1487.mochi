// Solution for SPOJ PT07J - Query on a tree III
// https://www.spoj.com/problems/PT07J/

type Pair { label: int, node: int }

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseInts(line: string): list<int> {
  var nums: list<int> = []
  var i = 0
  var cur = 0
  var sign = 1
  var has = false
  while i < len(line) {
    let ch = line[i:i+1]
    if ch == "-" {
      sign = -1
      i = i + 1
    } else if ch >= "0" && ch <= "9" {
      cur = cur * 10 + (digits[ch] as int)
      has = true
      i = i + 1
    } else {
      if has {
        nums = append(nums, sign * cur)
        cur = 0
        sign = 1
        has = false
      }
      i = i + 1
    }
  }
  if has { nums = append(nums, sign * cur) }
  return nums
}

fun merge(a: list<Pair>, b: list<Pair>): list<Pair> {
  var i = 0
  var j = 0
  var res: list<Pair> = []
  while i < len(a) && j < len(b) {
    let pa = a[i]
    let pb = b[j]
    if pa.label < pb.label {
      res = append(res, pa)
      i = i + 1
    } else {
      res = append(res, pb)
      j = j + 1
    }
  }
  while i < len(a) { res = append(res, a[i]); i = i + 1 }
  while j < len(b) { res = append(res, b[j]); j = j + 1 }
  return res
}

fun dfs(u: int, p: int, adj: list<list<int>>, labels: list<int>, sub: list<list<Pair>>): list<Pair> {
  var lst: list<Pair> = []
  lst = append(lst, Pair{ label: labels[u-1], node: u })
  var i = 0
  while i < len(adj[u]) {
    let v = adj[u][i]
    if v != p {
      let child = dfs(v, u, adj, labels, sub)
      lst = merge(lst, child)
    }
    i = i + 1
  }
  sub[u] = lst
  return lst
}

fun main() {
  let nLine = input()
  if nLine == "" { return }
  let n = int(nLine)
  let labelLine = input()
  let labels = parseInts(labelLine)
  var adj: list<list<int>> = []
  var i = 0
  while i <= n {
    adj = append(adj, [])
    i = i + 1
  }
  i = 0
  while i < n - 1 {
    let ln = input()
    if ln == "" { continue }
    let nums = parseInts(ln)
    let u = nums[0]
    let v = nums[1]
    adj[u] = append(adj[u], v)
    adj[v] = append(adj[v], u)
    i = i + 1
  }
  var sub: list<list<Pair>> = []
  i = 0
  while i <= n {
    sub = append(sub, [])
    i = i + 1
  }
  dfs(1, 0, adj, labels, sub)
  let mLine = input()
  let m = int(mLine)
  var q = 0
  while q < m {
    let l = input()
    if l == "" { continue }
    let nums = parseInts(l)
    let x = nums[0]
    let k = nums[1]
    let lst = sub[x]
    let ans = lst[k-1]
    print(str(ans.node))
    q = q + 1
  }
}

main()
