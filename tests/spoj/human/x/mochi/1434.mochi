// Solution for SPOJ KPEQU - Equation
// https://www.spoj.com/problems/KPEQU/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  return n
}

fun sieve(limit: int): list<int> {
  var isPrime: list<bool> = []
  var i = 0
  while i <= limit {
    isPrime = append(isPrime, true)
    i = i + 1
  }
  isPrime[0] = false
  if limit >= 1 { isPrime[1] = false }
  var p = 2
  while p * p <= limit {
    if isPrime[p] {
      var j = p * p
      while j <= limit {
        isPrime[j] = false
        j = j + p
      }
    }
    p = p + 1
  }
  var primes: list<int> = []
  i = 2
  while i <= limit {
    if isPrime[i] { primes = append(primes, i) }
    i = i + 1
  }
  return primes
}

fun solve(n: int, primes: list<int>): bigint {
  let limit = n
  var ans: bigint = 1 as bigint
  var idx = 0
  while idx < len(primes) && primes[idx] <= limit {
    let p = primes[idx] as int
    var m = n
    var e = 0
    while m > 0 {
      m = m / p
      e = e + m
    }
    ans = ans * ((2 * e + 1) as bigint)
    idx = idx + 1
  }
  return ans
}

fun main() {
  let primes = sieve(10000)
  while true {
    let line = input()
    if line == nil || line == "" { return }
    let n = parseIntStr(line)
    if n == 0 { return }
    let res = solve(n, primes)
    print(str(res))
  }
}

main()
