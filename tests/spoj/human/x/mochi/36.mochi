// Solution for SPOJ CODE1 - Secret Code
// https://www.spoj.com/problems/CODE1/

fun split(s: string, sep: string): list<string> {
  var parts: list<string> = []
  var cur: string = ""
  var i: int = 0
  while i < len(s) {
    if len(sep) > 0 && i + len(sep) <= len(s) && substring(s, i, i + len(sep)) == sep {
      parts = append(parts, cur)
      cur = ""
      i = i + len(sep)
    } else {
      cur = cur + s[i:i+1]
      i = i + 1
    }
  }
  parts = append(parts, cur)
  return parts
}

fun parseInts(line: string): list<int> {
  let pieces = split(line, " ")
  var nums: list<int> = []
  for p in pieces {
    if len(p) > 0 {
      nums = append(nums, int(p))
    }
  }
  return nums
}

fun isqrt(n: int): int {
  var r = 0
  while (r + 1) * (r + 1) <= n {
    r = r + 1
  }
  return r
}

fun solve(xr: int, xi: int, br: int, bi: int): string {
  let n = br * br + bi * bi
  var maxDigit = isqrt(n)
  if maxDigit * maxDigit == n {
    maxDigit = maxDigit - 1
  }
  var digits: list<int> = []
  var xr2 = xr
  var xi2 = xi
  var steps = 0
  while !(xr2 == 0 && xi2 == 0) && steps < 101 {
    var found = false
    var a = 0
    while a <= maxDigit {
      let u = xr2 * br + xi2 * bi - a * br
      let v = xi2 * br - xr2 * bi + a * bi
      if u % n == 0 && v % n == 0 {
        digits = append(digits, a)
        xr2 = u / n
        xi2 = v / n
        found = true
        break
      }
      a = a + 1
    }
    if !found {
      return "The code cannot be decrypted."
    }
    steps = steps + 1
  }
  if !(xr2 == 0 && xi2 == 0) {
    return "The code cannot be decrypted."
  }
  if len(digits) == 0 {
    digits = append(digits, 0)
  }
  var out: string = ""
  var i = len(digits) - 1
  while i >= 0 {
    out = out + str(digits[i])
    if i > 0 {
      out = out + ","
    }
    i = i - 1
  }
  return out
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let t = int(tLine)
  var case = 0
  while case < t {
    let line = input()
    let nums = parseInts(line)
    let xr = nums[0]
    let xi = nums[1]
    let br = nums[2]
    let bi = nums[3]
    print(solve(xr, xi, br, bi))
    case = case + 1
  }
}

main()
