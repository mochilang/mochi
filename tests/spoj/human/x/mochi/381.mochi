// Solution for SPOJ CHICAGO - 106 miles to Chicago
// https://www.spoj.com/problems/CHICAGO/

fun split(s: string, sep: string): list<string> {
  var parts: list<string> = []
  var cur: string = ""
  var i: int = 0
  while i < len(s) {
    if len(sep) > 0 && i + len(sep) <= len(s) && substring(s, i, i + len(sep)) == sep {
      parts = append(parts, cur)
      cur = ""
      i = i + len(sep)
    } else {
      cur = cur + s[i:i+1]
      i = i + 1
    }
  }
  parts = append(parts, cur)
  return parts
}

fun format6(x: float): string {
  var scaled = x * 1000000.0 + 0.5
  var n = scaled as int
  var whole = n / 1000000
  var frac = n % 1000000
  var fracStr = str(frac)
  while len(fracStr) < 6 {
    fracStr = "0" + fracStr
  }
  return str(whole) + "." + fracStr
}

fun main() {
  while true {
    let line = input()
    if line == "" { return }
    let parts = split(line, " ")
    let n = int(parts[0])
    if n == 0 { return }
    let m = int(parts[1])
    var adj: list<list<float>> = []
    var i = 0
    while i < n {
      var row: list<float> = []
      var j = 0
      while j < n {
        row = append(row, 0.0)
        j = j + 1
      }
      adj = append(adj, row)
      i = i + 1
    }
    i = 0
    while i < m {
      let l = input()
      let ps = split(l, " ")
      let a = int(ps[0]) - 1
      let b = int(ps[1]) - 1
      let p = int(ps[2]) as float
      adj[a][b] = p
      adj[b][a] = p
      i = i + 1
    }
    var dist: list<float> = []
    i = 0
    while i < n {
      dist = append(dist, 0.0)
      i = i + 1
    }
    dist[0] = 1.0
    var vis: list<int> = []
    i = 0
    while i < n {
      vis = append(vis, 0)
      i = i + 1
    }
    i = 0
    while i < n {
      var maxP = -1.0
      var u = 0
      var found = false
      var j = 0
      while j < n {
        if vis[j] == 0 && dist[j] > maxP {
          maxP = dist[j]
          u = j
          found = true
        }
        j = j + 1
      }
      if !found { break }
      vis[u] = 1
      j = 0
      while j < n {
        if vis[j] == 0 && adj[u][j] > 0.0 {
          var np = dist[u] * adj[u][j] / 100.0
          if np > dist[j] {
            dist[j] = np
          }
        }
        j = j + 1
      }
      i = i + 1
    }
    let result = dist[n-1] * 100.0
    print(format6(result) + " percent")
  }
}

main()
