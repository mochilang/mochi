// Solution for SPOJ FARMER - Farmer
// https://www.spoj.com/problems/FARMER/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseInts(line: string): list<int> {
  var nums: list<int> = []
  var i = 0
  var cur = 0
  var sign = 1
  var inNum = false
  while i < len(line) {
    let ch = line[i:i+1]
    if ch == "-" {
      sign = -1
      i = i + 1
    } else if ch >= "0" && ch <= "9" {
      cur = cur * 10 + (digits[ch] as int)
      inNum = true
      i = i + 1
    } else {
      if inNum {
        nums = append(nums, sign * cur)
        cur = 0
        sign = 1
        inNum = false
      }
      i = i + 1
    }
  }
  if inNum {
    nums = append(nums, sign * cur)
  }
  return nums
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let t = parseInts(tLine)[0]
  var case = 0
  while case < t {
    var first = input()
    while first == "" { first = input() }
    let vals = parseInts(first)
    let Q = vals[0]
    let M = vals[1]
    let K = vals[2]

    var fields: list<int> = []
    if M > 0 {
      let lineF = input()
      fields = parseInts(lineF)
    }
    var strips: list<int> = []
    if K > 0 {
      let lineS = input()
      strips = parseInts(lineS)
    }

    // dp array
    var dp: list<int> = []
    var i = 0
    while i <= Q {
      dp = append(dp, -1000000000)
      i = i + 1
    }
    dp[0] = 0

    // process fields
    i = 0
    while i < M {
      let n = fields[i]
      var newdp: list<int> = []
      var j = 0
      while j <= Q {
        newdp = append(newdp, dp[j])
        j = j + 1
      }
      j = 0
      while j <= Q {
        let val = dp[j]
        if val >= 0 {
          if j + n <= Q && val + n > newdp[j + n] { newdp[j + n] = val + n }
          var k = 1
          while k < n {
            if j + k <= Q && val + k - 1 > newdp[j + k] {
              newdp[j + k] = val + k - 1
            }
            k = k + 1
          }
        }
        j = j + 1
      }
      dp = newdp
      i = i + 1
    }

    // process strips
    i = 0
    while i < K {
      let r = strips[i]
      var newdp: list<int> = []
      var j = 0
      while j <= Q {
        newdp = append(newdp, dp[j])
        j = j + 1
      }
      j = 0
      while j <= Q {
        let val = dp[j]
        if val >= 0 {
          var k = 1
          while k <= r {
            if j + k <= Q && val + k - 1 > newdp[j + k] {
              newdp[j + k] = val + k - 1
            }
            k = k + 1
          }
        }
        j = j + 1
      }
      dp = newdp
      i = i + 1
    }

    print(dp[Q])
    case = case + 1
  }
}

main()
