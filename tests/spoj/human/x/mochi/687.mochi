// Solution for SPOJ REPEATS - Repeats
// https://www.spoj.com/problems/REPEATS/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  return n
}

fun maxInt(a: int, b: int): int { if a > b { return a } else { return b } }

fun solve(s: string): int {
  let n = len(s)
  var best = 1
  var i = 0
  while i < n {
    var l = 1
    while i + l <= n {
      let pattern = substring(s, i, i+l)
      var k = 1
      while i + (k+1)*l <= n {
        if substring(s, i + k*l, i + (k+1)*l) == pattern {
          k = k + 1
        } else {
          break
        }
      }
      if k > best { best = k }
      l = l + 1
    }
    i = i + 1
  }
  return best
}

fun main() {
  let tLine = input()
  if tLine == nil || tLine == "" { return }
  let t = parseIntStr(tLine)
  var case = 0
  while case < t {
    let nLine = input()
    let n = parseIntStr(nLine)
    var s = ""
    var i = 0
    while i < n {
      let ch = input()
      s = s + ch
      i = i + 1
    }
    let res = solve(s)
    print(str(res))
    case = case + 1
  }
}

main()
