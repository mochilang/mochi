// Solution for SPOJ MATSUM - Matrix Summation
// https://www.spoj.com/problems/MATSUM/

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " {
      if len(cur) > 0 {
        parts = append(parts, cur)
        cur = ""
      }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 { parts = append(parts, cur) }
  return parts
}

fun bit_and(a: int, b: int): int {
  var ua = a
  var ub = b
  var res = 0
  var bit = 1
  while ua != 0 || ub != 0 {
    if ua % 2 == 1 && ub % 2 == 1 { res = res + bit }
    ua = (ua / 2) as int
    ub = (ub / 2) as int
    bit = bit * 2
  }
  return res
}

fun low_bit(x: int): int {
  if x == 0 { return 0 }
  return x - bit_and(x, x - 1)
}

fun make2D(n: int): list<list<int>> {
  var arr: list<list<int>> = []
  var i = 0
  while i < n {
    var row: list<int> = []
    var j = 0
    while j < n {
      row = append(row, 0)
      j = j + 1
    }
    arr = append(arr, row)
    i = i + 1
  }
  return arr
}

fun update(bit: list<list<int>>, n: int, x: int, y: int, delta: int) {
  var i = x
  while i <= n {
    var j = y
    while j <= n {
      bit[i][j] = bit[i][j] + delta
      j = j + low_bit(j)
    }
    i = i + low_bit(i)
  }
}

fun prefix(bit: list<list<int>>, x: int, y: int): int {
  var sum = 0
  var i = x
  while i > 0 {
    var j = y
    while j > 0 {
      sum = sum + bit[i][j]
      j = j - low_bit(j)
    }
    i = i - low_bit(i)
  }
  return sum
}

fun query(bit: list<list<int>>, x1: int, y1: int, x2: int, y2: int): int {
  let a = prefix(bit, x2 + 1, y2 + 1)
  let b = prefix(bit, x1, y2 + 1)
  let c = prefix(bit, x2 + 1, y1)
  let d = prefix(bit, x1, y1)
  return a - b - c + d
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let t = tLine as int
  for _ in 0..t {
    let nLine = input()
    if nLine == nil || nLine == "" { return }
    let n = nLine as int
    var bit = make2D(n + 1)
    var arr = make2D(n)
    while true {
      let line = input()
      if line == nil || line == "" { return }
      if line == "END" { break }
      let parts = splitSpaces(line)
      if parts[0] == "SET" {
        let x = parts[1] as int
        let y = parts[2] as int
        let val = parts[3] as int
        let diff = val - arr[x][y]
        arr[x][y] = val
        update(bit, n, x + 1, y + 1, diff)
      } else if parts[0] == "SUM" {
        let x1 = parts[1] as int
        let y1 = parts[2] as int
        let x2 = parts[3] as int
        let y2 = parts[4] as int
        let res = query(bit, x1, y1, x2, y2)
        print(str(res))
      }
    }
    print("")
  }
}

main()
