// Solution for SPOJ FUSION - Fusion Cube
// https://www.spoj.com/problems/FUSION/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var neg = false
  if len(str) > 0 && str[0:1] == "-" {
    neg = true
    i = 1
  }
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  if neg { n = -n }
  return n
}

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " {
      if len(cur) > 0 {
        parts = append(parts, cur)
        cur = ""
      }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 {
    parts = append(parts, cur)
  }
  return parts
}

fun main() {
  let tStr = input()
  if tStr == "" { return }
  let t = parseIntStr(tStr)
  for _ in 0..t {
    let head = input()
    let hp = splitSpaces(head)
    let k = parseIntStr(hp[0])
    let n = parseIntStr(hp[1])
    var best = n
    var i = 0
    while i < k {
      let line = input()
      let p = splitSpaces(line)
      let x = parseIntStr(p[0])
      let y = parseIntStr(p[1])
      let z = parseIntStr(p[2])
      var far = x
      if y > far { far = y }
      if z > far { far = z }
      let nx = n - x
      if nx > far { far = nx }
      let ny = n - y
      if ny > far { far = ny }
      let nz = n - z
      if nz > far { far = nz }
      if far < best { best = far }
      i = i + 1
    }
    print(best)
  }
}

main()
