// Solution for SPOJ ALL - All Discs Considered
// https://www.spoj.com/problems/ALL/

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur: string = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " || ch == "\t" || ch == "\r" || ch == "\n" {
      if len(cur) > 0 { parts = append(parts, cur); cur = "" }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 { parts = append(parts, cur) }
  return parts
}

fun run(start: int, n1: int, n2: int, adj: list<list<int>>, indeg: list<int>): int {
  var indeg2: list<int> = []
  var i = 0
  while i < len(indeg) {
    indeg2 = append(indeg2, indeg[i])
    i = i + 1
  }
  var q1: list<int> = []
  var q2: list<int> = []
  i = 0
  while i < len(indeg2) {
    if indeg2[i] == 0 {
      if i < n1 { q1 = append(q1, i) } else { q2 = append(q2, i) }
    }
    i = i + 1
  }
  var idx1 = 0
  var idx2 = 0
  var remaining = len(indeg2)
  var cur = start
  var changes = 1
  while remaining > 0 {
    if cur == 1 {
      if idx1 >= len(q1) {
        if idx2 >= len(q2) { break }
        cur = 2
        changes = changes + 1
        continue
      }
      let node = q1[idx1]
      idx1 = idx1 + 1
      remaining = remaining - 1
      var j = 0
      while j < len(adj[node]) {
        let v = adj[node][j]
        indeg2[v] = indeg2[v] - 1
        if indeg2[v] == 0 {
          if v < n1 { q1 = append(q1, v) } else { q2 = append(q2, v) }
        }
        j = j + 1
      }
    } else {
      if idx2 >= len(q2) {
        if idx1 >= len(q1) { break }
        cur = 1
        changes = changes + 1
        continue
      }
      let node = q2[idx2]
      idx2 = idx2 + 1
      remaining = remaining - 1
      var j = 0
      while j < len(adj[node]) {
        let v = adj[node][j]
        indeg2[v] = indeg2[v] - 1
        if indeg2[v] == 0 {
          if v < n1 { q1 = append(q1, v) } else { q2 = append(q2, v) }
        }
        j = j + 1
      }
    }
  }
  changes = changes + 1
  return changes
}

fun main() {
  while true {
    let line = input()
    if line == "" { break }
    let parts = splitSpaces(line)
    let n1 = parts[0] as int
    let n2 = parts[1] as int
    let d = parts[2] as int
    if n1 == 0 && n2 == 0 && d == 0 { break }
    let n = n1 + n2
    var adj: list<list<int>> = []
    var indeg: list<int> = []
    var i = 0
    while i < n {
      adj = append(adj, [])
      indeg = append(indeg, 0)
      i = i + 1
    }
    var k = 0
    while k < d {
      let depLine = input()
      let depParts = splitSpaces(depLine)
      let x = depParts[0] as int
      let y = depParts[1] as int
      adj[y - 1] = append(adj[y - 1], x - 1)
      indeg[x - 1] = indeg[x - 1] + 1
      k = k + 1
    }
    let c1 = run(1, n1, n2, adj, indeg)
    let c2 = run(2, n1, n2, adj, indeg)
    var ans = c1
    if c2 < ans { ans = c2 }
    print(str(ans))
  }
}

main()
