// [The Bytelandian Cryptographer (Act IV)](https://www.spoj.com/problems/CRYPTO4)

let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

fun charIndex(c: string): int {
  var i = 0
  while i < 26 {
    if substring(alphabet, i, i + 1) == c {
      return i
    }
    i = i + 1
  }
  return 0
}

fun charOf(n: int): string {
  return substring(alphabet, n, n + 1)
}

fun main() {
  let t = int(input())
  var case = 0
  while case < t {
    let m = int(input())
    let x = input()
    let y = input()
    let L = len(x)
    var diff: list<int> = []
    var known: list<bool> = []
    var i = 0
    while i < L {
      let xc = substring(x, i, i + 1)
      let yc = substring(y, i, i + 1)
      if xc != "*" && yc != "*" {
        diff = append(diff, (charIndex(yc) - charIndex(xc) + 26) % 26)
        known = append(known, true)
      } else {
        diff = append(diff, 0)
        known = append(known, false)
      }
      i = i + 1
    }
    var ns: list<int> = []
    var keys: list<list<int>> = []
    var n = 1
    while n <= m {
      var key: list<int> = []
      var j = 0
      while j < n {
        key = append(key, -1)
        j = j + 1
      }
      var ok = true
      var idx = 0
      while idx < L {
        if known[idx] {
          let d = diff[idx]
          let r = idx % n
          if key[r] == -1 {
            key[r] = d
          } else {
            if key[r] != d {
              ok = false
              break
            }
          }
        }
        idx = idx + 1
      }
      if ok {
        ns = append(ns, n)
        keys = append(keys, key)
      }
      n = n + 1
    }
    var resChars: list<string> = []
    i = 0
    while i < L {
      resChars = append(resChars, "")
      i = i + 1
    }
    var vi = 0
    while vi < len(ns) {
      let nval = ns[vi]
      let key = keys[vi]
      var i = 0
      while i < L {
        let xi = substring(x, i, i + 1)
        var c = ""
        if xi != "*" {
          c = xi
        } else {
          let yi = substring(y, i, i + 1)
          let kv = key[i % nval]
          if yi != "*" && kv != -1 {
            let val = (charIndex(yi) - kv + 26) % 26
            c = charOf(val)
          } else {
            c = "*"
          }
        }
        if vi == 0 {
          resChars[i] = c
        } else {
          if resChars[i] != c {
            resChars[i] = "*"
          }
          if c == "*" {
            resChars[i] = "*"
          }
        }
        i = i + 1
      }
      vi = vi + 1
    }
    var res = ""
    if len(ns) == 0 {
      var i = 0
      while i < L {
        res = res + "*"
        i = i + 1
      }
    } else {
      var i = 0
      while i < L {
        res = res + resChars[i]
        i = i + 1
      }
    }
    print(res)
    case = case + 1
  }
}

main()
