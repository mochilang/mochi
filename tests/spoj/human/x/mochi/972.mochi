// Solution for SPOJ BIRTHDAY - Birthday
// https://www.spoj.com/problems/BIRTHDAY/

var tokens: list<string> = []
var tokIdx = 0

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " || ch == "\t" || ch == "\r" || ch == "\n" {
      if len(cur) > 0 { parts = append(parts, cur); cur = "" }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 { parts = append(parts, cur) }
  return parts
}

fun nextToken(): string {
  while tokIdx >= len(tokens) {
    let line = input()
    if line == nil { return nil }
    tokens = splitSpaces(line)
    tokIdx = 0
  }
  let t = tokens[tokIdx]
  tokIdx = tokIdx + 1
  return t
}

fun nextInt(): int {
  let t = nextToken()
  if t == nil { return 0 }
  return int(t)
}

fun makeIntList(n: int, v: int): list<int> {
  var arr: list<int> = []
  var i = 0
  while i < n {
    arr = append(arr, v)
    i = i + 1
  }
  return arr
}

fun sortInts(arr: list<int>): list<int> {
  var i = 1
  while i < len(arr) {
    var j = i
    while j > 0 && arr[j-1] > arr[j] {
      let tmp = arr[j-1]
      arr[j-1] = arr[j]
      arr[j] = tmp
      j = j - 1
    }
    i = i + 1
  }
  return arr
}

fun upperBound(arr: list<int>, target: int): int {
  var lo = 0
  var hi = len(arr)
  while lo < hi {
    let mid = (lo + hi) / 2
    if arr[mid] <= target {
      lo = mid + 1
    } else {
      hi = mid
    }
  }
  return lo
}

fun main() {
  let nTok = nextToken()
  if nTok == nil { return }
  let n = int(nTok)
  var p: list<int> = []
  var i = 0
  while i < n {
    p = append(p, nextInt())
    i = i + 1
  }
  var pos = makeIntList(n + 1, 0)
  i = 0
  while i < n {
    pos[p[i]] = i
    i = i + 1
  }
  var ideal: list<int> = []
  i = 1
  while i <= n {
    var diff = (i - 1) - pos[i]
    var t = diff % n
    if t < 0 { t = t + n }
    ideal = append(ideal, t)
    i = i + 1
  }
  ideal = sortInts(ideal)
  var t2: list<int> = []
  i = 0
  while i < n {
    t2 = append(t2, ideal[i])
    i = i + 1
  }
  i = 0
  while i < n {
    t2 = append(t2, ideal[i] + n)
    i = i + 1
  }
  var prefix: list<int> = []
  prefix = append(prefix, 0)
  i = 0
  while i < len(t2) {
    prefix = append(prefix, prefix[i] + t2[i])
    i = i + 1
  }
  let half = n / 2
  var ans = 1000000000
  i = 0
  while i < n {
    let s = ideal[i]
    let k = upperBound(t2, s + half)
    let c1 = k - i
    let sum1 = prefix[k] - prefix[i]
    let c2 = (i + n) - k
    let sum2 = prefix[i + n] - prefix[k]
    let cost = (sum1 - s * c1) + (c2 * n - (sum2 - s * c2))
    if cost < ans { ans = cost }
    i = i + 1
  }
  print(str(ans))
}

main()
