// Solution for SPOJ SHORTCUT - Shortcut
// https://www.spoj.com/problems/SHORTCUT/

let digits = {
  "0":0, "1":1, "2":2, "3":3, "4":4,
  "5":5, "6":6, "7":7, "8":8, "9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var neg = false
  if len(str) > 0 && str[0:1] == "-" {
    neg = true
    i = 1
  }
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  if neg { n = -n }
  return n
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let t = parseIntStr(tLine)
  var case = 0
  while case < t {
    let nLine = input()
    let n = parseIntStr(nLine)
    let path = input()
    var xs: list<int> = []
    var ys: list<int> = []
    var h: list<int> = []
    var v: list<int> = []
    var x = 0
    var y = 0
    var hc = 0
    var vc = 0
    xs = append(xs, x)
    ys = append(ys, y)
    h = append(h, hc)
    v = append(v, vc)
    var i = 0
    while i < n {
      let ch = path[i:i+1]
      if ch == "N" {
        y = y + 1
        vc = vc + 1
      } else if ch == "S" {
        y = y - 1
        vc = vc + 1
      } else if ch == "E" {
        x = x + 1
        hc = hc + 1
      } else {
        x = x - 1
        hc = hc + 1
      }
      xs = append(xs, x)
      ys = append(ys, y)
      h = append(h, hc)
      v = append(v, vc)
      i = i + 1
    }
    var bestLen = 1000000000
    var bestB = 0
    var bestE = 0
    var bestDir = "N"
    i = 0
    while i <= n {
      var j = i + 1
      while j <= n {
        if xs[i] == xs[j] {
          var dist = ys[j] - ys[i]
          if dist < 0 { dist = -dist }
          if dist > 0 && j - i > 1 && h[j] - h[i] > 0 {
            let dir = if ys[j] > ys[i] { "N" } else { "S" }
            if dist < bestLen || (dist == bestLen && i < bestB) || (dist == bestLen && i == bestB && j > bestE) {
              bestLen = dist
              bestB = i
              bestE = j
              bestDir = dir
            }
          }
        } else if ys[i] == ys[j] {
          var dist = xs[j] - xs[i]
          if dist < 0 { dist = -dist }
          if dist > 0 && j - i > 1 && v[j] - v[i] > 0 {
            let dir = if xs[j] > xs[i] { "E" } else { "W" }
            if dist < bestLen || (dist == bestLen && i < bestB) || (dist == bestLen && i == bestB && j > bestE) {
              bestLen = dist
              bestB = i
              bestE = j
              bestDir = dir
            }
          }
        }
        j = j + 1
      }
      i = i + 1
    }
    print(str(bestLen) + " " + str(bestB) + " " + str(bestE) + " " + bestDir)
    case = case + 1
  }
}

main()
