// Solution for SPOJ STEVE - Voracious Steve
// https://www.spoj.com/problems/STEVE/

fun key(n: int, s: int, d: int, t: int): int {
  return (((n * 101) + s) * 101 + d) * 2 + t
}

let MAXK = key(100, 100, 100, 1) + 1
var memo: list<int> = []

fun dfs(n: int, s: int, d: int, t: int, m: int): int {
  let k = key(n, s, d, t)
  if memo[k] != 0-1 { return memo[k] }
  var res = 0
  if n == 0 {
    if s == 0 && d == 0 {
      res = 0
    } else if t == 0 {
      res = dfs(s, 0, 0, 0, m)
    } else {
      res = s + (d - dfs(d, 0, 0, 0, m))
    }
  } else if t == 0 {
    var i = 1
    while i <= m && i <= n {
      let v = dfs(n - i, s + i, d, 1, m)
      if v > res { res = v }
      i = i + 1
    }
  } else {
    res = 1000000000
    var i = 1
    while i <= m && i <= n {
      let v = dfs(n - i, s, d + i, 0, m)
      if v < res { res = v }
      i = i + 1
    }
  }
  memo[k] = res
  return res
}

fun solve(n: int, m: int): int {
  memo = []
  var i = 0
  while i < MAXK {
    memo = append(memo, 0-1)
    i = i + 1
  }
  return dfs(n, 0, 0, 0, m)
}

fun split2(s: string): list<string> {
  var res: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = substring(s, i, i+1)
    if ch == " " {
      if cur != "" { res = append(res, cur); cur = "" }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if cur != "" { res = append(res, cur) }
  return res
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let t = tLine as int
  var idx = 0
  while idx < t {
    var line = input()
    while line == "" { line = input() }
    let ps = split2(line)
    let n = ps[0] as int
    let m = ps[1] as int
    print(str(solve(n, m)))
    idx = idx + 1
  }
}

main()
