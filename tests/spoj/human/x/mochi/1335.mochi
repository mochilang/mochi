// Solution for SPOJ KINGPIN - King Ping
// https://www.spoj.com/problems/KINGPIN/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseInts(line: string): list<int> {
  var nums: list<int> = []
  var i = 0
  var cur = 0
  var sign = 1
  var inNum = false
  while i < len(line) {
    let ch = line[i:i+1]
    if ch == "-" {
      sign = -1
      i = i + 1
    } else if ch >= "0" && ch <= "9" {
      cur = cur * 10 + (digits[ch] as int)
      inNum = true
      i = i + 1
    } else {
      if inNum {
        nums = append(nums, sign * cur)
        cur = 0
        sign = 1
        inNum = false
      }
      i = i + 1
    }
  }
  if inNum {
    nums = append(nums, sign * cur)
  }
  return nums
}

fun absInt(x: int): int {
  if x < 0 { return 0 - x }
  return x
}

fun determinant(a: list<list<int>>): int {
  let n = len(a)
  if n == 0 { return 1 }
  var m = a
  var sign = 1
  var denom = 1
  var k = 0
  while k < n - 1 {
    var pivot = m[k][k] as int
    if pivot == 0 {
      var i = k + 1
      while i < n && m[i][k] == 0 { i = i + 1 }
      if i == n { return 0 }
      var temp = m[k]
      m[k] = m[i]
      m[i] = temp
      sign = 0 - sign
      pivot = m[k][k] as int
    }
    var i = k + 1
    while i < n {
      var j = k + 1
      while j < n {
        m[i][j] = (m[i][j] * pivot - m[i][k] * m[k][j]) / denom
        j = j + 1
      }
      i = i + 1
    }
    denom = pivot
    k = k + 1
  }
  return sign * (m[n-1][n-1] as int)
}

fun main() {
  let first = input()
  if first == "" { return }
  let wh = parseInts(first)
  let W = wh[0] as int
  let H = wh[1] as int
  let N = W * H

  var adj: list<list<int>> = []
  for i in 0..N {
    var row: list<int> = []
    for j in 0..N { row = append(row, 0) }
    adj = append(adj, row)
  }
  var r = 0
  while r < H {
    var c = 0
    while c < W {
      let u = r * W + c
      if r + 1 < H {
        let v = (r + 1) * W + c
        adj[u][v] = 1
        adj[v][u] = 1
      }
      if c + 1 < W {
        let v2 = r * W + (c + 1)
        adj[u][v2] = 1
        adj[v2][u] = 1
      }
      c = c + 1
    }
    r = r + 1
  }

  let kLine = input()
  let K = int(kLine)
  var t = 0
  while t < K {
    let line = input()
    if line == "" { continue }
    let w = parseInts(line)
    let r1 = (w[0] as int) - 1
    let c1 = (w[1] as int) - 1
    let r2 = (w[2] as int) - 1
    let c2 = (w[3] as int) - 1
    let u = r1 * W + c1
    let v = r2 * W + c2
    adj[u][v] = 0
    adj[v][u] = 0
    t = t + 1
  }

  if N == 1 {
    print("1")
    return
  }

  var lap: list<list<int>> = []
  for i in 0..N {
    var row: list<int> = []
    for j in 0..N { row = append(row, 0) }
    lap = append(lap, row)
  }
  var i = 0
  while i < N {
    var deg = 0
    var j = 0
    while j < N {
      if adj[i][j] == 1 {
        deg = deg + 1
        lap[i][j] = -1
      }
      j = j + 1
    }
    lap[i][i] = deg
    i = i + 1
  }

  let mSize = N - 1
  var mat: list<list<int>> = []
  i = 0
  while i < mSize {
    var row: list<int> = []
    var j = 0
    while j < mSize {
      row = append(row, lap[i][j])
      j = j + 1
    }
    mat = append(mat, row)
    i = i + 1
  }

  var det = determinant(mat)
  det = absInt(det)
  print(det)
}

main()
