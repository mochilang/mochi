// Solution for SPOJ NOCHANGE - No Change
// https://www.spoj.com/problems/NOCHANGE/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  return n
}

fun split(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " {
      if len(cur) > 0 {
        parts = append(parts, cur)
        cur = ""
      }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 { parts = append(parts, cur) }
  return parts
}

fun readTokens(): list<string> {
  var toks: list<string> = []
  while true {
    let line = input()
    if line == "" { break }
    let ps = split(line)
    var i = 0
    while i < len(ps) {
      toks = append(toks, ps[i])
      i = i + 1
    }
  }
  return toks
}

fun main() {
  let toks = readTokens()
  if len(toks) < 2 { return }
  let x = parseIntStr(toks[0])
  let k = parseIntStr(toks[1])
  var vals: list<int> = []
  var idx = 0
  while idx < k {
    vals = append(vals, parseIntStr(toks[2+idx]))
    idx = idx + 1
  }
  // prefix sums become coin weights
  var weights: list<int> = []
  var pref = 0
  idx = 0
  while idx < k {
    pref = pref + vals[idx]
    weights = append(weights, pref)
    idx = idx + 1
  }
  // dp array
  var dp: list<int> = []
  var i = 0
  while i <= x {
    dp = append(dp, 0)
    i = i + 1
  }
  dp[0] = 1
  idx = 0
  while idx < len(weights) {
    let w = weights[idx]
    i = w
    while i <= x {
      if dp[i - w] == 1 { dp[i] = 1 }
      i = i + 1
    }
    idx = idx + 1
  }
  if dp[x] == 1 {
    print("YES")
  } else {
    print("NO")
  }
}

main()
