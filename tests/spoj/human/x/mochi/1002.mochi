// Solution for SPOJ UJ - Uncle Jack
// https://www.spoj.com/problems/UJ/

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " || ch == "\t" {
      if cur != "" { parts = append(parts, cur); cur = "" }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if cur != "" { parts = append(parts, cur) }
  return parts
}

fun powBig(base: int, exp: int): bigint {
  var result: bigint = 1 as bigint
  var b: bigint = base as bigint
  var e = exp
  while e > 0 {
    if e % 2 == 1 { result = result * b }
    b = b * b
    e = e / 2
  }
  return result
}

fun main() {
  while true {
    let line = input()
    if line == nil { break }
    let parts = splitSpaces(line)
    if len(parts) < 2 { continue }
    let n = parts[0] as int
    let d = parts[1] as int
    if n == 0 && d == 0 { break }
    let ans = powBig(n, d)
    print(str(ans))
  }
}

main()
