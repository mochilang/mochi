// Solution for SPOJ MKWAVES - Making Waves
// https://www.spoj.com/problems/MKWAVES/

let pi = 3.141592653589793

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(s: string): int {
  var i = 0
  var neg = false
  if len(s) > 0 && s[0:1] == "-" {
    neg = true
    i = 1
  }
  var n = 0
  while i < len(s) {
    n = n * 10 + (digits[s[i:i+1]] as int)
    i = i + 1
  }
  if neg { n = 0 - n }
  return n
}

fun parseFloatStr(s: string): float {
  var i = 0
  var neg = false
  if len(s) > 0 && s[0:1] == "-" {
    neg = true
    i = 1
  }
  var val = 0.0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == "." || ch == "e" || ch == "E" { break }
    val = val * 10.0 + (digits[ch] as float)
    i = i + 1
  }
  if i < len(s) && s[i:i+1] == "." {
    i = i + 1
    var base = 0.1
    while i < len(s) {
      let ch = s[i:i+1]
      if ch == "e" || ch == "E" { break }
      val = val + (digits[ch] as float) * base
      base = base / 10.0
      i = i + 1
    }
  }
  var exp = 0
  var expNeg = false
  if i < len(s) && (s[i:i+1] == "e" || s[i:i+1] == "E") {
    i = i + 1
    if i < len(s) {
      if s[i:i+1] == "-" { expNeg = true; i = i + 1 }
      else if s[i:i+1] == "+" { i = i + 1 }
    }
    while i < len(s) {
      exp = exp * 10 + (digits[s[i:i+1]] as int)
      i = i + 1
    }
  }
  var pow = 1.0
  var j = 0
  while j < exp {
    pow = pow * 10.0
    j = j + 1
  }
  if expNeg { val = val / pow } else { val = val * pow }
  if neg { val = 0.0 - val }
  return val
}

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " || ch == "\t" || ch == "\n" || ch == "\r" {
      if cur != "" { parts = append(parts, cur); cur = "" }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if cur != "" { parts = append(parts, cur) }
  return parts
}

fun readFloats(n: int): list<float> {
  var res: list<float> = []
  var tokens: list<string> = []
  var idx = 0
  while len(res) < n {
    if idx >= len(tokens) {
      var line = input()
      while line == "" {
        line = input()
      }
      tokens = splitSpaces(line)
      idx = 0
    } else {
      res = append(res, parseFloatStr(tokens[idx]))
      idx = idx + 1
    }
  }
  return res
}

fun sin(x: float): float {
  var y = x
  while y > pi { y = y - 2.0 * pi }
  while y < 0.0 - pi { y = y + 2.0 * pi }
  var term = y
  var res = y
  var i = 1
  while i < 10 {
    term = -term * y * y / ((2.0 * (i as float)) * (2.0 * (i as float) + 1.0))
    res = res + term
    i = i + 1
  }
  return res
}

fun intToString(n: int): string {
  if n == 0 { return "0" }
  let ds = ["0","1","2","3","4","5","6","7","8","9"]
  var s = ""
  var m = n
  var neg = false
  if m < 0 { neg = true; m = 0 - m }
  while m > 0 {
    let d = m % 10
    s = ds[d] + s
    m = m / 10
  }
  if neg { s = "-" + s }
  return s
}

fun detect(samples: list<float>): list<int> {
  let n = len(samples)
  var table: list<list<float>> = []
  var f = 400
  while f <= 600 {
    var arr: list<float> = []
    var k = 1
    while k <= n {
      let ang = (f as float) * (k as float) / (n as float) * pi / 180.0
      arr = append(arr, sin(ang))
      k = k + 1
    }
    table = append(table, arr)
    f = f + 1
  }
  var bestErr = 1e100
  var best1 = 0
  var best2 = 0
  var i = 0
  while i < 201 {
    var j = i + 1
    while j < 201 {
      var err = 0.0
      var k = 0
      while k < n {
        let diff = samples[k] - table[i][k] - table[j][k]
        err = err + diff * diff
        k = k + 1
      }
      if err < bestErr {
        bestErr = err
        best1 = 400 + i
        best2 = 400 + j
      }
      j = j + 1
    }
    i = i + 1
  }
  return [best1, best2]
}

fun main() {
  var caseIdx = 1
  while true {
    let line = input()
    if line == nil { break }
    if line == "" { continue }
    let n = parseIntStr(line)
    if n == 0 { break }
    let samples = readFloats(n)
    let fs = detect(samples)
    print("Case " + intToString(caseIdx) + ", f1 = " + intToString(fs[0]) + ", f2 = " + intToString(fs[1]))
    caseIdx = caseIdx + 1
  }
}

main()
