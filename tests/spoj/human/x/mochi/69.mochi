// Solution for SPOJ MOULDS - Moulds
// https://www.spoj.com/problems/MOULDS/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun solve(line: string): int {
  var i = 0
  var x = 0
  var y = 0
  var z = -1
  var volume = 0
  var visited: map<int,int> = {}
  while i < len(line) {
    let ch = line[i:i+1]
    if ch == "[" || ch == "]" || ch == ";" {
      i = i + 1
    } else if ch == "^" {
      i = i + 1
      var sign = 1
      if line[i:i+1] == "-" {
        sign = -1
        i = i + 1
      } else if line[i:i+1] == "+" {
        i = i + 1
      }
      var n = 0
      while i < len(line) {
        let c = line[i:i+1]
        if c < "0" || c > "9" { break }
        n = n * 10 + (digits[c] as int)
        i = i + 1
      }
      let d = sign * n
      let oldZ = z
      z = z + d
      if d > 0 {
        var low = oldZ
        if low < 0 { low = 0 }
        var high = z
        if high > 30 { high = 30 }
        var depth = low
        while depth < high {
          if 0 <= x && x < 250 && 0 <= y && y < 250 && 0 <= depth && depth < 30 {
            let key = ((x * 250) + y) * 30 + depth
            if visited[key] != 1 {
              visited[key] = 1
              volume = volume + 1
            }
          }
          depth = depth + 1
        }
      }
    } else if ch == "@" {
      i = i + 1
      let dir = line[i:i+1]
      i = i + 1
      var sign = 1
      if line[i:i+1] == "-" {
        sign = -1
        i = i + 1
      } else if line[i:i+1] == "+" {
        i = i + 1
      }
      var n = 0
      while i < len(line) {
        let c = line[i:i+1]
        if c < "0" || c > "9" { break }
        n = n * 10 + (digits[c] as int)
        i = i + 1
      }
      var dist = sign * n
      var dx = 0
      var dy = 0
      if dir == "N" { dy = -1 }
      if dir == "S" { dy = 1 }
      if dir == "E" { dx = 1 }
      if dir == "W" { dx = -1 }
      if dist < 0 {
        dist = -dist
        dx = -dx
        dy = -dy
      }
      var low = z - 30
      if low < 0 { low = 0 }
      var high = z
      if high > 30 { high = 30 }
      var step = 0
      while step < dist {
        x = x + dx
        y = y + dy
        var depth = low
        while depth < high {
          if 0 <= x && x < 250 && 0 <= y && y < 250 && 0 <= depth && depth < 30 {
            let key = ((x * 250) + y) * 30 + depth
            if visited[key] != 1 {
              visited[key] = 1
              volume = volume + 1
            }
          }
          depth = depth + 1
        }
        step = step + 1
      }
    } else {
      i = i + 1
    }
  }
  return volume
}

fun parseIntStr(str: string): int {
  var i = 0
  var sign = 1
  if len(str) > 0 && str[0:1] == "-" {
    sign = -1
    i = 1
  }
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  return sign * n
}

fun main() {
  let tStr = input()
  if tStr == "" { return }
  let t = parseIntStr(tStr)
  var caseIndex = 0
  while caseIndex < t {
    let line = input()
    let res = solve(line)
    print(res)
    caseIndex = caseIndex + 1
  }
}

main()
