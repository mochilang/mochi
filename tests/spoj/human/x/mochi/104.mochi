// Solution for SPOJ HIGH - Highways
// https://www.spoj.com/problems/HIGH/

fun split(s: string): list<string> {
  var parts: list<string> = []
  var cur: string = ""
  var i = 0
  while i < len(s) {
    let c = s[i:i+1]
    if c == " " {
      if len(cur) > 0 { parts = append(parts, cur); cur = "" }
    } else {
      cur = cur + c
    }
    i = i + 1
  }
  if len(cur) > 0 { parts = append(parts, cur) }
  return parts
}

fun determinant(mat: list<list<float>>, n: int): int {
  var det = 1.0
  var i = 0
  while i < n {
    var pivot = mat[i][i]
    var r = i
    while pivot == 0.0 && r + 1 < n {
      r = r + 1
      pivot = mat[r][i]
    }
    if pivot == 0.0 { return 0 }
    if r != i {
      var k = i
      while k < n {
        let tmp = mat[i][k]
        mat[i][k] = mat[r][k]
        mat[r][k] = tmp
        k = k + 1
      }
      det = -det
    }
    pivot = mat[i][i]
    det = det * pivot
    var j = i + 1
    while j < n {
      let factor = mat[j][i] / pivot
      var k = i
      while k < n {
        mat[j][k] = mat[j][k] - factor * mat[i][k]
        k = k + 1
      }
      j = j + 1
    }
    i = i + 1
  }
  if det < 0.0 { det = -det }
  return (det + 0.5) as int
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let t = tLine as int
  var case = 0
  while case < t {
    var line = input()
    while line == "" { line = input() }
    let parts = split(line)
    let n = parts[0] as int
    let m = parts[1] as int
    var lap: list<list<float>> = []
    var i = 0
    while i < n {
      var row: list<float> = []
      var j = 0
      while j < n {
        row = append(row, 0.0)
        j = j + 1
      }
      lap = append(lap, row)
      i = i + 1
    }
    var e = 0
    while e < m {
      line = input()
      if line == "" { continue }
      let p = split(line)
      let a = (p[0] as int) - 1
      let b = (p[1] as int) - 1
      lap[a][a] = lap[a][a] + 1.0
      lap[b][b] = lap[b][b] + 1.0
      lap[a][b] = lap[a][b] - 1.0
      lap[b][a] = lap[b][a] - 1.0
      e = e + 1
    }
    if n == 1 {
      print(1)
    } else {
      var size = n - 1
      var minor: list<list<float>> = []
      i = 0
      while i < size {
        var row: list<float> = []
        var j = 0
        while j < size {
          row = append(row, lap[i][j])
          j = j + 1
        }
        minor = append(minor, row)
        i = i + 1
      }
      let ans = determinant(minor, size)
      print(ans)
    }
    case = case + 1
  }
}

main()
