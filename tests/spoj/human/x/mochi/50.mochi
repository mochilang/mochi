// Solution for SPOJ INCARDS - Invitation Cards
// https://www.spoj.com/problems/INCARDS/

type Edge { to: int, cost: int }

type PQNode { v: int, w: int }

type PopRes { heap: list<PQNode>, node: PQNode }

fun parseIntStr(str: string): int {
  let digits = {
    "0":0,"1":1,"2":2,"3":3,"4":4,
    "5":5,"6":6,"7":7,"8":8,"9":9,
  }
  var i = 0
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  return n
}

fun split(s: string): list<string> {
  var res: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = substring(s, i, i+1)
    if ch == " " || ch == "\t" {
      if cur != "" {
        res = append(res, cur)
        cur = ""
      }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if cur != "" { res = append(res, cur) }
  return res
}

fun make_edge_list(n: int): list<list<Edge>> {
  var lst: list<list<Edge>> = []
  var i = 0
  while i <= n {
    lst = append(lst, [])
    i = i + 1
  }
  return lst
}

fun make_int_list(n: int, value: int): list<int> {
  var lst: list<int> = []
  var i = 0
  while i < n {
    lst = append(lst, value)
    i = i + 1
  }
  return lst
}

fun heap_push(h: list<PQNode>, item: PQNode): list<PQNode> {
  var heap = append(h, item)
  var i = len(heap) - 1
  while i > 0 {
    let p = (i - 1) / 2
    if heap[p].w <= heap[i].w { break }
    let tmp = heap[p]
    heap[p] = heap[i]
    heap[i] = tmp
    i = p
  }
  return heap
}

fun heap_pop(h: list<PQNode>): PopRes {
  let top = h[0]
  var heap = h[0:len(h)-1]
  if len(heap) > 0 {
    heap[0] = h[len(h)-1]
    var i = 0
    while true {
      let l = 2*i + 1
      let r = 2*i + 2
      var smallest = i
      if l < len(heap) && heap[l].w < heap[smallest].w { smallest = l }
      if r < len(heap) && heap[r].w < heap[smallest].w { smallest = r }
      if smallest == i { break }
      let tmp = heap[i]
      heap[i] = heap[smallest]
      heap[smallest] = tmp
      i = smallest
    }
  }
  return PopRes { heap: heap, node: top }
}

fun dijkstra(graph: list<list<Edge>>, n: int): list<int> {
  let inf = 1000000000000
  var dist = make_int_list(n+1, inf)
  dist[1] = 0
  var heap: list<PQNode> = []
  heap = heap_push(heap, PQNode{ v:1, w:0 })
  while len(heap) > 0 {
    let pr = heap_pop(heap)
    heap = pr.heap
    let cur = pr.node
    if cur.w != dist[cur.v] { continue }
    var i = 0
    while i < len(graph[cur.v]) {
      let e = graph[cur.v][i]
      let nd = cur.w + e.cost
      if nd < dist[e.to] {
        dist[e.to] = nd
        heap = heap_push(heap, PQNode{ v:e.to, w:nd })
      }
      i = i + 1
    }
  }
  return dist
}

fun main() {
  let tStr = input()
  if tStr == "" { return }
  let t = parseIntStr(tStr)
  var caseIndex = 0
  while caseIndex < t {
    var line = input()
    while line == "" { line = input() }
    let parts = split(line)
    let P = parseIntStr(parts[0])
    let Q = parseIntStr(parts[1])
    var g = make_edge_list(P)
    var rg = make_edge_list(P)
    var i = 0
    while i < Q {
      let l = input()
      let ps = split(l)
      let u = parseIntStr(ps[0])
      let v = parseIntStr(ps[1])
      let w = parseIntStr(ps[2])
      g[u] = append(g[u], Edge{ to:v, cost:w })
      rg[v] = append(rg[v], Edge{ to:u, cost:w })
      i = i + 1
    }
    let d1 = dijkstra(g, P)
    let d2 = dijkstra(rg, P)
    var sum = 0
    var k = 1
    while k <= P {
      sum = sum + d1[k] + d2[k]
      k = k + 1
    }
    print(sum)
    caseIndex = caseIndex + 1
  }
}

main()
