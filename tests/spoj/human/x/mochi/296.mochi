// Solution for SPOJ TWORK - Teamwork is Crucial
// https://www.spoj.com/problems/TWORK/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseInts(line: string): list<int> {
  var nums: list<int> = []
  var i = 0
  var cur = 0
  var sign = 1
  var inNum = false
  while i < len(line) {
    let ch = line[i:i+1]
    if ch == "-" {
      sign = -1
      i = i + 1
    } else if ch >= "0" && ch <= "9" {
      cur = cur * 10 + (digits[ch] as int)
      inNum = true
      i = i + 1
    } else {
      if inNum {
        nums = append(nums, sign * cur)
        cur = 0
        sign = 1
        inNum = false
      }
      i = i + 1
    }
  }
  if inNum {
    nums = append(nums, sign * cur)
  }
  return nums
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let T = parseInts(tLine)[0]
  var case = 0
  while case < T {
    var line = input()
    while line == "" { line = input() }
    let nm = parseInts(line)
    let n = nm[0] as int
    let m = nm[1] as int
    var adj: list<list<int>> = []
    for i in 0..(n + 1) {
      adj = append(adj, [])
    }
    var e = 0
    while e < m {
      var el = input()
      if el == "" { continue }
      let vals = parseInts(el)
      let a = vals[0] as int
      let b = vals[1] as int
      adj[a] = append(adj[a] as list<int>, b)
      adj[b] = append(adj[b] as list<int>, a)
      e = e + 1
    }
    var used: list<int> = []
    for i in 0..(n + 1) { used = append(used, 0) }
    var groups: list<list<int>> = []
    var v = 1
    while v <= n {
      if used[v] == 0 {
        var neighs: list<int> = []
        var j = 0
        while j < len(adj[v]) {
          let nb = adj[v][j] as int
          if used[nb] == 0 {
            neighs = append(neighs, nb)
          }
          j = j + 1
        }
        if len(neighs) >= 2 {
          let a = neighs[0] as int
          let b = neighs[1] as int
          used[v] = 1
          used[a] = 1
          used[b] = 1
          groups = append(groups, [v, a, b])
        }
      }
      v = v + 1
    }
    print(str(len(groups)))
    var gi = 0
    while gi < len(groups) {
      let g = groups[gi]
      print(str(g[0]) + " " + str(g[1]) + " " + str(g[2]))
      gi = gi + 1
    }
    case = case + 1
  }
}

main()
