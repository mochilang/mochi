// Solution for SPOJ QUEST5 - Nail Them
// https://www.spoj.com/problems/QUEST5/

type Interval { start: int, end: int }

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseInt(str: string): int {
  var i = 0
  var neg = false
  if len(str) > 0 && str[0:1] == "-" {
    neg = true
    i = 1
  }
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  if neg { n = -n }
  return n
}

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " || ch == "\t" || ch == "\r" || ch == "\n" {
      if len(cur) > 0 {
        parts = append(parts, cur)
        cur = ""
      }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 { parts = append(parts, cur) }
  return parts
}

fun merge(left: list<Interval>, right: list<Interval>): list<Interval> {
  var res: list<Interval> = []
  var i = 0
  var j = 0
  while i < len(left) && j < len(right) {
    let a = left[i]
    let b = right[j]
    if a.end < b.end {
      res = append(res, a)
      i = i + 1
    } else {
      res = append(res, b)
      j = j + 1
    }
  }
  while i < len(left) { res = append(res, left[i]); i = i + 1 }
  while j < len(right) { res = append(res, right[j]); j = j + 1 }
  return res
}

fun sortByEnd(arr: list<Interval>): list<Interval> {
  if len(arr) <= 1 { return arr }
  let mid = len(arr) / 2
  let left = sortByEnd(arr[0:mid])
  let right = sortByEnd(arr[mid:len(arr)])
  return merge(left, right)
}

fun main() {
  let tStr = input()
  if tStr == "" { return }
  let t = parseInt(tStr)
  var tc = 0
  while tc < t {
    let nStr = input()
    let n = parseInt(nStr)
    var intervals: list<Interval> = []
    var i = 0
    while i < n {
      let parts = splitSpaces(input())
      let a = parseInt(parts[0])
      let b = parseInt(parts[1])
      intervals = append(intervals, { start: a, end: b })
      i = i + 1
    }
    intervals = sortByEnd(intervals)
    var nails = 0
    var last = -1
    var idx = 0
    while idx < len(intervals) {
      let inter = intervals[idx]
      if inter.start > last {
        last = inter.end
        nails = nails + 1
      }
      idx = idx + 1
    }
    print(str(nails))
    tc = tc + 1
  }
}

main()
