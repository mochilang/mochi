// Solution for SPOJ BOOK - Booklets
// https://www.spoj.com/problems/BOOK/

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " || ch == "\t" || ch == "\r" || ch == "\n" {
      if cur != "" { parts = append(parts, cur); cur = "" }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if cur != "" { parts = append(parts, cur) }
  return parts
}

var tokens: list<string> = []
var idx = 0

fun nextToken(): string {
  while idx >= len(tokens) {
    let line = input()
    if line == nil { return nil }
    tokens = splitSpaces(line)
    idx = 0
  }
  let t = tokens[idx]
  idx = idx + 1
  return t
}

fun nextInt(): int {
  let t = nextToken()
  if t == nil { return 0 }
  return int(t)
}

fun sortBooks(arr: list<list<int>>): list<list<int>> {
  var i = 1
  while i < len(arr) {
    var j = i
    while j > 0 {
      let a = arr[j-1]
      let b = arr[j]
      if a[0] > b[0] || (a[0] == b[0] && a[1] > b[1]) {
        arr[j-1] = b
        arr[j] = a
        j = j - 1
      } else {
        break
      }
    }
    i = i + 1
  }
  return arr
}

fun main() {
  let t = nextInt()
  var c = 0
  while c < t {
    let schools = nextInt()
    let query = nextInt()
    let m = nextInt()
    var arr: list<list<int>> = []
    var i = 0
    while i < m {
      let p = nextInt()
      arr = append(arr, [p, i])
      i = i + 1
    }
    arr = sortBooks(arr)
    let base = m / schools
    let r = m % schools
    var start = 0
    var size = 0
    if query < r {
      start = query * (base + 1)
      size = base + 1
    } else {
      start = r * (base + 1) + (query - r) * base
      size = base
    }
    var end = start + size
    var k = start
    var minIdx = arr[start][1]
    var ans = arr[start][0]
    k = k + 1
    while k < end {
      let idx2 = arr[k][1]
      if idx2 < minIdx {
        minIdx = idx2
        ans = arr[k][0]
      }
      k = k + 1
    }
    print(str(ans))
    c = c + 1
  }
}

main()
