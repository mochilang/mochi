// Solution for SPOJ CASHIER - Blue Mary Needs Help Again
// https://www.spoj.com/problems/CASHIER/

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " || ch == "\t" || ch == "\r" {
      if len(cur) > 0 {
        parts = append(parts, cur)
        cur = ""
      }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 { parts = append(parts, cur) }
  return parts
}

fun make_list(n: int, value: int): list<int> {
  var arr: list<int> = []
  var i = 0
  while i < n {
    arr = append(arr, value)
    i = i + 1
  }
  return arr
}

fun bit_and(a: int, b: int): int {
  var ua = a
  var ub = b
  var res = 0
  var bit = 1
  while ua != 0 || ub != 0 {
    if ua % 2 == 1 && ub % 2 == 1 { res = res + bit }
    ua = (ua / 2) as int
    ub = (ub / 2) as int
    bit = bit * 2
  }
  return res
}

fun low_bit(x: int): int {
  if x == 0 { return 0 }
  return x - bit_and(x, x - 1)
}

fun fenwick_add(tree: list<int>, size: int, index: int, value: int): list<int> {
  var i = index
  while i <= size {
    tree[i] = tree[i] + value
    i = i + low_bit(i)
  }
  return tree
}

fun fenwick_prefix(tree: list<int>, index: int): int {
  var res = 0
  var i = index
  while i > 0 {
    res = res + tree[i]
    i = i - low_bit(i)
  }
  return res
}

fun fenwick_find(tree: list<int>, size: int, k: int): int {
  var idx = 0
  var bit = 1
  while bit < size { bit = bit * 2 }
  var step = bit
  while step > 0 {
    let next = idx + step
    if next <= size && tree[next] < k {
      k = k - tree[next]
      idx = next
    }
    step = step / 2
  }
  return idx + 1
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let T = int(tLine)
  var case = 0
  while case < T {
    var line = input()
    while line == "" { line = input() }
    let parts = splitSpaces(line)
    var M = int(parts[0])
    var MIN = int(parts[1])
    let SIZE = 300000
    let SHIFT = 100000
    var freq: list<int> = make_list(SIZE + 2, 0)
    var bit: list<int> = make_list(SIZE + 2, 0)
    var offset = 0
    var total = 0
    var removed = 0
    var curMinIdx = 1
    var cmd = 0
    while cmd < M {
      var cmdLine = input()
      if cmdLine == "" { break }
      let tok = splitSpaces(cmdLine)
      let c = tok[0]
      if c == "I" {
        let k = int(tok[1])
        if k >= MIN {
          let base = k - offset
          let idx = base + SHIFT + 1
          freq[idx] = freq[idx] + 1
          bit = fenwick_add(bit, SIZE + 1, idx, 1)
          total = total + 1
        }
      } else if c == "A" {
        let k = int(tok[1])
        offset = offset + k
      } else if c == "S" {
        let k = int(tok[1])
        offset = offset - k
        let newMinIdx = MIN - offset + SHIFT + 1
        while curMinIdx < newMinIdx {
          if freq[curMinIdx] > 0 {
            bit = fenwick_add(bit, SIZE + 1, curMinIdx, -freq[curMinIdx])
            total = total - freq[curMinIdx]
            removed = removed + freq[curMinIdx]
            freq[curMinIdx] = 0
          }
          curMinIdx = curMinIdx + 1
        }
      } else if c == "F" {
        let k = int(tok[1])
        if k > total {
          print("-1")
        } else {
          let order = total - k + 1
          let idx = fenwick_find(bit, SIZE + 1, order)
          let wage = idx - 1 - SHIFT + offset
          print(wage)
        }
      }
      cmd = cmd + 1
    }
    print(removed)
    case = case + 1
  }
}

main()
