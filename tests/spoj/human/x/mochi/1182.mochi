/*
SPOJ: SORTBIT - Sorted bit squence
https://www.spoj.com/problems/SORTBIT/
*/

var tokens: list<string> = []
var tokIdx = 0

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " || ch == "\t" || ch == "\r" || ch == "\n" {
      if len(cur) > 0 { parts = append(parts, cur); cur = "" }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 { parts = append(parts, cur) }
  return parts
}

fun nextToken(): string {
  while tokIdx >= len(tokens) {
    let line = input()
    if line == nil { return nil }
    tokens = splitSpaces(line)
    tokIdx = 0
  }
  let t = tokens[tokIdx]
  tokIdx = tokIdx + 1
  return t
}

fun nextInt(): int { return int(nextToken()) }

fun bitCount(x: int): int {
  var y = x
  var c = 0
  var i = 0
  while i < 32 {
    var bit = y % 2
    if bit < 0 { bit = bit + 2 }
    if bit == 1 { c = c + 1 }
    y = (y - bit) / 2
    i = i + 1
  }
  return c
}

fun binStr(x: int): string {
  var y = x
  var s = ""
  var i = 0
  while i < 32 {
    var bit = y % 2
    if bit < 0 { bit = bit + 2 }
    if bit == 1 { s = "1" + s } else { s = "0" + s }
    y = (y - bit) / 2
    i = i + 1
  }
  return s
}

fun cmp(a: int, b: int): int {
  let wa = bitCount(a)
  let wb = bitCount(b)
  if wa < wb { return -1 }
  if wa > wb { return 1 }
  let sa = binStr(a)
  let sb = binStr(b)
  if sa < sb { return -1 }
  if sa > sb { return 1 }
  return 0
}

fun sortNums(arr: list<int>): list<int> {
  var i = 1
  while i < len(arr) {
    var j = i
    while j > 0 && cmp(arr[j-1], arr[j]) > 0 {
      let tmp = arr[j-1]
      arr[j-1] = arr[j]
      arr[j] = tmp
      j = j - 1
    }
    i = i + 1
  }
  return arr
}

fun solveCase(m: int, n: int, k: int): int {
  var nums: list<int> = []
  var i = m
  while i <= n {
    nums = append(nums, i)
    i = i + 1
  }
  nums = sortNums(nums)
  return nums[k-1]
}

fun main() {
  let t = nextInt()
  var idx = 0
  while idx < t {
    let m = nextInt()
    let n = nextInt()
    let k = nextInt()
    let ans = solveCase(m, n, k)
    print(str(ans))
    idx = idx + 1
  }
}

main()
