// Solution for SPOJ NHAY - Needle in a Haystack
// https://www.spoj.com/problems/NHAY/

fun buildLPS(p: string): list<int> {
  let m = len(p)
  var lps: list<int> = []
  for _ in 0..m {
    lps = append(lps, 0)
  }
  var lenPref = 0
  var i = 1
  while i < m {
    if p[i:i+1] == p[lenPref:lenPref+1] {
      lenPref = lenPref + 1
      lps[i] = lenPref
      i = i + 1
    } else {
      if lenPref != 0 {
        lenPref = lps[lenPref-1]
      } else {
        lps[i] = 0
        i = i + 1
      }
    }
  }
  return lps
}

fun kmp(p: string, s: string): list<int> {
  let m = len(p)
  let n = len(s)
  let lps = buildLPS(p)
  var i = 0
  var j = 0
  var res: list<int> = []
  while i < n {
    if s[i:i+1] == p[j:j+1] {
      i = i + 1
      j = j + 1
      if j == m {
        res = append(res, i - j)
        j = lps[j-1]
      }
    } else {
      if j != 0 {
        j = lps[j-1]
      } else {
        i = i + 1
      }
    }
  }
  return res
}

fun main() {
  while true {
    let lenLine = input()
    if lenLine == "" { break }
    let m = lenLine as int
    let pat = input()
    let text = input()
    let matches = kmp(pat, text)
    var idx = 0
    while idx < len(matches) {
      print(str(matches[idx]))
      idx = idx + 1
    }
    print("")
  }
}

main()
