// Solution for SPOJ PRINT - Prime Intervals
// https://www.spoj.com/problems/PRINT/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i]] as int)
    i = i + 1
  }
  return n
}

fun sieve(limit: int): list<int> {
  var isPrime: list<bool> = []
  var i = 0
  while i <= limit {
    isPrime = append(isPrime, true)
    i = i + 1
  }
  isPrime[0] = false
  if limit >= 1 { isPrime[1] = false }
  var p = 2
  while p * p <= limit {
    if isPrime[p] {
      var mult = p * p
      while mult <= limit {
        isPrime[mult] = false
        mult = mult + p
      }
    }
    p = p + 1
  }
  var primes: list<int> = []
  i = 2
  while i <= limit {
    if isPrime[i] { primes = append(primes, i) }
    i = i + 1
  }
  return primes
}

fun segment(m: int, n: int, primes: list<int>) {
  var size = n - m + 1
  var isPrime: list<bool> = []
  var i = 0
  while i < size {
    isPrime = append(isPrime, true)
    i = i + 1
  }
  i = 0
  while i < len(primes) {
    let p = primes[i] as int
    if p * p > n { break }
    var start = p * p
    if start < m {
      start = ((m + p - 1) / p) * p
    }
    var j = start
    while j <= n {
      isPrime[j - m] = false
      j = j + p
    }
    i = i + 1
  }
  i = 0
  while i < size {
    let num = m + i
    if num > 1 && isPrime[i] { print(num) }
    i = i + 1
  }
}

fun main() {
  let tStr = input()
  if tStr == "" { return }
  let t = parseIntStr(tStr)
  let primes = sieve(31623)
  var case = 0
  while case < t {
    let line = input()
    var idx = 0
    var m = 0
    while idx < len(line) && line[idx] != " " {
      m = m * 10 + (digits[line[idx]] as int)
      idx = idx + 1
    }
    idx = idx + 1
    var n = 0
    while idx < len(line) {
      n = n * 10 + (digits[line[idx]] as int)
      idx = idx + 1
    }
    segment(m, n, primes)
    case = case + 1
    if case < t { print("") }
  }
}

main()
