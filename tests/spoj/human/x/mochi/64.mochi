// Solution for SPOJ PERMUT1 - Permutations
// https://www.spoj.com/problems/PERMUT1/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  return n
}

fun parseInts(line: string): list<int> {
  var nums: list<int> = []
  var num = 0
  var has = false
  var i = 0
  while i < len(line) {
    let ch = line[i:i+1]
    if ch == " " {
      if has {
        nums = append(nums, num)
        num = 0
        has = false
      }
    } else {
      num = num * 10 + (digits[ch] as int)
      has = true
    }
    i = i + 1
  }
  if has {
    nums = append(nums, num)
  }
  return nums
}

fun precompute(maxN: int, maxK: int): list<list<int>> {
  var dp: list<list<int>> = []
  var i = 0
  while i <= maxN {
    var row: list<int> = []
    var j = 0
    while j <= maxK {
      row = append(row, 0)
      j = j + 1
    }
    dp = append(dp, row)
    i = i + 1
  }
  dp[0][0] = 1
  i = 1
  while i <= maxN {
    var j = 0
    while j <= maxK {
      var sum = 0
      var t = 0
      while t <= j && t < i {
        sum = sum + (dp[i-1][j - t] as int)
        t = t + 1
      }
      dp[i][j] = sum
      j = j + 1
    }
    i = i + 1
  }
  return dp
}

fun main() {
  let first = input()
  if first == "" { return }
  let d = parseIntStr(first)
  let dp = precompute(12, 98)
  for _ in 0..d {
    let line = input()
    if line == "" { continue }
    let vals = parseInts(line)
    let n = vals[0] as int
    let k = vals[1] as int
    print(str(dp[n][k] as int))
  }
}

main()
