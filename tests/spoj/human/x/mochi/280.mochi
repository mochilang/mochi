// Solution for SPOJ LIFTS - Lifts
// https://www.spoj.com/problems/LIFTS/

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur: string = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " || ch == "\t" || ch == "\r" || ch == "\n" {
      if len(cur) > 0 {
        parts = append(parts, cur)
        cur = ""
      }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 { parts = append(parts, cur) }
  return parts
}

fun absInt(x: int): int { return if x < 0 { -x } else { x } }

fun gcd(a: int, b: int): int {
  var x = absInt(a)
  var y = absInt(b)
  while y != 0 {
    let t = x % y
    x = y
    y = t
  }
  return x
}

fun lcm(a: int, b: int): int {
  return a / gcd(a, b) * b
}

fun posDir(lift: list<int>, t: int): list<int> {
  let l = lift[0]
  let u = lift[1]
  let s = lift[2]
  let d = lift[3]
  let a = u - l
  var pos = l
  var dir = 0
  if a == 0 {
    pos = l
    dir = 0
  } else {
    var k = 0
    if d == 1 {
      k = s - l + t
    } else {
      k = (u - s) + a + t
    }
    let m = k % (2 * a)
    if m < a {
      pos = l + m
      dir = 1
    } else {
      pos = u - (m - a)
      dir = -1
    }
  }
  var res: list<int> = []
  res = append(res, pos)
  res = append(res, dir)
  return res
}

fun meet(a: list<int>, b: list<int>, curr: int): int {
  var pa = 2 * (a[1] - a[0])
  var pb = 2 * (b[1] - b[0])
  if pa == 0 { pa = 1 }
  if pb == 0 { pb = 1 }
  let p = lcm(pa, pb)
  var t = curr / 2
  let limit = t + p + 2
  while t <= limit {
    let ad = posDir(a, t)
    let bd = posDir(b, t)
    let delta = ad[0] - bd[0]
    if delta == 0 {
      let cand = t * 2
      if cand >= curr + 2 { return cand }
    }
    let slope = ad[1] - bd[1]
    if slope != 0 {
      let sUnits = (-delta * 2) / slope
      if sUnits > 0 && sUnits <= 2 {
        let cand = t * 2 + sUnits
        if cand >= curr + 2 { return cand }
      }
    }
    t = t + 1
  }
  return -1
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let T = int(tLine)
  var caseIndex = 0
  while caseIndex < T {
    var line = input()
    while line == "" { line = input() }
    let n = int(line)
    var lifts: list<list<int>> = []
    var i = 0
    while i < n {
      let parts = splitSpaces(input())
      var lift: list<int> = []
      lift = append(lift, int(parts[0]))
      lift = append(lift, int(parts[1]))
      lift = append(lift, int(parts[2]))
      lift = append(lift, int(parts[3]))
      lifts = append(lifts, lift)
      i = i + 1
    }
    var platforms: list<list<int>> = []
    var start: list<int> = []
    start = append(start, 0)
    start = append(start, 0)
    start = append(start, 0)
    start = append(start, 0)
    platforms = append(platforms, start)
    i = 0
    while i < len(lifts) { platforms = append(platforms, lifts[i]); i = i + 1 }
    var endp: list<int> = []
    endp = append(endp, 0)
    endp = append(endp, 0)
    endp = append(endp, 0)
    endp = append(endp, 0)
    platforms = append(platforms, endp)
    var cur = 0
    i = 0
    while (i < (len(platforms) - 1)) && (cur >= 0) {
      let m = meet(platforms[i], platforms[i+1], cur)
      if m == (0 - 1) {
        cur = 0 - 1
        break
      }
      cur = m + 2
      i = i + 1
    }
    if cur < 0 {
      print("-1")
    } else {
      if cur % 2 == 0 {
        print(str(cur / 2))
      } else {
        let a = cur / 2
        print(str(a) + ".5")
      }
    }
    caseIndex = caseIndex + 1
  }
}

main()
