// Solution for SPOJ BIA - Bytelandian Information Agency
// https://www.spoj.com/problems/BIA/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  var neg = false
  if len(str) > 0 && str[0:1] == "-" {
    neg = true
    i = 1
  }
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  if neg { n = 0 - n }
  return n
}

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " {
      if cur != "" {
        parts = append(parts, cur)
        cur = ""
      }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if cur != "" { parts = append(parts, cur) }
  return parts
}

fun makeIntList(n: int, v: int): list<int> {
  var lst: list<int> = []
  var i = 0
  while i < n {
    lst = append(lst, v)
    i = i + 1
  }
  return lst
}

fun makeIntLists(n: int): list<list<int>> {
  var lst: list<list<int>> = []
  var i = 0
  while i < n {
    lst = append(lst, [])
    i = i + 1
  }
  return lst
}

fun main() {
  var line = input()
  if line == "" { return }
  while line != "" {
    let nm = splitSpaces(line)
    let n = parseIntStr(nm[0])
    let m = parseIntStr(nm[1])

    var adj = makeIntLists(n)
    var i = 0
    while i < m {
      let edgeLine = input()
      let parts = splitSpaces(edgeLine)
      let a = parseIntStr(parts[0]) - 1
      let b = parseIntStr(parts[1]) - 1
      adj[a] = append(adj[a], b)
      i = i + 1
    }

    var critical: list<int> = []
    var skip = 0
    while skip < n {
      var visited = makeIntList(n, 0)
      if skip != 0 {
        var q: list<int> = []
        var head = 0
        q = append(q, 0)
        visited[0] = 1
        while head < len(q) {
          let v = q[head]
          head = head + 1
          for to in adj[v] {
            if to == skip { continue }
            if visited[to] == 0 {
              visited[to] = 1
              q = append(q, to)
            }
          }
        }
      }
      var lost = 0
      i = 0
      while i < n {
        if i != skip && visited[i] == 0 {
          lost = 1
          break
        }
        i = i + 1
      }
      if lost == 1 { critical = append(critical, skip + 1) }
      skip = skip + 1
    }

    print(str(len(critical)))
    var outLine = ""
    var idxC = 0
    while idxC < len(critical) {
      if idxC > 0 { outLine = outLine + " " }
      outLine = outLine + str(critical[idxC])
      idxC = idxC + 1
    }
    print(outLine)

    line = input()
  }
}

main()
