/*
SPOJ: PERMUT2 - Ambiguous Permutations
https://www.spoj.com/problems/PERMUT2/
*/

fun splitSpaces(s: string): list<string> {
  var parts: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " || ch == "\t" {
      if len(cur) > 0 { parts = append(parts, cur); cur = "" }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 { parts = append(parts, cur) }
  return parts
}

fun parseInts(line: string): list<int> {
  let parts = splitSpaces(line)
  var nums: list<int> = []
  var i = 0
  while i < len(parts) {
    nums = append(nums, parts[i] as int)
    i = i + 1
  }
  return nums
}

fun makeIntList(n: int, v: int): list<int> {
  var res: list<int> = []
  var i = 0
  while i < n {
    res = append(res, v)
    i = i + 1
  }
  return res
}

fun isAmbiguous(p: list<int>): bool {
  let n = len(p)
  var inv = makeIntList(n, 0)
  var i = 0
  while i < n {
    let v = p[i]
    inv[v - 1] = i + 1
    i = i + 1
  }
  i = 0
  while i < n {
    if inv[i] != p[i] {
      return false
    }
    i = i + 1
  }
  return true
}

fun main() {
  while true {
    let line = input()
    if line == "" { break }
    let n = line as int
    if n == 0 { break }
    let permLine = input()
    let p = parseInts(permLine)
    if isAmbiguous(p) {
      print("ambiguous")
    } else {
      print("not ambiguous")
    }
  }
}

main()
