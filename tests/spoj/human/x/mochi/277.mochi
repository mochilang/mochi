// Solution for SPOJ CTGAME - City Game
// https://www.spoj.com/problems/CTGAME/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  return n
}

fun split(s: string): list<string> {
  var res: list<string> = []
  var cur = ""
  var i = 0
  while i < len(s) {
    let ch = substring(s, i, i+1)
    if ch == " " || ch == "\t" || ch == "\r" { 
      if cur != "" { res = append(res, cur); cur = "" }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if cur != "" { res = append(res, cur) }
  return res
}

fun maxHist(heights: list<int>): int {
  var stack: list<int> = []
  var maxA = 0
  var i = 0
  let n = len(heights)
  while i <= n {
    var h = 0
    if i < n { h = heights[i] }
    if len(stack) == 0 || h >= heights[stack[len(stack)-1]] {
      stack = append(stack, i)
      i = i + 1
    } else {
      let top = stack[len(stack)-1]
      stack = stack[0:len(stack)-1]
      var width = 0
      if len(stack) == 0 {
        width = i
      } else {
        width = i - stack[len(stack)-1] - 1
      }
      let area = heights[top] * width
      if area > maxA { maxA = area }
    }
  }
  return maxA
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let k = parseIntStr(tLine)
  var case = 0
  while case < k {
    var line = input()
    while line == "" { line = input() }
    var parts = split(line)
    let m = parseIntStr(parts[0])
    let n = parseIntStr(parts[1])
    var heights: list<int> = []
    var i = 0
    while i < n {
      heights = append(heights, 0)
      i = i + 1
    }
    var best = 0
    var r = 0
    while r < m {
      line = input()
      if line == "" { continue }
      parts = split(line)
      i = 0
      while i < n {
        if parts[i] == "F" { heights[i] = heights[i] + 1 } else { heights[i] = 0 }
        i = i + 1
      }
      let area = maxHist(heights)
      if area > best { best = area }
      r = r + 1
    }
    print(best * 3)
    let _sep = input()
    case = case + 1
  }
}

main()
