// Solution for SPOJ ANALYSER - Program Analyser
// https://www.spoj.com/problems/ANALYSER/

fun split(s: string): list<string> {
  var parts: list<string> = []
  var cur: string = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == " " {
      if len(cur) > 0 {
        parts = append(parts, cur)
        cur = ""
      }
    } else {
      cur = cur + ch
    }
    i = i + 1
  }
  if len(cur) > 0 {
    parts = append(parts, cur)
  }
  return parts
}

fun varIndex(ch: string): int {
  let letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  var i = 0
  while i < 26 {
    if ch == letters[i:i+1] { return i }
    i = i + 1
  }
  return 0
}

fun stateKey(pc: int, vars: list<int>): string {
  var s = str(pc) + ":"
  var i = 0
  while i < 26 {
    s = s + str(vars[i]) + ","
    i = i + 1
  }
  return s
}

fun main() {
  var levels: list<int> = []
  var instrs: list<map<string, any>> = []
  while true {
    let line = input()
    if line == "" { break }
    let tokens = split(line)
    if len(tokens) == 0 { continue }
    let lvl = int(tokens[0])
    var inst: map<string, any> = {}
    if tokens[1] == "END" {
      inst = { kind: "end" }
    } else if tokens[1] == "GO" {
      inst = { kind: "goto", target: int(tokens[2]) }
    } else if tokens[1] == "IF" {
      let cond = tokens[2]
      let vname = cond[0:1]
      let val = int(cond[2:len(cond)])
      let tgt = int(tokens[4])
      inst = { kind: "if", idx: varIndex(vname), val: val, target: tgt }
    } else {
      let body = tokens[1]
      let vname = body[0:1]
      if body[len(body)-1:len(body)] == "?" {
        inst = { kind: "out", idx: varIndex(vname) }
      } else {
        let val = int(body[2:len(body)])
        inst = { kind: "add", idx: varIndex(vname), val: val }
      }
    }
    levels = append(levels, lvl)
    instrs = append(instrs, inst)
  }
  let n = len(levels)
  var i = 0
  while i < n {
    var j = i + 1
    while j < n {
      if levels[j] < levels[i] {
        let tmpL = levels[i]
        levels[i] = levels[j]
        levels[j] = tmpL
        let tmpI = instrs[i]
        instrs[i] = instrs[j]
        instrs[j] = tmpI
      }
      j = j + 1
    }
    i = i + 1
  }
  var levelIndex: map<int,int> = {}
  i = 0
  while i < n {
    levelIndex[levels[i]] = i
    i = i + 1
  }
  var vars: list<int> = []
  i = 0
  while i < 26 {
    vars = append(vars, 0)
    i = i + 1
  }
  var pc = 0
  var steps = 0
  var visited: map<string,bool> = {}
  while true {
    if pc < 0 || pc >= n { steps = -1; break }
    let key = stateKey(pc, vars)
    if visited[key] == true {
      steps = -1
      break
    }
    visited[key] = true
    let inst = instrs[pc]
    let kind = inst["kind"] as string
    steps = steps + 1
    if kind == "add" {
      let v = inst["idx"] as int
      let val = inst["val"] as int
      vars[v] = vars[v] + val
      pc = pc + 1
    } else if kind == "out" {
      pc = pc + 1
    } else if kind == "goto" {
      let tgtLvl = inst["target"] as int
      pc = levelIndex[tgtLvl]
    } else if kind == "if" {
      let v = inst["idx"] as int
      let val = inst["val"] as int
      if vars[v] == val {
        let tgtLvl = inst["target"] as int
        pc = levelIndex[tgtLvl]
      } else {
        pc = pc + 1
      }
    } else {
      break
    }
  }
  print(str(steps))
}

main()
