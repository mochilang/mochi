/*
SPOJ: TCNUMFL - Simple Numbers with Fractions Conversion
https://www.spoj.com/problems/TCNUMFL/
*/

fun split(s: string, sep: string): list<string> {
  var parts: list<string> = []
  var cur: string = ""
  var i: int = 0
  while i < len(s) {
    if len(sep) > 0 && i + len(sep) <= len(s) && substring(s, i, i + len(sep)) == sep {
      parts = append(parts, cur)
      cur = ""
      i = i + len(sep)
    } else {
      cur = cur + s[i:i+1]
      i = i + 1
    }
  }
  parts = append(parts, cur)
  return parts
}

let DIGITS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"

fun digitVal(c: string): int {
  var i = 0
  while i < len(DIGITS) {
    if DIGITS[i] == c {
      return i
    }
    i = i + 1
  }
  return 0
}

fun valDigit(v: int): string {
  return DIGITS[v:v+1]
}

fun parseIntBase(s: string, base: int): int {
  var value = 0
  var i = 0
  while i < len(s) {
    value = value * base + digitVal(s[i])
    i = i + 1
  }
  return value
}

fun convertIntPart(n: int, base: int): string {
  if n == 0 {
    return "0"
  }
  var val = n
  var out = ""
  while val > 0 {
    let d = val % base
    val = val / base
    out = valDigit(d) + out
  }
  return out
}

fun convertFracPart(num: int, den: int, base: int, l: int): string {
  var out = ""
  var i = 0
  var n = num
  while i < l {
    n = n * base
    let d = n / den
    n = n % den
    out = out + valDigit(d)
    i = i + 1
  }
  return out
}

fun main() {
  let t = input() as int
  var caseIdx = 0
  while caseIdx < t {
    let line = input()
    let pieces = split(line, " ")
    let numStr = pieces[0]
    let r = pieces[1] as int
    let s = pieces[2] as int
    let l = pieces[3] as int

    let numParts = split(numStr, ",")
    let intPartStr = numParts[0]
    var fracPartStr = ""
    if len(numParts) > 1 {
      fracPartStr = numParts[1]
    }

    let intVal = parseIntBase(intPartStr, r)
    var fracNum = 0
    var fracDen = 1
    var i = 0
    while i < len(fracPartStr) {
      fracNum = fracNum * r + digitVal(fracPartStr[i])
      fracDen = fracDen * r
      i = i + 1
    }

    let intOut = convertIntPart(intVal, s)
    let fracOut = convertFracPart(fracNum, fracDen, s, l)

    if l > 0 {
      print(intOut + "," + fracOut)
    } else {
      print(intOut)
    }

    caseIdx = caseIdx + 1
  }
}

main()

