// Solution for SPOJ MKMOOM - Macro Processor
// https://www.spoj.com/problems/MKMOOM/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

type ParseRes { text: string, pos: int }

var macros: map<string,string> = {}

fun replaceParams(def: string, name: string, args: list<string>): string {
  var res = ""
  var i = 0
  while i < len(def) {
    let ch = def[i:i+1]
    if ch == "$" && i + 1 < len(def) {
      let nxt = def[i+1:i+2]
      if digits[nxt] != nil {
        let idx = digits[nxt]
        if idx == 0 {
          res = res + name
        } else if idx <= len(args) {
          res = res + args[idx-1]
        }
        i = i + 2
        continue
      }
    }
    res = res + ch
    i = i + 1
  }
  return res
}

fun parseMacro(s: string, i: int): ParseRes {
  i = i + 1
  var parts: list<string> = []
  var cur = ""
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == "[" {
      let r = parseMacro(s, i)
      cur = cur + r.text
      i = r.pos
    } else if ch == "<" {
      var j = i + 1
      while j < len(s) && s[j:j+1] != ">" {
        j = j + 1
      }
      cur = cur + s[i+1:j]
      i = j + 1
    } else if ch == "," {
      parts = append(parts, cur)
      cur = ""
      i = i + 1
    } else if ch == "]" {
      parts = append(parts, cur)
      i = i + 1
      break
    } else {
      cur = cur + ch
      i = i + 1
    }
  }
  let name = parts[0]
  var args: list<string> = []
  var k = 1
  while k < len(parts) {
    args = append(args, parts[k])
    k = k + 1
  }
  if name == "def" {
    if len(args) >= 2 {
      macros[args[0]] = args[1]
    }
    return ParseRes{ text: "", pos: i }
  }
  let def = macros[name]
  let replaced = replaceParams(def, name, args)
  let expanded = expand(replaced)
  return ParseRes{ text: expanded, pos: i }
}

fun expand(s: string): string {
  var res = ""
  var i = 0
  while i < len(s) {
    let ch = s[i:i+1]
    if ch == "[" {
      let r = parseMacro(s, i)
      res = res + r.text
      i = r.pos
    } else if ch == "<" {
      var j = i + 1
      while j < len(s) && s[j:j+1] != ">" {
        j = j + 1
      }
      res = res + s[i+1:j]
      i = j + 1
    } else {
      res = res + ch
      i = i + 1
    }
  }
  return res
}

fun printOutput(s: string) {
  var start = 0
  var i = 0
  while i < len(s) {
    if s[i:i+1] == "\n" {
      print(s[start:i])
      start = i + 1
    }
    i = i + 1
  }
  if start < len(s) {
    print(s[start:])
  }
}

fun main() {
  var caseNum = 1
  let hy = "-------------------------------------------------------------------------------"
  while true {
    let line = input()
    if line == nil { break }
    let n = int(line)
    if n == 0 { break }
    var text = ""
    var i = 0
    while i < n {
      let l = input()
      text = text + l + "\n"
      i = i + 1
    }
    macros = {}
    let out = expand(text)
    print("Case " + str(caseNum))
    print(hy)
    printOutput(out)
    print(hy)
    print("")
    caseNum = caseNum + 1
  }
}

main()
