// Solution for SPOJ ORDERS - Ordering the Soldiers
// https://www.spoj.com/problems/ORDERS/

let digits = {
  "0":0, "1":1, "2":2, "3":3, "4":4,
  "5":5, "6":6, "7":7, "8":8, "9":9,
}

fun parseInts(line: string): list<int> {
  var nums: list<int> = []
  var i = 0
  var cur = 0
  var inNum = false
  while i < len(line) {
    let ch = line[i:i+1]
    if ch >= "0" && ch <= "9" {
      cur = cur * 10 + (digits[ch] as int)
      inNum = true
      i = i + 1
    } else {
      if inNum {
        nums = append(nums, cur)
        cur = 0
        inNum = false
      }
      i = i + 1
    }
  }
  if inNum {
    nums = append(nums, cur)
  }
  return nums
}

fun makeIntList(n: int, value: int): list<int> {
  var lst: list<int> = []
  var i = 0
  while i < n {
    lst = append(lst, value)
    i = i + 1
  }
  return lst
}

fun makeFenwick(n: int): list<int> {
  var bit: list<int> = []
  var i = 0
  while i <= n + 2 {
    bit = append(bit, 0)
    i = i + 1
  }
  return bit
}

fun bit_and(a: int, b: int): int {
  var ua = a
  var ub = b
  var res = 0
  var bit = 1
  while ua != 0 || ub != 0 {
    if ua % 2 == 1 && ub % 2 == 1 { res = res + bit }
    ua = ua / 2
    ub = ub / 2
    bit = bit * 2
  }
  return res
}

fun low_bit(x: int): int {
  if x == 0 { return 0 }
  return x - bit_and(x, x - 1)
}

fun bitAdd(bit: list<int>, idx: int, val: int) {
  var i = idx + 1
  while i < len(bit) {
    bit[i] = bit[i] + val
    i = i + low_bit(i)
  }
}

fun bitFind(bit: list<int>, k: int): int {
  var idx = 0
  var bitMask = 1
  while bitMask < len(bit) { bitMask = bitMask * 2 }
  bitMask = bitMask / 2
  while bitMask > 0 {
    let next = idx + bitMask
    if next < len(bit) && bit[next] < k {
      idx = next
      k = k - bit[next]
    }
    bitMask = bitMask / 2
  }
  return idx
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let T = tLine as int
  var case = 0
  while case < T {
    let nLine = input()
    if nLine == "" { break }
    let n = nLine as int
    let wLine = input()
    let w = parseInts(wLine)
    var bit = makeFenwick(n)
    var j = 0
    while j < n {
      bitAdd(bit, j, 1)
      j = j + 1
    }
    var ans = makeIntList(n, 0)
    var i = n - 1
    while i >= 0 {
      let k = i + 1 - w[i]
      let pos = bitFind(bit, k)
      ans[i] = pos + 1
      bitAdd(bit, pos, -1)
      i = i - 1
    }
    var out = ""
    var p = 0
    while p < n {
      if p > 0 { out = out + " " }
      out = out + str(ans[p])
      p = p + 1
    }
    print(out)
    case = case + 1
  }
}

main()
