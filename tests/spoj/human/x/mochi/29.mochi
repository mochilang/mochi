// Solution for SPOJ HASHIT - Hash it!
// https://www.spoj.com/problems/HASHIT/

fun split(s: string, sep: string): list<string> {
  var parts: list<string> = []
  var cur: string = ""
  var i: int = 0
  while i < len(s) {
    if len(sep) > 0 && i + len(sep) <= len(s) && substring(s, i, i + len(sep)) == sep {
      parts = append(parts, cur)
      cur = ""
      i = i + len(sep)
    } else {
      cur = cur + s[i:i+1]
      i = i + 1
    }
  }
  parts = append(parts, cur)
  return parts
}

fun buildASCII(): map<string,int> {
  var m: map<string,int> = {}
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  var i = 0
  while i < len(upper) {
    m[upper[i:i+1]] = 65 + i
    i = i + 1
  }
  let lower = "abcdefghijklmnopqrstuvwxyz"
  i = 0
  while i < len(lower) {
    m[lower[i:i+1]] = 97 + i
    i = i + 1
  }
  m["_"] = 95
  return m
}
let ascii = buildASCII()

fun ord(ch: string): int { return ascii[ch] as int }

fun hashKey(key: string): int {
  var sum = 0
  var i = 0
  while i < len(key) {
    sum = sum + ord(key[i:i+1]) * (i + 1)
    i = i + 1
  }
  return (19 * sum) % 101
}

fun findIndex(table: list<string>, key: string): int {
  let h = hashKey(key)
  var j = 0
  while j < 20 {
    let idx = (h + j*j + 23*j) % 101
    if table[idx] == key { return idx }
    j = j + 1
  }
  return 0 - 1
}

fun insert(table: list<string>, key: string): list<string> {
  if findIndex(table, key) != 0 - 1 { return table }
  let h = hashKey(key)
  var j = 0
  while j < 20 {
    let idx = (h + j*j + 23*j) % 101
    if table[idx] == "" {
      table[idx] = key
      break
    }
    j = j + 1
  }
  return table
}

fun deleteKey(table: list<string>, key: string): list<string> {
  let idx = findIndex(table, key)
  if idx != 0 - 1 { table[idx] = "" }
  return table
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let t = tLine as int
  var case = 0
  while case < t {
    let n = input() as int
    var table: list<string> = []
    var k = 0
    while k < 101 {
      table = append(table, "")
      k = k + 1
    }
    var i = 0
    while i < n {
      let line = input()
      let parts = split(line, ":")
      let action = parts[0]
      let key = parts[1]
      if action == "ADD" {
        table = insert(table, key)
      } else if action == "DEL" {
        table = deleteKey(table, key)
      }
      i = i + 1
    }
    var count = 0
    k = 0
    while k < 101 {
      if table[k] != "" { count = count + 1 }
      k = k + 1
    }
    print(str(count))
    k = 0
    while k < 101 {
      if table[k] != "" {
        print(str(k) + ":" + table[k])
      }
      k = k + 1
    }
    case = case + 1
  }
}

main()
