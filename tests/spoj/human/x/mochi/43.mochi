// Solution for SPOJ BOOKS1 - Copying Books
// https://www.spoj.com/problems/BOOKS1/

fun split(s: string, sep: string): list<string> {
  var parts: list<string> = []
  var cur: string = ""
  var i: int = 0
  while i < len(s) {
    if len(sep) > 0 && i + len(sep) <= len(s) && substring(s, i, i + len(sep)) == sep {
      parts = append(parts, cur)
      cur = ""
      i = i + len(sep)
    } else {
      cur = cur + s[i:i+1]
      i = i + 1
    }
  }
  parts = append(parts, cur)
  return parts
}

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var neg = false
  if len(str) > 0 && str[0:1] == "-" {
    neg = true
    i = 1
  }
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  if neg { n = -n }
  return n
}

fun canSplit(pages: list<int>, k: int, limit: int): bool {
  var cnt = 1
  var sum = 0
  var i = 0
  let m = len(pages)
  while i < m {
    if sum + pages[i] > limit {
      cnt = cnt + 1
      sum = pages[i]
      if cnt > k { return false }
    } else {
      sum = sum + pages[i]
    }
    i = i + 1
  }
  return true
}

fun assignCuts(pages: list<int>, k: int, limit: int): list<bool> {
  let m = len(pages)
  var cuts: list<bool> = []
  for _ in 0..m {
    cuts = append(cuts, false)
  }
  var sum = 0
  var rem = k
  var i = m - 1
  while i >= 0 {
    if sum + pages[i] > limit || i + 1 < rem {
      cuts[i] = true
      sum = pages[i]
      rem = rem - 1
    } else {
      sum = sum + pages[i]
    }
    i = i - 1
  }
  return cuts
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let t = parseIntStr(tLine)
  for _ in 0..t {
    let mkLine = input()
    let mkParts = split(mkLine, " ")
    let m = parseIntStr(mkParts[0])
    let k = parseIntStr(mkParts[1])
    let pLine = input()
    let pParts = split(pLine, " ")
    var pages: list<int> = []
    var i = 0
    while i < m {
      pages = append(pages, parseIntStr(pParts[i]))
      i = i + 1
    }
    var lo = 0
    var hi = 0
    i = 0
    while i < m {
      if pages[i] > lo { lo = pages[i] }
      hi = hi + pages[i]
      i = i + 1
    }
    while lo < hi {
      let mid = (lo + hi) / 2
      if canSplit(pages, k, mid) {
        hi = mid
      } else {
        lo = mid + 1
      }
    }
    let limit = lo
    let cuts = assignCuts(pages, k, limit)
    var out = ""
    i = 0
    while i < m {
      out = out + str(pages[i])
      if i < m - 1 {
        if cuts[i] {
          out = out + " / "
        } else {
          out = out + " "
        }
      }
      i = i + 1
    }
    print(out)
  }
}

main()
