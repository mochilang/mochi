// Solution for SPOJ SUMFOUR - 4 values whose sum is 0
// https://www.spoj.com/problems/SUMFOUR/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  var neg = false
  if len(str) > 0 && str[0:1] == "-" {
    neg = true
    i = 1
  }
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  if neg { n = -n }
  return n
}

var tokens: list<string> = []
fun nextInt(): int {
  while len(tokens) == 0 {
    let line = input()
    if line == nil { return 0 }
    var parts: list<string> = []
    var cur: string = ""
    var i = 0
    while i < len(line) {
      let ch = line[i:i+1]
      if ch == " " || ch == "\t" || ch == "\r" || ch == "\n" {
        if len(cur) > 0 { parts = append(parts, cur); cur = "" }
      } else {
        cur = cur + ch
      }
      i = i + 1
    }
    if len(cur) > 0 { parts = append(parts, cur) }
    var j = 0
    while j < len(parts) {
      tokens = append(tokens, parts[j])
      j = j + 1
    }
  }
  let v = parseIntStr(tokens[0])
  tokens = tokens[1:len(tokens)]
  return v
}

fun main() {
  let n = nextInt()
  var A: list<int> = []
  var B: list<int> = []
  var C: list<int> = []
  var D: list<int> = []
  var i = 0
  while i < n {
    A = append(A, nextInt())
    B = append(B, nextInt())
    C = append(C, nextInt())
    D = append(D, nextInt())
    i = i + 1
  }
  var ab: map<int,int> = {}
  i = 0
  while i < n {
    var j = 0
    while j < n {
      let s = A[i] + B[j]
      if ab[s] == nil { ab[s] = 1 } else { ab[s] = ab[s] + 1 }
      j = j + 1
    }
    i = i + 1
  }
  var count = 0
  i = 0
  while i < n {
    var j = 0
    while j < n {
      let t = -(C[i] + D[j])
      if ab[t] != nil { count = count + ab[t] }
      j = j + 1
    }
    i = i + 1
  }
  print(str(count))
}

main()
