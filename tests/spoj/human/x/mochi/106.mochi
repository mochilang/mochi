// Solution for SPOJ BINSTIRL - Binary Stirling Numbers
// https://www.spoj.com/problems/BINSTIRL/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i:i+1]] as int)
    i = i + 1
  }
  return n
}

fun bit_and(a: int, b: int): int {
  var ua = a
  var ub = b
  var res = 0
  var bit = 1
  while ua > 0 || ub > 0 {
    if ua % 2 == 1 && ub % 2 == 1 { res = res + bit }
    ua = ua / 2
    ub = ub / 2
    bit = bit * 2
  }
  return res
}

fun main() {
  let tLine = input()
  if tLine == "" { return }
  let d = parseIntStr(tLine)
  var case = 0
  while case < d {
    let line = input()
    var idx = 0
    var n = 0
    while idx < len(line) && line[idx:idx+1] != " " {
      n = n * 10 + (digits[line[idx:idx+1]] as int)
      idx = idx + 1
    }
    idx = idx + 1
    var m = 0
    while idx < len(line) {
      m = m * 10 + (digits[line[idx:idx+1]] as int)
      idx = idx + 1
    }
    let nm = n - m
    let half = (m - 1) / 2
    if bit_and(nm, half) == 0 {
      print("1")
    } else {
      print("0")
    }
    case = case + 1
    if case < d { print("") }
  }
}

main()
