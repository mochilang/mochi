// Solution for SPOJ WORDS1 - Play on Words
// https://www.spoj.com/problems/WORDS1/

let digits = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}
let letters = {
  "a":0,"b":1,"c":2,"d":3,"e":4,
  "f":5,"g":6,"h":7,"i":8,"j":9,
  "k":10,"l":11,"m":12,"n":13,"o":14,
  "p":15,"q":16,"r":17,"s":18,"t":19,
  "u":20,"v":21,"w":22,"x":23,"y":24,
  "z":25,
}

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  while i < len(str) {
    n = n * 10 + (digits[str[i]] as int)
    i = i + 1
  }
  return n
}

var parent: list<int>

fun initUF() {
  parent = []
  var i = 0
  while i < 26 {
    parent = append(parent, i)
    i = i + 1
  }
}

fun find(x: int): int {
  var x0 = x
  while parent[x0] != x0 {
    parent[x0] = parent[parent[x0]]
    x0 = parent[x0]
  }
  return x0
}

fun union(a: int, b: int) {
  let ra = find(a)
  let rb = find(b)
  if ra != rb { parent[rb] = ra }
}

fun main() {
  let tStr = input()
  if tStr == "" { return }
  let t = parseIntStr(tStr)
  for _ in 0..t {
    let n = parseIntStr(input())
    initUF()
    var indeg: list<int> = []
    var outdeg: list<int> = []
    var used: list<bool> = []
    var i = 0
    while i < 26 {
      indeg = append(indeg, 0)
      outdeg = append(outdeg, 0)
      used = append(used, false)
      i = i + 1
    }
    i = 0
    while i < n {
      let w = input()
      let a = letters[w[0:1]] as int
      let b = letters[w[len(w)-1:len(w)]] as int
      outdeg[a] = outdeg[a] + 1
      indeg[b] = indeg[b] + 1
      union(a, b)
      used[a] = true
      used[b] = true
      i = i + 1
    }
    var comp = 0
    var hasComp = false
    var connected = true
    i = 0
    while i < 26 {
      if used[i] {
        let r = find(i)
        if hasComp == false {
          comp = r
          hasComp = true
        } else if comp != r {
          connected = false
        }
      }
      i = i + 1
    }
    var start = 0
    var end = 0
    i = 0
    while i < 26 {
      let diff = outdeg[i] - indeg[i]
      if diff == 1 { start = start + 1 }
      else if diff == 0 - 1 { end = end + 1 }
      else if diff != 0 { connected = false }
      i = i + 1
    }
    if connected && ((start == 1 && end == 1) || (start == 0 && end == 0)) {
      print("Ordering is possible.")
    } else {
      print("The door cannot be opened.")
    }
  }
}

main()
