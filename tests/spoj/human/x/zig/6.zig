// Generated by Mochi Zig transpiler on 2025-08-27 07:05 +0700
const std = @import("std");
const Value = union(enum) { Null: void, Int: i64, Float: f64, Str: []const u8, Bool: bool, List: []Value, StrList: [][]const u8, };

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var digitMap_var: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);

fn repeat(s: []const u8, n: i64) []const u8 {
    var r: []const u8 = "";
    r = r;
    var __it0: i64 = @as(i64, @intCast(0));
    while (__it0 < @as(i64, @intCast(n))) : (__it0 += 1) {
        r = _concat_string(r, s);
    }
    return r;
}

fn add_str(a: []const u8, b: []const u8) []const u8 {
    var i: i64 = @as(i64, @intCast(a.len)) -% 1;
    i = i;
    var j: i64 = @as(i64, @intCast(b.len)) -% 1;
    j = j;
    var carry: i64 = 0;
    carry = carry;
    var res: []const u8 = "";
    res = res;
    while (i >= 0 or j >= 0 or carry > 0) {
        var da: i64 = 0;
        da = da;
        if (i >= 0) {
            da = @as(i64, (blk0: { if (digitMap_var.get(a[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(a.len)))])) |v| { break :blk0 v; } break :blk0 0; }));
        }
        var db: i64 = 0;
        db = db;
        if (j >= 0) {
            db = @as(i64, (blk1: { if (digitMap_var.get(b[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j +% 1)), @as(usize, @intCast(b.len)))])) |v| { break :blk1 v; } break :blk1 0; }));
        }
        const sum: i64 = da +% db +% carry;
        res = _concat_string(_str(@mod(sum, 10)), res);
        carry = @divTrunc(sum, 10);
        i = i -% 1;
        j = j -% 1;
    }
    return res;
}

fn sub_str(a_1: []const u8, b_1: []const u8) []const u8 {
    var i_1: i64 = @as(i64, @intCast(a_1.len)) -% 1;
    i_1 = i_1;
    var j_1: i64 = @as(i64, @intCast(b_1.len)) -% 1;
    j_1 = j_1;
    var borrow: i64 = 0;
    borrow = borrow;
    var res_1: []const u8 = "";
    res_1 = res_1;
    while (i_1 >= 0) {
        var da_1: i64 = @as(i64, (blk2: { if (digitMap_var.get(a_1[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(a_1.len)))])) |v| { break :blk2 v; } break :blk2 0; })) -% borrow;
        da_1 = da_1;
        var db_1: i64 = 0;
        db_1 = db_1;
        if (j_1 >= 0) {
            db_1 = @as(i64, (blk3: { if (digitMap_var.get(b_1[@as(usize, @intCast(j_1))..@min(@as(usize, @intCast(j_1 +% 1)), @as(usize, @intCast(b_1.len)))])) |v| { break :blk3 v; } break :blk3 0; }));
        }
        if (da_1 < db_1) {
            da_1 = da_1 +% 10;
            borrow = 1;
        } else {
            borrow = 0;
        }
        const diff: i64 = da_1 -% db_1;
        res_1 = _concat_string(_str(diff), res_1);
        i_1 = i_1 -% 1;
        j_1 = j_1 -% 1;
    }
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(res_1.len)) and std.mem.eql(u8, res_1[@as(usize, @intCast(k))..@min(@as(usize, @intCast(k +% 1)), @as(usize, @intCast(res_1.len)))], "0")) {
        k = k +% 1;
    }
    if (k == @as(i64, @intCast(res_1.len))) {
        return "0";
    }
    return res_1[@as(usize, @intCast(k))..];
}

fn mul_digit(a_2: []const u8, d: i64) []const u8 {
    if (d == 0) {
        return "0";
    }
    var i_2: i64 = @as(i64, @intCast(a_2.len)) -% 1;
    i_2 = i_2;
    var carry_1: i64 = 0;
    carry_1 = carry_1;
    var res_2: []const u8 = "";
    res_2 = res_2;
    while (i_2 >= 0) {
        const prod: i64 = @as(i64, (blk4: { if (digitMap_var.get(a_2[@as(usize, @intCast(i_2))..@min(@as(usize, @intCast(i_2 +% 1)), @as(usize, @intCast(a_2.len)))])) |v| { break :blk4 v; } break :blk4 0; })) *% d +% carry_1;
        res_2 = _concat_string(_str(@mod(prod, 10)), res_2);
        carry_1 = @divTrunc(prod, 10);
        i_2 = i_2 -% 1;
    }
    if (carry_1 > 0) {
        res_2 = _concat_string(_str(carry_1), res_2);
    }
    var k_1: i64 = 0;
    k_1 = k_1;
    while (k_1 < @as(i64, @intCast(res_2.len)) and std.mem.eql(u8, res_2[@as(usize, @intCast(k_1))..@min(@as(usize, @intCast(k_1 +% 1)), @as(usize, @intCast(res_2.len)))], "0")) {
        k_1 = k_1 +% 1;
    }
    if (k_1 == @as(i64, @intCast(res_2.len))) {
        return "0";
    }
    return res_2[@as(usize, @intCast(k_1))..];
}

fn mul_str(a_3: []const u8, b_2: []const u8) std.StringHashMap(Value) {
    var result: []const u8 = "0";
    result = result;
    var shift: i64 = 0;
    shift = shift;
    var parts: []Value = std.heap.page_allocator.alloc(Value, 0) catch unreachable;
    parts = parts;
    var i_3: i64 = @as(i64, @intCast(b_2.len)) -% 1;
    i_3 = i_3;
    while (i_3 >= 0) {
        const d_1: i64 = @as(i64, (blk5: { if (digitMap_var.get(b_2[@as(usize, @intCast(i_3))..@min(@as(usize, @intCast(i_3 +% 1)), @as(usize, @intCast(b_2.len)))])) |v| { break :blk5 v; } break :blk5 0; }));
        const part: []const u8 = mul_digit(a_3, d_1);
        parts = blk6: { var _tmp = std.ArrayList(Value).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const Value, parts)) catch |err| handleError(err); _tmp.append(blk7: { var m = std.StringHashMap(Value).init(std.heap.page_allocator); m.put("val", Value{.Str = part}) catch unreachable; m.put("shift", Value{.Int = shift}) catch unreachable; break :blk7 m; }) catch |err| handleError(err); break :blk6 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        var shifted: []const u8 = blk8: { const tmp = std.heap.page_allocator.alloc(u8, part.len) catch unreachable; @memcpy(tmp, part); break :blk8 tmp; };
        shifted = shifted;
        var __it1: i64 = @as(i64, @intCast(0));
        while (__it1 < @as(i64, @intCast(shift))) : (__it1 += 1) {
            shifted = _concat_string(shifted, "0");
        }
        result = add_str(result, shifted);
        shift = shift +% 1;
        i_3 = i_3 -% 1;
    }
    return blk9: { var m_1 = std.StringHashMap(Value).init(std.heap.page_allocator); m_1.put("res", Value{.Str = result}) catch unreachable; m_1.put("parts", Value{.List = parts}) catch unreachable; break :blk9 m_1; };
}

fn pad_left(s_1: []const u8, total: i64) []const u8 {
    var r_1: []const u8 = "";
    r_1 = r_1;
    var __it2: i64 = @as(i64, @intCast(0));
    while (__it2 < @as(i64, @intCast(total -% @as(i64, @intCast(s_1.len))))) : (__it2 += 1) {
        r_1 = _concat_string(r_1, " ");
    }
    return _concat_string(r_1, s_1);
}

fn mochi_main() void {
    const tStr: []const u8 = _input();
    if (tStr.len == 0) {
        return;
    }
    const t: i64 = (std.fmt.parseInt(i64, tStr, 10) catch 0);
    var __it3: i64 = @as(i64, @intCast(0));
    while (__it3 < @as(i64, @intCast(t))) : (__it3 += 1) {
        const line: []const u8 = _input();
        if (line.len == 0) {
            continue;
        }
        var idx: i64 = 0;
        idx = idx;
        while (idx < @as(i64, @intCast(line.len))) {
            const ch: []const u8 = line[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx +% 1)), @as(usize, @intCast(line.len)))];
            if (std.mem.eql(u8, ch, "+") or std.mem.eql(u8, ch, "-") or std.mem.eql(u8, ch, "*")) {
                break;
            }
            idx = idx +% 1;
        }
        const a_4: []const u8 = line[0..@min(@as(usize, @intCast(idx)), @as(usize, @intCast(line.len)))];
        const op: []const u8 = line[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx +% 1)), @as(usize, @intCast(line.len)))];
        const b_3: []const u8 = line[@as(usize, @intCast(idx +% 1))..];
        var res_3: []const u8 = "";
        res_3 = res_3;
        var parts_1: []Value = std.heap.page_allocator.alloc(Value, 0) catch unreachable;
        parts_1 = parts_1;
        if (std.mem.eql(u8, op, "+")) {
            res_3 = add_str(a_4, b_3);
        } else {
            if (std.mem.eql(u8, op, "-")) {
                res_3 = sub_str(a_4, b_3);
            } else {
                var r_2: std.StringHashMap(Value) = mul_str(a_4, b_3);
                r_2 = r_2;
                res_3 = (blk10: { if (r_2.get("res")) |v| { break :blk10 v; } break :blk10 0; }).Str;
                parts_1 = (blk11: { if (r_2.get("parts")) |v| { break :blk11 v; } break :blk11 0; }).List;
            }
        }
        var width: i64 = @as(i64, @intCast(a_4.len));
        width = width;
        const secondLen: i64 = @as(i64, @intCast(b_3.len)) +% 1;
        if (secondLen > width) {
            width = secondLen;
        }
        if (@as(i64, @intCast(res_3.len)) > width) {
            width = @as(i64, @intCast(res_3.len));
        }
        for (parts_1) |__it4| {
            const p = __it4;
            const l: i64 = @as(i64, @intCast(p[_idx(p.len, "val")].len)) +% @as(i64, p[_idx(p.len, "shift")]);
            if (l > width) {
                width = l;
            }
        }
        std.debug.print("{s}\n", .{pad_left(a_4, width)});
        std.debug.print("{s}\n", .{pad_left(_concat_string(op, b_3), width)});
        var dash1: i64 = 0;
        dash1 = dash1;
        if (std.mem.eql(u8, op, "*")) {
            if (@as(i64, @intCast(parts_1.len)) > 0) {
                dash1 = @as(i64, @intCast(b_3.len)) +% 1;
                const firstPart: []const u8 = parts_1[_idx(parts_1.len, 0)][_idx(parts_1[_idx(parts_1.len, 0)].len, "val")];
                if (@as(i64, @intCast(firstPart.len)) > dash1) {
                    dash1 = @as(i64, @intCast(firstPart.len));
                }
            } else {
                dash1 = @as(i64, @intCast(b_3.len)) +% 1;
                if (@as(i64, @intCast(res_3.len)) > dash1) {
                    dash1 = @as(i64, @intCast(res_3.len));
                }
            }
        } else {
            dash1 = @as(i64, @intCast(b_3.len)) +% 1;
            if (@as(i64, @intCast(res_3.len)) > dash1) {
                dash1 = @as(i64, @intCast(res_3.len));
            }
        }
        std.debug.print("{s}\n", .{pad_left(repeat("-", dash1), width)});
        if (std.mem.eql(u8, op, "*") and @as(i64, @intCast(b_3.len)) > 1) {
            for (parts_1) |__it5| {
                const p_1 = __it5;
                const val: []const u8 = p_1[_idx(p_1.len, "val")];
                const shift_1: i64 = @as(i64, p_1[_idx(p_1.len, "shift")]);
                const spaces: i64 = width -% shift_1 -% @as(i64, @intCast(val.len));
                var line_1: []const u8 = "";
                line_1 = line_1;
                var __it6: i64 = @as(i64, @intCast(0));
                while (__it6 < @as(i64, @intCast(spaces))) : (__it6 += 1) {
                    line_1 = _concat_string(line_1, " ");
                }
                line_1 = _concat_string(line_1, val);
                std.debug.print("{s}\n", .{line_1});
            }
            std.debug.print("{s}\n", .{pad_left(repeat("-", @as(i64, @intCast(res_3.len))), width)});
        }
        std.debug.print("{s}\n", .{pad_left(res_3, width)});
        std.debug.print("{s}\n", .{""});
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        digitMap_var = blk12: { var m_2 = std.StringHashMap(i64).init(std.heap.page_allocator); m_2.put("0", 0) catch unreachable; m_2.put("1", 1) catch unreachable; m_2.put("2", 2) catch unreachable; m_2.put("3", 3) catch unreachable; m_2.put("4", 4) catch unreachable; m_2.put("5", 5) catch unreachable; m_2.put("6", 6) catch unreachable; m_2.put("7", 7) catch unreachable; m_2.put("8", 8) catch unreachable; m_2.put("9", 9) catch unreachable; break :blk12 m_2; };
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    if (@TypeOf(v) == Value) {
        return switch (v) {
            .Int => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Int}) catch unreachable,
            .Float => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Float}) catch unreachable,
            .Str => std.fmt.allocPrint(std.heap.page_allocator, "'{s}'", .{v.Str}) catch unreachable,
            .Bool => if (v.Bool) "true" else "false",
            .List => _str(v.List),
            .StrList => _str(v.StrList),
            else => "null",
        };
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _input() []const u8 {
    var reader = std.io.bufferedReaderSize(4096, std.io.getStdIn().reader());
    const opt_line = reader.reader().readUntilDelimiterOrEofAlloc(std.heap.page_allocator, '\n', 1 << 20) catch return "";
    const line = opt_line orelse return "";
    if (line.len > 0 and line[line.len - 1] == '\n') {
        return line[0..line.len-1];
    }
    return line;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
