// Generated by Mochi transpiler v0.10.74 on 2025-08-27 07:10:56 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static std::string _format_double(double v) {
    std::ostringstream ss;
    ss << std::defaultfloat << std::setprecision(std::numeric_limits<double>::max_digits10) << v;
    auto s = ss.str();
    auto epos = s.find('e');
    if(epos == std::string::npos) epos = s.find('E');
    std::string exp;
    if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
    auto pos = s.find('.');
    if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
    return s + exp;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << _format_double(std::any_cast<double>(val));
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static int64_t any_to_int64(const std::any& v) {
    if(v.type() == typeid(int64_t)) return std::any_cast<int64_t>(v);
    if(v.type() == typeid(int)) return (int64_t)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return (int64_t)std::any_cast<double>(v);
    if(v.type() == typeid(std::string)) return std::stoll(std::any_cast<std::string>(v));
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) return _format_double(std::any_cast<double>(v));
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        return _format_double(v);
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

std::vector<std::string> split(std::string s, std::string sep);
std::vector<int64_t> parse_ints(std::string line);
std::vector<int64_t> sort_unique(std::vector<int64_t>& arr);
bool pointInPoly(const std::vector<int64_t>& xs, const std::vector<int64_t>& ys, double px, double py);
std::vector<std::vector<std::vector<bool>>> make3DBool(int64_t a, int64_t b, int64_t c);
int main();

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((((sep.size() > int64_t(0)) && ((i + sep.size()) <= s.size())) && (([&]{ std::string __s = s; long long __start = i; long long __end = (i + sep.size()); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == sep))) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
            cur = std::string("");
            i = (i + sep.size());
        } else {
            cur = (cur + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s));
            i = (i + int64_t(1));
        }
    }
    parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    return parts;
}

std::vector<int64_t> parse_ints(std::string line) {
    std::vector<std::string> pieces = _split(line, std::string(" "));
    std::vector<int64_t> nums = {};
    int64_t i = int64_t(0);
    while ((i < pieces.size())) {
        std::string p = _index(pieces, i);
        if ((p.size() > int64_t(0))) {
            nums = ([&]{ auto __tmp = nums; __tmp.push_back(std::stoll(p)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return nums;
}

std::vector<int64_t> sort_unique(std::vector<int64_t>& arr) {
    int64_t i = int64_t(1);
    while ((i < arr.size())) {
        int64_t j = i;
        while (((j > int64_t(0)) && (_index(arr, (j - int64_t(1))) > _index(arr, j)))) {
            int64_t tmp = _index(arr, (j - int64_t(1)));
            _index(arr, (j - int64_t(1))) = _index(arr, j);
            _index(arr, j) = tmp;
            j = (j - int64_t(1));
        }
        i = (i + int64_t(1));
    }
    std::vector<int64_t> res = {};
    i = int64_t(0);
    while ((i < arr.size())) {
        if (((i == int64_t(0)) || (_index(arr, i) != _index(arr, (i - int64_t(1)))))) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(_index(arr, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

bool pointInPoly(const std::vector<int64_t>& xs, const std::vector<int64_t>& ys, double px, double py) {
    bool inside = false;
    int64_t i = int64_t(0);
    int64_t j = (xs.size() - int64_t(1));
    while ((i < xs.size())) {
        double xi = (double)(_index(xs, i));
        double yi = (double)(_index(ys, i));
        double xj = (double)(_index(xs, j));
        double yj = (double)(_index(ys, j));
        if ((((yi > py) && (yj <= py)) || ((yj > py) && (yi <= py)))) {
            double xint = (((double)(((xj - xi) * (py - yi))) / (double)((yj - yi))) + xi);
            if ((px < xint)) {
                inside = !inside;
            }
        }
        j = i;
        i = (i + int64_t(1));
    }
    return inside;
}

std::vector<std::vector<std::vector<bool>>> make3DBool(int64_t a, int64_t b, int64_t c) {
    std::vector<std::vector<std::vector<bool>>> arr = {};
    int64_t i = int64_t(0);
    while ((i < a)) {
        std::vector<std::vector<bool>> plane = {};
        int64_t j = int64_t(0);
        while ((j < b)) {
            std::vector<bool> row = {};
            int64_t k = int64_t(0);
            while ((k < c)) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(false); return __tmp; }());
                k = (k + int64_t(1));
            }
            plane = ([&]{ auto __tmp = plane; __tmp.push_back(row); return __tmp; }());
            j = (j + int64_t(1));
        }
        arr = ([&]{ auto __tmp = arr; __tmp.push_back(plane); return __tmp; }());
        i = (i + int64_t(1));
    }
    return arr;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string tLine = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
        if ((tLine == std::string(""))) {
            return int64_t(0);
        }
        int64_t t = std::stoll(tLine);
        int64_t _case = int64_t(0);
        while ((_case < t)) {
            std::string fLine = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            int64_t F = std::stoll(fLine);
            std::vector<int64_t> xs = {};
            std::vector<int64_t> ys = {};
            std::vector<int64_t> zs = {};
            xs = ([&]{ auto __tmp = xs; __tmp.push_back(int64_t(0)); return __tmp; }());
            xs = ([&]{ auto __tmp = xs; __tmp.push_back(int64_t(1001)); return __tmp; }());
            ys = ([&]{ auto __tmp = ys; __tmp.push_back(int64_t(0)); return __tmp; }());
            ys = ([&]{ auto __tmp = ys; __tmp.push_back(int64_t(1001)); return __tmp; }());
            zs = ([&]{ auto __tmp = zs; __tmp.push_back(int64_t(0)); return __tmp; }());
            zs = ([&]{ auto __tmp = zs; __tmp.push_back(int64_t(1001)); return __tmp; }());
            std::vector<int64_t> faceXCoord = {};
            std::vector<std::vector<int64_t>> faceYPoly = {};
            std::vector<std::vector<int64_t>> faceZPoly = {};
            int64_t i = int64_t(0);
            while ((i < F)) {
                std::string line = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
                std::vector<int64_t> nums = parse_ints(line);
                int64_t P = _index(nums, int64_t(0));
                std::vector<int64_t> ptsX = {};
                std::vector<int64_t> ptsY = {};
                std::vector<int64_t> ptsZ = {};
                int64_t j = int64_t(0);
                while ((j < P)) {
                    int64_t x = _index(nums, (int64_t(1) + (int64_t(3) * j)));
                    int64_t y = _index(nums, ((int64_t(1) + (int64_t(3) * j)) + int64_t(1)));
                    int64_t z = _index(nums, ((int64_t(1) + (int64_t(3) * j)) + int64_t(2)));
                    ptsX = ([&]{ auto __tmp = ptsX; __tmp.push_back(x); return __tmp; }());
                    ptsY = ([&]{ auto __tmp = ptsY; __tmp.push_back(y); return __tmp; }());
                    ptsZ = ([&]{ auto __tmp = ptsZ; __tmp.push_back(z); return __tmp; }());
                    xs = ([&]{ auto __tmp = xs; __tmp.push_back(x); return __tmp; }());
                    ys = ([&]{ auto __tmp = ys; __tmp.push_back(y); return __tmp; }());
                    zs = ([&]{ auto __tmp = zs; __tmp.push_back(z); return __tmp; }());
                    j = (j + int64_t(1));
                }
                bool allSame = true;
                j = int64_t(1);
                while ((j < P)) {
                    if ((_index(ptsX, j) != _index(ptsX, int64_t(0)))) {
                        allSame = false;
                    }
                    j = (j + int64_t(1));
                }
                if (allSame) {
                    faceXCoord = ([&]{ auto __tmp = faceXCoord; __tmp.push_back(_index(ptsX, int64_t(0))); return __tmp; }());
                    faceYPoly = ([&]{ auto __tmp = faceYPoly; __tmp.push_back(ptsY); return __tmp; }());
                    faceZPoly = ([&]{ auto __tmp = faceZPoly; __tmp.push_back(ptsZ); return __tmp; }());
                }
                i = (i + int64_t(1));
            }
            xs = sort_unique(xs);
            ys = sort_unique(ys);
            zs = sort_unique(zs);
            int64_t nx = (xs.size() - int64_t(1));
            int64_t ny = (ys.size() - int64_t(1));
            int64_t nz = (zs.size() - int64_t(1));
            std::map<int64_t, int64_t> xIndex = {};
            i = int64_t(0);
            while ((i < xs.size())) {
                xIndex[static_cast<size_t>(_index(xs, i))] = i;
                i = (i + int64_t(1));
            }
            std::vector<int64_t> dx = {};
            i = int64_t(0);
            while ((i < nx)) {
                dx = ([&]{ auto __tmp = dx; __tmp.push_back((_index(xs, (i + int64_t(1))) - _index(xs, i))); return __tmp; }());
                i = (i + int64_t(1));
            }
            std::vector<int64_t> dy = {};
            i = int64_t(0);
            while ((i < ny)) {
                dy = ([&]{ auto __tmp = dy; __tmp.push_back((_index(ys, (i + int64_t(1))) - _index(ys, i))); return __tmp; }());
                i = (i + int64_t(1));
            }
            std::vector<int64_t> dz = {};
            i = int64_t(0);
            while ((i < nz)) {
                dz = ([&]{ auto __tmp = dz; __tmp.push_back((_index(zs, (i + int64_t(1))) - _index(zs, i))); return __tmp; }());
                i = (i + int64_t(1));
            }
            std::vector<std::vector<std::vector<bool>>> blockX = make3DBool(xs.size(), ny, nz);
            i = int64_t(0);
            while ((i < faceXCoord.size())) {
                int64_t coord = _index(faceXCoord, i);
                std::vector<int64_t> polyY = _index(faceYPoly, i);
                std::vector<int64_t> polyZ = _index(faceZPoly, i);
                int64_t xi = ([&](const auto& __m){ auto __it = __m.find(coord); if (__it == __m.end()) return int64_t{}; return __it->second; })(xIndex);
                int64_t j = int64_t(0);
                while ((j < ny)) {
                    double cy = ((double)((double)((_index(ys, j) + _index(ys, (j + int64_t(1)))))) / (double)(2.0));
                    int64_t k = int64_t(0);
                    while ((k < nz)) {
                        double cz = ((double)((double)((_index(zs, k) + _index(zs, (k + int64_t(1)))))) / (double)(2.0));
                        if (pointInPoly(polyY, polyZ, cy, cz)) {
                            _index(_index(_index(blockX, xi), j), k) = true;
                        }
                        k = (k + int64_t(1));
                    }
                    j = (j + int64_t(1));
                }
                i = (i + int64_t(1));
            }
            std::vector<std::vector<std::vector<bool>>> solid = make3DBool(nx, ny, nz);
            int64_t j2 = int64_t(0);
            while ((j2 < ny)) {
                int64_t k2 = int64_t(0);
                while ((k2 < nz)) {
                    bool inside = false;
                    int64_t i2 = int64_t(0);
                    while ((i2 < nx)) {
                        if (_index(_index(_index(blockX, i2), j2), k2)) {
                            inside = !inside;
                        }
                        if (inside) {
                            _index(_index(_index(solid, i2), j2), k2) = true;
                        }
                        i2 = (i2 + int64_t(1));
                    }
                    k2 = (k2 + int64_t(1));
                }
                j2 = (j2 + int64_t(1));
            }
            int64_t volume = int64_t(0);
            int64_t i3 = int64_t(0);
            while ((i3 < nx)) {
                int64_t j3 = int64_t(0);
                while ((j3 < ny)) {
                    int64_t k3 = int64_t(0);
                    while ((k3 < nz)) {
                        if (_index(_index(_index(solid, i3), j3), k3)) {
                            volume = (volume + ((_index(dx, i3) * _index(dy, j3)) * _index(dz, k3)));
                        }
                        k3 = (k3 + int64_t(1));
                    }
                    j3 = (j3 + int64_t(1));
                }
                i3 = (i3 + int64_t(1));
            }
            std::cout << ((std::string("The bulk is composed of ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << volume; return ss.str(); }())) + std::string(" units."));
            std::cout << std::endl;
            _case = (_case + int64_t(1));
        }
    }
    return 0;
}
