// Generated by Mochi transpiler v0.10.74 on 2025-08-27 07:18:13 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <any>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static std::string _format_double(double v) {
    std::ostringstream ss;
    ss << std::defaultfloat << std::setprecision(std::numeric_limits<double>::max_digits10) << v;
    auto s = ss.str();
    auto epos = s.find('e');
    if(epos == std::string::npos) epos = s.find('E');
    std::string exp;
    if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
    auto pos = s.find('.');
    if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
    return s + exp;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << _format_double(std::any_cast<double>(val));
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static int64_t any_to_int64(const std::any& v) {
    if(v.type() == typeid(int64_t)) return std::any_cast<int64_t>(v);
    if(v.type() == typeid(int)) return (int64_t)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return (int64_t)std::any_cast<double>(v);
    if(v.type() == typeid(std::string)) return std::stoll(std::any_cast<std::string>(v));
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) return _format_double(std::any_cast<double>(v));
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        return _format_double(v);
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

int64_t parseIntStr(std::string str);
int64_t precedence(std::string op);
std::any parse(std::string s);
bool needParen(std::string parent, bool isRight, std::any child);
std::string formatRec(std::any node, std::string parent, bool isRight);
std::string makeNice(std::string s);
int main();

int64_t parseIntStr(std::string str) {
    std::map<std::string, std::any> digits = {{"0", std::any(int64_t(0))}, {"1", std::any(int64_t(1))}, {"2", std::any(int64_t(2))}, {"3", std::any(int64_t(3))}, {"4", std::any(int64_t(4))}, {"5", std::any(int64_t(5))}, {"6", std::any(int64_t(6))}, {"7", std::any(int64_t(7))}, {"8", std::any(int64_t(8))}, {"9", std::any(int64_t(9))}};
    int64_t i = int64_t(0);
    int64_t n = int64_t(0);
    while ((i < str.size())) {
        n = ((n * int64_t(10)) + any_to_int64(([&](const auto& __m){ auto __it = __m.find(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(str)); if (__it == __m.end()) return std::any{}; return __it->second; })(digits)));
        i = (i + int64_t(1));
    }
    return n;
}

int64_t precedence(std::string op) {
    if (((op == std::string("+")) || (op == std::string("-")))) {
        return int64_t(1);
    }
    if (((op == std::string("*")) || (op == std::string("/")))) {
        return int64_t(2);
    }
    return int64_t(0);
}

std::any parse(std::string s) {
    std::vector<std::string> ops = {};
    std::vector<std::any> vals = {};
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if (((ch >= std::string("a")) && (ch <= std::string("z")))) {
            vals = ([&]{ auto __tmp = vals; __tmp.push_back((std::any)std::map<std::string, std::any>{{"kind", std::any(std::string("var"))}, {"val", std::any(ch)}}); return __tmp; }());
        } else         if ((ch == std::string("("))) {
            ops = ([&]{ auto __tmp = ops; __tmp.push_back(ch); return __tmp; }());
        } else         if ((ch == std::string(")"))) {
            while (((ops.size() > int64_t(0)) && (_index(ops, (ops.size() - int64_t(1))) != std::string("(")))) {
                std::string op = _index(ops, (ops.size() - int64_t(1)));
                ops = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (ops.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(ops.size() - int64_t(1))); })(ops);
                std::any right = _index(vals, (vals.size() - int64_t(1)));
                vals = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (vals.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(vals.size() - int64_t(1))); })(vals);
                std::any left = _index(vals, (vals.size() - int64_t(1)));
                vals = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (vals.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(vals.size() - int64_t(1))); })(vals);
                vals = ([&]{ auto __tmp = vals; __tmp.push_back((std::any)std::map<std::string, std::any>{{"kind", std::any(std::string("op"))}, {"op", std::any(op)}, {"left", std::any(left)}, {"right", std::any(right)}}); return __tmp; }());
            }
            ops = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (ops.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(ops.size() - int64_t(1))); })(ops);
        } else {
            while ((((ops.size() > int64_t(0)) && (_index(ops, (ops.size() - int64_t(1))) != std::string("("))) && (precedence(_index(ops, (ops.size() - int64_t(1)))) >= precedence(ch)))) {
                std::string op = _index(ops, (ops.size() - int64_t(1)));
                ops = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (ops.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(ops.size() - int64_t(1))); })(ops);
                std::any right = _index(vals, (vals.size() - int64_t(1)));
                vals = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (vals.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(vals.size() - int64_t(1))); })(vals);
                std::any left = _index(vals, (vals.size() - int64_t(1)));
                vals = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (vals.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(vals.size() - int64_t(1))); })(vals);
                vals = ([&]{ auto __tmp = vals; __tmp.push_back((std::any)std::map<std::string, std::any>{{"kind", std::any(std::string("op"))}, {"op", std::any(op)}, {"left", std::any(left)}, {"right", std::any(right)}}); return __tmp; }());
            }
            ops = ([&]{ auto __tmp = ops; __tmp.push_back(ch); return __tmp; }());
        }


        i = (i + int64_t(1));
    }
    while ((ops.size() > int64_t(0))) {
        std::string op = _index(ops, (ops.size() - int64_t(1)));
        ops = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (ops.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(ops.size() - int64_t(1))); })(ops);
        std::any right = _index(vals, (vals.size() - int64_t(1)));
        vals = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (vals.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(vals.size() - int64_t(1))); })(vals);
        std::any left = _index(vals, (vals.size() - int64_t(1)));
        vals = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (vals.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(vals.size() - int64_t(1))); })(vals);
        vals = ([&]{ auto __tmp = vals; __tmp.push_back((std::any)std::map<std::string, std::any>{{"kind", std::any(std::string("op"))}, {"op", std::any(op)}, {"left", std::any(left)}, {"right", std::any(right)}}); return __tmp; }());
    }
    return _index(vals, (vals.size() - int64_t(1)));
}

bool needParen(std::string parent, bool isRight, std::any child) {
    if ((std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(child)["kind"]) != std::string("op"))) {
        return false;
    }
    int64_t p = precedence(parent);
    int64_t c = precedence(std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(child)["op"]));
    if ((c < p)) {
        return true;
    }
    if ((c > p)) {
        return false;
    }
    if ((((parent == std::string("-")) && isRight) && ((std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(child)["op"]) == std::string("+")) || (std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(child)["op"]) == std::string("-"))))) {
        return true;
    }
    if ((((parent == std::string("/")) && isRight) && ((std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(child)["op"]) == std::string("*")) || (std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(child)["op"]) == std::string("/"))))) {
        return true;
    }
    return false;
}

std::string formatRec(std::any node, std::string parent, bool isRight) {
    if ((std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(node)["kind"]) != std::string("op"))) {
        return std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(node)["val"]);
    }
    std::string left = formatRec(std::any_cast<std::map<std::string, std::any>>(node)["left"], std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(node)["op"]), false);
    std::string right = formatRec(std::any_cast<std::map<std::string, std::any>>(node)["right"], std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(node)["op"]), true);
    std::string res = ((left + std::any_cast<std::string>(std::any_cast<std::map<std::string, std::any>>(node)["op"])) + right);
    if (((parent != std::string("")) && needParen(parent, isRight, node))) {
        res = ((std::string("(") + res) + std::string(")"));
    }
    return res;
}

std::string makeNice(std::string s) {
    std::any root = parse(s);
    return formatRec(root, std::string(""), false);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string tStr = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
        if ((tStr == std::string(""))) {
            return int64_t(0);
        }
        int64_t t = parseIntStr(tStr);
        for (int64_t _ = int64_t(0); _ < t; _++ ) {
            std::string line = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            std::cout << makeNice(line);
            std::cout << std::endl;
        }
    }
    return 0;
}
