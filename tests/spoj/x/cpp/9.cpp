// Generated by Mochi transpiler v0.10.74 on 2025-08-27 07:11:13 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static std::string _format_double(double v) {
    std::ostringstream ss;
    ss << std::defaultfloat << std::setprecision(std::numeric_limits<double>::max_digits10) << v;
    auto s = ss.str();
    auto epos = s.find('e');
    if(epos == std::string::npos) epos = s.find('E');
    std::string exp;
    if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
    auto pos = s.find('.');
    if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
    return s + exp;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << _format_double(std::any_cast<double>(val));
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static int64_t any_to_int64(const std::any& v) {
    if(v.type() == typeid(int64_t)) return std::any_cast<int64_t>(v);
    if(v.type() == typeid(int)) return (int64_t)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return (int64_t)std::any_cast<double>(v);
    if(v.type() == typeid(std::string)) return std::stoll(std::any_cast<std::string>(v));
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) return _format_double(std::any_cast<double>(v));
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        return _format_double(v);
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

int64_t parseInt(std::string s);
std::vector<std::string> split(std::string s);
double absf(double x);
double _sqrt(double x);
std::vector<std::vector<bool>> makeBoolGrid(int64_t P, int64_t Q);
bool visible(const std::vector<std::vector<int64_t>>& grid, int64_t P, int64_t Q, int64_t R, int64_t C, int64_t BR, int64_t BC);
std::vector<std::vector<bool>> computeVis(const std::vector<std::vector<int64_t>>& grid, int64_t P, int64_t Q, int64_t BR, int64_t BC);
int64_t bfs(const std::vector<std::vector<int64_t>>& grid, int64_t P, int64_t Q, int64_t R1, int64_t C1, int64_t R2, int64_t C2);
int main();

std::map<std::string, int64_t> digits = {{"0", int64_t(0)}, {"1", int64_t(1)}, {"2", int64_t(2)}, {"3", int64_t(3)}, {"4", int64_t(4)}, {"5", int64_t(5)}, {"6", int64_t(6)}, {"7", int64_t(7)}, {"8", int64_t(8)}, {"9", int64_t(9)}};

int64_t parseInt(std::string s) {
    int64_t i = int64_t(0);
    int64_t n = int64_t(0);
    while ((i < s.size())) {
        n = ((n * int64_t(10)) + (int64_t)(([&](const auto& __m){ auto __it = __m.find(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s)); if (__it == __m.end()) return int64_t{}; return __it->second; })(digits)));
        i = (i + int64_t(1));
    }
    return n;
}

std::vector<std::string> split(std::string s) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if ((ch == std::string(" "))) {
            if ((cur.size() > int64_t(0))) {
                parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
                cur = std::string("");
            }
        } else {
            cur = (cur + ch);
        }
        i = (i + int64_t(1));
    }
    if ((cur.size() > int64_t(0))) {
        parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    }
    return parts;
}

double absf(double x) {
    if ((x < 0.0)) {
        return -x;
    } else {
        return x;
    }
}

double _sqrt(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double r = x;
    double prev = 0.0;
    while ((absf((r - prev)) > 1e-12)) {
        prev = r;
        r = ((double)((r + ((double)(x) / (double)(r)))) / (double)(2.0));
    }
    return r;
}

std::vector<std::vector<bool>> makeBoolGrid(int64_t P, int64_t Q) {
    std::vector<std::vector<bool>> g = {};
    int64_t i = int64_t(0);
    while ((i < P)) {
        std::vector<bool> row = {};
        int64_t j = int64_t(0);
        while ((j < Q)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(false); return __tmp; }());
            j = (j + int64_t(1));
        }
        g = ([&]{ auto __tmp = g; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return g;
}

bool visible(const std::vector<std::vector<int64_t>>& grid, int64_t P, int64_t Q, int64_t R, int64_t C, int64_t BR, int64_t BC) {
    double X1 = ((double)(C) - 0.5);
    double Y1 = ((double)(R) - 0.5);
    double Z1 = ((double)(_index(_index(grid, (int64_t)((R - int64_t(1)))), (int64_t)((C - int64_t(1))))) + 0.5);
    double X2 = ((double)(BC) - 0.5);
    double Y2 = ((double)(BR) - 0.5);
    double Z2 = ((double)(_index(_index(grid, (int64_t)((BR - int64_t(1)))), (int64_t)((BC - int64_t(1))))) + 0.5);
    double Dx = (X2 - X1);
    double Dy = (Y2 - Y1);
    double Dz = (Z2 - Z1);
    double dist = std::sqrt((((Dx * Dx) + (Dy * Dy)) + (Dz * Dz)));
    int64_t steps = ((int64_t)((dist * 20.0)) + int64_t(1));
    double stepT = ((double)(1.0) / (double)((double)(steps)));
    int64_t i = int64_t(1);
    while ((i < steps)) {
        double t = (stepT * (double)(i));
        double X = (X1 + (Dx * t));
        double Y = (Y1 + (Dy * t));
        double Z = (Z1 + (Dz * t));
        int64_t rIdx = ((int64_t)(Y) + int64_t(1));
        int64_t cIdx = ((int64_t)(X) + int64_t(1));
        if (((((rIdx < int64_t(1)) || (rIdx > P)) || (cIdx < int64_t(1))) || (cIdx > Q))) {
            return false;
        }
        double H = (double)(_index(_index(grid, (int64_t)((rIdx - int64_t(1)))), (int64_t)((cIdx - int64_t(1)))));
        if ((Z <= H)) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

std::vector<std::vector<bool>> computeVis(const std::vector<std::vector<int64_t>>& grid, int64_t P, int64_t Q, int64_t BR, int64_t BC) {
    std::vector<std::vector<bool>> vis = makeBoolGrid(P, Q);
    int64_t r = int64_t(1);
    while ((r <= P)) {
        int64_t c = int64_t(1);
        while ((c <= Q)) {
            _index(_index(vis, (int64_t)((r - int64_t(1)))), (int64_t)((c - int64_t(1)))) = visible(grid, P, Q, r, c, BR, BC);
            c = (c + int64_t(1));
        }
        r = (r + int64_t(1));
    }
    return vis;
}

int64_t bfs(const std::vector<std::vector<int64_t>>& grid, int64_t P, int64_t Q, int64_t R1, int64_t C1, int64_t R2, int64_t C2) {
    std::vector<std::vector<bool>> vis1 = computeVis(grid, P, Q, R1, C1);
    std::vector<std::vector<bool>> vis2 = computeVis(grid, P, Q, R2, C2);
    std::vector<std::vector<bool>> visited = makeBoolGrid(P, Q);
    std::vector<int64_t> qR = {};
    std::vector<int64_t> qC = {};
    std::vector<int64_t> qD = {};
    qR = ([&]{ auto __tmp = qR; __tmp.push_back(R1); return __tmp; }());
    qC = ([&]{ auto __tmp = qC; __tmp.push_back(C1); return __tmp; }());
    qD = ([&]{ auto __tmp = qD; __tmp.push_back(int64_t(0)); return __tmp; }());
    _index(_index(visited, (int64_t)((R1 - int64_t(1)))), (int64_t)((C1 - int64_t(1)))) = true;
    int64_t head = int64_t(0);
    while ((head < qR.size())) {
        int64_t r = _index(qR, head);
        int64_t c = _index(qC, head);
        int64_t d = _index(qD, head);
        if (((r == R2) && (c == C2))) {
            return d;
        }
        int64_t hr = _index(_index(grid, (int64_t)((r - int64_t(1)))), (int64_t)((c - int64_t(1))));
        int64_t idx = int64_t(0);
        while ((idx < int64_t(4))) {
            int64_t nr = r;
            int64_t nc = c;
            if ((idx == int64_t(0))) {
                nr = (nr - int64_t(1));
            }
            if ((idx == int64_t(1))) {
                nr = (nr + int64_t(1));
            }
            if ((idx == int64_t(2))) {
                nc = (nc - int64_t(1));
            }
            if ((idx == int64_t(3))) {
                nc = (nc + int64_t(1));
            }
            if (((((nr >= int64_t(1)) && (nr <= P)) && (nc >= int64_t(1))) && (nc <= Q))) {
                if (!_index(_index(visited, (int64_t)((nr - int64_t(1)))), (int64_t)((nc - int64_t(1))))) {
                    int64_t hn = _index(_index(grid, (int64_t)((nr - int64_t(1)))), (int64_t)((nc - int64_t(1))));
                    int64_t diff = (hn - hr);
                    if (((diff <= int64_t(1)) && (diff >= (int64_t(0) - int64_t(3))))) {
                        if ((_index(_index(vis1, (int64_t)((nr - int64_t(1)))), (int64_t)((nc - int64_t(1)))) || _index(_index(vis2, (int64_t)((nr - int64_t(1)))), (int64_t)((nc - int64_t(1)))))) {
                            _index(_index(visited, (int64_t)((nr - int64_t(1)))), (int64_t)((nc - int64_t(1)))) = true;
                            qR = ([&]{ auto __tmp = qR; __tmp.push_back(nr); return __tmp; }());
                            qC = ([&]{ auto __tmp = qC; __tmp.push_back(nc); return __tmp; }());
                            qD = ([&]{ auto __tmp = qD; __tmp.push_back((d + int64_t(1))); return __tmp; }());
                        }
                    }
                }
            }
            idx = (idx + int64_t(1));
        }
        head = (head + int64_t(1));
    }
    return -int64_t(1);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string tLine = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
        if ((tLine == std::string(""))) {
            return int64_t(0);
        }
        int64_t t = parseInt(tLine);
        int64_t _case = int64_t(0);
        while ((_case < t)) {
            std::string line = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            while ((line == std::string(""))) {
                line = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            }
            std::vector<std::string> pq = split(line);
            int64_t P = parseInt(_index(pq, int64_t(0)));
            int64_t Q = parseInt(_index(pq, int64_t(1)));
            std::vector<std::vector<int64_t>> grid = {};
            int64_t r = int64_t(0);
            while ((r < P)) {
                std::vector<std::string> rowParts = split(([&]{ std::string __line; std::getline(std::cin, __line); return __line; }()));
                std::vector<int64_t> row = {};
                int64_t c = int64_t(0);
                while ((c < Q)) {
                    row = ([&]{ auto __tmp = row; __tmp.push_back(parseInt(_index(rowParts, c))); return __tmp; }());
                    c = (c + int64_t(1));
                }
                grid = ([&]{ auto __tmp = grid; __tmp.push_back(row); return __tmp; }());
                r = (r + int64_t(1));
            }
            std::vector<std::string> coords = split(([&]{ std::string __line; std::getline(std::cin, __line); return __line; }()));
            int64_t R1 = parseInt(_index(coords, int64_t(0)));
            int64_t C1 = parseInt(_index(coords, int64_t(1)));
            int64_t R2 = parseInt(_index(coords, int64_t(2)));
            int64_t C2 = parseInt(_index(coords, int64_t(3)));
            int64_t res = bfs(grid, P, Q, R1, C1, R2, C2);
            if ((res < int64_t(0))) {
                std::cout << std::string("Mission impossible!");
                std::cout << std::endl;
            } else {
                std::cout << ((std::string("The shortest path is ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << res; return ss.str(); }())) + std::string(" steps long."));
                std::cout << std::endl;
            }
            _case = (_case + int64_t(1));
        }
    }
    return 0;
}
