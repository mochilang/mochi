# Generated by Mochi transpiler v0.10.74 on 2025-08-27 07:05 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = arr.nil? ? [] : arr.clone
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x % 1 == 0 ? x.to_i.to_s : x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def parseIntStr(str)
    digits = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    i = 0
    n = 0
    while i < _len(str)
      n = _add(n * 10, (((__tmp110 = digits; __tmp110.is_a?(Hash) ? __tmp110[str[i..._add(i, 1)]] : _idx(__tmp110, str[i..._add(i, 1)]))).to_i))
      i = _add(i, 1)
    end
    return n
  end
  def precedence(op)
    if _eq(op, "+") || _eq(op, "-")
      return 1
    end
    if _eq(op, "*") || _eq(op, "/")
      return 2
    end
    return 0
  end
  def parse(s)
    ops = []
    vals = []
    i = 0
    while i < _len(s)
      ch = s[i..._add(i, 1)]
      if ch >= "a" && ch <= "z"
        vals = _append(vals, {"kind" => "var", "val" => ch})
      else
        if _eq(ch, "(")
          ops = _append(ops, ch)
        else
          if _eq(ch, ")")
            while _len(ops) > 0 && !_eq((__tmp111 = ops; __tmp111.is_a?(Hash) ? __tmp111[_len(ops) - 1] : _idx(__tmp111, _len(ops) - 1)), "(")
              op = (__tmp112 = ops; __tmp112.is_a?(Hash) ? __tmp112[_len(ops) - 1] : _idx(__tmp112, _len(ops) - 1))
              ops = ops[0..._len(ops) - 1]
              right = (__tmp113 = vals; __tmp113.is_a?(Hash) ? __tmp113[_len(vals) - 1] : _idx(__tmp113, _len(vals) - 1))
              vals = vals[0..._len(vals) - 1]
              left = (__tmp114 = vals; __tmp114.is_a?(Hash) ? __tmp114[_len(vals) - 1] : _idx(__tmp114, _len(vals) - 1))
              vals = vals[0..._len(vals) - 1]
              vals = _append(vals, {"kind" => "op", "op" => op, "left" => left, "right" => right})
            end
            ops = ops[0..._len(ops) - 1]
          else
            while _len(ops) > 0 && !_eq((__tmp115 = ops; __tmp115.is_a?(Hash) ? __tmp115[_len(ops) - 1] : _idx(__tmp115, _len(ops) - 1)), "(") && precedence((__tmp116 = ops; __tmp116.is_a?(Hash) ? __tmp116[_len(ops) - 1] : _idx(__tmp116, _len(ops) - 1))) >= precedence(ch)
              op = (__tmp117 = ops; __tmp117.is_a?(Hash) ? __tmp117[_len(ops) - 1] : _idx(__tmp117, _len(ops) - 1))
              ops = ops[0..._len(ops) - 1]
              right = (__tmp118 = vals; __tmp118.is_a?(Hash) ? __tmp118[_len(vals) - 1] : _idx(__tmp118, _len(vals) - 1))
              vals = vals[0..._len(vals) - 1]
              left = (__tmp119 = vals; __tmp119.is_a?(Hash) ? __tmp119[_len(vals) - 1] : _idx(__tmp119, _len(vals) - 1))
              vals = vals[0..._len(vals) - 1]
              vals = _append(vals, {"kind" => "op", "op" => op, "left" => left, "right" => right})
            end
            ops = _append(ops, ch)
          end
        end
      end
      i = _add(i, 1)
    end
    while _len(ops) > 0
      op = (__tmp120 = ops; __tmp120.is_a?(Hash) ? __tmp120[_len(ops) - 1] : _idx(__tmp120, _len(ops) - 1))
      ops = ops[0..._len(ops) - 1]
      right = (__tmp121 = vals; __tmp121.is_a?(Hash) ? __tmp121[_len(vals) - 1] : _idx(__tmp121, _len(vals) - 1))
      vals = vals[0..._len(vals) - 1]
      left = (__tmp122 = vals; __tmp122.is_a?(Hash) ? __tmp122[_len(vals) - 1] : _idx(__tmp122, _len(vals) - 1))
      vals = vals[0..._len(vals) - 1]
      vals = _append(vals, {"kind" => "op", "op" => op, "left" => left, "right" => right})
    end
    return (__tmp123 = vals; __tmp123.is_a?(Hash) ? __tmp123[_len(vals) - 1] : _idx(__tmp123, _len(vals) - 1))
  end
  def needParen(parent, isRight, child)
    if !_eq((__tmp124 = child; __tmp124.is_a?(Hash) ? __tmp124["kind"] : _idx(__tmp124, "kind")), "op")
      return false
    end
    p = precedence(parent)
    c = precedence((__tmp125 = child; __tmp125.is_a?(Hash) ? __tmp125["op"] : _idx(__tmp125, "op")))
    if c < p
      return true
    end
    if c > p
      return false
    end
    if _eq(parent, "-") && isRight && (_eq((__tmp126 = child; __tmp126.is_a?(Hash) ? __tmp126["op"] : _idx(__tmp126, "op")), "+") || _eq((__tmp127 = child; __tmp127.is_a?(Hash) ? __tmp127["op"] : _idx(__tmp127, "op")), "-"))
      return true
    end
    if _eq(parent, "/") && isRight && (_eq((__tmp128 = child; __tmp128.is_a?(Hash) ? __tmp128["op"] : _idx(__tmp128, "op")), "*") || _eq((__tmp129 = child; __tmp129.is_a?(Hash) ? __tmp129["op"] : _idx(__tmp129, "op")), "/"))
      return true
    end
    return false
  end
  def formatRec(node, parent, isRight)
    if !_eq((__tmp130 = node; __tmp130.is_a?(Hash) ? __tmp130["kind"] : _idx(__tmp130, "kind")), "op")
      return (__tmp131 = node; __tmp131.is_a?(Hash) ? __tmp131["val"] : _idx(__tmp131, "val"))
    end
    left = formatRec((__tmp132 = node; __tmp132.is_a?(Hash) ? __tmp132["left"] : _idx(__tmp132, "left")), (__tmp133 = node; __tmp133.is_a?(Hash) ? __tmp133["op"] : _idx(__tmp133, "op")), false)
    right = formatRec((__tmp134 = node; __tmp134.is_a?(Hash) ? __tmp134["right"] : _idx(__tmp134, "right")), (__tmp135 = node; __tmp135.is_a?(Hash) ? __tmp135["op"] : _idx(__tmp135, "op")), true)
    res = _add(_add(left, (__tmp136 = node; __tmp136.is_a?(Hash) ? __tmp136["op"] : _idx(__tmp136, "op"))), right)
    if !_eq(parent, "") && needParen(parent, isRight, node)
      res = _add(_add("(", res), ")")
    end
    return res
  end
  def makeNice(s)
    root = parse(s)
    return formatRec(root, "", false)
  end
  def main()
    tStr = _input()
    if _eq(tStr, "")
      return
    end
    t = parseIntStr(tStr)
    (0...t).each do |_|
      line = _input()
      puts(makeNice(line))
    end
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
print("\n")
puts(JSON.pretty_generate(result))
