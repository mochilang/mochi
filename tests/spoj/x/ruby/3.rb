# Generated by Mochi transpiler v0.10.74 on 2025-08-26 11:55 +0700
$VERBOSE = nil

def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = arr.nil? ? [] : arr.clone
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x % 1 == 0 ? x.to_i.to_s : x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
def is_substring(a, b)
  la = _len(a)
  lb = _len(b)
  i = 0
  while _add(i, lb) <= la
    if _eq(a[i..._add(i, lb)], b)
      return 1
    end
    i = _add(i, 1)
  end
  return 0
end
def solve(lines)
  res = []
    __tmp7 = lines
  __tmp7 = [] if __tmp7.nil?
  if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
    __tmp7 = __tmp7.keys
  end
  __tmp7.each do |line|
    parts = []
    cur = ""
    i = 0
    while i < _len(line)
      ch = line[i..._add(i, 1)]
      if _eq(ch, " ")
        parts = _append(parts, cur)
        cur = ""
      else
        cur = _add(cur, ch)
      end
      i = _add(i, 1)
    end
    parts = _append(parts, cur)
    a = (__tmp8 = parts; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0))
    b = (__tmp9 = parts; __tmp9.is_a?(Hash) ? __tmp9[1] : _idx(__tmp9, 1))
    res = _append(res, is_substring(a, b))
  end
  return res
end
$sample_input = ["1010110010 10110", "1110111011 10011"]
__tmp10 = solve($sample_input)
__tmp10 = [] if __tmp10.nil?
if __tmp10.respond_to?(:keys) && !__tmp10.is_a?(String)
  __tmp10 = __tmp10.keys
end
__tmp10.each do |r|
  puts(r)
end
