# Generated by Mochi transpiler v0.10.74 on 2025-08-26 14:25 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = arr.nil? ? [] : arr.clone
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x % 1 == 0 ? x.to_i.to_s : x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def split(s, sep)
    parts = []
    cur = ""
    i = 0
    while i < _len(s)
      if _len(sep) > 0 && _add(i, _len(sep)) <= _len(s) && _eq(s[i..._add(i, _len(sep))], sep)
        parts = _append(parts, cur)
        cur = ""
        i = _add(i, _len(sep))
      else
        cur = _add(cur, s[i..._add(i, 1)])
        i = _add(i, 1)
      end
    end
    parts = _append(parts, cur)
    return parts
  end
  def precompute(limit)
    sieve = []
    (0...(_add(limit, 1))).each do |i|
      sieve = _append(sieve, true)
    end
    sieve[0] = false
    sieve[1] = false
    p = 2
    while p * p <= limit
      if (__tmp1 = sieve; __tmp1.is_a?(Hash) ? __tmp1[p] : _idx(__tmp1, p))
        j = p * p
        while j <= limit
          sieve[j] = false
          j = _add(j, p)
        end
      end
      p = _add(p, 1)
    end
    primes = []
    (2...(_add(limit, 1))).each do |i|
      if (__tmp2 = sieve; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
        primes = _append(primes, i)
      end
    end
    return primes
  end
  $primes = precompute(32000)
  $t = (_input()).to_i
  $case_idx = 0
  while $case_idx < $t
    line = _input()
    parts = split(line, " ")
    m = ((__tmp3 = parts; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))).to_i
    n = ((__tmp4 = parts; __tmp4.is_a?(Hash) ? __tmp4[1] : _idx(__tmp4, 1))).to_i
    size = _add(n - m, 1)
    segment = []
    (0...size).each do |i|
      segment = _append(segment, true)
    end
        __tmp5 = $primes
    __tmp5 = [] if __tmp5.nil?
    if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
      __tmp5 = __tmp5.keys
    end
    __tmp5.each do |p|
      if p * p > n
        break
      end
      start = p * p
      if start < m
        rem = m % p
        if _eq(rem, 0)
          start = m
        else
          start = _add(m, (p - rem))
        end
      end
      j = start
      while j <= n
        segment[j - m] = false
        j = _add(j, p)
      end
    end
    if _eq(m, 1)
      segment[0] = false
    end
    i = 0
    while i < size
      if (__tmp6 = segment; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))
        puts(_add(i, m))
      end
      i = _add(i, 1)
    end
    if $case_idx < $t - 1
      puts("")
    end
    $case_idx = _add($case_idx, 1)
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
print("\n")
puts(JSON.pretty_generate(result))
