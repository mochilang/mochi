# Generated by Mochi transpiler v0.10.74 on 2025-08-26 11:55 +0700
$VERBOSE = nil

def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = arr.nil? ? [] : arr.clone
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x % 1 == 0 ? x.to_i.to_s : x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
def precedence(op)
  if _eq(op, "+") || _eq(op, "-")
    return 1
  end
  if _eq(op, "*") || _eq(op, "/")
    return 2
  end
  if _eq(op, "^")
    return 3
  end
  return 0
end
def popTop(stack)
  return (__tmp11 = stack; __tmp11.is_a?(Hash) ? __tmp11[_len(stack) - 1] : _idx(__tmp11, _len(stack) - 1))
end
def popStack(stack)
  newStack = []
  i = 0
  while i < _len(stack) - 1
    newStack = _append(newStack, (__tmp12 = stack; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)))
    i = _add(i, 1)
  end
  return newStack
end
def toRPN(expr)
  out = ""
  stack = []
  i = 0
  while i < _len(expr)
    ch = (__tmp13 = expr; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))
    if ch >= "a" && ch <= "z"
      out = _add(out, ch)
    else
      if _eq(ch, "(")
        stack = _append(stack, ch)
      else
        if _eq(ch, ")")
          while _len(stack) > 0
            top = popTop(stack)
            if _eq(top, "(")
              stack = popStack(stack)
              break
            end
            out = _add(out, top)
            stack = popStack(stack)
          end
        else
          prec = precedence(ch)
          while _len(stack) > 0
            top = popTop(stack)
            if _eq(top, "(")
              break
            end
            topPrec = precedence(top)
            if topPrec > prec || (_eq(topPrec, prec) && !_eq(ch, "^"))
              out = _add(out, top)
              stack = popStack(stack)
            else
              break
            end
          end
          stack = _append(stack, ch)
        end
      end
    end
    i = _add(i, 1)
  end
  while _len(stack) > 0
    top = popTop(stack)
    out = _add(out, top)
    stack = popStack(stack)
  end
  return out
end
def main()
  t = (_input()).to_i
  i = 0
  while i < t
    expr = _input()
    puts(toRPN(expr))
    i = _add(i, 1)
  end
end
main()
