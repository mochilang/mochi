# Generated by Mochi transpiler v0.10.74 on 2025-08-27 07:05 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = arr.nil? ? [] : arr.clone
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x % 1 == 0 ? x.to_i.to_s : x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def split(s, sep)
    parts = []
    cur = ""
    i = 0
    while i < _len(s)
      if _len(sep) > 0 && _add(i, _len(sep)) <= _len(s) && _eq(s[i..._add(i, _len(sep))], sep)
        parts = _append(parts, cur)
        cur = ""
        i = _add(i, _len(sep))
      else
        cur = _add(cur, s[i..._add(i, 1)])
        i = _add(i, 1)
      end
    end
    parts = _append(parts, cur)
    return parts
  end
  def parse_ints(line)
    pieces = split(line, " ")
    nums = []
        __tmp64 = pieces
    __tmp64 = [] if __tmp64.nil?
    if __tmp64.respond_to?(:keys) && !__tmp64.is_a?(String)
      __tmp64 = __tmp64.keys
    end
    __tmp64.each do |p|
      if _len(p) > 0
        nums = _append(nums, (p).to_i)
      end
    end
    return nums
  end
  def main()
    tLine = _input()
    if _eq(tLine, "")
      return
    end
    t = (tLine).to_i
    caseIdx = 0
    while caseIdx < t
      header = parse_ints(_input())
      s = (__tmp65 = header; __tmp65.is_a?(Hash) ? __tmp65[0] : _idx(__tmp65, 0))
      c = (__tmp66 = header; __tmp66.is_a?(Hash) ? __tmp66[1] : _idx(__tmp66, 1))
      seq = parse_ints(_input())
      levels = []
      levels = _append(levels, seq)
      current = seq
      while _len(current) > 1
        next_ = []
        i = 0
        while _add(i, 1) < _len(current)
          next_ = _append(next_, (__tmp67 = current; __tmp67.is_a?(Hash) ? __tmp67[_add(i, 1)] : _idx(__tmp67, _add(i, 1))) - (__tmp68 = current; __tmp68.is_a?(Hash) ? __tmp68[i] : _idx(__tmp68, i)))
          i = _add(i, 1)
        end
        levels = _append(levels, next_)
        current = next_
      end
      depth = _len(levels) - 1
      step = 0
      res = []
      while step < c
        bottom = (__tmp69 = levels; __tmp69.is_a?(Hash) ? __tmp69[depth] : _idx(__tmp69, depth))
        bottom = _append(bottom, (__tmp70 = bottom; __tmp70.is_a?(Hash) ? __tmp70[_len(bottom) - 1] : _idx(__tmp70, _len(bottom) - 1)))
        levels[depth] = bottom
        level = depth - 1
        while level >= 0
          arr = (__tmp71 = levels; __tmp71.is_a?(Hash) ? __tmp71[level] : _idx(__tmp71, level))
          arrBelow = (__tmp72 = levels; __tmp72.is_a?(Hash) ? __tmp72[_add(level, 1)] : _idx(__tmp72, _add(level, 1)))
          nextVal = _add((__tmp73 = arr; __tmp73.is_a?(Hash) ? __tmp73[_len(arr) - 1] : _idx(__tmp73, _len(arr) - 1)), (__tmp74 = arrBelow; __tmp74.is_a?(Hash) ? __tmp74[_len(arrBelow) - 1] : _idx(__tmp74, _len(arrBelow) - 1)))
          arr = _append(arr, nextVal)
          levels[level] = arr
          level = level - 1
        end
        res = _append(res, (__tmp75 = (__tmp76 = levels; __tmp76.is_a?(Hash) ? __tmp76[0] : _idx(__tmp76, 0)); __tmp75.is_a?(Hash) ? __tmp75[_len((__tmp77 = levels; __tmp77.is_a?(Hash) ? __tmp77[0] : _idx(__tmp77, 0))) - 1] : _idx(__tmp75, _len((__tmp78 = levels; __tmp78.is_a?(Hash) ? __tmp78[0] : _idx(__tmp78, 0))) - 1)))
        step = _add(step, 1)
      end
      out = ""
      i2 = 0
      while i2 < _len(res)
        if i2 > 0
          out = _add(out, " ")
        end
        out = _add(out, _str((__tmp79 = res; __tmp79.is_a?(Hash) ? __tmp79[i2] : _idx(__tmp79, i2))))
        i2 = _add(i2, 1)
      end
      puts(out)
      caseIdx = _add(caseIdx, 1)
    end
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
print("\n")
puts(JSON.pretty_generate(result))
