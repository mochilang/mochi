# Generated by Mochi transpiler v0.10.74 on 2025-08-26 14:25 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = arr.nil? ? [] : arr.clone
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x % 1 == 0 ? x.to_i.to_s : x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def next_pal(s)
    digitMap = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    n = _len(s)
    num = []
    (0...n).each do |i|
      num = _append(num, ((__tmp14 = digitMap; __tmp14.is_a?(Hash) ? __tmp14[s[i..._add(i, 1)]] : _idx(__tmp14, s[i..._add(i, 1)]))).to_i)
    end
    all9 = true
        __tmp15 = num
    __tmp15 = [] if __tmp15.nil?
    if __tmp15.respond_to?(:keys) && !__tmp15.is_a?(String)
      __tmp15 = __tmp15.keys
    end
    __tmp15.each do |d|
      if !_eq(d, 9)
        all9 = false
        break
      end
    end
    if all9
      res = "1"
      (0...(n - 1)).each do |_|
        res = _add(res, "0")
      end
      res = _add(res, "1")
      return res
    end
    left = n / 2 - 1
    right = (_eq(n % 2, 0) ? n / 2 : _add(n / 2, 1))
    while left >= 0 && right < n && _eq((__tmp16 = num; __tmp16.is_a?(Hash) ? __tmp16[left] : _idx(__tmp16, left)), (__tmp17 = num; __tmp17.is_a?(Hash) ? __tmp17[right] : _idx(__tmp17, right)))
      left = left - 1
      right = _add(right, 1)
    end
    smaller = left < 0 || (__tmp18 = num; __tmp18.is_a?(Hash) ? __tmp18[left] : _idx(__tmp18, left)) < (__tmp19 = num; __tmp19.is_a?(Hash) ? __tmp19[right] : _idx(__tmp19, right))
    left = n / 2 - 1
    right = (_eq(n % 2, 0) ? n / 2 : _add(n / 2, 1))
    while left >= 0
      num[right] = (__tmp20 = num; __tmp20.is_a?(Hash) ? __tmp20[left] : _idx(__tmp20, left))
      left = left - 1
      right = _add(right, 1)
    end
    if smaller
      carry = 1
      left = n / 2 - 1
      if _eq(n % 2, 1)
        mid = n / 2
        num[mid] = _add((__tmp21 = num; __tmp21.is_a?(Hash) ? __tmp21[mid] : _idx(__tmp21, mid)), carry)
        carry = (__tmp22 = num; __tmp22.is_a?(Hash) ? __tmp22[mid] : _idx(__tmp22, mid)) / 10
        num[mid] = (__tmp23 = num; __tmp23.is_a?(Hash) ? __tmp23[mid] : _idx(__tmp23, mid)) % 10
        right = _add(mid, 1)
      else
        right = n / 2
      end
      while left >= 0
        num[left] = _add((__tmp24 = num; __tmp24.is_a?(Hash) ? __tmp24[left] : _idx(__tmp24, left)), carry)
        carry = (__tmp25 = num; __tmp25.is_a?(Hash) ? __tmp25[left] : _idx(__tmp25, left)) / 10
        num[left] = (__tmp26 = num; __tmp26.is_a?(Hash) ? __tmp26[left] : _idx(__tmp26, left)) % 10
        num[right] = (__tmp27 = num; __tmp27.is_a?(Hash) ? __tmp27[left] : _idx(__tmp27, left))
        left = left - 1
        right = _add(right, 1)
      end
    end
    out = ""
        __tmp28 = num
    __tmp28 = [] if __tmp28.nil?
    if __tmp28.respond_to?(:keys) && !__tmp28.is_a?(String)
      __tmp28 = __tmp28.keys
    end
    __tmp28.each do |d|
      out = _add(out, _str(d))
    end
    return out
  end
  def parseIntStr(str)
    digits = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    i = 0
    n = 0
    while i < _len(str)
      n = _add(n * 10, (((__tmp29 = digits; __tmp29.is_a?(Hash) ? __tmp29[str[i..._add(i, 1)]] : _idx(__tmp29, str[i..._add(i, 1)]))).to_i))
      i = _add(i, 1)
    end
    return n
  end
  def main()
    tStr = _input()
    if _eq(tStr, "")
      return
    end
    t = parseIntStr(tStr)
    (0...t).each do |_|
      s = _input()
      puts(next_pal(s))
    end
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
print("\n")
puts(JSON.pretty_generate(result))
