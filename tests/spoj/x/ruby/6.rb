# Generated by Mochi transpiler v0.10.74 on 2025-08-26 11:55 +0700
$VERBOSE = nil

def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


def _repeat(s, n)
  s * n.to_i
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = arr.nil? ? [] : arr.clone
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x % 1 == 0 ? x.to_i.to_s : x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
def repeat(s, n)
  r = ""
  (0...n).each do |_|
    r = _add(r, s)
  end
  return r
end
def add_str(a, b)
  i = _len(a) - 1
  j = _len(b) - 1
  carry = 0
  res = ""
  while i >= 0 || j >= 0 || carry > 0
    da = 0
    if i >= 0
      da = ((__tmp30 = $digitMap; __tmp30.is_a?(Hash) ? __tmp30[a[i..._add(i, 1)]] : _idx(__tmp30, a[i..._add(i, 1)]))).to_i
    end
    db = 0
    if j >= 0
      db = ((__tmp31 = $digitMap; __tmp31.is_a?(Hash) ? __tmp31[b[j..._add(j, 1)]] : _idx(__tmp31, b[j..._add(j, 1)]))).to_i
    end
    sum = _add(_add(da, db), carry)
    res = _add(_str(sum % 10), res)
    carry = sum / 10
    i = i - 1
    j = j - 1
  end
  return res
end
def sub_str(a, b)
  i = _len(a) - 1
  j = _len(b) - 1
  borrow = 0
  res = ""
  while i >= 0
    da = ((__tmp32 = $digitMap; __tmp32.is_a?(Hash) ? __tmp32[a[i..._add(i, 1)]] : _idx(__tmp32, a[i..._add(i, 1)]))).to_i - borrow
    db = 0
    if j >= 0
      db = ((__tmp33 = $digitMap; __tmp33.is_a?(Hash) ? __tmp33[b[j..._add(j, 1)]] : _idx(__tmp33, b[j..._add(j, 1)]))).to_i
    end
    if da < db
      da = _add(da, 10)
      borrow = 1
    else
      borrow = 0
    end
    diff = da - db
    res = _add(_str(diff), res)
    i = i - 1
    j = j - 1
  end
  k = 0
  while k < _len(res) && _eq(res[k..._add(k, 1)], "0")
    k = _add(k, 1)
  end
  if _eq(k, _len(res))
    return "0"
  end
  return res[k...]
end
def mul_digit(a, d)
  if _eq(d, 0)
    return "0"
  end
  i = _len(a) - 1
  carry = 0
  res = ""
  while i >= 0
    prod = _add(((__tmp34 = $digitMap; __tmp34.is_a?(Hash) ? __tmp34[a[i..._add(i, 1)]] : _idx(__tmp34, a[i..._add(i, 1)]))).to_i * d, carry)
    res = _add(_str(prod % 10), res)
    carry = prod / 10
    i = i - 1
  end
  if carry > 0
    res = _add(_str(carry), res)
  end
  k = 0
  while k < _len(res) && _eq(res[k..._add(k, 1)], "0")
    k = _add(k, 1)
  end
  if _eq(k, _len(res))
    return "0"
  end
  return res[k...]
end
def mul_str(a, b)
  result = "0"
  shift = 0
  parts = []
  i = _len(b) - 1
  while i >= 0
    d = ((__tmp35 = $digitMap; __tmp35.is_a?(Hash) ? __tmp35[b[i..._add(i, 1)]] : _idx(__tmp35, b[i..._add(i, 1)]))).to_i
    part = mul_digit(a, d)
    parts = _append(parts, {"val" => part, "shift" => shift})
    shifted = part
    (0...shift).each do |_|
      shifted = _add(shifted, "0")
    end
    result = add_str(result, shifted)
    shift = _add(shift, 1)
    i = i - 1
  end
  return {"res" => result, "parts" => parts}
end
def pad_left(s, total)
  r = ""
  (0...(total - _len(s))).each do |_|
    r = _add(r, " ")
  end
  return _add(r, s)
end
def main()
  tStr = _input()
  if _eq(tStr, "")
    return
  end
  t = (tStr).to_i
  (0...t).each do |_|
    line = _input()
    if _eq(line, "")
      next
    end
    idx = 0
    while idx < _len(line)
      ch = line[idx..._add(idx, 1)]
      if _eq(ch, "+") || _eq(ch, "-") || _eq(ch, "*")
        break
      end
      idx = _add(idx, 1)
    end
    a = line[...idx]
    op = line[idx..._add(idx, 1)]
    b = line[_add(idx, 1)...]
    res = ""
    parts = []
    if _eq(op, "+")
      res = add_str(a, b)
    else
      if _eq(op, "-")
        res = sub_str(a, b)
      else
        r = mul_str(a, b)
        res = _str((__tmp36 = r; __tmp36.is_a?(Hash) ? __tmp36["res"] : _idx(__tmp36, "res")))
        parts = (__tmp37 = r; __tmp37.is_a?(Hash) ? __tmp37["parts"] : _idx(__tmp37, "parts"))
      end
    end
    width = _len(a)
    secondLen = _add(_len(b), 1)
    if secondLen > width
      width = secondLen
    end
    if _len(res) > width
      width = _len(res)
    end
        __tmp38 = parts
    __tmp38 = [] if __tmp38.nil?
    if __tmp38.respond_to?(:keys) && !__tmp38.is_a?(String)
      __tmp38 = __tmp38.keys
    end
    __tmp38.each do |p|
      l = _add(_len(_str((__tmp39 = p; __tmp39.is_a?(Hash) ? __tmp39["val"] : _idx(__tmp39, "val")))), (((__tmp40 = p; __tmp40.is_a?(Hash) ? __tmp40["shift"] : _idx(__tmp40, "shift"))).to_i))
      if l > width
        width = l
      end
    end
    puts(pad_left(a, width))
    puts(pad_left(_add(op, b), width))
    dash1 = 0
    if _eq(op, "*")
      if _len(parts) > 0
        dash1 = _add(_len(b), 1)
        firstPart = _str((__tmp41 = (__tmp42 = parts; __tmp42.is_a?(Hash) ? __tmp42[0] : _idx(__tmp42, 0)); __tmp41.is_a?(Hash) ? __tmp41["val"] : _idx(__tmp41, "val")))
        if _len(firstPart) > dash1
          dash1 = _len(firstPart)
        end
      else
        dash1 = _add(_len(b), 1)
        if _len(res) > dash1
          dash1 = _len(res)
        end
      end
    else
      dash1 = _add(_len(b), 1)
      if _len(res) > dash1
        dash1 = _len(res)
      end
    end
    puts(pad_left(_repeat("-", dash1), width))
    if _eq(op, "*") && _len(b) > 1
            __tmp43 = parts
      __tmp43 = [] if __tmp43.nil?
      if __tmp43.respond_to?(:keys) && !__tmp43.is_a?(String)
        __tmp43 = __tmp43.keys
      end
      __tmp43.each do |p|
        val = _str((__tmp44 = p; __tmp44.is_a?(Hash) ? __tmp44["val"] : _idx(__tmp44, "val")))
        shift = ((__tmp45 = p; __tmp45.is_a?(Hash) ? __tmp45["shift"] : _idx(__tmp45, "shift"))).to_i
        spaces = width - shift - _len(val)
        line = ""
        (0...spaces).each do |_|
          line = _add(line, " ")
        end
        line = _add(line, val)
        puts(line)
      end
      puts(pad_left(_repeat("-", _len(res)), width))
    end
    puts(pad_left(res, width))
    puts("")
  end
end
$digitMap = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
main()
