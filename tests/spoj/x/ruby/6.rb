# Generated by Mochi transpiler v0.10.74 on 2025-08-27 07:05 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


def _repeat(s, n)
  s * n.to_i
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = arr.nil? ? [] : arr.clone
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x % 1 == 0 ? x.to_i.to_s : x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def repeat(s, n)
    r = ""
    (0...n).each do |_|
      r = _add(r, s)
    end
    return r
  end
  def add_str(a, b)
    i = _len(a) - 1
    j = _len(b) - 1
    carry = 0
    res = ""
    while i >= 0 || j >= 0 || carry > 0
      da = 0
      if i >= 0
        da = ((__tmp1 = $digitMap; __tmp1.is_a?(Hash) ? __tmp1[a[i..._add(i, 1)]] : _idx(__tmp1, a[i..._add(i, 1)]))).to_i
      end
      db = 0
      if j >= 0
        db = ((__tmp2 = $digitMap; __tmp2.is_a?(Hash) ? __tmp2[b[j..._add(j, 1)]] : _idx(__tmp2, b[j..._add(j, 1)]))).to_i
      end
      sum = _add(_add(da, db), carry)
      res = _add(_str(sum % 10), res)
      carry = sum / 10
      i = i - 1
      j = j - 1
    end
    return res
  end
  def sub_str(a, b)
    i = _len(a) - 1
    j = _len(b) - 1
    borrow = 0
    res = ""
    while i >= 0
      da = ((__tmp3 = $digitMap; __tmp3.is_a?(Hash) ? __tmp3[a[i..._add(i, 1)]] : _idx(__tmp3, a[i..._add(i, 1)]))).to_i - borrow
      db = 0
      if j >= 0
        db = ((__tmp4 = $digitMap; __tmp4.is_a?(Hash) ? __tmp4[b[j..._add(j, 1)]] : _idx(__tmp4, b[j..._add(j, 1)]))).to_i
      end
      if da < db
        da = _add(da, 10)
        borrow = 1
      else
        borrow = 0
      end
      diff = da - db
      res = _add(_str(diff), res)
      i = i - 1
      j = j - 1
    end
    k = 0
    while k < _len(res) && _eq(res[k..._add(k, 1)], "0")
      k = _add(k, 1)
    end
    if _eq(k, _len(res))
      return "0"
    end
    return res[k...]
  end
  def mul_digit(a, d)
    if _eq(d, 0)
      return "0"
    end
    i = _len(a) - 1
    carry = 0
    res = ""
    while i >= 0
      prod = _add(((__tmp5 = $digitMap; __tmp5.is_a?(Hash) ? __tmp5[a[i..._add(i, 1)]] : _idx(__tmp5, a[i..._add(i, 1)]))).to_i * d, carry)
      res = _add(_str(prod % 10), res)
      carry = prod / 10
      i = i - 1
    end
    if carry > 0
      res = _add(_str(carry), res)
    end
    k = 0
    while k < _len(res) && _eq(res[k..._add(k, 1)], "0")
      k = _add(k, 1)
    end
    if _eq(k, _len(res))
      return "0"
    end
    return res[k...]
  end
  def mul_str(a, b)
    result = "0"
    shift = 0
    parts = []
    i = _len(b) - 1
    while i >= 0
      d = ((__tmp6 = $digitMap; __tmp6.is_a?(Hash) ? __tmp6[b[i..._add(i, 1)]] : _idx(__tmp6, b[i..._add(i, 1)]))).to_i
      part = mul_digit(a, d)
      parts = _append(parts, {"val" => part, "shift" => shift})
      shifted = part
      (0...shift).each do |_|
        shifted = _add(shifted, "0")
      end
      result = add_str(result, shifted)
      shift = _add(shift, 1)
      i = i - 1
    end
    return {"res" => result, "parts" => parts}
  end
  def pad_left(s, total)
    r = ""
    (0...(total - _len(s))).each do |_|
      r = _add(r, " ")
    end
    return _add(r, s)
  end
  def main()
    tStr = _input()
    if _eq(tStr, "")
      return
    end
    t = (tStr).to_i
    (0...t).each do |_|
      line = _input()
      if _eq(line, "")
        next
      end
      idx = 0
      while idx < _len(line)
        ch = line[idx..._add(idx, 1)]
        if _eq(ch, "+") || _eq(ch, "-") || _eq(ch, "*")
          break
        end
        idx = _add(idx, 1)
      end
      a = line[...idx]
      op = line[idx..._add(idx, 1)]
      b = line[_add(idx, 1)...]
      res = ""
      parts = []
      if _eq(op, "+")
        res = add_str(a, b)
      else
        if _eq(op, "-")
          res = sub_str(a, b)
        else
          r = mul_str(a, b)
          res = _str((__tmp7 = r; __tmp7.is_a?(Hash) ? __tmp7["res"] : _idx(__tmp7, "res")))
          parts = (__tmp8 = r; __tmp8.is_a?(Hash) ? __tmp8["parts"] : _idx(__tmp8, "parts"))
        end
      end
      width = _len(a)
      secondLen = _add(_len(b), 1)
      if secondLen > width
        width = secondLen
      end
      if _len(res) > width
        width = _len(res)
      end
            __tmp9 = parts
      __tmp9 = [] if __tmp9.nil?
      if __tmp9.respond_to?(:keys) && !__tmp9.is_a?(String)
        __tmp9 = __tmp9.keys
      end
      __tmp9.each do |p|
        l = _add(_len(_str((__tmp10 = p; __tmp10.is_a?(Hash) ? __tmp10["val"] : _idx(__tmp10, "val")))), (((__tmp11 = p; __tmp11.is_a?(Hash) ? __tmp11["shift"] : _idx(__tmp11, "shift"))).to_i))
        if l > width
          width = l
        end
      end
      puts(pad_left(a, width))
      puts(pad_left(_add(op, b), width))
      dash1 = 0
      if _eq(op, "*")
        if _len(parts) > 0
          dash1 = _add(_len(b), 1)
          firstPart = _str((__tmp12 = (__tmp13 = parts; __tmp13.is_a?(Hash) ? __tmp13[0] : _idx(__tmp13, 0)); __tmp12.is_a?(Hash) ? __tmp12["val"] : _idx(__tmp12, "val")))
          if _len(firstPart) > dash1
            dash1 = _len(firstPart)
          end
        else
          dash1 = _add(_len(b), 1)
          if _len(res) > dash1
            dash1 = _len(res)
          end
        end
      else
        dash1 = _add(_len(b), 1)
        if _len(res) > dash1
          dash1 = _len(res)
        end
      end
      puts(pad_left(_repeat("-", dash1), width))
      if _eq(op, "*") && _len(b) > 1
                __tmp14 = parts
        __tmp14 = [] if __tmp14.nil?
        if __tmp14.respond_to?(:keys) && !__tmp14.is_a?(String)
          __tmp14 = __tmp14.keys
        end
        __tmp14.each do |p|
          val = _str((__tmp15 = p; __tmp15.is_a?(Hash) ? __tmp15["val"] : _idx(__tmp15, "val")))
          shift = ((__tmp16 = p; __tmp16.is_a?(Hash) ? __tmp16["shift"] : _idx(__tmp16, "shift"))).to_i
          spaces = width - shift - _len(val)
          line = ""
          (0...spaces).each do |_|
            line = _add(line, " ")
          end
          line = _add(line, val)
          puts(line)
        end
        puts(pad_left(_repeat("-", _len(res)), width))
      end
      puts(pad_left(res, width))
      puts("")
    end
  end
  $digitMap = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
print("\n")
puts(JSON.pretty_generate(result))
