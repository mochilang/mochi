// Generated by Mochi v0.10.74 on 2025-08-26 14:32:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def precedence(op: String): BigInt = {
  if ((op == "+" || op == "-")) {
    return BigInt(1)
  }
  if ((op == "*" || op == "/")) {
    return BigInt(2)
  }
  if (op == "^") {
    return BigInt(3)
  }
  return BigInt(0)
}

def popTop(stack: ArrayBuffer[String]): String = {
  return stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse("")
}

def popStack(stack: ArrayBuffer[String]): ArrayBuffer[String] = {
  var newStack: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((stack).size) - BigInt(1)) {
    newStack = (newStack :+ (stack.lift((i.toInt).toInt).getOrElse("")))
    i = i + BigInt(1)
  }
  return newStack
}

def toRPN(expr: String): String = {
  var out: String = ""
  var stack: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  val _br1 = new Breaks
  _br1.breakable {
    while (i < BigInt((expr).size)) {
      val ch: String = expr.slice((i.toInt).toInt, (i.toInt).toInt + 1)
      if ((ch.charAt(BigInt(0).toInt) >= 'a' && ch.charAt(BigInt(0).toInt) <= 'z')) {
        out = out + ch
      } else {
        if (ch == "(") {
          stack = (stack :+ (ch))
        } else {
          if (ch == ")") {
            val _br2 = new Breaks
            _br2.breakable {
              while (BigInt((stack).size) > BigInt(0)) {
                val top: String = popTop(stack)
                if (top == "(") {
                  stack = popStack(stack)
                  _br2.break()
                }
                out = out + top
                stack = popStack(stack)
              }
            }
          } else {
            val prec: BigInt = precedence(ch)
            val _br3 = new Breaks
            _br3.breakable {
              while (BigInt((stack).size) > BigInt(0)) {
                val top: String = popTop(stack)
                if (top == "(") {
                  _br3.break()
                }
                val topPrec: BigInt = precedence(top)
                if ((topPrec > prec || (topPrec == prec && ch != "^").asInstanceOf[Boolean])) {
                  out = out + top
                  stack = popStack(stack)
                } else {
                  _br3.break()
                }
              }
            }
            stack = (stack :+ (ch))
          }
        }
      }
      i = i + BigInt(1)
    }
  }
  while (BigInt((stack).size) > BigInt(0)) {
    val top: String = popTop(stack)
    out = out + top
    stack = popStack(stack)
  }
  return out
}

def main(): Any = {
  val t: BigInt = BigInt(((Option(scala.io.StdIn.readLine())).getOrElse("")).toString.toDouble.toInt)
  var i: BigInt = BigInt(0)
  while (i < t) {
    val expr: String = (Option(scala.io.StdIn.readLine())).getOrElse("")
    println(_str(toRPN(expr)))
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
