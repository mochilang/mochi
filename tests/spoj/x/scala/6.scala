// Generated by Mochi v0.10.74 on 2025-08-26 14:33:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

private def _div(a: BigInt, b: BigInt): BigInt = {
  var q = a / b
  var r = a % b
  if (r != 0 && ((r < 0) != (b < 0))) q -= 1
  q
}

private def _mod(a: BigInt, b: BigInt): BigInt = {
  var r = a % b
  if (r != 0 && ((r < 0) != (b < 0))) r += b
  r
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = {
  if (n <= 0) ""
  else if (n.isValidInt) s * n.toInt
  else {
    val sb = new StringBuilder
    var i = BigInt(0)
    while (i < n) { sb.append(s); i += 1 }
    sb.toString
  }
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def repeat(s: String, n: BigInt): String = {
  var r: String = ""
  for (_ <- (BigInt(0)).toInt until (n).toInt) {
    r = r + s
  }
  return r
}

def add_str(a: String, b: String): String = {
  var i: BigInt = BigInt((a).size) - BigInt(1)
  var j: BigInt = BigInt((b).size) - BigInt(1)
  var carry: BigInt = BigInt(0)
  var res: String = ""
  while ((i >= BigInt(0) || j >= BigInt(0)).asInstanceOf[Boolean] || carry > BigInt(0)) {
    var da: BigInt = BigInt(0)
    if (i >= BigInt(0)) {
      da = digitMap.getOrElse(a.slice((i).toInt, (i + BigInt(1)).toInt), BigInt(0)).asInstanceOf[BigInt]
    }
    var db: BigInt = BigInt(0)
    if (j >= BigInt(0)) {
      db = digitMap.getOrElse(b.slice((j).toInt, (j + BigInt(1)).toInt), BigInt(0)).asInstanceOf[BigInt]
    }
    var sum: BigInt = da + db + carry
    res = _str(_mod(sum, BigInt(10))) + res
    carry = BigInt((_div(sum, BigInt(10))).toString.toDouble.toInt)
    i = i - BigInt(1)
    j = j - BigInt(1)
  }
  return res
}

def sub_str(a: String, b: String): String = {
  var i: BigInt = BigInt((a).size) - BigInt(1)
  var j: BigInt = BigInt((b).size) - BigInt(1)
  var borrow: BigInt = BigInt(0)
  var res: String = ""
  while (i >= BigInt(0)) {
    var da: BigInt = digitMap.getOrElse(a.slice((i).toInt, (i + BigInt(1)).toInt), BigInt(0)).asInstanceOf[BigInt] - borrow
    var db: BigInt = BigInt(0)
    if (j >= BigInt(0)) {
      db = digitMap.getOrElse(b.slice((j).toInt, (j + BigInt(1)).toInt), BigInt(0)).asInstanceOf[BigInt]
    }
    if (da < db) {
      da = da + BigInt(10)
      borrow = BigInt(1)
    } else {
      borrow = BigInt(0)
    }
    var diff: BigInt = da - db
    res = _str(diff) + res
    i = i - BigInt(1)
    j = j - BigInt(1)
  }
  var k: BigInt = BigInt(0)
  while (k < BigInt((res).size) && res.slice((k).toInt, (k + BigInt(1)).toInt) == "0") {
    k = k + BigInt(1)
  }
  if (k == BigInt((res).size)) {
    return "0"
  }
  return res.slice((k).toInt, (BigInt((res).size)).toInt)
}

def mul_digit(a: String, d: BigInt): String = {
  if (d == BigInt(0)) {
    return "0"
  }
  var i: BigInt = BigInt((a).size) - BigInt(1)
  var carry: BigInt = BigInt(0)
  var res: String = ""
  while (i >= BigInt(0)) {
    var prod: BigInt = digitMap.getOrElse(a.slice((i).toInt, (i + BigInt(1)).toInt), BigInt(0)).asInstanceOf[BigInt] * d + carry
    res = _str(_mod(prod, BigInt(10))) + res
    carry = BigInt((_div(prod, BigInt(10))).toString.toDouble.toInt)
    i = i - BigInt(1)
  }
  if (carry > BigInt(0)) {
    res = _str(carry) + res
  }
  var k: BigInt = BigInt(0)
  while (k < BigInt((res).size) && res.slice((k).toInt, (k + BigInt(1)).toInt) == "0") {
    k = k + BigInt(1)
  }
  if (k == BigInt((res).size)) {
    return "0"
  }
  return res.slice((k).toInt, (BigInt((res).size)).toInt)
}

def mul_str(a: String, b: String): scala.collection.mutable.Map[String,Any] = {
  var result: String = "0"
  var shift: BigInt = BigInt(0)
  var parts: ArrayBuffer[Any] = ArrayBuffer[Any]()
  var i: BigInt = BigInt((b).size) - BigInt(1)
  while (i >= BigInt(0)) {
    val d: BigInt = digitMap.getOrElse(b.slice((i).toInt, (i + BigInt(1)).toInt), BigInt(0)).asInstanceOf[BigInt]
    val part: String = mul_digit(a, d)
    parts = (parts :+ (scala.collection.mutable.Map("val" -> (part), "shift" -> (BigInt(shift.toString.toDouble.toInt)))))
    var shifted: String = part
    for (_ <- (BigInt(0)).toInt until (shift).toInt) {
      shifted = shifted + "0"
    }
    result = add_str(result, shifted)
    shift = shift + BigInt(1)
    i = i - BigInt(1)
  }
  return (scala.collection.mutable.Map("res" -> (result), "parts" -> (parts))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
}

def pad_left(s: String, total: BigInt): String = {
  var r: String = ""
  for (_ <- (BigInt(0)).toInt until (total - BigInt((s).size)).toInt) {
    r = r + " "
  }
  return r + s
}

def main(): Any = {
  val tStr: String = (Option(scala.io.StdIn.readLine())).getOrElse("")
  if (tStr == "") {
    return
  }
  val t: BigInt = BigInt(tStr.toString.toDouble.toInt)
  val _br9 = new Breaks
  val _ct9 = new Breaks
  _br9.breakable {
    for (_ <- (BigInt(0)).toInt until (t).toInt) {
      _ct9.breakable {
        var line: String = (Option(scala.io.StdIn.readLine())).getOrElse("")
        if (line == "") {
          _ct9.break()
        }
        var idx: BigInt = BigInt(0)
        val _br10 = new Breaks
        _br10.breakable {
          while (idx < BigInt((line).size)) {
            val ch: String = line.slice((idx).toInt, (idx + BigInt(1)).toInt)
            if (((ch == "+" || ch == "-").asInstanceOf[Boolean] || ch == "*")) {
              _br10.break()
            }
            idx = idx + BigInt(1)
          }
        }
        val a: String = line.slice((BigInt(0)).toInt, (idx).toInt)
        val op: String = line.slice((idx).toInt, (idx + BigInt(1)).toInt)
        val b: String = line.slice((idx + BigInt(1)).toInt, (BigInt((line).size)).toInt)
        var res: String = ""
        var parts: ArrayBuffer[Any] = ArrayBuffer[Any]()
        if (op == "+") {
          res = add_str(a, b)
        } else {
          if (op == "-") {
            res = sub_str(a, b)
          } else {
            val r: scala.collection.mutable.Map[String,Any] = mul_str(a, b)
            res = (r.getOrElse("res", null)).toString
            parts = ((r.getOrElse("parts", null)).asInstanceOf[ArrayBuffer[Any]]).asInstanceOf[ArrayBuffer[Any]]
          }
        }
        var width: BigInt = BigInt((a).size)
        val secondLen: BigInt = BigInt((b).size) + BigInt(1)
        if (secondLen > width) {
          width = secondLen
        }
        if (BigInt((res).size) > width) {
          width = BigInt((res).size)
        }
        for (p <- parts) {
          val l: BigInt = BigInt(((p.asInstanceOf[Map[String,Any]]("val")).toString).length) + BigInt((p.asInstanceOf[Map[String,Any]]("shift")).toString.toDouble.toInt)
          if (l > width) {
            width = l
          }
        }
        println(_str(pad_left(a, width)))
        println(_str(pad_left(op + b, width)))
        var dash1: BigInt = BigInt(0)
        if (op == "*") {
          if (BigInt((parts).size) > BigInt(0)) {
            dash1 = BigInt((b).size) + BigInt(1)
            val firstPart: String = (parts.lift((BigInt(0).toInt).toInt).getOrElse(null).asInstanceOf[Map[String,Any]]("val")).toString
            if (BigInt((firstPart).size) > dash1) {
              dash1 = BigInt((firstPart).size)
            }
          } else {
            dash1 = BigInt((b).size) + BigInt(1)
            if (BigInt((res).size) > dash1) {
              dash1 = BigInt((res).size)
            }
          }
        } else {
          dash1 = BigInt((b).size) + BigInt(1)
          if (BigInt((res).size) > dash1) {
            dash1 = BigInt((res).size)
          }
        }
        println(_str(pad_left((_repeat("-", dash1)).toString, width)))
        if ((op == "*" && BigInt((b).size) > BigInt(1))) {
          for (p <- parts) {
            val `val`: String = (p.asInstanceOf[Map[String,Any]]("val")).toString
            val shift: BigInt = BigInt((p.asInstanceOf[Map[String,Any]]("shift")).toString.toDouble.toInt)
            val spaces: BigInt = width - shift - BigInt((`val`).size)
            line = ""
            for (_ <- (BigInt(0)).toInt until (spaces).toInt) {
              line = line + " "
            }
            line = line + `val`
            println(_str(line))
          }
          println(_str(pad_left((_repeat("-", BigInt((res).size))).toString, width)))
        }
        println(_str(pad_left(res, width)))
        println(_str(""))
      }
    }
  }
  return null
}

val digitMap: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
