// Generated by Mochi v0.10.74 on 2025-08-26 14:32:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

private def _mod(a: BigInt, b: BigInt): BigInt = {
  var r = a % b
  if (r != 0 && ((r < 0) != (b < 0))) r += b
  r
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def split(s: String, sep: String): ArrayBuffer[String] = {
  var parts: ArrayBuffer[String] = ArrayBuffer[String]()
  var cur: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    if (((BigInt((sep).size) > BigInt(0) && i + BigInt((sep).size) <= BigInt((s).size)).asInstanceOf[Boolean] && s.slice((i).toInt, (i + BigInt((sep).size)).toInt) == sep)) {
      parts = (parts :+ (cur))
      cur = ""
      i = i + BigInt((sep).size)
    } else {
      cur = cur + s.slice((i).toInt, (i + BigInt(1)).toInt)
      i = i + BigInt(1)
    }
  }
  parts = (parts :+ (cur))
  return parts
}

def precompute(limit: BigInt): ArrayBuffer[BigInt] = {
  var sieve: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  for (i <- (BigInt(0)).toInt until (limit + BigInt(1)).toInt) {
    sieve = (sieve :+ (true))
  }
  sieve((BigInt(0)).toInt) = false
  sieve((BigInt(1)).toInt) = false
  var p: BigInt = BigInt(2)
  while (p * p <= limit) {
    if (sieve.lift((p.toInt).toInt).getOrElse(false)) {
      var j: BigInt = p * p
      while (j <= limit) {
        sieve((j).toInt) = false
        j = j + p
      }
    }
    p = p + BigInt(1)
  }
  var primes: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  for (i <- (BigInt(2)).toInt until (limit + BigInt(1)).toInt) {
    if (sieve.lift((i.toInt).toInt).getOrElse(false)) {
      primes = (primes :+ (BigInt(i.toString.toDouble.toInt)))
    }
  }
  return primes
}

val primes: ArrayBuffer[BigInt] = precompute(BigInt(32000))

val t: BigInt = BigInt(((Option(scala.io.StdIn.readLine())).getOrElse("")).toString.toDouble.toInt)

var case_idx: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _br5 = new Breaks
    _br5.breakable {
      while (case_idx < t) {
        val line: String = (Option(scala.io.StdIn.readLine())).getOrElse("")
        val parts: ArrayBuffer[String] = ArrayBuffer(line.split(" "): _*)
        val m: BigInt = BigInt((parts.lift((BigInt(0).toInt).toInt).getOrElse("")).toString.toDouble.toInt)
        val n: BigInt = BigInt((parts.lift((BigInt(1).toInt).toInt).getOrElse("")).toString.toDouble.toInt)
        val size: BigInt = n - m + BigInt(1)
        var segment: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
        for (i <- (BigInt(0)).toInt until (size).toInt) {
          segment = (segment :+ (true))
        }
        val _br7 = new Breaks
        _br7.breakable {
          for (p <- primes) {
            if (p * p > n) {
              _br7.break()
            }
            var start: BigInt = p * p
            if (start < m) {
              val rem: BigInt = _mod(m, p)
              if (rem == BigInt(0)) {
                start = m
              } else {
                start = m + (p - rem)
              }
            }
            var j: BigInt = start
            while (j <= n) {
              segment((j - m).toInt) = false
              j = j + p
            }
          }
        }
        if (m == BigInt(1)) {
          segment((BigInt(0)).toInt) = false
        }
        var i: BigInt = BigInt(0)
        while (i < size) {
          if (segment.lift((i.toInt).toInt).getOrElse(false)) {
            println(_str(i + m))
          }
          i = i + BigInt(1)
        }
        if (case_idx < t - BigInt(1)) {
          println(_str(""))
        }
        case_idx = case_idx + BigInt(1)
      }
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
