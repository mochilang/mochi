// Generated by Mochi v0.10.74 on 2025-08-26 14:33:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

private def _div(a: BigInt, b: BigInt): BigInt = {
  var q = a / b
  var r = a % b
  if (r != 0 && ((r < 0) != (b < 0))) q -= 1
  q
}

private def _mod(a: BigInt, b: BigInt): BigInt = {
  var r = a % b
  if (r != 0 && ((r < 0) != (b < 0))) r += b
  r
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

private def _parseIntStr(s: String, base: BigInt): BigInt = BigInt(s, base.toInt)

def next_pal(s: String): String = {
  val digitMap: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))
  var n: BigInt = BigInt((s).size)
  var num: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  for (i <- (BigInt(0)).toInt until (n).toInt) {
    num = (num :+ (digitMap.getOrElse(s.slice((i).toInt, (i + BigInt(1)).toInt), BigInt(0)).asInstanceOf[BigInt]))
  }
  var all9: Boolean = true
  val _br1 = new Breaks
  _br1.breakable {
    for (d <- num) {
      if (d != BigInt(9)) {
        all9 = false
        _br1.break()
      }
    }
  }
  if (all9) {
    var res: String = "1"
    for (_ <- (BigInt(0)).toInt until (n - BigInt(1)).toInt) {
      res = res + "0"
    }
    res = res + "1"
    return res
  }
  var left: BigInt = _div(n, BigInt(2)) - BigInt(1)
  var right: BigInt = (if (_mod(n, BigInt(2)) == BigInt(0)) _div(n, BigInt(2)) else _div(n, BigInt(2)) + BigInt(1))
  while ((left >= BigInt(0) && right < n).asInstanceOf[Boolean] && num.lift((left.toInt).toInt).getOrElse(BigInt(0)) == num.lift((right.toInt).toInt).getOrElse(BigInt(0))) {
    left = left - BigInt(1)
    right = right + BigInt(1)
  }
  var smaller: Boolean = left < BigInt(0) || num.lift((left.toInt).toInt).getOrElse(BigInt(0)) < num.lift((right.toInt).toInt).getOrElse(BigInt(0))
  left = _div(n, BigInt(2)) - BigInt(1)
  right = BigInt(((if (_mod(n, BigInt(2)) == BigInt(0)) _div(n, BigInt(2)) else _div(n, BigInt(2)) + BigInt(1))).toString.toDouble.toInt)
  while (left >= BigInt(0)) {
    num((right).toInt) = num.lift((left.toInt).toInt).getOrElse(BigInt(0))
    left = left - BigInt(1)
    right = right + BigInt(1)
  }
  if (smaller) {
    var carry: BigInt = BigInt(1)
    left = _div(n, BigInt(2)) - BigInt(1)
    if (_mod(n, BigInt(2)) == BigInt(1)) {
      var mid: BigInt = _div(n, BigInt(2))
      num((mid).toInt) = num.lift((mid.toInt).toInt).getOrElse(BigInt(0)) + carry
      carry = BigInt((_div(num.lift((mid.toInt).toInt).getOrElse(BigInt(0)), BigInt(10))).toString.toDouble.toInt)
      num((mid).toInt) = BigInt((_mod(num.lift((mid.toInt).toInt).getOrElse(BigInt(0)), BigInt(10))).toString.toDouble.toInt)
      right = mid + BigInt(1)
    } else {
      right = BigInt((_div(n, BigInt(2))).toString.toDouble.toInt)
    }
    while (left >= BigInt(0)) {
      num((left).toInt) = num.lift((left.toInt).toInt).getOrElse(BigInt(0)) + carry
      carry = BigInt((_div(num.lift((left.toInt).toInt).getOrElse(BigInt(0)), BigInt(10))).toString.toDouble.toInt)
      num((left).toInt) = BigInt((_mod(num.lift((left.toInt).toInt).getOrElse(BigInt(0)), BigInt(10))).toString.toDouble.toInt)
      num((right).toInt) = num.lift((left.toInt).toInt).getOrElse(BigInt(0))
      left = left - BigInt(1)
      right = right + BigInt(1)
    }
  }
  var out: String = ""
  for (d <- num) {
    out = out + _str(d)
  }
  return out
}

def parseIntStr(str: String): BigInt = {
  val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))
  var i: BigInt = BigInt(0)
  var n: BigInt = BigInt(0)
  while (i < BigInt((str).size)) {
    n = n * BigInt(10) + digits.getOrElse(str.slice((i).toInt, (i + BigInt(1)).toInt), BigInt(0)).asInstanceOf[BigInt]
    i = i + BigInt(1)
  }
  return n
}

def main(): Any = {
  val tStr: String = (Option(scala.io.StdIn.readLine())).getOrElse("")
  if (tStr == "") {
    return
  }
  val t: BigInt = _parseIntStr(tStr, BigInt(10))
  for (_ <- (BigInt(0)).toInt until (t).toInt) {
    val s: String = (Option(scala.io.StdIn.readLine())).getOrElse("")
    println(_str(next_pal(s)))
  }
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
