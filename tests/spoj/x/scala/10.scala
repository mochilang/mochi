// Generated by Mochi v0.10.74 on 2025-08-27 07:38:44 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

private def _parseIntStr(s: String, base: BigInt): BigInt = BigInt(s, base.toInt)

def parseIntStr(str: String): BigInt = {
  val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))
  var i: BigInt = BigInt(0)
  var n: BigInt = BigInt(0)
  while (i < BigInt((str).length)) {
    n = n * BigInt(10) + digits.getOrElse(str.slice((i).toInt, (i + BigInt(1)).toInt), BigInt(0)).asInstanceOf[BigInt]
    i = i + BigInt(1)
  }
  return n
}

def precedence(op: String): BigInt = {
  if ((op == "+" || op == "-")) {
    return BigInt(1)
  }
  if ((op == "*" || op == "/")) {
    return BigInt(2)
  }
  return BigInt(0)
}

def parse(s: String): Any = {
  var ops: ArrayBuffer[String] = ArrayBuffer[String]()
  var vals: ArrayBuffer[Any] = ArrayBuffer[Any]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).length)) {
    val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if ((ch.charAt(BigInt(0).toInt) >= 'a' && ch.charAt(BigInt(0).toInt) <= 'z')) {
      vals = (vals :+ (scala.collection.mutable.Map("kind" -> ("var"), "val" -> (ch))))
    } else {
      if (ch == "(") {
        ops = (ops :+ (ch))
      } else {
        if (ch == ")") {
          while (BigInt((ops).size) > BigInt(0) && ops.lift(((BigInt((ops).size) - BigInt(1)).toInt).toInt).getOrElse("") != "(") {
            val op: String = ops.lift(((BigInt((ops).size) - BigInt(1)).toInt).toInt).getOrElse("")
            ops = ops.slice((BigInt(0)).toInt, (BigInt((ops).size) - BigInt(1)).toInt)
            val right: Any = vals.lift(((BigInt((vals).size) - BigInt(1)).toInt).toInt).getOrElse(null)
            vals = vals.slice((BigInt(0)).toInt, (BigInt((vals).size) - BigInt(1)).toInt)
            val left: Any = vals.lift(((BigInt((vals).size) - BigInt(1)).toInt).toInt).getOrElse(null)
            vals = vals.slice((BigInt(0)).toInt, (BigInt((vals).size) - BigInt(1)).toInt)
            vals = (vals :+ (scala.collection.mutable.Map("kind" -> ("op"), "op" -> (op), "left" -> (left), "right" -> (right))))
          }
          ops = ops.slice((BigInt(0)).toInt, (BigInt((ops).size) - BigInt(1)).toInt)
        } else {
          while ((BigInt((ops).size) > BigInt(0) && ops.lift(((BigInt((ops).size) - BigInt(1)).toInt).toInt).getOrElse("") != "(").asInstanceOf[Boolean] && precedence(ops.lift(((BigInt((ops).size) - BigInt(1)).toInt).toInt).getOrElse("")) >= precedence(ch)) {
            val op: String = ops.lift(((BigInt((ops).size) - BigInt(1)).toInt).toInt).getOrElse("")
            ops = ops.slice((BigInt(0)).toInt, (BigInt((ops).size) - BigInt(1)).toInt)
            val right: Any = vals.lift(((BigInt((vals).size) - BigInt(1)).toInt).toInt).getOrElse(null)
            vals = vals.slice((BigInt(0)).toInt, (BigInt((vals).size) - BigInt(1)).toInt)
            val left: Any = vals.lift(((BigInt((vals).size) - BigInt(1)).toInt).toInt).getOrElse(null)
            vals = vals.slice((BigInt(0)).toInt, (BigInt((vals).size) - BigInt(1)).toInt)
            vals = (vals :+ (scala.collection.mutable.Map("kind" -> ("op"), "op" -> (op), "left" -> (left), "right" -> (right))))
          }
          ops = (ops :+ (ch))
        }
      }
    }
    i = i + BigInt(1)
  }
  while (BigInt((ops).size) > BigInt(0)) {
    val op: String = ops.lift(((BigInt((ops).size) - BigInt(1)).toInt).toInt).getOrElse("")
    ops = ops.slice((BigInt(0)).toInt, (BigInt((ops).size) - BigInt(1)).toInt)
    val right: Any = vals.lift(((BigInt((vals).size) - BigInt(1)).toInt).toInt).getOrElse(null)
    vals = vals.slice((BigInt(0)).toInt, (BigInt((vals).size) - BigInt(1)).toInt)
    val left: Any = vals.lift(((BigInt((vals).size) - BigInt(1)).toInt).toInt).getOrElse(null)
    vals = vals.slice((BigInt(0)).toInt, (BigInt((vals).size) - BigInt(1)).toInt)
    vals = (vals :+ (scala.collection.mutable.Map("kind" -> ("op"), "op" -> (op), "left" -> (left), "right" -> (right))))
  }
  return vals.lift(((BigInt((vals).size) - BigInt(1)).toInt).toInt).getOrElse(null)
}

def needParen(parent: String, isRight: Boolean, child: Any): Boolean = {
  if (child.asInstanceOf[scala.collection.mutable.Map[String,Any]]("kind") != "op") {
    return false
  }
  val p: BigInt = precedence(parent)
  val c: BigInt = precedence((child.asInstanceOf[scala.collection.mutable.Map[String,Any]]("op")).toString)
  if (c < p) {
    return true
  }
  if (c > p) {
    return false
  }
  if (((parent == "-" && isRight).asInstanceOf[Boolean] && (child.asInstanceOf[scala.collection.mutable.Map[String,Any]]("op") == "+" || child.asInstanceOf[scala.collection.mutable.Map[String,Any]]("op") == "-").asInstanceOf[Boolean])) {
    return true
  }
  if (((parent == "/" && isRight).asInstanceOf[Boolean] && (child.asInstanceOf[scala.collection.mutable.Map[String,Any]]("op") == "*" || child.asInstanceOf[scala.collection.mutable.Map[String,Any]]("op") == "/").asInstanceOf[Boolean])) {
    return true
  }
  return false
}

def formatRec(node: Any, parent: String, isRight: Boolean): String = {
  if (node.asInstanceOf[scala.collection.mutable.Map[String,Any]]("kind") != "op") {
    return (node.asInstanceOf[scala.collection.mutable.Map[String,Any]]("val")).toString
  }
  var left: String = formatRec(node.asInstanceOf[scala.collection.mutable.Map[String,Any]]("left"), (node.asInstanceOf[scala.collection.mutable.Map[String,Any]]("op")).toString, false)
  var right: String = formatRec(node.asInstanceOf[scala.collection.mutable.Map[String,Any]]("right"), (node.asInstanceOf[scala.collection.mutable.Map[String,Any]]("op")).toString, true)
  var res: String = left + node.asInstanceOf[scala.collection.mutable.Map[String,Any]]("op") + right
  if ((parent != "" && needParen(parent, isRight, node))) {
    res = "(" + res + ")"
  }
  return res
}

def makeNice(s: String): String = {
  val root: Any = parse(s)
  return formatRec(root, "", false)
}

def main(): Any = {
  val tStr: String = (Option(scala.io.StdIn.readLine())).getOrElse("")
  if (tStr == "") {
    return
  }
  val t: BigInt = _parseIntStr(tStr, BigInt(10))
  for (_ <- (BigInt(0)).toInt until (t).toInt) {
    val line: String = (Option(scala.io.StdIn.readLine())).getOrElse("")
    println(_str(makeNice(line)))
  }
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
