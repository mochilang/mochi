// Generated by Mochi v0.10.74 on 2025-08-27 07:38:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def split(s: String, sep: String): ArrayBuffer[String] = {
  var parts: ArrayBuffer[String] = ArrayBuffer[String]()
  var cur: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).length)) {
    if (((BigInt((sep).length) > BigInt(0) && i + BigInt((sep).length) <= BigInt((s).length)).asInstanceOf[Boolean] && s.slice((i).toInt, (i + BigInt((sep).length)).toInt) == sep)) {
      parts = (parts :+ (cur))
      cur = ""
      i = i + BigInt((sep).length)
    } else {
      cur = cur + s.slice((i).toInt, (i + BigInt(1)).toInt)
      i = i + BigInt(1)
    }
  }
  parts = (parts :+ (cur))
  return parts
}

def parse_ints(line: String): ArrayBuffer[BigInt] = {
  val pieces: ArrayBuffer[String] = ArrayBuffer(line.split(" "): _*)
  var nums: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  for (p <- pieces) {
    if (BigInt((p).size) > BigInt(0)) {
      nums = (nums :+ (BigInt(p.toString.toDouble.toInt)))
    }
  }
  return nums
}

def main(): Any = {
  val tLine: String = (Option(scala.io.StdIn.readLine())).getOrElse("")
  if (tLine == "") {
    return
  }
  val t: BigInt = BigInt(tLine.toString.toDouble.toInt)
  var caseIdx: BigInt = BigInt(0)
  while (caseIdx < t) {
    val header: ArrayBuffer[BigInt] = parse_ints(((Option(scala.io.StdIn.readLine())).getOrElse("")).toString)
    val s: BigInt = header.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    val c: BigInt = header.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
    val seq: ArrayBuffer[BigInt] = parse_ints(((Option(scala.io.StdIn.readLine())).getOrElse("")).toString)
    var levels: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
    levels = (levels :+ (seq))
    var current: ArrayBuffer[BigInt] = seq
    while (BigInt((current).size) > BigInt(1)) {
      var next: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
      var i: BigInt = BigInt(0)
      while (i + BigInt(1) < BigInt((current).size)) {
        next = (next :+ (current.lift(((i + BigInt(1)).toInt).toInt).getOrElse(BigInt(0)) - current.lift((i.toInt).toInt).getOrElse(BigInt(0))))
        i = i + BigInt(1)
      }
      levels = (levels :+ (next))
      current = next
    }
    var depth: BigInt = BigInt((levels).size) - BigInt(1)
    var step: BigInt = BigInt(0)
    var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    while (step < c) {
      var bottom: ArrayBuffer[BigInt] = levels.lift((depth.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      bottom = (bottom :+ (bottom.lift(((BigInt((bottom).size) - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))))
      levels((depth).toInt) = bottom
      var level: BigInt = depth - BigInt(1)
      while (level >= BigInt(0)) {
        var arr: ArrayBuffer[BigInt] = levels.lift((level.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
        var arrBelow: ArrayBuffer[BigInt] = levels.lift(((level + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
        var nextVal: BigInt = arr.lift(((BigInt((arr).size) - BigInt(1)).toInt).toInt).getOrElse(BigInt(0)) + arrBelow.lift(((BigInt((arrBelow).size) - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
        arr = (arr :+ (nextVal))
        levels((level).toInt) = arr
        level = level - BigInt(1)
      }
      res = (res :+ (levels.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((BigInt((levels.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))))
      step = step + BigInt(1)
    }
    var out: String = ""
    var i2: BigInt = BigInt(0)
    while (i2 < BigInt((res).size)) {
      if (i2 > BigInt(0)) {
        out = out + " "
      }
      out = out + _str(res.lift((i2.toInt).toInt).getOrElse(BigInt(0)))
      i2 = i2 + BigInt(1)
    }
    println(_str(out))
    caseIdx = caseIdx + BigInt(1)
  }
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
