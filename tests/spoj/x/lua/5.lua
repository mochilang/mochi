-- Generated by Mochi v0.10.74 on 2025-08-26 14:25 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for k in pairs(v) do
      if k ~= '__name' and k ~= '__order' then
        c = c + 1
      end
    end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _str(v)
    if type(v) == 'number' then
      local s = tostring(v)
      s = string.gsub(s, '%.0+$', '')
      return s
    elseif type(v) == 'boolean' then
        if v then return 'true' else return 'false' end
      elseif type(v) == 'table' then
          local src = v
          if v.items ~= nil then
            src = v.items
          end
          local parts = {}
          for i = 1, #src do
            parts[#parts+1] = _str(src[i])
          end
          return '[' .. table.concat(parts, ', ') .. ']'
        end
        return tostring(v)
      end
      
      local function _parseIntStr(str)
      if type(str) == 'table' then
        str = table.concat(str)
      end
      local n = tonumber(str, 10)
      if n == nil then return 0 end
      return math.floor(n)
    end
    do
      collectgarbage()
      local _bench_start_mem = collectgarbage('count') * 1024
      local _bench_start = os.clock()
      function next_pal(s)
        local digitMap = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
        local n = _len(s)
        local num = {}
        for i = 0, n - 1 do
          num = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(num, (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(digitMap[string.sub(s, (i + 1), (i + 1))]))
      end
      local all9 = true
      for _, d in ipairs(num) do
        if (d ~= 9) then
          all9 = false
          break
        end
      end
      if all9 then
        local res = "1"
        for _ = 0, (n - 1) - 1 do
          res = (res .. "0")
        end
        res = (res .. "1")
        return res
      end
      local left = ((n // 2) - 1)
      local right = ((((n % 2) == 0)) and ((n // 2)) or (((n // 2) + 1)))
      while (((left >= 0) and (right < n)) and (num[left + 1] == num[right + 1])) do
        left = (left - 1)
        right = (right + 1)
      end
      local smaller = ((left < 0) or (num[left + 1] < num[right + 1]))
      left = ((n // 2) - 1)
      right = ((((n % 2) == 0)) and ((n // 2)) or (((n // 2) + 1)))
      while (left >= 0) do
        num[right + 1] = num[left + 1]
        left = (left - 1)
        right = (right + 1)
      end
      if smaller then
        local carry = 1
        left = ((n // 2) - 1)
        if ((n % 2) == 1) then
          local mid = (n // 2)
          num[mid + 1] = (num[mid + 1] + carry)
          carry = (num[mid + 1] // 10)
          num[mid + 1] = (num[mid + 1] % 10)
          right = (mid + 1)
        else
          right = (n // 2)
        end
        while (left >= 0) do
          num[left + 1] = (num[left + 1] + carry)
          carry = (num[left + 1] // 10)
          num[left + 1] = (num[left + 1] % 10)
          num[right + 1] = num[left + 1]
          left = (left - 1)
          right = (right + 1)
        end
      end
      local out = ""
      for _, d in ipairs(num) do
        out = (out .. _str(d))
      end
      return out
    end
    function parseIntStr(str)
      local digits = {__name = "GenType2", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
      local i = 0
      local n = 0
      while (i < _len(str)) do
        n = ((n * 10) + (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(digits[string.sub(str, (i + 1), (i + 1))]))
        i = (i + 1)
      end
      return n
    end
    function main()
      local tStr = input()
      if (tStr == "") then
        return
      end
      local t = parseIntStr(tStr)
      for _ = 0, t - 1 do
        local s = input()
        print((((type(next_pal(s)) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "number" then
              if math.type and math.type(x) == "integer" then
                return string.format("%d", x)
              else
                local s = string.format("%g", x)
                if not string.find(s, "[%.eE]") then
                  s = s .. ".0"
                end
                return s
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(next_pal(s))) or (next_pal(s))))
        end
      end
      main()
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
