-- Generated by Mochi v0.10.74 on 2025-08-27 07:05 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for k in pairs(v) do
      if k ~= '__name' and k ~= '__order' then
        c = c + 1
      end
    end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _str(v)
    if type(v) == 'number' then
      local s = tostring(v)
      s = string.gsub(s, '%.0+$', '')
      return s
    elseif type(v) == 'boolean' then
        if v then return 'true' else return 'false' end
      elseif type(v) == 'table' then
          local src = v
          if v.items ~= nil then
            src = v.items
          end
          local parts = {}
          for i = 1, #src do
            parts[#parts+1] = _str(src[i])
          end
          return '[' .. table.concat(parts, ', ') .. ']'
        end
        return tostring(v)
      end
      
      local function _split(s, sep)
      local t = {}
      local pattern = string.format("([^%s]+)", sep)
      string.gsub(s, pattern, function(c) t[#t+1] = c end)
      return t
    end
    
    local function _substring(s, i, j)
    i = i + 1
    if j == nil then j = #s end
    local si = utf8.offset(s, i)
    if not si then return '' end
    local sj = utf8.offset(s, j+1)
    if not sj then sj = -1 end
    return string.sub(s, si, sj-1)
  end
  do
    collectgarbage()
    local _bench_start_mem = collectgarbage('count') * 1024
    local _bench_start = os.clock()
    function split(s, sep)
      local parts = {}
      local cur = ""
      local i = 0
      while (i < _len(s)) do
        if (((_len(sep) > 0) and ((i + _len(sep)) <= _len(s))) and (_substring(s, i, (i + _len(sep))) == sep)) then
          parts = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(parts, cur)
        cur = ""
        i = (i + _len(sep))
      else
        cur = (cur .. string.sub(s, (i + 1), (i + 1)))
        i = (i + 1)
      end
    end
    parts = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(parts, cur)
  return parts
end
function parse_ints(line)
  local pieces = split(line, " ")
  local nums = {}
  local i = 0
  while (i < _len(pieces)) do
    local p = pieces[i + 1]
    if (_len(p) > 0) then
      nums = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(nums, (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(p))
  end
  i = (i + 1)
end
return nums
end
function sort_unique(arr)
  local i = 1
  while (i < _len(arr)) do
    local j = i
    while ((j > 0) and (arr[(j - 1) + 1] > arr[j + 1])) do
      local tmp = arr[(j - 1) + 1]
      arr[(j - 1) + 1] = arr[j + 1]
      arr[j + 1] = tmp
      j = (j - 1)
    end
    i = (i + 1)
  end
  local res = {}
  i = 0
  while (i < _len(arr)) do
    if ((i == 0) or (arr[i + 1] ~= arr[(i - 1) + 1])) then
      res = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(res, arr[i + 1])
  end
  i = (i + 1)
end
return res
end
function pointInPoly(xs, ys, px, py)
  local inside = false
  local i = 0
  local j = (_len(xs) - 1)
  while (i < _len(xs)) do
    local xi = xs[i + 1]
    local yi = ys[i + 1]
    local xj = xs[j + 1]
    local yj = ys[j + 1]
    if (((yi > py) and (yj <= py)) or ((yj > py) and (yi <= py))) then
      local xint = ((((xj - xi) * (py - yi)) / (yj - yi)) + xi)
      if (px < xint) then
        inside = (not inside)
      end
    end
    j = i
    i = (i + 1)
  end
  return inside
end
function make3DBool(a, b, c)
  local arr = {}
  local i = 0
  while (i < a) do
    local plane = {}
    local j = 0
    while (j < b) do
      local row = {}
      local k = 0
      while (k < c) do
        row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(row, false)
      k = (k + 1)
    end
    plane = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(plane, row)
  j = (j + 1)
end
arr = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(arr, plane)
i = (i + 1)
end
return arr
end
function main()
  local tLine = input()
  if (tLine == "") then
    return
  end
  local t = (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(tLine)
  local case = 0
  while (case < t) do
    local fLine = input()
    local F = (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(fLine)
    local xs = {}
    local ys = {}
    local zs = {}
    xs = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(xs, 0)
  xs = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(xs, 1001)
ys = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(ys, 0)
ys = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(ys, 1001)
zs = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(zs, 0)
zs = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(zs, 1001)
local faceXCoord = {}
local faceYPoly = {}
local faceZPoly = {}
local i = 0
while (i < F) do
  local line = input()
  local nums = parse_ints(line)
  local P = nums[0 + 1]
  local ptsX = {}
  local ptsY = {}
  local ptsZ = {}
  local j = 0
  while (j < P) do
    local x = nums[(1 + (3 * j)) + 1]
    local y = nums[((1 + (3 * j)) + 1) + 1]
    local z = nums[((1 + (3 * j)) + 2) + 1]
    ptsX = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(ptsX, x)
  ptsY = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(ptsY, y)
ptsZ = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(ptsZ, z)
xs = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(xs, x)
ys = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(ys, y)
zs = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(zs, z)
j = (j + 1)
end
local allSame = true
j = 1
while (j < P) do
  if (ptsX[j + 1] ~= ptsX[0 + 1]) then
    allSame = false
  end
  j = (j + 1)
end
if allSame then
  faceXCoord = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(faceXCoord, ptsX[0 + 1])
faceYPoly = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(faceYPoly, ptsY)
faceZPoly = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(faceZPoly, ptsZ)
end
i = (i + 1)
end
xs = sort_unique(xs)
ys = sort_unique(ys)
zs = sort_unique(zs)
local nx = (_len(xs) - 1)
local ny = (_len(ys) - 1)
local nz = (_len(zs) - 1)
local xIndex = {}
i = 0
while (i < _len(xs)) do
  xIndex[xs[i + 1]] = i
  i = (i + 1)
end
local dx = {}
i = 0
while (i < nx) do
  dx = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(dx, (xs[(i + 1) + 1] - xs[i + 1]))
i = (i + 1)
end
local dy = {}
i = 0
while (i < ny) do
  dy = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(dy, (ys[(i + 1) + 1] - ys[i + 1]))
i = (i + 1)
end
local dz = {}
i = 0
while (i < nz) do
  dz = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(dz, (zs[(i + 1) + 1] - zs[i + 1]))
i = (i + 1)
end
local blockX = make3DBool(_len(xs), ny, nz)
i = 0
while (i < _len(faceXCoord)) do
  local coord = faceXCoord[i + 1]
  local polyY = faceYPoly[i + 1]
  local polyZ = faceZPoly[i + 1]
  local xi = xIndex[coord]
  local j = 0
  while (j < ny) do
    local cy = ((ys[j + 1] + ys[(j + 1) + 1]) / 2.0)
    local k = 0
    while (k < nz) do
      local cz = ((zs[k + 1] + zs[(k + 1) + 1]) / 2.0)
      if pointInPoly(polyY, polyZ, cy, cz) then
        blockX[xi + 1][j + 1][k + 1] = true
      end
      k = (k + 1)
    end
    j = (j + 1)
  end
  i = (i + 1)
end
local solid = make3DBool(nx, ny, nz)
local j2 = 0
while (j2 < ny) do
  local k2 = 0
  while (k2 < nz) do
    local inside = false
    local i2 = 0
    while (i2 < nx) do
      if blockX[i2 + 1][j2 + 1][k2 + 1] then
        inside = (not inside)
      end
      if inside then
        solid[i2 + 1][j2 + 1][k2 + 1] = true
      end
      i2 = (i2 + 1)
    end
    k2 = (k2 + 1)
  end
  j2 = (j2 + 1)
end
local volume = 0
local i3 = 0
while (i3 < nx) do
  local j3 = 0
  while (j3 < ny) do
    local k3 = 0
    while (k3 < nz) do
      if solid[i3 + 1][j3 + 1][k3 + 1] then
        volume = (volume + ((dx[i3 + 1] * dy[j3 + 1]) * dz[k3 + 1]))
      end
      k3 = (k3 + 1)
    end
    j3 = (j3 + 1)
  end
  i3 = (i3 + 1)
end
print((((type((("The bulk is composed of " .. _str(volume)) .. " units.")) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "number" then
      if math.type and math.type(x) == "integer" then
        return string.format("%d", x)
      else
        local s = string.format("%g", x)
        if not string.find(s, "[%.eE]") then
          s = s .. ".0"
        end
        return s
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)((("The bulk is composed of " .. _str(volume)) .. " units."))) or ((("The bulk is composed of " .. _str(volume)) .. " units."))))
  case = (case + 1)
end
end
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
