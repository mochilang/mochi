-- Generated by Mochi v0.10.74 on 2025-08-27 07:05 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for k in pairs(v) do
      if k ~= '__name' and k ~= '__order' then
        c = c + 1
      end
    end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _str(v)
    if type(v) == 'number' then
      local s = tostring(v)
      s = string.gsub(s, '%.0+$', '')
      return s
    elseif type(v) == 'boolean' then
        if v then return 'true' else return 'false' end
      elseif type(v) == 'table' then
          local src = v
          if v.items ~= nil then
            src = v.items
          end
          local parts = {}
          for i = 1, #src do
            parts[#parts+1] = _str(src[i])
          end
          return '[' .. table.concat(parts, ', ') .. ']'
        end
        return tostring(v)
      end
      
      local function slice(lst, s, e)
      local len = #lst
      if s < 0 then s = len + s end
      if s < 0 then s = 0 end
      if e == nil then
        e = len
      elseif e < 0 then
          e = len + e
        end
        if e > len then e = len end
        if s > e then return {} end
        local r = {}
        for i = s + 1, e do
          r[#r+1] = lst[i]
        end
        return r
      end
      do
        collectgarbage()
        local _bench_start_mem = collectgarbage('count') * 1024
        local _bench_start = os.clock()
        function _repeat(s, n)
          local r = ""
          for _ = 0, n - 1 do
            r = (r .. s)
          end
          return r
        end
        function add_str(a, b)
          local i = (_len(a) - 1)
          local j = (_len(b) - 1)
          local carry = 0
          local res = ""
          while (((i >= 0) or (j >= 0)) or (carry > 0)) do
            local da = 0
            if (i >= 0) then
              da = (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(digitMap[string.sub(a, (i + 1), (i + 1))])
            end
            local db = 0
            if (j >= 0) then
              db = (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(digitMap[string.sub(b, (j + 1), (j + 1))])
            end
            local sum = ((da + db) + carry)
            res = (_str((sum % 10)) .. res)
            carry = (sum // 10)
            i = (i - 1)
            j = (j - 1)
          end
          return res
        end
        function sub_str(a, b)
          local i = (_len(a) - 1)
          local j = (_len(b) - 1)
          local borrow = 0
          local res = ""
          while (i >= 0) do
            local da = ((function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(digitMap[string.sub(a, (i + 1), (i + 1))]) - borrow)
            local db = 0
            if (j >= 0) then
              db = (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(digitMap[string.sub(b, (j + 1), (j + 1))])
            end
            if (da < db) then
              da = (da + 10)
              borrow = 1
            else
              borrow = 0
            end
            local diff = (da - db)
            res = (_str(diff) .. res)
            i = (i - 1)
            j = (j - 1)
          end
          local k = 0
          while ((k < _len(res)) and (string.sub(res, (k + 1), (k + 1)) == "0")) do
            k = (k + 1)
          end
          if (k == _len(res)) then
            return "0"
          end
          return string.sub(res, (k + 1), #res)
        end
        function mul_digit(a, d)
          if (d == 0) then
            return "0"
          end
          local i = (_len(a) - 1)
          local carry = 0
          local res = ""
          while (i >= 0) do
            local prod = (((function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(digitMap[string.sub(a, (i + 1), (i + 1))]) * d) + carry)
            res = (_str((prod % 10)) .. res)
            carry = (prod // 10)
            i = (i - 1)
          end
          if (carry > 0) then
            res = (_str(carry) .. res)
          end
          local k = 0
          while ((k < _len(res)) and (string.sub(res, (k + 1), (k + 1)) == "0")) do
            k = (k + 1)
          end
          if (k == _len(res)) then
            return "0"
          end
          return string.sub(res, (k + 1), #res)
        end
        function mul_str(a, b)
          local result = "0"
          local shift = 0
          local parts = {}
          local i = (_len(b) - 1)
          while (i >= 0) do
            local d = (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(digitMap[string.sub(b, (i + 1), (i + 1))])
            local part = mul_digit(a, d)
            parts = (function(lst, item)
            local res = {table.unpack(lst or {})}
            res[#res+1] = item
            return res
          end)(parts, {__name = "GenType2", __order = {"val", "shift"}, val = part, shift = shift})
          local shifted = part
          for _ = 0, shift - 1 do
            shifted = (shifted .. "0")
          end
          result = add_str(result, shifted)
          shift = (shift + 1)
          i = (i - 1)
        end
        return {__name = "GenType3", __order = {"res", "parts"}, res = result, parts = parts}
      end
      function pad_left(s, total)
        local r = ""
        for _ = 0, (total - _len(s)) - 1 do
          r = (r .. " ")
        end
        return (r .. s)
      end
      function main()
        local tStr = input()
        if (tStr == "") then
          return
        end
        local t = (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(tStr)
        for _ = 0, t - 1 do
          local line = input()
          if (line == "") then
            goto __cont_1
          end
          local idx = 0
          while (idx < _len(line)) do
            local ch = string.sub(line, (idx + 1), (idx + 1))
            if (((ch == "+") or (ch == "-")) or (ch == "*")) then
              break
            end
            idx = (idx + 1)
          end
          local a = string.sub(line, 1, idx)
          local op = string.sub(line, (idx + 1), (idx + 1))
          local b = string.sub(line, ((idx + 1) + 1), #line)
          local res = ""
          local parts = {}
          if (op == "+") then
            res = add_str(a, b)
          else
            if (op == "-") then
              res = sub_str(a, b)
            else
              local r = mul_str(a, b)
              res = r.res
              parts = r.parts
            end
          end
          local width = _len(a)
          local secondLen = (_len(b) + 1)
          if (secondLen > width) then
            width = secondLen
          end
          if (_len(res) > width) then
            width = _len(res)
          end
          for _, p in ipairs(parts) do
            local l = (_len(p.val) + (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(p.shift))
            if (l > width) then
              width = l
            end
          end
          print((((type(pad_left(a, width)) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "number" then
                if math.type and math.type(x) == "integer" then
                  return string.format("%d", x)
                else
                  local s = string.format("%g", x)
                  if not string.find(s, "[%.eE]") then
                    s = s .. ".0"
                  end
                  return s
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(pad_left(a, width))) or (pad_left(a, width))))
            print((((type(pad_left((tostring(op) .. tostring(b)), width)) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "number" then
                  if math.type and math.type(x) == "integer" then
                    return string.format("%d", x)
                  else
                    local s = string.format("%g", x)
                    if not string.find(s, "[%.eE]") then
                      s = s .. ".0"
                    end
                    return s
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(pad_left((tostring(op) .. tostring(b)), width))) or (pad_left((tostring(op) .. tostring(b)), width))))
              local dash1 = 0
              if (op == "*") then
                if (_len(parts) > 0) then
                  dash1 = (_len(b) + 1)
                  local firstPart = parts[0 + 1].val
                  if (_len(firstPart) > dash1) then
                    dash1 = _len(firstPart)
                  end
                else
                  dash1 = (_len(b) + 1)
                  if (_len(res) > dash1) then
                    dash1 = _len(res)
                  end
                end
              else
                dash1 = (_len(b) + 1)
                if (_len(res) > dash1) then
                  dash1 = _len(res)
                end
              end
              print((((type(pad_left(_repeat("-", dash1), width)) == "table")) and (
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "number" then
                    if math.type and math.type(x) == "integer" then
                      return string.format("%d", x)
                    else
                      local s = string.format("%g", x)
                      if not string.find(s, "[%.eE]") then
                        s = s .. ".0"
                      end
                      return s
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(pad_left(_repeat("-", dash1), width))) or (pad_left(_repeat("-", dash1), width))))
                if ((op == "*") and (_len(b) > 1)) then
                  for _, p in ipairs(parts) do
                    local val = p.val
                    local shift = (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(p.shift)
                    local spaces = ((width - shift) - _len(val))
                    local line = ""
                    for _ = 0, spaces - 1 do
                      line = (tostring(line) .. " ")
                    end
                    line = (tostring(line) .. tostring(val))
                    print((((type(line) == "table")) and (
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "number" then
                          if math.type and math.type(x) == "integer" then
                            return string.format("%d", x)
                          else
                            local s = string.format("%g", x)
                            if not string.find(s, "[%.eE]") then
                              s = s .. ".0"
                            end
                            return s
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(line)) or (line)))
                    end
                    print((((type(pad_left(_repeat("-", _len(res)), width)) == "table")) and (
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "number" then
                          if math.type and math.type(x) == "integer" then
                            return string.format("%d", x)
                          else
                            local s = string.format("%g", x)
                            if not string.find(s, "[%.eE]") then
                              s = s .. ".0"
                            end
                            return s
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(pad_left(_repeat("-", _len(res)), width))) or (pad_left(_repeat("-", _len(res)), width))))
                    end
                    print((((type(pad_left(res, width)) == "table")) and (
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "number" then
                          if math.type and math.type(x) == "integer" then
                            return string.format("%d", x)
                          else
                            local s = string.format("%g", x)
                            if not string.find(s, "[%.eE]") then
                              s = s .. ".0"
                            end
                            return s
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(pad_left(res, width))) or (pad_left(res, width))))
                      print("")
                      ::__cont_1::
                    end
                  end
                  digitMap = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
                  main()
                  local _bench_end = os.clock()
                  collectgarbage()
                  local _bench_end_mem = collectgarbage('count') * 1024
                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                end;
