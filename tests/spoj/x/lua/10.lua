-- Generated by Mochi v0.10.74 on 2025-08-27 07:05 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for k in pairs(v) do
      if k ~= '__name' and k ~= '__order' then
        c = c + 1
      end
    end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _parseIntStr(str)
    if type(str) == 'table' then
      str = table.concat(str)
    end
    local n = tonumber(str, 10)
    if n == nil then return 0 end
    return math.floor(n)
  end
  
  local function slice(lst, s, e)
  local len = #lst
  if s < 0 then s = len + s end
  if s < 0 then s = 0 end
  if e == nil then
    e = len
  elseif e < 0 then
      e = len + e
    end
    if e > len then e = len end
    if s > e then return {} end
    local r = {}
    for i = s + 1, e do
      r[#r+1] = lst[i]
    end
    return r
  end
  do
    collectgarbage()
    local _bench_start_mem = collectgarbage('count') * 1024
    local _bench_start = os.clock()
    function parseIntStr(str)
      local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
      local i = 0
      local n = 0
      while (i < _len(str)) do
        n = ((n * 10) + (function(v) if type(v)=='string' then v=tonumber(v) or 0 end if v >= 0 then return math.floor(v) else return math.ceil(v) end end)(digits[string.sub(str, (i + 1), (i + 1))]))
        i = (i + 1)
      end
      return n
    end
    function precedence(op)
      if ((op == "+") or (op == "-")) then
        return 1
      end
      if ((op == "*") or (op == "/")) then
        return 2
      end
      return 0
    end
    function parse(s)
      local ops = {}
      local vals = {}
      local i = 0
      while (i < _len(s)) do
        local ch = string.sub(s, (i + 1), (i + 1))
        if ((ch >= "a") and (ch <= "z")) then
          vals = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(vals, {__name = "GenType2", __order = {"kind", "val"}, kind = "var", val = ch})
      else
        if (ch == "(") then
          ops = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(ops, ch)
      else
        if (ch == ")") then
          while ((_len(ops) > 0) and (ops[(_len(ops) - 1) + 1] ~= "(")) do
            local op = ops[(_len(ops) - 1) + 1]
            ops = (function(lst,s,e)
            local r={}
            for i=s+1,e do
              r[#r+1]=lst[i]
            end
            return r
          end)(ops, 0, (_len(ops) - 1))
          local right = vals[(_len(vals) - 1) + 1]
          vals = (function(lst,s,e)
          local r={}
          for i=s+1,e do
            r[#r+1]=lst[i]
          end
          return r
        end)(vals, 0, (_len(vals) - 1))
        local left = vals[(_len(vals) - 1) + 1]
        vals = (function(lst,s,e)
        local r={}
        for i=s+1,e do
          r[#r+1]=lst[i]
        end
        return r
      end)(vals, 0, (_len(vals) - 1))
      vals = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(vals, {__name = "GenType3", __order = {"kind", "op", "left", "right"}, kind = "op", op = op, left = left, right = right})
  end
  ops = (function(lst,s,e)
  local r={}
  for i=s+1,e do
    r[#r+1]=lst[i]
  end
  return r
end)(ops, 0, (_len(ops) - 1))
else
  while (((_len(ops) > 0) and (ops[(_len(ops) - 1) + 1] ~= "(")) and (precedence(ops[(_len(ops) - 1) + 1]) >= precedence(ch))) do
    local op = ops[(_len(ops) - 1) + 1]
    ops = (function(lst,s,e)
    local r={}
    for i=s+1,e do
      r[#r+1]=lst[i]
    end
    return r
  end)(ops, 0, (_len(ops) - 1))
  local right = vals[(_len(vals) - 1) + 1]
  vals = (function(lst,s,e)
  local r={}
  for i=s+1,e do
    r[#r+1]=lst[i]
  end
  return r
end)(vals, 0, (_len(vals) - 1))
local left = vals[(_len(vals) - 1) + 1]
vals = (function(lst,s,e)
local r={}
for i=s+1,e do
  r[#r+1]=lst[i]
end
return r
end)(vals, 0, (_len(vals) - 1))
vals = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(vals, {__name = "GenType4", __order = {"kind", "op", "left", "right"}, kind = "op", op = op, left = left, right = right})
end
ops = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(ops, ch)
end
end
end
i = (i + 1)
end
while (_len(ops) > 0) do
  local op = ops[(_len(ops) - 1) + 1]
  ops = (function(lst,s,e)
  local r={}
  for i=s+1,e do
    r[#r+1]=lst[i]
  end
  return r
end)(ops, 0, (_len(ops) - 1))
local right = vals[(_len(vals) - 1) + 1]
vals = (function(lst,s,e)
local r={}
for i=s+1,e do
  r[#r+1]=lst[i]
end
return r
end)(vals, 0, (_len(vals) - 1))
local left = vals[(_len(vals) - 1) + 1]
vals = (function(lst,s,e)
local r={}
for i=s+1,e do
  r[#r+1]=lst[i]
end
return r
end)(vals, 0, (_len(vals) - 1))
vals = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(vals, {__name = "GenType5", __order = {"kind", "op", "left", "right"}, kind = "op", op = op, left = left, right = right})
end
return vals[(_len(vals) - 1) + 1]
end
function needParen(parent, isRight, child)
  if (child.kind ~= "op") then
    return false
  end
  local p = precedence(parent)
  local c = precedence(child.op)
  if (c < p) then
    return true
  end
  if (c > p) then
    return false
  end
  if (((parent == "-") and isRight) and ((child.op == "+") or (child.op == "-"))) then
    return true
  end
  if (((parent == "/") and isRight) and ((child.op == "*") or (child.op == "/"))) then
    return true
  end
  return false
end
function formatRec(node, parent, isRight)
  if (node.kind ~= "op") then
    return node.val
  end
  local left = formatRec(node.left, node.op, false)
  local right = formatRec(node.right, node.op, true)
  local res = ((left .. tostring(node.op)) .. right)
  if ((parent ~= "") and needParen(parent, isRight, node)) then
    res = (("(" .. tostring(res)) .. ")")
  end
  return res
end
function makeNice(s)
  local root = parse(s)
  return formatRec(root, "", false)
end
function main()
  local tStr = input()
  if (tStr == "") then
    return
  end
  local t = parseIntStr(tStr)
  for _ = 0, t - 1 do
    local line = input()
    print((((type(makeNice(line)) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "number" then
          if math.type and math.type(x) == "integer" then
            return string.format("%d", x)
          else
            local s = string.format("%g", x)
            if not string.find(s, "[%.eE]") then
              s = s .. ".0"
            end
            return s
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(makeNice(line))) or (makeNice(line))))
    end
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
