;; Generated by Mochi Scheme transpiler on 2025-08-26 14:25 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi io))
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (if (<= (max (abs a) (abs b)) 1e-9) (= a b) (< (abs (- a b)) (* 1e-9 (max (abs a) (abs b))))) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        ((and (pair? x) (vector? (cdr x))) (car x))
        ((list? x) (length x))
        ((vector? x) (vector-length x))
        (else 0)))

(define (_list . args)
  (let* ((n (length args))
         (cap (max 4 n))
         (vec (make-vector cap)))
    (let loop ((i 0) (xs args))
      (when (< i n)
        (vector-set! vec i (car xs))
        (loop (+ i 1) (cdr xs))))
    (cons n vec)))

;; Access an element from a dynamic array returning 0 when out of range.
(define (list-ref-safe lst idx)
  (let* ((i (inexact->exact idx))
         (len (if (pair? lst) (car lst) 0)))
    (if (and (pair? lst) (>= i 0) (< i len))
        (vector-ref (cdr lst) i)
        0)))

;; Set an element in a dynamic array when index is within bounds.
(define (list-set-safe! lst idx val)
  (let* ((i (inexact->exact idx))
         (len (if (pair? lst) (car lst) 0)))
    (when (and (pair? lst) (>= i 0) (< i len))
      (vector-set! (cdr lst) i val))))

;; Amortized O(1) append for dynamic arrays backed by growable vectors.
(define (_append lst val)
  (let* ((len (car lst))
         (vec (cdr lst))
         (cap (vector-length vec)))
    (when (>= len cap)
      (let* ((new-cap (if (= cap 0) 4 (* 2 cap)))
             (new-vec (make-vector new-cap)))
        (let loop ((i 0))
          (when (< i len)
            (vector-set! new-vec i (vector-ref vec i))
            (loop (+ i 1))))
        (set-cdr! lst new-vec)
        (set! vec new-vec)))
    (vector-set! vec len val)
    (set-car! lst (+ len 1))
    lst))

;; Convert dynamic array to Scheme list for iteration constructs.
(define (_to-list lst)
  (let* ((len (car lst))
         (vec (cdr lst)))
    (let loop ((i (- len 1)) (acc '()))
      (if (< i 0) acc
          (loop (- i 1) (cons (vector-ref vec i) acc))))))

(define (_alist->hash-table arr)
  (alist->hash-table (_to-list arr)))
(define (_input)
  (let ((l (read-line)))
    (if (eof-object? l) "" l)))
(
  let (
    (
      start12 (
        current-jiffy
      )
    )
     (
      jps15 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        precedence op
      )
       (
        call/cc (
          lambda (
            ret1
          )
           (
            begin (
              if (
                or (
                  _eq op "+"
                )
                 (
                  _eq op "-"
                )
              )
               (
                begin (
                  ret1 1
                )
              )
               (
                void
              )
            )
             (
              if (
                or (
                  _eq op "*"
                )
                 (
                  _eq op "/"
                )
              )
               (
                begin (
                  ret1 2
                )
              )
               (
                void
              )
            )
             (
              if (
                _eq op "^"
              )
               (
                begin (
                  ret1 3
                )
              )
               (
                void
              )
            )
             (
              ret1 0
            )
          )
        )
      )
    )
     (
      define (
        popTop stack
      )
       (
        list-ref-safe stack (
          - (
            _len stack
          )
           1
        )
      )
    )
     (
      define (
        popStack stack
      )
       (
        let (
          (
            newStack (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop2 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            - (
                              _len stack
                            )
                             1
                          )
                        )
                         (
                          begin (
                            set! newStack (
                              _append newStack (
                                list-ref-safe stack i
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop2
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop2
                )
              )
               newStack
            )
          )
        )
      )
    )
     (
      define (
        toRPN expr
      )
       (
        let (
          (
            out ""
          )
        )
         (
          begin (
            let (
              (
                stack (
                  _list
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    call/cc (
                      lambda (
                        break4
                      )
                       (
                        letrec (
                          (
                            loop3 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len expr
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        ch (
                                          _substring expr i (
                                            + i 1
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          and (
                                            string>=? ch "a"
                                          )
                                           (
                                            string<=? ch "z"
                                          )
                                        )
                                         (
                                          begin (
                                            set! out (
                                              string-append out ch
                                            )
                                          )
                                        )
                                         (
                                          if (
                                            _eq ch "("
                                          )
                                           (
                                            begin (
                                              set! stack (
                                                _append stack ch
                                              )
                                            )
                                          )
                                           (
                                            if (
                                              _eq ch ")"
                                            )
                                             (
                                              begin (
                                                call/cc (
                                                  lambda (
                                                    break6
                                                  )
                                                   (
                                                    letrec (
                                                      (
                                                        loop5 (
                                                          lambda (
                                                            
                                                          )
                                                           (
                                                            if (
                                                              > (
                                                                _len stack
                                                              )
                                                               0
                                                            )
                                                             (
                                                              begin (
                                                                let (
                                                                  (
                                                                    top (
                                                                      popTop stack
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    if (
                                                                      _eq top "("
                                                                    )
                                                                     (
                                                                      begin (
                                                                        set! stack (
                                                                          popStack stack
                                                                        )
                                                                      )
                                                                       (
                                                                        break6 (
                                                                          void
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      void
                                                                    )
                                                                  )
                                                                   (
                                                                    set! out (
                                                                      string-append out top
                                                                    )
                                                                  )
                                                                   (
                                                                    set! stack (
                                                                      popStack stack
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                loop5
                                                              )
                                                            )
                                                             (
                                                              void
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      loop5
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    prec (
                                                      precedence ch
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    call/cc (
                                                      lambda (
                                                        break8
                                                      )
                                                       (
                                                        letrec (
                                                          (
                                                            loop7 (
                                                              lambda (
                                                                
                                                              )
                                                               (
                                                                if (
                                                                  > (
                                                                    _len stack
                                                                  )
                                                                   0
                                                                )
                                                                 (
                                                                  begin (
                                                                    let (
                                                                      (
                                                                        top (
                                                                          popTop stack
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        if (
                                                                          _eq top "("
                                                                        )
                                                                         (
                                                                          begin (
                                                                            break8 (
                                                                              void
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          void
                                                                        )
                                                                      )
                                                                       (
                                                                        let (
                                                                          (
                                                                            topPrec (
                                                                              precedence top
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            if (
                                                                              or (
                                                                                _gt topPrec prec
                                                                              )
                                                                               (
                                                                                and (
                                                                                  _eq topPrec prec
                                                                                )
                                                                                 (
                                                                                  not (
                                                                                    _eq ch "^"
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                set! out (
                                                                                  string-append out top
                                                                                )
                                                                              )
                                                                               (
                                                                                set! stack (
                                                                                  popStack stack
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                break8 (
                                                                                  void
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    loop7
                                                                  )
                                                                )
                                                                 (
                                                                  void
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          loop7
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! stack (
                                                      _append stack ch
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop3
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop3
                        )
                      )
                    )
                  )
                   (
                    letrec (
                      (
                        loop9 (
                          lambda (
                            
                          )
                           (
                            if (
                              > (
                                _len stack
                              )
                               0
                            )
                             (
                              begin (
                                let (
                                  (
                                    top (
                                      popTop stack
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    set! out (
                                      string-append out top
                                    )
                                  )
                                   (
                                    set! stack (
                                      popStack stack
                                    )
                                  )
                                )
                              )
                               (
                                loop9
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop9
                    )
                  )
                   out
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        main
      )
       (
        let (
          (
            t (
              let (
                (
                  v10 (
                    _input
                  )
                )
              )
               (
                cond (
                  (
                    string? v10
                  )
                   (
                    exact (
                      _floor (
                        string->number v10
                      )
                    )
                  )
                )
                 (
                  (
                    boolean? v10
                  )
                   (
                    if v10 1 0
                  )
                )
                 (
                  else (
                    exact (
                      _floor v10
                    )
                  )
                )
              )
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop11 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i t
                        )
                         (
                          begin (
                            let (
                              (
                                expr (
                                  _input
                                )
                              )
                            )
                             (
                              begin (
                                _display (
                                  if (
                                    string? (
                                      toRPN expr
                                    )
                                  )
                                   (
                                    toRPN expr
                                  )
                                   (
                                    to-str (
                                      toRPN expr
                                    )
                                  )
                                )
                              )
                               (
                                newline
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                            )
                          )
                           (
                            loop11
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop11
                )
              )
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end13 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur14 (
              quotient (
                * (
                  - end13 start12
                )
                 1000000
              )
               jps15
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur14
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
