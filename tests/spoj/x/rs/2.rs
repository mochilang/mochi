// Generated by Mochi transpiler v0.10.74
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
static mut g_case_idx: i64 = 0;
fn main() {
    unsafe {
        g_case_idx = 0;
                let _start: i64 = _now();;
        fn split(mut s: String, mut sep: String) -> Vec<String> {
    let mut parts: Vec<String> = vec![];;
    let mut cur: String = String::new();;
    let mut i: i64 = 0;;
    while (i < (s.len() as i64)) {
        if ((((sep.len() as i64) > 0) && ((i + (sep.len() as i64)) <= (s.len() as i64))) && ({ let tmp = &s; let start = (i) as usize; let end = ((i + (sep.len() as i64))) as usize; tmp.chars().skip(start).take(end - start).collect::<String>() }.as_str() == sep.as_str())) {
            parts = { let mut _v = parts.clone(); _v.push(cur.clone()); _v };
            cur = String::new();
            i = (i + (sep.len() as i64));
        } else {
            cur = format!("{}{}", cur, s.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>());
            i = (i + 1);
        }
    }
    parts = { let mut _v = parts.clone(); _v.push(cur.clone()); _v };
    return parts
};
        fn precompute(mut limit: i64) -> Vec<i64> {
    let mut sieve: Vec<bool> = vec![];;
    for i in 0..(limit + 1) {
        sieve = { let mut _v = sieve.clone(); _v.push(true); _v };
    }
    sieve[0 as usize] = false;;
    sieve[1 as usize] = false;;
    let mut p: i64 = 2;;
    while ((p * p) <= limit) {
        if sieve[p as usize] {
            let mut j: i64 = (p * p);;
            while (j <= limit) {
                sieve[j as usize] = false;;
                j = (j + p);
            }
        }
        p = (p + 1);
    }
    let mut primes: Vec<i64> = vec![];;
    for i in 2..(limit + 1) {
        if sieve[i as usize] {
            primes = { let mut _v = primes.clone(); _v.push(i); _v };
        }
    }
    return primes
};
        let primes: Vec<i64> = precompute(32000);;
        let t: i64 = { let n: i64 = input().parse().unwrap(); n };;
        while (unsafe { g_case_idx.clone() } < t) {
            let line: String = input().clone();;
            let parts: Vec<String> = line.split(" ").map(|x| x.to_string()).collect::<Vec<String>>();;
            let m = { let n: i64 = parts[0 as usize].clone().parse().unwrap(); n };;
            let n = { let n: i64 = parts[1 as usize].clone().parse().unwrap(); n };;
            let size: i64 = ((n - m) + 1);;
            let mut segment: Vec<bool> = vec![];;
            for i in 0..size {
                segment = { let mut _v = segment.clone(); _v.push(true); _v };
            }
            for p in primes.iter().cloned() {
                if ((p * p) > n) {
                    break
                }
                let mut start: i64 = (p * p);;
                if (start < m) {
                    let rem: i64 = (m % p);;
                    if (rem == 0) {
                        start = m;
                    } else {
                        start = (m + (p - rem));
                    }
                }
                let mut j: i64 = start;;
                while (j <= n) {
                    segment[(j - m) as usize] = false;;
                    j = (j + p);
                }
            }
            if (m == 1) {
                segment[0 as usize] = false;;
            }
            let mut i: i64 = 0;;
            while (i < size) {
                if segment[i as usize] {
                    println!("{}", (i + m));;
                }
                i = (i + 1);
            }
            if (unsafe { g_case_idx.clone() } < (t - 1)) {
                println!("{}", "");;
            }
            unsafe { g_case_idx = (unsafe { g_case_idx.clone() } + 1) };
        }
        let _end: i64 = _now();;
        let duration_us: i64 = ((_end - _start) / 1000);;
        let memory_bytes: i64 = _mem();;
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
