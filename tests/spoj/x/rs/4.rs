// Generated by Mochi transpiler v0.10.74
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();;
    fn precedence(mut op: String) -> i64 {
    if ((op.as_str() == "+") || (op.as_str() == "-")) {
        return 1
    }
    if ((op.as_str() == "*") || (op.as_str() == "/")) {
        return 2
    }
    if (op.as_str() == "^") {
        return 3
    }
    return 0
};
    fn popTop(mut stack: Vec<String>) -> String {
    return stack[((stack.len() as i64) - 1) as usize].clone().clone()
};
    fn popStack(mut stack: Vec<String>) -> Vec<String> {
    let mut newStack: Vec<String> = vec![];;
    let mut i: i64 = 0;;
    while (i < ((stack.len() as i64) - 1)) {
        newStack = { let mut _v = newStack.clone(); _v.push(stack[i as usize].clone()); _v };
        i = (i + 1);
    }
    return newStack
};
    fn toRPN(mut expr: String) -> String {
    let mut out: String = String::new();;
    let mut stack: Vec<String> = vec![];;
    let mut i: i64 = 0;;
    while (i < (expr.len() as i64)) {
        let ch: String = expr.chars().nth(i as usize).unwrap().to_string().clone();;
        if ((ch.as_str() >= "a") && (ch.as_str() <= "z")) {
            out = format!("{}{}", out, ch);
        } else if (ch.as_str() == "(") {
            stack = { let mut _v = stack.clone(); _v.push(ch.clone()); _v };
        } else if (ch.as_str() == ")") {
            while ((stack.len() as i64) > 0) {
                let top: String = popTop(stack.clone()).clone();;
                if (top.as_str() == "(") {
                    stack = popStack(stack.clone());
                    break
                }
                out = format!("{}{}", out, top);
                stack = popStack(stack.clone());
            }
        } else {
            let prec: i64 = precedence(ch.clone());;
            while ((stack.len() as i64) > 0) {
                let top: String = popTop(stack.clone()).clone();;
                if (top.as_str() == "(") {
                    break
                }
                let topPrec: i64 = precedence(top.clone());;
                if ((topPrec > prec) || ((topPrec == prec) && (ch.as_str() != "^"))) {
                    out = format!("{}{}", out, top);
                    stack = popStack(stack.clone());
                } else {
                    break
                }
            }
            stack = { let mut _v = stack.clone(); _v.push(ch.clone()); _v };
        }
        i = (i + 1);
    }
    while ((stack.len() as i64) > 0) {
        let top: String = popTop(stack.clone()).clone();;
        out = format!("{}{}", out, top);
        stack = popStack(stack.clone());
    }
    return out.clone()
};
    let mut mochi_main = || {
    let t = { let n: i64 = input().parse().unwrap(); n };;
    let mut i: i64 = 0;;
    while (i < t) {
        let expr: String = input().clone();;
        println!("{}", toRPN(expr.clone()));;
        i = (i + 1);
    }
};;
    mochi_main();;
    let _end: i64 = _now();;
    let duration_us: i64 = ((_end - _start) / 1000);;
    let memory_bytes: i64 = _mem();;
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
