// Generated by Mochi transpiler v0.10.74
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();;
    fn is_substring(mut a: String, mut b: String) -> i64 {
    let la: i64 = (a.len() as i64);;
    let lb: i64 = (b.len() as i64);;
    let mut i: i64 = 0;;
    while ((i + lb) <= la) {
        if (a.chars().skip(i as usize).take(((i + lb) - i) as usize).collect::<String>().as_str() == b.as_str()) {
            return 1
        }
        i = (i + 1);
    }
    return 0
};
    fn solve(mut lines: Vec<String>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];;
    for line in lines.iter().cloned() {
        let mut parts: Vec<String> = vec![];;
        let mut cur: String = String::new();;
        let mut i: i64 = 0;;
        while (i < (line.len() as i64)) {
            let ch: String = line.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().clone();;
            if (ch.as_str() == " ") {
                parts = { let mut _v = parts.clone(); _v.push(cur.clone()); _v };
                cur = String::new();
            } else {
                cur = format!("{}{}", cur, ch);
            }
            i = (i + 1);
        }
        parts = { let mut _v = parts.clone(); _v.push(cur.clone()); _v };
        let a: String = parts[0 as usize].clone().clone();;
        let b: String = parts[1 as usize].clone().clone();;
        res = { let mut _v = res.clone(); _v.push(is_substring(a.clone(), b.clone())); _v };
    }
    return res
};
    let sample_input: Vec<String> = vec![String::from("1010110010 10110").clone(), String::from("1110111011 10011").clone()];;
    for r in solve(sample_input.clone()).iter().cloned() {
        println!("{}", r);;
    }
    let _end: i64 = _now();;
    let duration_us: i64 = ((_end - _start) / 1000);;
    let memory_bytes: i64 = _mem();;
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
