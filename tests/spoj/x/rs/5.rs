// Generated by Mochi transpiler v0.10.74
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn main() {
        let _start: i64 = _now();;
    fn next_pal(mut s: String) -> String {
    let digitMap: HashMap<String, i64> = HashMap::from([(String::from("0"), 0), (String::from("1"), 1), (String::from("2"), 2), (String::from("3"), 3), (String::from("4"), 4), (String::from("5"), 5), (String::from("6"), 6), (String::from("7"), 7), (String::from("8"), 8), (String::from("9"), 9)]);;
    let mut n: i64 = (s.len() as i64);;
    let mut num: Vec<i64> = vec![];;
    for i in 0..n {
        num = { let mut _v = num.clone(); _v.push(digitMap.get(s.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().as_str()).cloned().unwrap_or_default()); _v };
    }
    let mut all9: bool = true;;
    for d in num.iter().cloned() {
        if (d != 9) {
            all9 = false;
            break
        }
    }
    if all9 {
        let mut res: String = String::from("1");;
        for _ in 0..(n - 1) {
            res = format!("{}{}", res, "0");
        }
        res = format!("{}{}", res, "1");
        return res
    }
    let mut left: i64 = ((n / 2) - 1);;
    let mut right: i64 = if ((n % 2) == 0) { (n / 2) } else { ((n / 2) + 1) };;
    while (((left >= 0) && (right < n)) && (num[left as usize] == num[right as usize])) {
        left = (left - 1);
        right = (right + 1);
    }
    let mut smaller: bool = ((left < 0) || (num[left as usize] < num[right as usize]));;
    left = ((n / 2) - 1);
    right = if ((n % 2) == 0) { (n / 2) } else { ((n / 2) + 1) };
    while (left >= 0) {
        num[right as usize] = num[left as usize];;
        left = (left - 1);
        right = (right + 1);
    }
    if smaller {
        let mut carry: i64 = 1;;
        left = ((n / 2) - 1);
        if ((n % 2) == 1) {
            let mut mid: i64 = (n / 2);;
            num[mid as usize] = (num[mid as usize] + carry);;
            carry = (num[mid as usize] / 10);
            num[mid as usize] = (num[mid as usize] % 10);;
            right = (mid + 1);
        } else {
            right = (n / 2);
        }
        while (left >= 0) {
            num[left as usize] = (num[left as usize] + carry);;
            carry = (num[left as usize] / 10);
            num[left as usize] = (num[left as usize] % 10);;
            num[right as usize] = num[left as usize];;
            left = (left - 1);
            right = (right + 1);
        }
    }
    let mut out: String = String::new();;
    for d in num.iter().cloned() {
        out = format!("{}{}", out, d.to_string());
    }
    return out.clone()
};
    fn parseIntStr(mut str: String) -> i64 {
    let digits: HashMap<String, i64> = HashMap::from([(String::from("0"), 0), (String::from("1"), 1), (String::from("2"), 2), (String::from("3"), 3), (String::from("4"), 4), (String::from("5"), 5), (String::from("6"), 6), (String::from("7"), 7), (String::from("8"), 8), (String::from("9"), 9)]);;
    let mut i: i64 = 0;;
    let mut n: i64 = 0;;
    while (i < (str.len() as i64)) {
        n = ((n * 10) + digits.get(str.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().as_str()).cloned().unwrap_or_default());
        i = (i + 1);
    }
    return n
};
    let mut mochi_main = || {
    let tStr: String = input().clone();;
    if (tStr.as_str() == "") {
        return
    }
    let t = { let s = tStr; i64::from_str_radix(&s, 10 as u32).unwrap_or(0) };;
    for _ in 0..t {
        let s: String = input().clone();;
        println!("{}", next_pal(s.clone()));;
    }
};;
    mochi_main();;
    let _end: i64 = _now();;
    let duration_us: i64 = ((_end - _start) / 1000);;
    let memory_bytes: i64 = _mem();;
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
