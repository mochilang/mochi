# Code generated by Mochi transpiler.
# Version 0.10.74, generated on 2025-08-27 07:05 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    lst = [] if lst is None else lst[:]
    lst.append(v)
    return lst


import builtins
def _str(v):
    return builtins.str(v)

digitMap = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
def repeat(s, n):
    r = ""
    for _ in range(0, n):
        r = r + s
    return r
def add_str(a, b):
    i = len(a) - 1
    j = len(b) - 1
    carry = 0
    res = ""
    while i >= 0 or j >= 0 or carry > 0:
        da = 0
        if i >= 0:
            da = int(digitMap.get(a[i:i + 1], 0))
        db = 0
        if j >= 0:
            db = int(digitMap.get(b[j:j + 1], 0))
        sum_ = da + db + carry
        res = _str(sum_ % 10) + res
        carry = sum_ // 10
        i = i - 1
        j = j - 1
    return res
def sub_str(a, b):
    i = len(a) - 1
    j = len(b) - 1
    borrow = 0
    res = ""
    while i >= 0:
        da = int(digitMap.get(a[i:i + 1], 0)) - borrow
        db = 0
        if j >= 0:
            db = int(digitMap.get(b[j:j + 1], 0))
        if da < db:
            da = da + 10
            borrow = 1
        else:
            borrow = 0
        diff = da - db
        res = _str(diff) + res
        i = i - 1
        j = j - 1
    k = 0
    while k < len(res) and res[k:k + 1] == "0":
        k = k + 1
    if k == len(res):
        return "0"
    return res[k:]
def mul_digit(a, d):
    if d == 0:
        return "0"
    i = len(a) - 1
    carry = 0
    res = ""
    while i >= 0:
        prod = int(digitMap.get(a[i:i + 1], 0)) * d + carry
        res = _str(prod % 10) + res
        carry = prod // 10
        i = i - 1
    if carry > 0:
        res = _str(carry) + res
    k = 0
    while k < len(res) and res[k:k + 1] == "0":
        k = k + 1
    if k == len(res):
        return "0"
    return res[k:]
def mul_str(a, b):
    result = "0"
    shift = 0
    parts = []
    i = len(b) - 1
    while i >= 0:
        d = int(digitMap.get(b[i:i + 1], 0))
        part = mul_digit(a, d)
        parts = _append(parts, {"val": part, "shift": shift})
        shifted = part
        for _ in range(0, shift):
            shifted = shifted + "0"
        result = add_str(result, shifted)
        shift = shift + 1
        i = i - 1
    return {"res": result, "parts": parts}
def pad_left(s, total):
    r = ""
    for _ in range(0, (total - len(s))):
        r = r + " "
    return r + s
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        tStr = input()
        if tStr == "":
            return
        t = int(tStr)
        for _ in range(0, t):
            line = input()
            if line == "":
                continue
            idx = 0
            while idx < len(line):
                ch = line[idx:idx + 1]
                if ch == "+" or ch == "-" or ch == "*":
                    break
                idx = idx + 1
            a = line[:idx]
            op = line[idx:idx + 1]
            b = line[idx + 1:]
            res = ""
            parts = []
            if op == "+":
                res = add_str(a, b)
            else:
                if op == "-":
                    res = sub_str(a, b)
                else:
                    r = mul_str(a, b)
                    res = str(r.get("res", None))
                    parts = r.get("parts", None)
            width = len(a)
            secondLen = len(b) + 1
            if secondLen > width:
                width = secondLen
            if len(res) > width:
                width = len(res)
            for p in parts:
                l = len(str(p.get("val"))) + (int(p.get("shift")))
                if l > width:
                    width = l
            print(pad_left(a, width))
            print(pad_left(op + b, width))
            dash1 = 0
            if op == "*":
                if len(parts) > 0:
                    dash1 = len(b) + 1
                    firstPart = str(parts[0].get("val"))
                    if len(firstPart) > dash1:
                        dash1 = len(firstPart)
                else:
                    dash1 = len(b) + 1
                    if len(res) > dash1:
                        dash1 = len(res)
            else:
                dash1 = len(b) + 1
                if len(res) > dash1:
                    dash1 = len(res)
            print(pad_left("-" * dash1, width))
            if op == "*" and len(b) > 1:
                for p in parts:
                    val = str(p.get("val"))
                    shift = int(p.get("shift"))
                    spaces = width - shift - len(val)
                    line = ""
                    for _ in range(0, spaces):
                        line = line + " "
                    line = line + val
                    print(line)
                print(pad_left("-" * len(res), width))
            print(pad_left(res, width))
            print("")
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

