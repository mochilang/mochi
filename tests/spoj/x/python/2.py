# Code generated by Mochi transpiler.
# Version 0.10.74, generated on 2025-08-26 14:25 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    lst = [] if lst is None else lst[:]
    lst.append(v)
    return lst


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def split(s, sep):
    parts = []
    cur = ""
    i = 0
    while i < len(s):
        if len(sep) > 0 and i + len(sep) <= len(s) and s[i:i + len(sep)] == sep:
            parts = _append(parts, cur)
            cur = ""
            i = i + len(sep)
        else:
            cur = cur + s[i:i + 1]
            i = i + 1
    parts = _append(parts, cur)
    return parts
def precompute(limit):
    sieve = []
    for i in range(0, (limit + 1)):
        sieve = _append(sieve, True)
    sieve[0] = False
    sieve[1] = False
    p = 2
    while p * p <= limit:
        if sieve[p]:
            j = p * p
            while j <= limit:
                sieve[j] = False
                j = j + p
        p = p + 1
    primes = []
    for i in range(2, (limit + 1)):
        if sieve[int(i)]:
            primes = _append(primes, i)
    return primes
primes = precompute(32000)
t = int(input())
case_idx = 0
while case_idx < t:
    line = input()
    parts = line.split(" ")
    m = int(parts[0])
    n = int(parts[1])
    size = n - m + 1
    segment = []
    for i in range(0, size):
        segment = _append(segment, True)
    for p in primes:
        if p * p > n:
            break
        start = p * p
        if start < m:
            rem = m % p
            if rem == 0:
                start = m
            else:
                start = m + (p - rem)
        j = start
        while j <= n:
            segment = _set_index(segment, j - m, False)
            j = j + p
    if m == 1:
        segment = _set_index(segment, 0, False)
    i = 0
    while i < size:
        if segment[i]:
            print(i + m)
        i = i + 1
    if case_idx < t - 1:
        print("")
    case_idx = case_idx + 1

