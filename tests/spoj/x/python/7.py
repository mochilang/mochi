# Code generated by Mochi transpiler.
# Version 0.10.74, generated on 2025-08-27 07:05 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    lst = [] if lst is None else lst[:]
    lst.append(v)
    return lst


import builtins
def _str(v):
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def split(s, sep):
    parts = []
    cur = ""
    i = 0
    while i < len(s):
        if len(sep) > 0 and i + len(sep) <= len(s) and s[i:i + len(sep)] == sep:
            parts = _append(parts, cur)
            cur = ""
            i = i + len(sep)
        else:
            cur = cur + s[i:i + 1]
            i = i + 1
    parts = _append(parts, cur)
    return parts
def parse_ints(line):
    pieces = line.split(" ")
    nums = []
    i = 0
    while i < len(pieces):
        p = pieces[i]
        if len(p) > 0:
            nums = _append(nums, int(p))
        i = i + 1
    return nums
def sort_unique(arr):
    i = 1
    while i < len(arr):
        j = i
        while j > 0 and arr[j - 1] > arr[j]:
            tmp = arr[j - 1]
            arr[j - 1] = arr[j]
            arr[j] = tmp
            j = j - 1
        i = i + 1
    res = []
    i = 0
    while i < len(arr):
        if i == 0 or arr[i] != arr[i - 1]:
            res = _append(res, arr[i])
        i = i + 1
    return res
def pointInPoly(xs, ys, px, py):
    inside = False
    i = 0
    j = len(xs) - 1
    while i < len(xs):
        xi = float(xs[i])
        yi = float(ys[i])
        xj = float(xs[j])
        yj = float(ys[j])
        if ((yi > py) and (yj <= py)) or ((yj > py) and (yi <= py)):
            xint = (xj - xi) * (py - yi) / (yj - yi) + xi
            if px < xint:
                inside = not inside
        j = i
        i = i + 1
    return inside
def make3DBool(a, b, c):
    arr = []
    i = 0
    while i < a:
        plane = []
        j = 0
        while j < b:
            row = []
            k = 0
            while k < c:
                row = _append(row, False)
                k = k + 1
            plane = _append(plane, row)
            j = j + 1
        arr = _append(arr, plane)
        i = i + 1
    return arr
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        tLine = input()
        if tLine == "":
            return
        t = int(tLine)
        case = 0
        while case < t:
            fLine = input()
            F = int(fLine)
            xs = []
            ys = []
            zs = []
            xs = _append(xs, 0)
            xs = _append(xs, 1001)
            ys = _append(ys, 0)
            ys = _append(ys, 1001)
            zs = _append(zs, 0)
            zs = _append(zs, 1001)
            faceXCoord = []
            faceYPoly = []
            faceZPoly = []
            i = 0
            while i < F:
                line = input()
                nums = parse_ints(line)
                P = nums[0]
                ptsX = []
                ptsY = []
                ptsZ = []
                j = 0
                while j < P:
                    x = nums[1 + 3 * j]
                    y = nums[1 + 3 * j + 1]
                    z = nums[1 + 3 * j + 2]
                    ptsX = _append(ptsX, x)
                    ptsY = _append(ptsY, y)
                    ptsZ = _append(ptsZ, z)
                    xs = _append(xs, x)
                    ys = _append(ys, y)
                    zs = _append(zs, z)
                    j = j + 1
                allSame = True
                j = 1
                while j < P:
                    if ptsX[j] != ptsX[0]:
                        allSame = False
                    j = j + 1
                if allSame:
                    faceXCoord = _append(faceXCoord, ptsX[0])
                    faceYPoly = _append(faceYPoly, ptsY)
                    faceZPoly = _append(faceZPoly, ptsZ)
                i = i + 1
            xs = sort_unique(xs)
            ys = sort_unique(ys)
            zs = sort_unique(zs)
            nx = len(xs) - 1
            ny = len(ys) - 1
            nz = len(zs) - 1
            xIndex = {}
            i = 0
            while i < len(xs):
                xIndex[xs[i]] = i
                i = i + 1
            dx = []
            i = 0
            while i < nx:
                dx = _append(dx, xs[i + 1] - xs[i])
                i = i + 1
            dy = []
            i = 0
            while i < ny:
                dy = _append(dy, ys[i + 1] - ys[i])
                i = i + 1
            dz = []
            i = 0
            while i < nz:
                dz = _append(dz, zs[i + 1] - zs[i])
                i = i + 1
            blockX = make3DBool(len(xs), ny, nz)
            i = 0
            while i < len(faceXCoord):
                coord = faceXCoord[i]
                polyY = faceYPoly[i]
                polyZ = faceZPoly[i]
                xi = xIndex.get(coord, None)
                j = 0
                while j < ny:
                    cy = (float((ys[j] + ys[j + 1]))) / 2.0
                    k = 0
                    while k < nz:
                        cz = (float((zs[k] + zs[k + 1]))) / 2.0
                        if pointInPoly(polyY, polyZ, cy, cz):
                            blockX[xi][j][k] = True
                        k = k + 1
                    j = j + 1
                i = i + 1
            solid = make3DBool(nx, ny, nz)
            j2 = 0
            while j2 < ny:
                k2 = 0
                while k2 < nz:
                    inside = False
                    i2 = 0
                    while i2 < nx:
                        if blockX[i2][j2][k2]:
                            inside = not inside
                        if inside:
                            solid[i2][j2][k2] = True
                        i2 = i2 + 1
                    k2 = k2 + 1
                j2 = j2 + 1
            volume = 0
            i3 = 0
            while i3 < nx:
                j3 = 0
                while j3 < ny:
                    k3 = 0
                    while k3 < nz:
                        if solid[i3][j3][k3]:
                            volume = volume + dx[i3] * dy[j3] * dz[k3]
                        k3 = k3 + 1
                    j3 = j3 + 1
                i3 = i3 + 1
            print("The bulk is composed of " + _str(volume) + " units.")
            case = case + 1
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

