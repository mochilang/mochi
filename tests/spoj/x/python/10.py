# Code generated by Mochi transpiler.
# Version 0.10.74, generated on 2025-08-27 07:05 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    lst = [] if lst is None else lst[:]
    lst.append(v)
    return lst

def parseIntStr(str_):
    digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
    i = 0
    n = 0
    while i < len(str_):
        n = n * 10 + (int(digits.get(str_[i:i + 1], 0)))
        i = i + 1
    return n
def precedence(op):
    if op == "+" or op == "-":
        return 1
    if op == "*" or op == "/":
        return 2
    return 0
def parse(s):
    ops = []
    vals = []
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch >= "a" and ch <= "z":
            vals = _append(vals, {"kind": "var", "val": ch})
        else:
            if ch == "(":
                ops = _append(ops, ch)
            else:
                if ch == ")":
                    while len(ops) > 0 and ops[len(ops) - 1] != "(":
                        op = ops[len(ops) - 1]
                        ops = ops[0:len(ops) - 1]
                        right = vals[len(vals) - 1]
                        vals = vals[0:len(vals) - 1]
                        left = vals[len(vals) - 1]
                        vals = vals[0:len(vals) - 1]
                        vals = _append(vals, {"kind": "op", "op": op, "left": left, "right": right})
                    ops = ops[0:len(ops) - 1]
                else:
                    while len(ops) > 0 and ops[len(ops) - 1] != "(" and precedence(ops[len(ops) - 1]) >= precedence(ch):
                        op = ops[len(ops) - 1]
                        ops = ops[0:len(ops) - 1]
                        right = vals[len(vals) - 1]
                        vals = vals[0:len(vals) - 1]
                        left = vals[len(vals) - 1]
                        vals = vals[0:len(vals) - 1]
                        vals = _append(vals, {"kind": "op", "op": op, "left": left, "right": right})
                    ops = _append(ops, ch)
        i = i + 1
    while len(ops) > 0:
        op = ops[len(ops) - 1]
        ops = ops[0:len(ops) - 1]
        right = vals[len(vals) - 1]
        vals = vals[0:len(vals) - 1]
        left = vals[len(vals) - 1]
        vals = vals[0:len(vals) - 1]
        vals = _append(vals, {"kind": "op", "op": op, "left": left, "right": right})
    return vals[len(vals) - 1]
def needParen(parent, isRight, child):
    if child["kind"] != "op":
        return False
    p = precedence(parent)
    c = precedence(child["op"])
    if c < p:
        return True
    if c > p:
        return False
    if parent == "-" and isRight and (child["op"] == "+" or child["op"] == "-"):
        return True
    if parent == "/" and isRight and (child["op"] == "*" or child["op"] == "/"):
        return True
    return False
def formatRec(node, parent, isRight):
    if node["kind"] != "op":
        return node["val"]
    left = formatRec(node["left"], node["op"], False)
    right = formatRec(node["right"], node["op"], True)
    res = left + node["op"] + right
    if parent != "" and needParen(parent, isRight, node):
        res = "(" + res + ")"
    return res
def makeNice(s):
    root = parse(s)
    return formatRec(root, "", False)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        tStr = input()
        if tStr == "":
            return
        t = parseIntStr(tStr)
        for _ in range(0, t):
            line = input()
            print(makeNice(line))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

