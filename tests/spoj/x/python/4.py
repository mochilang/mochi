# Code generated by Mochi transpiler.
# Version 0.10.74, generated on 2025-08-26 14:25 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    lst = [] if lst is None else lst[:]
    lst.append(v)
    return lst

def precedence(op):
    if op == "+" or op == "-":
        return 1
    if op == "*" or op == "/":
        return 2
    if op == "^":
        return 3
    return 0
def popTop(stack):
    return stack[len(stack) - 1]
def popStack(stack):
    newStack = []
    i = 0
    while i < len(stack) - 1:
        newStack = _append(newStack, stack[i])
        i = i + 1
    return newStack
def toRPN(expr):
    out = ""
    stack = []
    i = 0
    while i < len(expr):
        ch = expr[i]
        if ch >= "a" and ch <= "z":
            out = out + ch
        else:
            if ch == "(":
                stack = _append(stack, ch)
            else:
                if ch == ")":
                    while len(stack) > 0:
                        top = popTop(stack)
                        if top == "(":
                            stack = popStack(stack)
                            break
                        out = out + top
                        stack = popStack(stack)
                else:
                    prec = precedence(ch)
                    while len(stack) > 0:
                        top = popTop(stack)
                        if top == "(":
                            break
                        topPrec = precedence(top)
                        if topPrec > prec or (topPrec == prec and ch != "^"):
                            out = out + top
                            stack = popStack(stack)
                        else:
                            break
                    stack = _append(stack, ch)
        i = i + 1
    while len(stack) > 0:
        top = popTop(stack)
        out = out + top
        stack = popStack(stack)
    return out
def main():
    t = int(input())
    i = 0
    while i < t:
        expr = input()
        print(toRPN(expr))
        i = i + 1
main()

