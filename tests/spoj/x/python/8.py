# Code generated by Mochi transpiler.
# Version 0.10.74, generated on 2025-08-27 07:05 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    lst = [] if lst is None else lst[:]
    lst.append(v)
    return lst


import builtins
def _str(v):
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def split(s, sep):
    parts = []
    cur = ""
    i = 0
    while i < len(s):
        if len(sep) > 0 and i + len(sep) <= len(s) and s[i:i + len(sep)] == sep:
            parts = _append(parts, cur)
            cur = ""
            i = i + len(sep)
        else:
            cur = cur + s[i:i + 1]
            i = i + 1
    parts = _append(parts, cur)
    return parts
def parse_ints(line):
    pieces = line.split(" ")
    nums = []
    for p in pieces:
        if len(p) > 0:
            nums = _append(nums, int(p))
    return nums
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        tLine = input()
        if tLine == "":
            return
        t = int(tLine)
        caseIdx = 0
        while caseIdx < t:
            header = parse_ints(input())
            s = header[0]
            c = header[1]
            seq = parse_ints(input())
            levels = []
            levels = _append(levels, seq)
            current = seq
            while len(current) > 1:
                next_ = []
                i = 0
                while i + 1 < len(current):
                    next_ = _append(next_, current[i + 1] - current[i])
                    i = i + 1
                levels = _append(levels, next_)
                current = next_
            depth = len(levels) - 1
            step = 0
            res = []
            while step < c:
                bottom = levels[depth]
                bottom = _append(bottom, bottom[len(bottom) - 1])
                levels[depth] = bottom
                level = depth - 1
                while level >= 0:
                    arr = levels[level]
                    arrBelow = levels[level + 1]
                    nextVal = arr[len(arr) - 1] + arrBelow[len(arrBelow) - 1]
                    arr = _append(arr, nextVal)
                    levels[level] = arr
                    level = level - 1
                res = _append(res, levels[0][len(levels[0]) - 1])
                step = step + 1
            out = ""
            i2 = 0
            while i2 < len(res):
                if i2 > 0:
                    out = out + " "
                out = out + _str(res[i2])
                i2 = i2 + 1
            print(out)
            caseIdx = caseIdx + 1
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

