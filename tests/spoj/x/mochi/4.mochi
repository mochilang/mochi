# https://www.spoj.com/problems/ONP/

fun precedence(op: string): int {
  if op == "+" || op == "-" { return 1 }
  if op == "*" || op == "/" { return 2 }
  if op == "^" { return 3 }
  return 0
}

fun popTop(stack: list<string>): string {
  return stack[len(stack) - 1]
}

fun popStack(stack: list<string>): list<string> {
  var newStack: list<string> = []
  var i = 0
  while i < len(stack) - 1 {
    newStack = append(newStack, stack[i])
    i = i + 1
  }
  return newStack
}

fun toRPN(expr: string): string {
  var out = ""
  var stack: list<string> = []
  var i = 0
  while i < len(expr) {
    let ch = expr[i]
    if ch >= "a" && ch <= "z" {
      out = out + ch
    } else if ch == "(" {
      stack = append(stack, ch)
    } else if ch == ")" {
      while len(stack) > 0 {
        let top = popTop(stack)
        if top == "(" {
          stack = popStack(stack)
          break
        }
        out = out + top
        stack = popStack(stack)
      }
    } else {
      let prec = precedence(ch)
      while len(stack) > 0 {
        let top = popTop(stack)
        if top == "(" { break }
        let topPrec = precedence(top)
        if topPrec > prec || (topPrec == prec && ch != "^") {
          out = out + top
          stack = popStack(stack)
        } else {
          break
        }
      }
      stack = append(stack, ch)
    }
    i = i + 1
  }
  while len(stack) > 0 {
    let top = popTop(stack)
    out = out + top
    stack = popStack(stack)
  }
  return out
}

fun main() {
  let t = int(input())
  var i = 0
  while i < t {
    let expr = input()
    print(toRPN(expr))
    i = i + 1
  }
}

main()
