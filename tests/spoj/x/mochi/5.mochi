// Solution for SPOJ PALIN - The Next Palindrome
// https://www.spoj.com/problems/PALIN/

let digitMap = {
  "0":0,"1":1,"2":2,"3":3,"4":4,
  "5":5,"6":6,"7":7,"8":8,"9":9,
}

let revDigits = ["0","1","2","3","4","5","6","7","8","9"]

fun parseIntStr(str: string): int {
  var i = 0
  var n = 0
  while i < len(str) {
    n = n * 10 + (digitMap[str[i:i+1]] as int)
    i = i + 1
  }
  return n
}

fun strToDigits(s: string): list<int> {
  var ds: list<int> = []
  var i = 0
  while i < len(s) {
    ds = append(ds, digitMap[s[i:i+1]] as int)
    i = i + 1
  }
  return ds
}

fun allNines(ds: list<int>): bool {
  for d in ds {
    if d != 9 { return false }
  }
  return true
}

fun nextPal(s: string): string {
  var ds = strToDigits(s)
  let n = len(ds)
  if allNines(ds) {
    var res = "1"
    var i = 1
    while i < n {
      res = res + "0"
      i = i + 1
    }
    res = res + "1"
    return res
  }
  var i = n / 2 - 1
  var j = if n % 2 == 0 { n / 2 } else { n / 2 + 1 }
  while i >= 0 && ds[i] == ds[j] {
    i = i - 1
    j = j + 1
  }
  var leftSmaller = false
  if i < 0 {
    leftSmaller = true
  } else if ds[i] < ds[j] {
    leftSmaller = true
  }
  i = n / 2 - 1
  j = if n % 2 == 0 { n / 2 } else { n / 2 + 1 }
  while i >= 0 {
    ds[j] = ds[i]
    i = i - 1
    j = j + 1
  }
  if leftSmaller {
    var carry = 1
    i = n / 2 - 1
    if n % 2 == 1 {
      ds[n/2] = ds[n/2] + carry
      carry = ds[n/2] / 10
      ds[n/2] = ds[n/2] % 10
      j = n / 2 + 1
    } else {
      j = n / 2
    }
    while i >= 0 {
      ds[i] = ds[i] + carry
      carry = ds[i] / 10
      ds[i] = ds[i] % 10
      ds[j] = ds[i]
      i = i - 1
      j = j + 1
    }
  }
  var res = ""
  var idx = 0
  while idx < len(ds) {
    res = res + revDigits[ds[idx]]
    idx = idx + 1
  }
  return res
}

fun main() {
  let tStr = input()
  if tStr == "" { return }
  let t = parseIntStr(tStr)
  for _ in 0..t {
    let k = input()
    print(nextPal(k))
  }
}

main()
