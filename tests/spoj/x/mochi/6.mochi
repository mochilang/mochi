// Solution for SPOJ ARITH - Simple Arithmetics
// https://www.spoj.com/problems/ARITH/

let digitMap = {
  "0": 0,
  "1": 1,
  "2": 2,
  "3": 3,
  "4": 4,
  "5": 5,
  "6": 6,
  "7": 7,
  "8": 8,
  "9": 9,
}

fun repeat(s: string, n: int): string {
  var r = ""
  for _ in 0..n {
    r = r + s
  }
  return r
}

fun add_str(a: string, b: string): string {
  var i = len(a) - 1
  var j = len(b) - 1
  var carry = 0
  var res = ""
  while i >= 0 || j >= 0 || carry > 0 {
    var da = 0
    if i >= 0 {
      da = digitMap[a[i:i+1]] as int
    }
    var db = 0
    if j >= 0 {
      db = digitMap[b[j:j+1]] as int
    }
    var sum = da + db + carry
    res = str(sum % 10) + res
    carry = sum / 10
    i = i - 1
    j = j - 1
  }
  return res
}

fun sub_str(a: string, b: string): string {
  var i = len(a) - 1
  var j = len(b) - 1
  var borrow = 0
  var res = ""
  while i >= 0 {
    var da = digitMap[a[i:i+1]] as int - borrow
    var db = 0
    if j >= 0 {
      db = digitMap[b[j:j+1]] as int
    }
    if da < db {
      da = da + 10
      borrow = 1
    } else {
      borrow = 0
    }
    var diff = da - db
    res = str(diff) + res
    i = i - 1
    j = j - 1
  }
  var k = 0
  while k < len(res) && res[k:k+1] == "0" {
    k = k + 1
  }
  if k == len(res) {
    return "0"
  }
  return res[k:]
}

fun mul_digit(a: string, d: int): string {
  if d == 0 {
    return "0"
  }
  var i = len(a) - 1
  var carry = 0
  var res = ""
  while i >= 0 {
    var prod = digitMap[a[i:i+1]] as int * d + carry
    res = str(prod % 10) + res
    carry = prod / 10
    i = i - 1
  }
  if carry > 0 {
    res = str(carry) + res
  }
  var k = 0
  while k < len(res) && res[k:k+1] == "0" {
    k = k + 1
  }
  if k == len(res) {
    return "0"
  }
  return res[k:]
}

fun mul_str(a: string, b: string): map<string, any> {
  var result = "0"
  var shift = 0
  var parts: list<any> = []
  var i = len(b) - 1
  while i >= 0 {
    let d = digitMap[b[i:i+1]] as int
    let part = mul_digit(a, d)
    parts = append(parts, {"val": part, "shift": shift})
    var shifted = part
    for _ in 0..shift {
      shifted = shifted + "0"
    }
    result = add_str(result, shifted)
    shift = shift + 1
    i = i - 1
  }
  return {"res": result, "parts": parts}
}

fun pad_left(s: string, total: int): string {
  var r = ""
  for _ in 0..(total - len(s)) {
    r = r + " "
  }
  return r + s
}

fun main() {
  let tStr = input()
  if tStr == "" { return }
  let t = int(tStr)
  for _ in 0..t {
    let line = input()
    if line == "" { continue }
    var idx = 0
    while idx < len(line) {
      let ch = line[idx:idx+1]
      if ch == "+" || ch == "-" || ch == "*" {
        break
      }
      idx = idx + 1
    }
    let a = line[:idx]
    let op = line[idx:idx+1]
    let b = line[idx+1:]
    var res = ""
    var parts: list<any> = []
    if op == "+" {
      res = add_str(a, b)
    } else if op == "-" {
      res = sub_str(a, b)
    } else {
      let r = mul_str(a, b)
      res = r["res"] as string
      parts = r["parts"] as list<any>
    }
    var width = len(a)
    let secondLen = len(b) + 1
    if secondLen > width { width = secondLen }
    if len(res) > width { width = len(res) }
    for p in parts {
      let l = len(p["val"] as string) + (p["shift"] as int)
      if l > width { width = l }
    }
    print(pad_left(a, width))
    print(pad_left(op + b, width))
    var dash1 = 0
    if op == "*" {
      if len(parts) > 0 {
        dash1 = len(b) + 1
        let firstPart = parts[0]["val"] as string
        if len(firstPart) > dash1 { dash1 = len(firstPart) }
      } else {
        dash1 = len(b) + 1
        if len(res) > dash1 { dash1 = len(res) }
      }
    } else {
      dash1 = len(b) + 1
      if len(res) > dash1 { dash1 = len(res) }
    }
    print(pad_left(repeat("-", dash1), width))
    if op == "*" && len(b) > 1 {
      for p in parts {
        let val = p["val"] as string
        let shift = p["shift"] as int
        let spaces = width - shift - len(val)
        var line = ""
        for _ in 0..spaces {
          line = line + " "
        }
        line = line + val
        print(line)
      }
      print(pad_left(repeat("-", len(res)), width))
    }
    print(pad_left(res, width))
    print("")
  }
}

main()

