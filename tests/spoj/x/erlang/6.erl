#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, repeat/2, add_str/2, sub_str/2, mul_digit/2, mul_str/2, pad_left/2, main/0]).

% Generated by Mochi transpiler v0.10.74 (41e231bf64)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_repeat(S, N) when is_binary(S) ->
    binary:copy(S, mochi_to_int(N));
mochi_repeat(S, N) when is_list(S) ->
    string:copies(S, mochi_to_int(N));
mochi_repeat(_, _) -> [].


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) when is_binary(V) ->
    V;
mochi_repr(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false ->
            S = lists:flatten(io_lib:format("~p", [V])),
            lists:flatten(string:replace(S, ",", ", ", all))
    end;
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

repeat(S, N) ->
    try
        R = "",
        Fun = fun Fun_loop(List, N, R, S) ->
    case List of
        [] -> {N, R, S};
        [_|__rest] ->
            R_2 = (R ++ S),
            Fun_loop(__rest, N, R_2, S);
        _ -> {N, R, S}
    end
end,
{N, R_2, S} = Fun(lists:seq(0, (N) - 1), N, R, S),
        R_2
    catch {return, RetCatch} -> RetCatch end.

add_str(A, B) ->
    try
        I = (erlang:length(A) - 1),
        J = (erlang:length(B) - 1),
        Carry = 0,
        Res = "",
        Fun_2 = fun Fun_2_loop(A, B, Carry, I, J, Res) ->
    case (((I >= 0) orelse (J >= 0)) orelse (Carry > 0)) of
        true ->
            Da = 0,
            Da_3 = (case (I >= 0) of
        true -> Da_2 = mochi_to_int(maps:get(string:substr(A, I + 1, ((I + 1) - I)), erlang:get('digitMap'), nil)),
            Da_2;
        _ -> Da
    end),
            Db = 0,
            Db_3 = (case (J >= 0) of
        true -> Db_2 = mochi_to_int(maps:get(string:substr(B, J + 1, ((J + 1) - J)), erlang:get('digitMap'), nil)),
            Db_2;
        _ -> Db
    end),
            Sum = ((Da_3 + Db_3) + Carry),
            Res_2 = (mochi_str(mochi_mod(Sum, 10)) ++ Res),
            Carry_2 = mochi_idiv(Sum, 10),
            I_2 = (I - 1),
            J_2 = (J - 1),
            Fun_2_loop(A, B, Carry_2, I_2, J_2, Res_2);
        _ -> {A, B, Carry, I, J, Res}
    end
end,
{A, B, Carry_2, I_2, J_2, Res_2} = Fun_2(A, B, Carry, I, J, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

sub_str(A_2, B_2) ->
    try
        I_3 = (erlang:length(A_2) - 1),
        J_3 = (erlang:length(B_2) - 1),
        Borrow = 0,
        Res_3 = "",
        Fun_3 = fun Fun_3_loop(A_2, B_2, Borrow, I_3, J_3, Res_3) ->
    case (I_3 >= 0) of
        true ->
            Da_4 = (mochi_to_int(maps:get(string:substr(A_2, I_3 + 1, ((I_3 + 1) - I_3)), erlang:get('digitMap'), nil)) - Borrow),
            Db_4 = 0,
            Db_6 = (case (J_3 >= 0) of
        true -> Db_5 = mochi_to_int(maps:get(string:substr(B_2, J_3 + 1, ((J_3 + 1) - J_3)), erlang:get('digitMap'), nil)),
            Db_5;
        _ -> Db_4
    end),
            Da_6 = (case (Da_4 < Db_6) of
        true -> Da_5 = (Da_4 + 10),
            Borrow_2 = 1,
            Borrow_4 = Borrow_2,
            Da_5;
        _ -> Borrow_3 = 0,
            Borrow_4 = Borrow_3,
            Da_4
    end),
            Diff = (Da_6 - Db_6),
            Res_4 = (mochi_str(Diff) ++ Res_3),
            I_4 = (I_3 - 1),
            J_4 = (J_3 - 1),
            Fun_3_loop(A_2, B_2, Borrow_4, I_4, J_4, Res_4);
        _ -> {A_2, B_2, Borrow, I_3, J_3, Res_3}
    end
end,
{A_2, B_2, Borrow_4, I_4, J_4, Res_4} = Fun_3(A_2, B_2, Borrow, I_3, J_3, Res_3),
        K = 0,
        Fun_4 = fun Fun_4_loop(A_2, B_2, Borrow_4, I_4, J_4, K, Res_4) ->
    case ((K < erlang:length(Res_4)) andalso (string:substr(Res_4, K + 1, ((K + 1) - K)) == "0")) of
        true ->
            K_2 = (K + 1),
            Fun_4_loop(A_2, B_2, Borrow_4, I_4, J_4, K_2, Res_4);
        _ -> {A_2, B_2, Borrow_4, I_4, J_4, K, Res_4}
    end
end,
{A_2, B_2, Borrow_4, I_4, J_4, K_2, Res_4} = Fun_4(A_2, B_2, Borrow_4, I_4, J_4, K, Res_4),
        case (K_2 == erlang:length(Res_4)) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        string:substr(Res_4, K_2 + 1, length(Res_4) - K_2)
    catch {return, RetCatch} -> RetCatch end.

mul_digit(A_3, D) ->
    try
        case (D == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        I_5 = (erlang:length(A_3) - 1),
        Carry_3 = 0,
        Res_5 = "",
        Fun_5 = fun Fun_5_loop(A_3, Carry_3, D, I_5, Res_5) ->
    case (I_5 >= 0) of
        true ->
            Prod = ((mochi_to_int(maps:get(string:substr(A_3, I_5 + 1, ((I_5 + 1) - I_5)), erlang:get('digitMap'), nil)) * D) + Carry_3),
            Res_6 = (mochi_str(mochi_mod(Prod, 10)) ++ Res_5),
            Carry_4 = mochi_idiv(Prod, 10),
            I_6 = (I_5 - 1),
            Fun_5_loop(A_3, Carry_4, D, I_6, Res_6);
        _ -> {A_3, Carry_3, D, I_5, Res_5}
    end
end,
{A_3, Carry_4, D, I_6, Res_6} = Fun_5(A_3, Carry_3, D, I_5, Res_5),
        Res_8 = (case (Carry_4 > 0) of
        true -> Res_7 = (mochi_str(Carry_4) ++ Res_6),
            Res_7;
        _ -> Res_6
    end),
        K_3 = 0,
        Fun_6 = fun Fun_6_loop(A_3, Carry_4, D, I_6, K_3, Res_8) ->
    case ((K_3 < erlang:length(Res_8)) andalso (string:substr(Res_8, K_3 + 1, ((K_3 + 1) - K_3)) == "0")) of
        true ->
            K_4 = (K_3 + 1),
            Fun_6_loop(A_3, Carry_4, D, I_6, K_4, Res_8);
        _ -> {A_3, Carry_4, D, I_6, K_3, Res_8}
    end
end,
{A_3, Carry_4, D, I_6, K_4, Res_8} = Fun_6(A_3, Carry_4, D, I_6, K_3, Res_8),
        case (K_4 == erlang:length(Res_8)) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        string:substr(Res_8, K_4 + 1, length(Res_8) - K_4)
    catch {return, RetCatch} -> RetCatch end.

mul_str(A_4, B_3) ->
    try
        Result = "0",
        Shift = 0,
        Parts = [],
        I_7 = (erlang:length(B_3) - 1),
        Fun_8 = fun Fun_8_loop(A_4, B_3, I_7, Parts, Result, Shift) ->
    case (I_7 >= 0) of
        true ->
            D_2 = mochi_to_int(maps:get(string:substr(B_3, I_7 + 1, ((I_7 + 1) - I_7)), erlang:get('digitMap'), nil)),
            Part = mul_digit(A_4, D_2),
            Parts_2 = lists:append((case Parts of nil -> []; _ -> Parts end), [#{"val" => Part, "shift" => Shift}]),
            Shifted = Part,
            Fun_7 = fun Fun_7_loop(List, A_4, B_3, D_2, I_7, Part, Parts_2, Result, Shift, Shifted) ->
    case List of
        [] -> {A_4, B_3, D_2, I_7, Part, Parts_2, Result, Shift, Shifted};
        [_|__rest] ->
            Shifted_2 = (Shifted ++ "0"),
            Fun_7_loop(__rest, A_4, B_3, D_2, I_7, Part, Parts_2, Result, Shift, Shifted_2);
        _ -> {A_4, B_3, D_2, I_7, Part, Parts_2, Result, Shift, Shifted}
    end
end,
{A_4, B_3, D_2, I_7, Part, Parts_2, Result, Shift, Shifted_2} = Fun_7(lists:seq(0, (Shift) - 1), A_4, B_3, D_2, I_7, Part, Parts_2, Result, Shift, Shifted),
            Result_2 = add_str(Result, Shifted_2),
            Shift_2 = (Shift + 1),
            I_8 = (I_7 - 1),
            Fun_8_loop(A_4, B_3, I_8, Parts_2, Result_2, Shift_2);
        _ -> {A_4, B_3, I_7, Parts, Result, Shift}
    end
end,
{A_4, B_3, I_8, Parts_2, Result_2, Shift_2} = Fun_8(A_4, B_3, I_7, Parts, Result, Shift),
        #{"res" => Result_2, "parts" => Parts_2}
    catch {return, RetCatch} -> RetCatch end.

pad_left(S_2, Total) ->
    try
        R_3 = "",
        Fun_9 = fun Fun_9_loop(List, R_3, S_2, Total) ->
    case List of
        [] -> {R_3, S_2, Total};
        [_|__rest] ->
            R_4 = (R_3 ++ " "),
            Fun_9_loop(__rest, R_4, S_2, Total);
        _ -> {R_3, S_2, Total}
    end
end,
{R_4, S_2, Total} = Fun_9(lists:seq(0, ((Total - erlang:length(S_2))) - 1), R_3, S_2, Total),
        (R_4 ++ S_2)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        TStr = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
        case (TStr == "") of
        true -> throw({return, nil});
        _ -> ok
    end,
        T = mochi_to_int(TStr),
        Fun_10 = fun Fun_10_loop(List, T, TStr) ->
    case List of
        [] -> {T, TStr};
        [_|__rest] ->
        try
            Line = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
            case (Line == "") of
        true -> throw({continue, T, TStr});
        _ -> ok
    end,
            Idx = 0,
            Fun_11 = fun Fun_11_loop(Idx, Line, T, TStr) ->
    case (Idx < erlang:length(Line)) of
        true ->
            try
                Ch = string:substr(Line, Idx + 1, ((Idx + 1) - Idx)),
                case (((Ch == "+") orelse (Ch == "-")) orelse (Ch == "*")) of
        true -> throw({break, {Idx, Line, T, TStr}});
        _ -> ok
    end,
                Idx_2 = (Idx + 1),
                Fun_11_loop(Idx_2, Line, T, TStr)
            catch
                {continue, C0, C1, C2, C3} -> Fun_11_loop(C0, C1, C2, C3);
                {break, Bs} -> Bs
            end;
        _ -> {Idx, Line, T, TStr}
    end
end,
{Idx_2, Line, T, TStr} = Fun_11(Idx, Line, T, TStr),
            A_5 = string:substr(Line, 1, (Idx_2 - 0)),
            Op = string:substr(Line, Idx_2 + 1, ((Idx_2 + 1) - Idx_2)),
            B_4 = string:substr(Line, (Idx_2 + 1) + 1, length(Line) - (Idx_2 + 1)),
            Res_9 = "",
            Parts_3 = [],
            Res_14 = (case (Op == "+") of
        true -> Res_10 = add_str(A_5, B_4),
            Parts_6 = Parts_3,
            R_7 = nil,
            Res_10;
        _ -> Res_13 = (case (Op == "-") of
        true -> Res_11 = sub_str(A_5, B_4),
            Parts_5 = Parts_3,
            R_6 = nil,
            Res_11;
        _ -> R_5 = mul_str(A_5, B_4),
            Res_12 = maps:get("res", R_5, nil),
            Parts_4 = maps:get("parts", R_5, nil),
            Parts_5 = Parts_4,
            R_6 = R_5,
            Res_12
    end),
            Parts_6 = Parts_5,
            R_7 = R_6,
            Res_13
    end),
            Width = erlang:length(A_5),
            SecondLen = (erlang:length(B_4) + 1),
            Width_3 = (case (SecondLen > Width) of
        true -> Width_2 = SecondLen,
            Width_2;
        _ -> Width
    end),
            Width_5 = (case (erlang:length(Res_14) > Width_3) of
        true -> Width_4 = erlang:length(Res_14),
            Width_4;
        _ -> Width_3
    end),
            Fun_12 = fun Fun_12_loop(List, A_5, B_4, Idx_2, Line, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_5) ->
    case List of
        [] -> {A_5, B_4, Idx_2, Line, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_5};
        [P|P_rest] ->
            L = (erlang:length(maps:get("val", P, nil)) + mochi_to_int(maps:get("shift", P, nil))),
            Width_7 = (case (L > Width_5) of
        true -> Width_6 = L,
            Width_6;
        _ -> Width_5
    end),
            Fun_12_loop(P_rest, A_5, B_4, Idx_2, Line, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_7);
        _ -> {A_5, B_4, Idx_2, Line, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_5}
    end
end,
{A_5, B_4, Idx_2, Line, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_7} = Fun_12(Parts_6, A_5, B_4, Idx_2, Line, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_5),
            io:format("~s~n", [mochi_repr(pad_left(A_5, Width_7))]),
            io:format("~s~n", [mochi_repr(pad_left((Op ++ B_4), Width_7))]),
            Dash1 = 0,
            FirstPart_3 = (case (Op == "*") of
        true -> FirstPart_2 = (case (erlang:length(Parts_6) > 0) of
        true -> Dash1_2 = (erlang:length(B_4) + 1),
            FirstPart = maps:get("val", (case erlang:is_map(Parts_6) of true -> maps:get(0, Parts_6, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Parts_6) + 0 + 1, Parts_6); _ -> mochi_nth(0 + 1, Parts_6) end end), nil),
            Dash1_4 = (case (erlang:length(FirstPart) > Dash1_2) of
        true -> Dash1_3 = erlang:length(FirstPart),
            Dash1_3;
        _ -> Dash1_2
    end),
            Dash1_8 = Dash1_4,
            FirstPart;
        _ -> Dash1_5 = (erlang:length(B_4) + 1),
            Dash1_7 = (case (erlang:length(Res_14) > Dash1_5) of
        true -> Dash1_6 = erlang:length(Res_14),
            Dash1_6;
        _ -> Dash1_5
    end),
            Dash1_8 = Dash1_7,
            nil
    end),
            Dash1_12 = Dash1_8,
            FirstPart_2;
        _ -> Dash1_9 = (erlang:length(B_4) + 1),
            Dash1_11 = (case (erlang:length(Res_14) > Dash1_9) of
        true -> Dash1_10 = erlang:length(Res_14),
            Dash1_10;
        _ -> Dash1_9
    end),
            Dash1_12 = Dash1_11,
            nil
    end),
            io:format("~s~n", [mochi_repr(pad_left(mochi_repeat("-", Dash1_12), Width_7))]),
            Line_5 = (case ((Op == "*") andalso (erlang:length(B_4) > 1)) of
        true -> Fun_13 = fun Fun_13_loop(List, A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_7) ->
    case List of
        [] -> {A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_7};
        [P_2|P_2_rest] ->
            Val = maps:get("val", P_2, nil),
            Shift_3 = mochi_to_int(maps:get("shift", P_2, nil)),
            Spaces = ((Width_7 - Shift_3) - erlang:length(Val)),
            Line_2 = "",
            Fun_14 = fun Fun_14_loop(List, A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line_2, Op, P_2, Parts_6, R_7, Res_14, SecondLen, Shift_3, Spaces, T, TStr, Val, Width_7) ->
    case List of
        [] -> {A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line_2, Op, P_2, Parts_6, R_7, Res_14, SecondLen, Shift_3, Spaces, T, TStr, Val, Width_7};
        [_|__rest] ->
            Line_3 = (Line_2 ++ " "),
            Fun_14_loop(__rest, A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line_3, Op, P_2, Parts_6, R_7, Res_14, SecondLen, Shift_3, Spaces, T, TStr, Val, Width_7);
        _ -> {A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line_2, Op, P_2, Parts_6, R_7, Res_14, SecondLen, Shift_3, Spaces, T, TStr, Val, Width_7}
    end
end,
{A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line_3, Op, P_2, Parts_6, R_7, Res_14, SecondLen, Shift_3, Spaces, T, TStr, Val, Width_7} = Fun_14(lists:seq(0, (Spaces) - 1), A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line_2, Op, P_2, Parts_6, R_7, Res_14, SecondLen, Shift_3, Spaces, T, TStr, Val, Width_7),
            Line_4 = (Line_3 ++ Val),
            io:format("~s~n", [mochi_repr(Line_4)]),
            Fun_13_loop(P_2_rest, A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line_4, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_7);
        _ -> {A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_7}
    end
end,
{A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line_4, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_7} = Fun_13(Parts_6, A_5, B_4, Dash1_12, FirstPart_3, Idx_2, Line, Op, Parts_6, R_7, Res_14, SecondLen, T, TStr, Width_7),
            io:format("~s~n", [mochi_repr(pad_left(mochi_repeat("-", erlang:length(Res_14)), Width_7))]),
            Fun_15 = Fun_13,
            Line_4;
        _ -> Fun_15 = Fun_12,
            Line
    end),
            io:format("~s~n", [mochi_repr(pad_left(Res_14, Width_7))]),
            io:format("~s~n", [mochi_repr("")]),
            Fun_10_loop(__rest, T, TStr)
        catch
            {continue, C0, C1} -> Fun_10_loop(__rest, C0, C1);
            {break, Bs} -> Bs;
            break -> {T, TStr}
        end;
        _ -> {T, TStr}
    end
end,
{T, TStr} = Fun_10(lists:seq(0, (T) - 1), T, TStr),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('digitMap', #{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("
{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
