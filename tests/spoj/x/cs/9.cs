// Generated by Mochi 0.10.74 (commit 9ecaae5c63) on 2025-08-27 07:05 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is System.Numerics.BigInteger bi) return (long)bi;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<string, BigInteger> digits_0 = new Dictionary<string, BigInteger>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
    public static BigInteger parseInt(string s_1) {
        BigInteger i_2 = 0;
        BigInteger n_3 = 0;
        while ((i_2 < s_1.Length)) {
            n_3 = ((n_3 * 10) + (long)((digits_0.ContainsKey(_substr(s_1, (long)(i_2), (long)((i_2 + 1)))) ? digits_0[_substr(s_1, (long)(i_2), (long)((i_2 + 1)))] : BigInteger.Zero)));
            i_2 = (i_2 + 1);
        };
        return n_3;
    }

    public static string[] split(string s_4) {
        string[] parts_5 = new string[]{};
        string cur_6 = "";
        BigInteger i_7 = 0;
        while ((i_7 < s_4.Length)) {
            string ch_8 = _substr(s_4, (long)(i_7), (long)((i_7 + 1)));
            if ((ch_8 == " ")) {
                if ((cur_6.Length > 0)) {
                    parts_5 = Enumerable.ToArray(parts_5.Append(cur_6));
                    cur_6 = "";
                }
            } else {
                cur_6 = (cur_6 + ch_8);
            }
            i_7 = (i_7 + 1);
        };
        if ((cur_6.Length > 0)) {
            parts_5 = Enumerable.ToArray(parts_5.Append(cur_6));
        };
        return parts_5;
    }

    public static double absf(double x_9) {
        if ((x_9 < 0.0)) {
            return -x_9;
        } else {
            return x_9;
        };
        return default(double);
    }

    public static double sqrt(double x_10) {
        if ((x_10 <= 0.0)) {
            return 0.0;
        };
        double r_11 = x_10;
        double prev_12 = 0.0;
        while ((Program.absf((r_11 - prev_12)) > 1e-12)) {
            prev_12 = r_11;
            r_11 = ((r_11 + (x_10 / r_11)) / 2.0);
        };
        return r_11;
    }

    public static bool[][] makeBoolGrid(BigInteger P_13, BigInteger Q_14) {
        bool[][] g_15 = new bool[][]{};
        BigInteger i_16 = 0;
        while ((i_16 < P_13)) {
            bool[] row_17 = new bool[]{};
            BigInteger j_18 = 0;
            while ((j_18 < Q_14)) {
                row_17 = Enumerable.ToArray(row_17.Append(false));
                j_18 = (j_18 + 1);
            }
            g_15 = Enumerable.ToArray(g_15.Append(row_17));
            i_16 = (i_16 + 1);
        };
        return g_15;
    }

    public static bool visible(BigInteger[][] grid_19, BigInteger P_20, BigInteger Q_21, BigInteger R_22, BigInteger C_23, BigInteger BR_24, BigInteger BC_25) {
        double X1_26 = ((double)(C_23) - 0.5);
        double Y1_27 = ((double)(R_22) - 0.5);
        double Z1_28 = ((double)(_idx(_idx(grid_19, (long)((R_22 - 1))), (long)((C_23 - 1)))) + 0.5);
        double X2_29 = ((double)(BC_25) - 0.5);
        double Y2_30 = ((double)(BR_24) - 0.5);
        double Z2_31 = ((double)(_idx(_idx(grid_19, (long)((BR_24 - 1))), (long)((BC_25 - 1)))) + 0.5);
        double Dx_32 = (X2_29 - X1_26);
        double Dy_33 = (Y2_30 - Y1_27);
        double Dz_34 = (Z2_31 - Z1_28);
        double dist_35 = Program.sqrt((((Dx_32 * Dx_32) + (Dy_33 * Dy_33)) + (Dz_34 * Dz_34)));
        BigInteger steps_36 = ((long)((dist_35 * 20.0)) + 1);
        double stepT_37 = (1.0 / (double)(steps_36));
        BigInteger i_38 = 1;
        while ((i_38 < steps_36)) {
            double t_39 = (stepT_37 * (double)(i_38));
            double X_40 = (X1_26 + (Dx_32 * t_39));
            double Y_41 = (Y1_27 + (Dy_33 * t_39));
            double Z_42 = (Z1_28 + (Dz_34 * t_39));
            BigInteger rIdx_43 = ((long)(Y_41) + 1);
            BigInteger cIdx_44 = ((long)(X_40) + 1);
            if (((((rIdx_43 < 1) || (rIdx_43 > P_20)) || (cIdx_44 < 1)) || (cIdx_44 > Q_21))) {
                return false;
            }
            double H_45 = (double)(_idx(_idx(grid_19, (long)((rIdx_43 - 1))), (long)((cIdx_44 - 1))));
            if ((Z_42 <= H_45)) {
                return false;
            }
            i_38 = (i_38 + 1);
        };
        return true;
    }

    public static bool[][] computeVis(BigInteger[][] grid_46, BigInteger P_47, BigInteger Q_48, BigInteger BR_49, BigInteger BC_50) {
        bool[][] vis_51 = Program.makeBoolGrid(P_47, Q_48);
        BigInteger r_52 = 1;
        while ((r_52 <= P_47)) {
            BigInteger c_53 = 1;
            while ((c_53 <= Q_48)) {
                _idx(vis_51, (long)((r_52 - 1)))[(int)((long)((c_53 - 1)))] = Program.visible(grid_46, P_47, Q_48, r_52, c_53, BR_49, BC_50);
                c_53 = (c_53 + 1);
            }
            r_52 = (r_52 + 1);
        };
        return vis_51;
    }

    public static BigInteger bfs(BigInteger[][] grid_54, BigInteger P_55, BigInteger Q_56, BigInteger R1_57, BigInteger C1_58, BigInteger R2_59, BigInteger C2_60) {
        bool[][] vis1_61 = Program.computeVis(grid_54, P_55, Q_56, R1_57, C1_58);
        bool[][] vis2_62 = Program.computeVis(grid_54, P_55, Q_56, R2_59, C2_60);
        bool[][] visited_63 = Program.makeBoolGrid(P_55, Q_56);
        BigInteger[] qR_64 = new BigInteger[]{};
        BigInteger[] qC_65 = new BigInteger[]{};
        BigInteger[] qD_66 = new BigInteger[]{};
        qR_64 = Enumerable.ToArray(qR_64.Append(R1_57));
        qC_65 = Enumerable.ToArray(qC_65.Append(C1_58));
        qD_66 = Enumerable.ToArray(qD_66.Append(0));
        _idx(visited_63, (long)((R1_57 - 1)))[(int)((long)((C1_58 - 1)))] = true;
        BigInteger head_67 = 0;
        while ((head_67 < qR_64.Length)) {
            BigInteger r_68 = _idx(qR_64, (long)(head_67));
            BigInteger c_69 = _idx(qC_65, (long)(head_67));
            BigInteger d_70 = _idx(qD_66, (long)(head_67));
            if (((r_68 == R2_59) && (c_69 == C2_60))) {
                return d_70;
            }
            BigInteger hr_71 = _idx(_idx(grid_54, (long)((r_68 - 1))), (long)((c_69 - 1)));
            BigInteger idx_72 = 0;
            while ((idx_72 < 4)) {
                BigInteger nr_73 = r_68;
                BigInteger nc_74 = c_69;
                if ((idx_72 == 0)) {
                    nr_73 = (nr_73 - 1);
                }
                if ((idx_72 == 1)) {
                    nr_73 = (nr_73 + 1);
                }
                if ((idx_72 == 2)) {
                    nc_74 = (nc_74 - 1);
                }
                if ((idx_72 == 3)) {
                    nc_74 = (nc_74 + 1);
                }
                if (((((nr_73 >= 1) && (nr_73 <= P_55)) && (nc_74 >= 1)) && (nc_74 <= Q_56))) {
                    if ((!_idx(_idx(visited_63, (long)((nr_73 - 1))), (long)((nc_74 - 1))))) {
                        BigInteger hn_75 = _idx(_idx(grid_54, (long)((nr_73 - 1))), (long)((nc_74 - 1)));
                        BigInteger diff_76 = (hn_75 - hr_71);
                        if (((diff_76 <= 1) && (diff_76 >= -3))) {
                            if ((_idx(_idx(vis1_61, (long)((nr_73 - 1))), (long)((nc_74 - 1))) || _idx(_idx(vis2_62, (long)((nr_73 - 1))), (long)((nc_74 - 1))))) {
                                _idx(visited_63, (long)((nr_73 - 1)))[(int)((long)((nc_74 - 1)))] = true;
                                qR_64 = Enumerable.ToArray(qR_64.Append(nr_73));
                                qC_65 = Enumerable.ToArray(qC_65.Append(nc_74));
                                qD_66 = Enumerable.ToArray(qD_66.Append((d_70 + 1)));
                            }
                        }
                    }
                }
                idx_72 = (idx_72 + 1);
            }
            head_67 = (head_67 + 1);
        };
        return -1;
    }

    public static void main() {
        string tLine_77 = _input();
        if ((tLine_77 == "")) {
            return;
        };
        BigInteger t_78 = Program.parseInt(tLine_77);
        BigInteger case_79 = 0;
        while ((case_79 < t_78)) {
            string line_80 = _input();
            while ((line_80 == "")) {
                line_80 = _input();
            }
            string[] pq_81 = Program.split(line_80);
            BigInteger P_82 = Program.parseInt(_idx(pq_81, (long)(0)));
            BigInteger Q_83 = Program.parseInt(_idx(pq_81, (long)(1)));
            BigInteger[][] grid_84 = new BigInteger[][]{};
            BigInteger r_85 = 0;
            while ((r_85 < P_82)) {
                string[] rowParts_86 = Program.split(_input());
                BigInteger[] row_87 = new BigInteger[]{};
                BigInteger c_88 = 0;
                while ((c_88 < Q_83)) {
                    row_87 = Enumerable.ToArray(row_87.Append(Program.parseInt(_idx(rowParts_86, (long)(c_88)))));
                    c_88 = (c_88 + 1);
                }
                grid_84 = Enumerable.ToArray(grid_84.Append(row_87));
                r_85 = (r_85 + 1);
            }
            string[] coords_89 = Program.split(_input());
            BigInteger R1_90 = Program.parseInt(_idx(coords_89, (long)(0)));
            BigInteger C1_91 = Program.parseInt(_idx(coords_89, (long)(1)));
            BigInteger R2_92 = Program.parseInt(_idx(coords_89, (long)(2)));
            BigInteger C2_93 = Program.parseInt(_idx(coords_89, (long)(3)));
            BigInteger res_94 = Program.bfs(grid_84, P_82, Q_83, R1_90, C1_91, R2_92, C2_93);
            if ((res_94 < 0)) {
                Console.WriteLine(Program._fmtTop("Mission impossible!"));
            } else {
                Console.WriteLine(Program._fmtTop((("The shortest path is " + _fmtStr(res_94)) + " steps long.")));
            }
            case_79 = (case_79 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
