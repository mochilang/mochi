// Generated by Mochi 0.10.74 (commit 9ecaae5c63) on 2025-08-27 07:05 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is System.Numerics.BigInteger bi) return (long)bi;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger parseIntStr(string str_0) {
        Dictionary<string, BigInteger> digits_1 = new Dictionary<string, BigInteger>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        BigInteger i_2 = 0;
        BigInteger n_3 = 0;
        while ((i_2 < str_0.Length)) {
            n_3 = ((n_3 * 10) + (long)((digits_1.ContainsKey(_substr(str_0, (long)(i_2), (long)((i_2 + 1)))) ? digits_1[_substr(str_0, (long)(i_2), (long)((i_2 + 1)))] : BigInteger.Zero)));
            i_2 = (i_2 + 1);
        };
        return n_3;
    }

    public static BigInteger precedence(string op_4) {
        if (((op_4 == "+") || (op_4 == "-"))) {
            return 1;
        };
        if (((op_4 == "*") || (op_4 == "/"))) {
            return 2;
        };
        return 0;
    }

    public static object parse(string s_5) {
        string[] ops_6 = new string[]{};
        object[] vals_7 = new object[]{};
        BigInteger i_8 = 0;
        while ((i_8 < s_5.Length)) {
            string ch_9 = _substr(s_5, (long)(i_8), (long)((i_8 + 1)));
            if (((string.Compare(ch_9, "a") >= 0) && (string.Compare(ch_9, "z") <= 0))) {
                vals_7 = Enumerable.ToArray(vals_7.Append(new Dictionary<string, string>{{"kind", "var"}, {"val", ch_9}}));
            } else if ((ch_9 == "(")) {
                ops_6 = Enumerable.ToArray(ops_6.Append(ch_9));
            } else if ((ch_9 == ")")) {
                while (((ops_6.Length > 0) && (_idx(ops_6, (long)((ops_6.Length - 1))) != "("))) {
                    string op_10 = _idx(ops_6, (long)((ops_6.Length - 1)));
                    ops_6 = _slice<string>(ops_6, (long)(0), (long)((ops_6.Length - 1)));
                    object right_11 = ((dynamic)vals_7)[(int)((vals_7.Length - 1))];
                    vals_7 = _slice<object>(vals_7, (long)(0), (long)((vals_7.Length - 1)));
                    object left_12 = ((dynamic)vals_7)[(int)((vals_7.Length - 1))];
                    vals_7 = _slice<object>(vals_7, (long)(0), (long)((vals_7.Length - 1)));
                    vals_7 = Enumerable.ToArray(vals_7.Append(new Dictionary<string, object>{{"kind", "op"}, {"op", op_10}, {"left", left_12}, {"right", right_11}}));
                }
                ops_6 = _slice<string>(ops_6, (long)(0), (long)((ops_6.Length - 1)));
            } else {
                while ((((ops_6.Length > 0) && (_idx(ops_6, (long)((ops_6.Length - 1))) != "(")) && (Program.precedence(_idx(ops_6, (long)((ops_6.Length - 1)))) >= Program.precedence(ch_9)))) {
                    string op_13 = _idx(ops_6, (long)((ops_6.Length - 1)));
                    ops_6 = _slice<string>(ops_6, (long)(0), (long)((ops_6.Length - 1)));
                    object right_14 = ((dynamic)vals_7)[(int)((vals_7.Length - 1))];
                    vals_7 = _slice<object>(vals_7, (long)(0), (long)((vals_7.Length - 1)));
                    object left_15 = ((dynamic)vals_7)[(int)((vals_7.Length - 1))];
                    vals_7 = _slice<object>(vals_7, (long)(0), (long)((vals_7.Length - 1)));
                    vals_7 = Enumerable.ToArray(vals_7.Append(new Dictionary<string, object>{{"kind", "op"}, {"op", op_13}, {"left", left_15}, {"right", right_14}}));
                }
                ops_6 = Enumerable.ToArray(ops_6.Append(ch_9));
            }
            i_8 = (i_8 + 1);
        };
        while ((ops_6.Length > 0)) {
            string op_16 = _idx(ops_6, (long)((ops_6.Length - 1)));
            ops_6 = _slice<string>(ops_6, (long)(0), (long)((ops_6.Length - 1)));
            object right_17 = ((dynamic)vals_7)[(int)((vals_7.Length - 1))];
            vals_7 = _slice<object>(vals_7, (long)(0), (long)((vals_7.Length - 1)));
            object left_18 = ((dynamic)vals_7)[(int)((vals_7.Length - 1))];
            vals_7 = _slice<object>(vals_7, (long)(0), (long)((vals_7.Length - 1)));
            vals_7 = Enumerable.ToArray(vals_7.Append(new Dictionary<string, object>{{"kind", "op"}, {"op", op_16}, {"left", left_18}, {"right", right_17}}));
        };
        return ((dynamic)vals_7)[(int)((vals_7.Length - 1))];
    }

    public static bool needParen(string parent_19, bool isRight_20, object child_21) {
        if ((((dynamic)(child_21))["kind"] != "op")) {
            return false;
        };
        BigInteger p_22 = Program.precedence(parent_19);
        BigInteger c_23 = Program.precedence(((dynamic)(child_21))["op"]);
        if ((c_23 < p_22)) {
            return true;
        };
        if ((c_23 > p_22)) {
            return false;
        };
        if ((((parent_19 == "-") && isRight_20) && ((((dynamic)(child_21))["op"] == "+") || (((dynamic)(child_21))["op"] == "-")))) {
            return true;
        };
        if ((((parent_19 == "/") && isRight_20) && ((((dynamic)(child_21))["op"] == "*") || (((dynamic)(child_21))["op"] == "/")))) {
            return true;
        };
        return false;
    }

    public static string formatRec(object node_24, string parent_25, bool isRight_26) {
        if ((((dynamic)(node_24))["kind"] != "op")) {
            return ((dynamic)(node_24))["val"];
        };
        string left_27 = Program.formatRec(((dynamic)(node_24))["left"], ((dynamic)(node_24))["op"], false);
        string right_28 = Program.formatRec(((dynamic)(node_24))["right"], ((dynamic)(node_24))["op"], true);
        string res_29 = ((((dynamic)(left_27)) + ((dynamic)(((dynamic)(node_24))["op"]))) + right_28);
        if (((parent_25 != "") && Program.needParen(parent_25, isRight_26, (object)node_24))) {
            res_29 = (("(" + res_29) + ")");
        };
        return res_29;
    }

    public static string makeNice(string s_30) {
        object root_31 = Program.parse(s_30);
        return Program.formatRec((object)root_31, "", false);
    }

    public static void main() {
        string tStr_32 = _input();
        if ((tStr_32 == "")) {
            return;
        };
        BigInteger t_33 = Program.parseIntStr(tStr_32);
        for (var __34 = 0; __34 < t_33; __34++) {
            string line_35 = _input();
            Console.WriteLine(Program._fmtTop(Program.makeNice(line_35)));
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
