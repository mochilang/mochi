// Generated by Mochi 0.10.74 (commit 594db7265a) on 2025-08-26 14:25 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger[] primes_12 = Program.precompute(32000);
    static long t_13 = _atoi(_input());
    static BigInteger case_idx_14 = 0;
    public static string[] split(string s_0, string sep_1) {
        string[] parts_2 = new string[]{};
        string cur_3 = "";
        BigInteger i_4 = 0;
        while ((i_4 < s_0.Length)) {
            if ((((sep_1.Length > 0) && ((i_4 + sep_1.Length) <= s_0.Length)) && (_substr(s_0, (long)(i_4), (long)((i_4 + sep_1.Length))) == sep_1))) {
                parts_2 = Enumerable.ToArray(parts_2.Append(cur_3));
                cur_3 = "";
                i_4 = (i_4 + sep_1.Length);
            } else {
                cur_3 = (cur_3 + _substr(s_0, (long)(i_4), (long)((i_4 + 1))));
                i_4 = (i_4 + 1);
            }
        };
        parts_2 = Enumerable.ToArray(parts_2.Append(cur_3));
        return parts_2;
    }

    public static BigInteger[] precompute(BigInteger limit_5) {
        bool[] sieve_6 = new bool[]{};
        for (var i_7 = 0; i_7 < (limit_5 + 1); i_7++) {
            sieve_6 = Enumerable.ToArray(sieve_6.Append(true));
        };
        sieve_6[(int)(0)] = false;
        sieve_6[(int)(1)] = false;
        BigInteger p_8 = 2;
        while (((p_8 * p_8) <= limit_5)) {
            if (_idx(sieve_6, (long)(p_8))) {
                BigInteger j_9 = (p_8 * p_8);
                while ((j_9 <= limit_5)) {
                    sieve_6[(int)(j_9)] = false;
                    j_9 = (j_9 + p_8);
                }
            }
            p_8 = (p_8 + 1);
        };
        BigInteger[] primes_10 = new BigInteger[]{};
        for (var i_11 = 2; i_11 < (limit_5 + 1); i_11++) {
            if (_idx(sieve_6, i_11)) {
                primes_10 = Enumerable.ToArray(primes_10.Append(i_11));
            }
        };
        return primes_10;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            while ((case_idx_14 < t_13)) {
                string line_15 = _input();
                string[] parts_16 = Program.split(line_15, " ");
                long m_17 = _atoi(_idx(parts_16, (long)(0)));
                long n_18 = _atoi(_idx(parts_16, (long)(1)));
                BigInteger size_19 = ((n_18 - m_17) + 1);
                bool[] segment_20 = new bool[]{};
                for (var i_21 = 0; i_21 < size_19; i_21++) {
                    segment_20 = Enumerable.ToArray(segment_20.Append(true));
                }
                foreach (BigInteger p_22 in primes_12) {
                    if (((p_22 * p_22) > n_18)) {
                        break;
                    }
                    BigInteger start_23 = (p_22 * p_22);
                    if ((start_23 < m_17)) {
                        BigInteger rem_24 = _mod(m_17, p_22);
                        if ((rem_24 == 0)) {
                            start_23 = m_17;
                        } else {
                            start_23 = (m_17 + (p_22 - rem_24));
                        }
                    }
                    BigInteger j_25 = start_23;
                    while ((j_25 <= n_18)) {
                        segment_20[(int)((j_25 - m_17))] = false;
                        j_25 = (j_25 + p_22);
                    }
                }
                if ((m_17 == 1)) {
                    segment_20[(int)(0)] = false;
                }
                BigInteger i_26 = 0;
                while ((i_26 < size_19)) {
                    if (_idx(segment_20, (long)(i_26))) {
                        Console.WriteLine(Program._fmtTop((i_26 + m_17)));
                    }
                    i_26 = (i_26 + 1);
                }
                if ((case_idx_14 < (t_13 - 1))) {
                    Console.WriteLine(Program._fmtTop(""));
                }
                case_idx_14 = (case_idx_14 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
