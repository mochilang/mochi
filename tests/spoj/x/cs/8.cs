// Generated by Mochi 0.10.74 (commit 9ecaae5c63) on 2025-08-27 07:05 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is System.Numerics.BigInteger bi) return (long)bi;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static string[] split(string s_0, string sep_1) {
        string[] parts_2 = new string[]{};
        string cur_3 = "";
        BigInteger i_4 = 0;
        while ((i_4 < s_0.Length)) {
            if ((((sep_1.Length > 0) && ((i_4 + sep_1.Length) <= s_0.Length)) && (_substr(s_0, (long)(i_4), (long)((i_4 + sep_1.Length))) == sep_1))) {
                parts_2 = Enumerable.ToArray(parts_2.Append(cur_3));
                cur_3 = "";
                i_4 = (i_4 + sep_1.Length);
            } else {
                cur_3 = (cur_3 + _substr(s_0, (long)(i_4), (long)((i_4 + 1))));
                i_4 = (i_4 + 1);
            }
        };
        parts_2 = Enumerable.ToArray(parts_2.Append(cur_3));
        return parts_2;
    }

    public static BigInteger[] parse_ints(string line_5) {
        string[] pieces_6 = Program.split(line_5, " ");
        BigInteger[] nums_7 = new BigInteger[]{};
        foreach (string p_8 in pieces_6) {
            if ((p_8.Length > 0)) {
                nums_7 = Enumerable.ToArray(nums_7.Append(_atoi(p_8)));
            }
        };
        return nums_7;
    }

    public static void main() {
        string tLine_9 = _input();
        if ((tLine_9 == "")) {
            return;
        };
        long t_10 = _atoi(tLine_9);
        BigInteger caseIdx_11 = 0;
        while ((caseIdx_11 < t_10)) {
            BigInteger[] header_12 = Program.parse_ints(_input());
            BigInteger s_13 = _idx(header_12, (long)(0));
            BigInteger c_14 = _idx(header_12, (long)(1));
            BigInteger[] seq_15 = Program.parse_ints(_input());
            BigInteger[][] levels_16 = new BigInteger[][]{};
            levels_16 = Enumerable.ToArray(levels_16.Append(seq_15));
            BigInteger[] current_17 = seq_15;
            while ((current_17.Length > 1)) {
                BigInteger[] next_18 = new BigInteger[]{};
                BigInteger i_19 = 0;
                while (((i_19 + 1) < current_17.Length)) {
                    next_18 = Enumerable.ToArray(next_18.Append((_idx(current_17, (long)((i_19 + 1))) - _idx(current_17, (long)(i_19)))));
                    i_19 = (i_19 + 1);
                }
                levels_16 = Enumerable.ToArray(levels_16.Append(next_18));
                current_17 = next_18;
            }
            BigInteger depth_20 = (levels_16.Length - 1);
            BigInteger step_21 = 0;
            BigInteger[] res_22 = new BigInteger[]{};
            while ((step_21 < c_14)) {
                BigInteger[] bottom_23 = _idx(levels_16, (long)(depth_20));
                bottom_23 = Enumerable.ToArray(bottom_23.Append(_idx(bottom_23, (long)((bottom_23.Length - 1)))));
                levels_16[(int)(depth_20)] = bottom_23;
                BigInteger level_24 = (depth_20 - 1);
                while ((level_24 >= 0)) {
                    BigInteger[] arr_25 = _idx(levels_16, (long)(level_24));
                    BigInteger[] arrBelow_26 = _idx(levels_16, (long)((level_24 + 1)));
                    BigInteger nextVal_27 = (_idx(arr_25, (long)((arr_25.Length - 1))) + _idx(arrBelow_26, (long)((arrBelow_26.Length - 1))));
                    arr_25 = Enumerable.ToArray(arr_25.Append(nextVal_27));
                    levels_16[(int)(level_24)] = arr_25;
                    level_24 = (level_24 - 1);
                }
                res_22 = Enumerable.ToArray(res_22.Append(_idx(_idx(levels_16, (long)(0)), (long)((_idx(levels_16, (long)(0)).Length - 1)))));
                step_21 = (step_21 + 1);
            }
            string out_28 = "";
            BigInteger i2_29 = 0;
            while ((i2_29 < res_22.Length)) {
                if ((i2_29 > 0)) {
                    out_28 = (out_28 + " ");
                }
                out_28 = (out_28 + _fmtStr(_idx(res_22, (long)(i2_29))));
                i2_29 = (i2_29 + 1);
            }
            Console.WriteLine(Program._fmtTop(out_28));
            caseIdx_11 = (caseIdx_11 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
