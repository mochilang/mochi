// Generated by Mochi 0.10.74 (commit 594db7265a) on 2025-08-26 14:25 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger precedence(string op_0) {
        if (((op_0 == "+") || (op_0 == "-"))) {
            return 1;
        };
        if (((op_0 == "*") || (op_0 == "/"))) {
            return 2;
        };
        if ((op_0 == "^")) {
            return 3;
        };
        return 0;
    }

    public static string popTop(string[] stack_1) {
        return _idx(stack_1, (long)((stack_1.Length - 1)));
    }

    public static string[] popStack(string[] stack_2) {
        string[] newStack_3 = new string[]{};
        BigInteger i_4 = 0;
        while ((i_4 < (stack_2.Length - 1))) {
            newStack_3 = Enumerable.ToArray(newStack_3.Append(_idx(stack_2, (long)(i_4))));
            i_4 = (i_4 + 1);
        };
        return newStack_3;
    }

    public static string toRPN(string expr_5) {
        string out_6 = "";
        string[] stack_7 = new string[]{};
        BigInteger i_8 = 0;
        while ((i_8 < expr_5.Length)) {
            string ch_9 = expr_5.Substring((int)(i_8), 1);
            if (((string.Compare(ch_9, "a") >= 0) && (string.Compare(ch_9, "z") <= 0))) {
                out_6 = (out_6 + ch_9);
            } else if ((ch_9 == "(")) {
                stack_7 = Enumerable.ToArray(stack_7.Append(ch_9));
            } else if ((ch_9 == ")")) {
                while ((stack_7.Length > 0)) {
                    string top_10 = Program.popTop(stack_7);
                    if ((top_10 == "(")) {
                        stack_7 = Program.popStack(stack_7);
                        break;
                    }
                    out_6 = (out_6 + top_10);
                    stack_7 = Program.popStack(stack_7);
                }
            } else {
                BigInteger prec_11 = Program.precedence(ch_9);
                while ((stack_7.Length > 0)) {
                    string top_12 = Program.popTop(stack_7);
                    if ((top_12 == "(")) {
                        break;
                    }
                    BigInteger topPrec_13 = Program.precedence(top_12);
                    if (((topPrec_13 > prec_11) || ((topPrec_13 == prec_11) && (ch_9 != "^")))) {
                        out_6 = (out_6 + top_12);
                        stack_7 = Program.popStack(stack_7);
                    } else {
                        break;
                    }
                }
                stack_7 = Enumerable.ToArray(stack_7.Append(ch_9));
            }
            i_8 = (i_8 + 1);
        };
        while ((stack_7.Length > 0)) {
            string top_14 = Program.popTop(stack_7);
            out_6 = (out_6 + top_14);
            stack_7 = Program.popStack(stack_7);
        };
        return out_6;
    }

    public static void main() {
        long t_15 = _atoi(_input());
        BigInteger i_16 = 0;
        while ((i_16 < t_15)) {
            string expr_17 = _input();
            Console.WriteLine(Program._fmtTop(Program.toRPN(expr_17)));
            i_16 = (i_16 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
