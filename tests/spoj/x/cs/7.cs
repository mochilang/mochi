// Generated by Mochi 0.10.74 (commit 9ecaae5c63) on 2025-08-27 07:05 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is System.Numerics.BigInteger bi) return (long)bi;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static string[] split(string s_0, string sep_1) {
        string[] parts_2 = new string[]{};
        string cur_3 = "";
        BigInteger i_4 = 0;
        while ((i_4 < s_0.Length)) {
            if ((((sep_1.Length > 0) && ((i_4 + sep_1.Length) <= s_0.Length)) && (_substr(s_0, (long)(i_4), (long)((i_4 + sep_1.Length))) == sep_1))) {
                parts_2 = Enumerable.ToArray(parts_2.Append(cur_3));
                cur_3 = "";
                i_4 = (i_4 + sep_1.Length);
            } else {
                cur_3 = (cur_3 + _substr(s_0, (long)(i_4), (long)((i_4 + 1))));
                i_4 = (i_4 + 1);
            }
        };
        parts_2 = Enumerable.ToArray(parts_2.Append(cur_3));
        return parts_2;
    }

    public static BigInteger[] parse_ints(string line_5) {
        string[] pieces_6 = Program.split(line_5, " ");
        BigInteger[] nums_7 = new BigInteger[]{};
        BigInteger i_8 = 0;
        while ((i_8 < pieces_6.Length)) {
            string p_9 = _idx(pieces_6, (long)(i_8));
            if ((p_9.Length > 0)) {
                nums_7 = Enumerable.ToArray(nums_7.Append(_atoi(p_9)));
            }
            i_8 = (i_8 + 1);
        };
        return nums_7;
    }

    public static BigInteger[] sort_unique(BigInteger[] arr_10) {
        BigInteger i_11 = 1;
        while ((i_11 < arr_10.Length)) {
            BigInteger j_12 = i_11;
            while (((j_12 > 0) && (_idx(arr_10, (long)((j_12 - 1))) > _idx(arr_10, (long)(j_12))))) {
                BigInteger tmp_13 = _idx(arr_10, (long)((j_12 - 1)));
                arr_10[(int)((j_12 - 1))] = _idx(arr_10, (long)(j_12));
                arr_10[(int)(j_12)] = tmp_13;
                j_12 = (j_12 - 1);
            }
            i_11 = (i_11 + 1);
        };
        BigInteger[] res_14 = new BigInteger[]{};
        i_11 = 0;
        while ((i_11 < arr_10.Length)) {
            if (((i_11 == 0) || (_idx(arr_10, (long)(i_11)) != _idx(arr_10, (long)((i_11 - 1)))))) {
                res_14 = Enumerable.ToArray(res_14.Append(_idx(arr_10, (long)(i_11))));
            }
            i_11 = (i_11 + 1);
        };
        return res_14;
    }

    public static bool pointInPoly(BigInteger[] xs_15, BigInteger[] ys_16, double px_17, double py_18) {
        bool inside_19 = false;
        BigInteger i_20 = 0;
        BigInteger j_21 = (xs_15.Length - 1);
        while ((i_20 < xs_15.Length)) {
            double xi_22 = (double)(_idx(xs_15, (long)(i_20)));
            double yi_23 = (double)(_idx(ys_16, (long)(i_20)));
            double xj_24 = (double)(_idx(xs_15, (long)(j_21)));
            double yj_25 = (double)(_idx(ys_16, (long)(j_21)));
            if ((((yi_23 > py_18) && (yj_25 <= py_18)) || ((yj_25 > py_18) && (yi_23 <= py_18)))) {
                double xint_26 = ((((xj_24 - xi_22) * (py_18 - yi_23)) / (yj_25 - yi_23)) + xi_22);
                if ((px_17 < xint_26)) {
                    inside_19 = (!inside_19);
                }
            }
            j_21 = i_20;
            i_20 = (i_20 + 1);
        };
        return inside_19;
    }

    public static bool[][][] make3DBool(BigInteger a_27, BigInteger b_28, BigInteger c_29) {
        bool[][][] arr_30 = new bool[][][]{};
        BigInteger i_31 = 0;
        while ((i_31 < a_27)) {
            bool[][] plane_32 = new bool[][]{};
            BigInteger j_33 = 0;
            while ((j_33 < b_28)) {
                bool[] row_34 = new bool[]{};
                BigInteger k_35 = 0;
                while ((k_35 < c_29)) {
                    row_34 = Enumerable.ToArray(row_34.Append(false));
                    k_35 = (k_35 + 1);
                }
                plane_32 = Enumerable.ToArray(plane_32.Append(row_34));
                j_33 = (j_33 + 1);
            }
            arr_30 = Enumerable.ToArray(arr_30.Append(plane_32));
            i_31 = (i_31 + 1);
        };
        return arr_30;
    }

    public static void main() {
        string tLine_36 = _input();
        if ((tLine_36 == "")) {
            return;
        };
        long t_37 = _atoi(tLine_36);
        BigInteger case_38 = 0;
        while ((case_38 < t_37)) {
            string fLine_39 = _input();
            long F_40 = _atoi(fLine_39);
            BigInteger[] xs_41 = new BigInteger[]{};
            BigInteger[] ys_42 = new BigInteger[]{};
            BigInteger[] zs_43 = new BigInteger[]{};
            xs_41 = Enumerable.ToArray(xs_41.Append(0));
            xs_41 = Enumerable.ToArray(xs_41.Append(1001));
            ys_42 = Enumerable.ToArray(ys_42.Append(0));
            ys_42 = Enumerable.ToArray(ys_42.Append(1001));
            zs_43 = Enumerable.ToArray(zs_43.Append(0));
            zs_43 = Enumerable.ToArray(zs_43.Append(1001));
            BigInteger[] faceXCoord_44 = new BigInteger[]{};
            BigInteger[][] faceYPoly_45 = new BigInteger[][]{};
            BigInteger[][] faceZPoly_46 = new BigInteger[][]{};
            BigInteger i_47 = 0;
            while ((i_47 < F_40)) {
                string line_48 = _input();
                BigInteger[] nums_49 = Program.parse_ints(line_48);
                BigInteger P_50 = _idx(nums_49, (long)(0));
                BigInteger[] ptsX_51 = new BigInteger[]{};
                BigInteger[] ptsY_52 = new BigInteger[]{};
                BigInteger[] ptsZ_53 = new BigInteger[]{};
                BigInteger j_54 = 0;
                while ((j_54 < P_50)) {
                    BigInteger x_55 = _idx(nums_49, (long)((1 + (3 * j_54))));
                    BigInteger y_56 = _idx(nums_49, (long)(((1 + (3 * j_54)) + 1)));
                    BigInteger z_57 = _idx(nums_49, (long)(((1 + (3 * j_54)) + 2)));
                    ptsX_51 = Enumerable.ToArray(ptsX_51.Append(x_55));
                    ptsY_52 = Enumerable.ToArray(ptsY_52.Append(y_56));
                    ptsZ_53 = Enumerable.ToArray(ptsZ_53.Append(z_57));
                    xs_41 = Enumerable.ToArray(xs_41.Append(x_55));
                    ys_42 = Enumerable.ToArray(ys_42.Append(y_56));
                    zs_43 = Enumerable.ToArray(zs_43.Append(z_57));
                    j_54 = (j_54 + 1);
                }
                bool allSame_58 = true;
                j_54 = 1;
                while ((j_54 < P_50)) {
                    if ((_idx(ptsX_51, (long)(j_54)) != _idx(ptsX_51, (long)(0)))) {
                        allSame_58 = false;
                    }
                    j_54 = (j_54 + 1);
                }
                if (allSame_58) {
                    faceXCoord_44 = Enumerable.ToArray(faceXCoord_44.Append(_idx(ptsX_51, (long)(0))));
                    faceYPoly_45 = Enumerable.ToArray(faceYPoly_45.Append(ptsY_52));
                    faceZPoly_46 = Enumerable.ToArray(faceZPoly_46.Append(ptsZ_53));
                }
                i_47 = (i_47 + 1);
            }
            xs_41 = Program.sort_unique(xs_41);
            ys_42 = Program.sort_unique(ys_42);
            zs_43 = Program.sort_unique(zs_43);
            BigInteger nx_59 = (xs_41.Length - 1);
            BigInteger ny_60 = (ys_42.Length - 1);
            BigInteger nz_61 = (zs_43.Length - 1);
            Dictionary<BigInteger, BigInteger> xIndex_62 = new Dictionary<BigInteger, BigInteger>{};
            i_47 = 0;
            while ((i_47 < xs_41.Length)) {
                xIndex_62[_idx(xs_41, (long)(i_47))] = i_47;
                i_47 = (i_47 + 1);
            }
            BigInteger[] dx_63 = new BigInteger[]{};
            i_47 = 0;
            while ((i_47 < nx_59)) {
                dx_63 = Enumerable.ToArray(dx_63.Append((_idx(xs_41, (long)((i_47 + 1))) - _idx(xs_41, (long)(i_47)))));
                i_47 = (i_47 + 1);
            }
            BigInteger[] dy_64 = new BigInteger[]{};
            i_47 = 0;
            while ((i_47 < ny_60)) {
                dy_64 = Enumerable.ToArray(dy_64.Append((_idx(ys_42, (long)((i_47 + 1))) - _idx(ys_42, (long)(i_47)))));
                i_47 = (i_47 + 1);
            }
            BigInteger[] dz_65 = new BigInteger[]{};
            i_47 = 0;
            while ((i_47 < nz_61)) {
                dz_65 = Enumerable.ToArray(dz_65.Append((_idx(zs_43, (long)((i_47 + 1))) - _idx(zs_43, (long)(i_47)))));
                i_47 = (i_47 + 1);
            }
            bool[][][] blockX_66 = Program.make3DBool(xs_41.Length, ny_60, nz_61);
            i_47 = 0;
            while ((i_47 < faceXCoord_44.Length)) {
                BigInteger coord_67 = _idx(faceXCoord_44, (long)(i_47));
                BigInteger[] polyY_68 = _idx(faceYPoly_45, (long)(i_47));
                BigInteger[] polyZ_69 = _idx(faceZPoly_46, (long)(i_47));
                BigInteger xi_70 = (xIndex_62.ContainsKey(coord_67) ? xIndex_62[coord_67] : BigInteger.Zero);
                BigInteger j_71 = 0;
                while ((j_71 < ny_60)) {
                    double cy_72 = ((double)((_idx(ys_42, (long)(j_71)) + _idx(ys_42, (long)((j_71 + 1))))) / 2.0);
                    BigInteger k_73 = 0;
                    while ((k_73 < nz_61)) {
                        double cz_74 = ((double)((_idx(zs_43, (long)(k_73)) + _idx(zs_43, (long)((k_73 + 1))))) / 2.0);
                        if (Program.pointInPoly(polyY_68, polyZ_69, cy_72, cz_74)) {
                            _idx(_idx(blockX_66, (long)(xi_70)), (long)(j_71))[(int)(k_73)] = true;
                        }
                        k_73 = (k_73 + 1);
                    }
                    j_71 = (j_71 + 1);
                }
                i_47 = (i_47 + 1);
            }
            bool[][][] solid_75 = Program.make3DBool(nx_59, ny_60, nz_61);
            BigInteger j2_76 = 0;
            while ((j2_76 < ny_60)) {
                BigInteger k2_77 = 0;
                while ((k2_77 < nz_61)) {
                    bool inside_78 = false;
                    BigInteger i2_79 = 0;
                    while ((i2_79 < nx_59)) {
                        if (_idx(_idx(_idx(blockX_66, (long)(i2_79)), (long)(j2_76)), (long)(k2_77))) {
                            inside_78 = (!inside_78);
                        }
                        if (inside_78) {
                            _idx(_idx(solid_75, (long)(i2_79)), (long)(j2_76))[(int)(k2_77)] = true;
                        }
                        i2_79 = (i2_79 + 1);
                    }
                    k2_77 = (k2_77 + 1);
                }
                j2_76 = (j2_76 + 1);
            }
            BigInteger volume_80 = 0;
            BigInteger i3_81 = 0;
            while ((i3_81 < nx_59)) {
                BigInteger j3_82 = 0;
                while ((j3_82 < ny_60)) {
                    BigInteger k3_83 = 0;
                    while ((k3_83 < nz_61)) {
                        if (_idx(_idx(_idx(solid_75, (long)(i3_81)), (long)(j3_82)), (long)(k3_83))) {
                            volume_80 = (volume_80 + ((_idx(dx_63, (long)(i3_81)) * _idx(dy_64, (long)(j3_82))) * _idx(dz_65, (long)(k3_83))));
                        }
                        k3_83 = (k3_83 + 1);
                    }
                    j3_82 = (j3_82 + 1);
                }
                i3_81 = (i3_81 + 1);
            }
            Console.WriteLine(Program._fmtTop((("The bulk is composed of " + _fmtStr(volume_80)) + " units.")));
            case_38 = (case_38 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
