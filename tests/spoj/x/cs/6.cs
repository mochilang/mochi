// Generated by Mochi 0.10.74 (commit 9ecaae5c63) on 2025-08-27 07:05 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is System.Numerics.BigInteger bi) return (long)bi;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<string, BigInteger> digitMap_0 = new Dictionary<string, BigInteger>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
    public static string repeat(string s_1, BigInteger n_2) {
        string r_3 = "";
        for (var __4 = 0; __4 < n_2; __4++) {
            r_3 = (r_3 + s_1);
        };
        return r_3;
    }

    public static string add_str(string a_5, string b_6) {
        BigInteger i_7 = (a_5.Length - 1);
        BigInteger j_8 = (b_6.Length - 1);
        BigInteger carry_9 = 0;
        string res_10 = "";
        while ((((i_7 >= 0) || (j_8 >= 0)) || (carry_9 > 0))) {
            long da_11 = 0;
            if ((i_7 >= 0)) {
                da_11 = (long)((digitMap_0.ContainsKey(_substr(a_5, (long)(i_7), (long)((i_7 + 1)))) ? digitMap_0[_substr(a_5, (long)(i_7), (long)((i_7 + 1)))] : BigInteger.Zero));
            }
            long db_12 = 0;
            if ((j_8 >= 0)) {
                db_12 = (long)((digitMap_0.ContainsKey(_substr(b_6, (long)(j_8), (long)((j_8 + 1)))) ? digitMap_0[_substr(b_6, (long)(j_8), (long)((j_8 + 1)))] : BigInteger.Zero));
            }
            BigInteger sum_13 = ((da_11 + db_12) + carry_9);
            res_10 = (_fmtStr(_mod(sum_13, 10)) + res_10);
            carry_9 = (sum_13 / 10);
            i_7 = (i_7 - 1);
            j_8 = (j_8 - 1);
        };
        return res_10;
    }

    public static string sub_str(string a_14, string b_15) {
        BigInteger i_16 = (a_14.Length - 1);
        BigInteger j_17 = (b_15.Length - 1);
        BigInteger borrow_18 = 0;
        string res_19 = "";
        while ((i_16 >= 0)) {
            BigInteger da_20 = ((long)((digitMap_0.ContainsKey(_substr(a_14, (long)(i_16), (long)((i_16 + 1)))) ? digitMap_0[_substr(a_14, (long)(i_16), (long)((i_16 + 1)))] : BigInteger.Zero)) - borrow_18);
            long db_21 = 0;
            if ((j_17 >= 0)) {
                db_21 = (long)((digitMap_0.ContainsKey(_substr(b_15, (long)(j_17), (long)((j_17 + 1)))) ? digitMap_0[_substr(b_15, (long)(j_17), (long)((j_17 + 1)))] : BigInteger.Zero));
            }
            if ((da_20 < db_21)) {
                da_20 = (da_20 + 10);
                borrow_18 = 1;
            } else {
                borrow_18 = 0;
            }
            BigInteger diff_22 = (da_20 - db_21);
            res_19 = (_fmtStr(diff_22) + res_19);
            i_16 = (i_16 - 1);
            j_17 = (j_17 - 1);
        };
        BigInteger k_23 = 0;
        while (((k_23 < res_19.Length) && (_substr(res_19, (long)(k_23), (long)((k_23 + 1))) == "0"))) {
            k_23 = (k_23 + 1);
        };
        if ((k_23 == res_19.Length)) {
            return "0";
        };
        return _substr(res_19, (long)(k_23), res_19.Length);
    }

    public static string mul_digit(string a_24, BigInteger d_25) {
        if ((d_25 == 0)) {
            return "0";
        };
        BigInteger i_26 = (a_24.Length - 1);
        BigInteger carry_27 = 0;
        string res_28 = "";
        while ((i_26 >= 0)) {
            BigInteger prod_29 = (((long)((digitMap_0.ContainsKey(_substr(a_24, (long)(i_26), (long)((i_26 + 1)))) ? digitMap_0[_substr(a_24, (long)(i_26), (long)((i_26 + 1)))] : BigInteger.Zero)) * d_25) + carry_27);
            res_28 = (_fmtStr(_mod(prod_29, 10)) + res_28);
            carry_27 = (prod_29 / 10);
            i_26 = (i_26 - 1);
        };
        if ((carry_27 > 0)) {
            res_28 = (_fmtStr(carry_27) + res_28);
        };
        BigInteger k_30 = 0;
        while (((k_30 < res_28.Length) && (_substr(res_28, (long)(k_30), (long)((k_30 + 1))) == "0"))) {
            k_30 = (k_30 + 1);
        };
        if ((k_30 == res_28.Length)) {
            return "0";
        };
        return _substr(res_28, (long)(k_30), res_28.Length);
    }

    public static Dictionary<string, object> mul_str(string a_31, string b_32) {
        string result_33 = "0";
        BigInteger shift_34 = 0;
        object[] parts_35 = new object[]{};
        BigInteger i_36 = (b_32.Length - 1);
        while ((i_36 >= 0)) {
            long d_37 = (long)((digitMap_0.ContainsKey(_substr(b_32, (long)(i_36), (long)((i_36 + 1)))) ? digitMap_0[_substr(b_32, (long)(i_36), (long)((i_36 + 1)))] : BigInteger.Zero));
            string part_38 = Program.mul_digit(a_31, d_37);
            parts_35 = Enumerable.ToArray(parts_35.Append(new Dictionary<string, object>{{"val", part_38}, {"shift", shift_34}}));
            string shifted_39 = part_38;
            for (var __40 = 0; __40 < shift_34; __40++) {
                shifted_39 = (shifted_39 + "0");
            }
            result_33 = Program.add_str(result_33, shifted_39);
            shift_34 = (shift_34 + 1);
            i_36 = (i_36 - 1);
        };
        return new Dictionary<string, object>{{"res", result_33}, {"parts", parts_35}};
    }

    public static string pad_left(string s_41, BigInteger total_42) {
        string r_43 = "";
        for (var __44 = 0; __44 < (total_42 - s_41.Length); __44++) {
            r_43 = (r_43 + " ");
        };
        return (r_43 + s_41);
    }

    public static void main() {
        string tStr_45 = _input();
        if ((tStr_45 == "")) {
            return;
        };
        long t_46 = _atoi(tStr_45);
        for (var __47 = 0; __47 < t_46; __47++) {
            string line_48 = _input();
            if ((line_48 == "")) {
                continue;
            }
            BigInteger idx_49 = 0;
            while ((idx_49 < line_48.Length)) {
                string ch_50 = _substr(line_48, (long)(idx_49), (long)((idx_49 + 1)));
                if ((((ch_50 == "+") || (ch_50 == "-")) || (ch_50 == "*"))) {
                    break;
                }
                idx_49 = (idx_49 + 1);
            }
            string a_51 = _substr(line_48, (long)(0), (long)(idx_49));
            string op_52 = _substr(line_48, (long)(idx_49), (long)((idx_49 + 1)));
            string b_53 = _substr(line_48, (long)((idx_49 + 1)), line_48.Length);
            string res_54 = "";
            object[] parts_55 = new object[]{};
            if ((op_52 == "+")) {
                res_54 = Program.add_str(a_51, b_53);
            } else if ((op_52 == "-")) {
                res_54 = Program.sub_str(a_51, b_53);
            } else {
                Dictionary<string, object> r_56 = Program.mul_str(a_51, b_53);
                res_54 = (string)((r_56.ContainsKey("res") ? r_56["res"] : null));
                parts_55 = ((r_56.ContainsKey("parts") ? r_56["parts"] : null) as object[]) ?? new object[]{};
            }
            long width_57 = a_51.Length;
            BigInteger secondLen_58 = (b_53.Length + 1);
            if ((secondLen_58 > width_57)) {
                width_57 = (long)(secondLen_58);
            }
            if ((res_54.Length > width_57)) {
                width_57 = res_54.Length;
            }
            foreach (object p_59 in parts_55) {
                long l_60 = (_len(((dynamic)p_59)["val"]) + _atoi(((dynamic)p_59)["shift"]));
                if ((l_60 > width_57)) {
                    width_57 = l_60;
                }
            }
            Console.WriteLine(Program._fmtTop(Program.pad_left(a_51, width_57)));
            Console.WriteLine(Program._fmtTop(Program.pad_left((op_52 + b_53), width_57)));
            long dash1_61 = 0;
            if ((op_52 == "*")) {
                if ((parts_55.Length > 0)) {
                    dash1_61 = (long)((b_53.Length + 1));
                    var firstPart_62 = ((dynamic)((dynamic)parts_55)[(int)(0)])["val"];
                    if ((_len(firstPart_62) > dash1_61)) {
                        dash1_61 = _len(firstPart_62);
                    }
                } else {
                    dash1_61 = (long)((b_53.Length + 1));
                    if ((res_54.Length > dash1_61)) {
                        dash1_61 = res_54.Length;
                    }
                }
            } else {
                dash1_61 = (long)((b_53.Length + 1));
                if ((res_54.Length > dash1_61)) {
                    dash1_61 = res_54.Length;
                }
            }
            Console.WriteLine(Program._fmtTop(Program.pad_left(Program.repeat("-", dash1_61), width_57)));
            if (((op_52 == "*") && (b_53.Length > 1))) {
                foreach (object p_63 in parts_55) {
                    var val_64 = ((dynamic)p_63)["val"];
                    long shift_65 = _atoi(((dynamic)p_63)["shift"]);
                    long spaces_66 = ((width_57 - shift_65) - _len(val_64));
                    string line_67 = "";
                    for (var __68 = 0; __68 < spaces_66; __68++) {
                        line_67 = (line_67 + " ");
                    }
                    line_67 = (((dynamic)(line_67)) + ((dynamic)(val_64)));
                    Console.WriteLine(Program._fmtTop(line_67));
                }
                Console.WriteLine(Program._fmtTop(Program.pad_left(Program.repeat("-", res_54.Length), width_57)));
            }
            Console.WriteLine(Program._fmtTop(Program.pad_left(res_54, width_57)));
            Console.WriteLine(Program._fmtTop(""));
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
