// Generated by Mochi 0.10.74 (commit 594db7265a) on 2025-08-26 14:25 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static string next_pal(string s_0) {
        Dictionary<string, BigInteger> digitMap_1 = new Dictionary<string, BigInteger>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        long n_2 = s_0.Length;
        BigInteger[] num_3 = new BigInteger[]{};
        for (var i_4 = 0; i_4 < n_2; i_4++) {
            num_3 = Enumerable.ToArray(num_3.Append((long)((digitMap_1.ContainsKey(_substr(s_0, i_4, (long)((i_4 + 1)))) ? digitMap_1[_substr(s_0, i_4, (long)((i_4 + 1)))] : BigInteger.Zero))));
        };
        bool all9_5 = true;
        foreach (BigInteger d_6 in num_3) {
            if ((d_6 != 9)) {
                all9_5 = false;
                break;
            }
        };
        if (all9_5) {
            string res_7 = "1";
            for (var __8 = 0; __8 < (n_2 - 1); __8++) {
                res_7 = (res_7 + "0");
            }
            res_7 = (res_7 + "1");
            return res_7;
        };
        BigInteger left_9 = ((n_2 / 2) - 1);
        BigInteger right_10 = ((_mod(n_2, 2) == 0) ? (n_2 / 2) : ((n_2 / 2) + 1));
        while ((((left_9 >= 0) && (right_10 < n_2)) && (_idx(num_3, (long)(left_9)) == _idx(num_3, (long)(right_10))))) {
            left_9 = (left_9 - 1);
            right_10 = (right_10 + 1);
        };
        bool smaller_11 = ((left_9 < 0) || (_idx(num_3, (long)(left_9)) < _idx(num_3, (long)(right_10))));
        left_9 = ((n_2 / 2) - 1);
        right_10 = ((_mod(n_2, 2) == 0) ? (n_2 / 2) : ((n_2 / 2) + 1));
        while ((left_9 >= 0)) {
            num_3[(int)(right_10)] = _idx(num_3, (long)(left_9));
            left_9 = (left_9 - 1);
            right_10 = (right_10 + 1);
        };
        if (smaller_11) {
            BigInteger carry_12 = 1;
            left_9 = ((n_2 / 2) - 1);
            if ((_mod(n_2, 2) == 1)) {
                BigInteger mid_13 = (n_2 / 2);
                num_3[(int)(mid_13)] = (_idx(num_3, (long)(mid_13)) + carry_12);
                carry_12 = (_idx(num_3, (long)(mid_13)) / 10);
                num_3[(int)(mid_13)] = _mod(_idx(num_3, (long)(mid_13)), 10);
                right_10 = (mid_13 + 1);
            } else {
                right_10 = (n_2 / 2);
            }
            while ((left_9 >= 0)) {
                num_3[(int)(left_9)] = (_idx(num_3, (long)(left_9)) + carry_12);
                carry_12 = (_idx(num_3, (long)(left_9)) / 10);
                num_3[(int)(left_9)] = _mod(_idx(num_3, (long)(left_9)), 10);
                num_3[(int)(right_10)] = _idx(num_3, (long)(left_9));
                left_9 = (left_9 - 1);
                right_10 = (right_10 + 1);
            }
        };
        string out_14 = "";
        foreach (BigInteger d_15 in num_3) {
            out_14 = (out_14 + _fmtStr(d_15));
        };
        return out_14;
    }

    public static BigInteger parseIntStr(string str_16) {
        Dictionary<string, BigInteger> digits_17 = new Dictionary<string, BigInteger>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        BigInteger i_18 = 0;
        BigInteger n_19 = 0;
        while ((i_18 < str_16.Length)) {
            n_19 = ((n_19 * 10) + (long)((digits_17.ContainsKey(_substr(str_16, (long)(i_18), (long)((i_18 + 1)))) ? digits_17[_substr(str_16, (long)(i_18), (long)((i_18 + 1)))] : BigInteger.Zero)));
            i_18 = (i_18 + 1);
        };
        return n_19;
    }

    public static void main() {
        string tStr_20 = _input();
        if ((tStr_20 == "")) {
            return;
        };
        BigInteger t_21 = Program.parseIntStr(tStr_20);
        for (var __22 = 0; __22 < t_21; __22++) {
            string s_23 = _input();
            Console.WriteLine(Program._fmtTop(Program.next_pal(s_23)));
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
