// Generated by Mochi transpiler v0.10.74 on 2025-08-26 14:39:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parseInt(_ str: String) -> Int {
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        var i = 0
        var n = 0
        while ((i < _int(((str).count)))) {
            let ch = String(_slice(Array(str), i, (i &+ 1)))
            if ((ch != " ")) {
                n = _int(((n &* 10) &+ (digits[ch] as? Int ?? 0)))
            }
            i = _int((i &+ 1))
        }
        return n
    }
    func parseInts(_ line: String) -> [Int] {
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        var nums: [Int] = ([] as! [Int])
        var cur = 0
        var inNum = false
        var i = 0
        while ((i < _int(((line).count)))) {
            let ch = String(_slice(Array(line), i, (i &+ 1)))
            if ((ch == " ")) {
                if (inNum) {
                    nums = (_append(nums, cur) as! [Int])
                    cur = 0
                    inNum = false
                }
            } else {
                cur = _int(((cur &* 10) &+ (digits[ch] as? Int ?? 0)))
                inNum = true
            }
            i = _int((i &+ 1))
        }
        if (inNum) {
            nums = (_append(nums, cur) as! [Int])
        }
        return nums
    }
    func abs(_ x: Int) -> Int {
        if ((x < 0)) {
            return (0 &- x)
        } else {
            return x
        }
    }
    func visible(_ h: [[Int]], _ r1: Int, _ c1: Int, _ r2: Int, _ c2: Int) -> Bool {
        if (((r1 == r2) && (c1 == c2))) {
            return true
        }
        let h0 = (_idx(_idx(h, r1), c1) as? Int ?? 0)
        let h1 = (_idx(_idx(h, r2), c2) as? Int ?? 0)
        var dr = (r2 &- r1)
        var dc = (c2 &- c1)
        var steps = _int(abs(dr))
        if ((_int(abs(dc)) > steps)) {
            steps = _int(abs(dc))
        }
        var x = (_num(c1) + 0.5)
        var y = (_num(r1) + 0.5)
        var z = (_num(h0) + 0.5)
        var incX = (_num(dc) / _num(steps))
        var incY = (_num(dr) / _num(steps))
        var incZ = (_num((h1 &- h0)) / _num(steps))
        var i = 1
        while ((i < steps)) {
            x = _num((x + incX))
            y = _num((y + incY))
            z = _num((z + incZ))
            let cx = _int(_int(x))
            let cy = _int(_int(y))
            if ((z <= _num(_idx(_idx(h, cy), cx)))) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func computeVis(_ h: [[Int]], _ P: Int, _ Q: Int, _ r: Int, _ c: Int) -> [[Bool]] {
        var vis: [[Bool]] = ([] as! [[Bool]])
        for i in 0..<P {
            var row: [Bool] = ([] as! [Bool])
            for j in 0..<Q {
                row = (_append(row, visible((h as! [[Int]]), i, j, r, c)) as! [Bool])
            }
            vis = (_append(vis, row) as! [[Bool]])
        }
        return vis
    }
    func bfs(_ h: [[Int]], _ vis1: [[Bool]], _ vis2: [[Bool]], _ P: Int, _ Q: Int, _ r1: Int, _ c1: Int, _ r2: Int, _ c2: Int) -> Int {
        var dist: [[Int]] = ([] as! [[Int]])
        for i in 0..<P {
            var row: [Int] = ([] as! [Int])
            for j in 0..<Q {
                row = (_append(row, (0 &- 1)) as! [Int])
            }
            dist = (_append(dist, row) as! [[Int]])
        }
        var qr: [Int] = ([] as! [Int])
        var qc: [Int] = ([] as! [Int])
        qr = (_append(qr, r1) as! [Int])
        qc = (_append(qc, c1) as! [Int])
        var _tmp3 = (_idx(dist, r1) as! [Int])
        _tmp3 = _set(_tmp3, c1, { let _tmp4 = 0; return _tmp4 }())
        dist = _set(dist, r1, { let _tmp5 = (_tmp3 as! [Int]); return _tmp5 }())
        var head = 0
        let drs: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, -1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        let dcs: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, -1)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int])
        while ((head < _int(((qr).count)))) {
            let r = (_idx(qr, head) as? Int ?? 0)
            let c = (_idx(qc, head) as? Int ?? 0)
            head = _int((head &+ 1))
            if (((r == r2) && (c == c2))) {
                break
            }
            let hcur = (_idx(_idx(h, r), c) as? Int ?? 0)
            var k = 0
            while ((k < 4)) {
                let nr = (r &+ (_idx(drs, k) as? Int ?? 0))
                let nc = (c &+ (_idx(dcs, k) as? Int ?? 0))
                if (((((nr >= 0) && (nr < P)) && (nc >= 0)) && (nc < Q))) {
                    if (((_idx(_idx(dist, nr), nc) as? Int ?? 0) == (0 &- 1))) {
                        let nh = (_idx(_idx(h, nr), nc) as? Int ?? 0)
                        if (((nh <= (hcur &+ 1)) && (nh >= (hcur &- 3)))) {
                            if (((_idx(_idx(vis1, nr), nc) as! Bool) || (_idx(_idx(vis2, nr), nc) as! Bool))) {
                                var _tmp4 = (_idx(dist, nr) as! [Int])
                                _tmp4 = _set(_tmp4, nc, { let _tmp6 = _int(((_idx(_idx(dist, r), c) as? Int ?? 0) &+ 1)); return _tmp6 }())
                                dist = _set(dist, nr, { let _tmp7 = (_tmp4 as! [Int]); return _tmp7 }())
                                qr = (_append(qr, nr) as! [Int])
                                qc = (_append(qc, nc) as! [Int])
                            }
                        }
                    }
                }
                k = _int((k &+ 1))
            }
        }
        return (_idx(_idx(dist, r2), c2) as? Int ?? 0)
    }
    func main() {
        let tStr = (readLine() ?? "0")
        if ((tStr == "")) {
            return
        }
        let T = _int(parseInt((tStr as! String)))
        for _ in 0..<T {
            var line = (readLine() ?? "0")
            while ((line == "")) {
                line = ((readLine() ?? "0") as! String)
            }
            let dims: [Int] = (parseInts((line as! String)) as! [Int])
            let P = (_idx(dims, 0) as? Int ?? 0)
            let Q = (_idx(dims, 1) as? Int ?? 0)
            var h: [[Int]] = ([] as! [[Int]])
            for i in 0..<P {
                let rowVals: [Int] = (parseInts(((readLine() ?? "0") as! String)) as! [Int])
                h = (_append(h, rowVals) as! [[Int]])
            }
            let posLine = (readLine() ?? "0")
            let pos: [Int] = (parseInts((posLine as! String)) as! [Int])
            let r1 = ((_idx(pos, 0) as? Int ?? 0) &- 1)
            let c1 = ((_idx(pos, 1) as? Int ?? 0) &- 1)
            let r2 = ((_idx(pos, 2) as? Int ?? 0) &- 1)
            let c2 = ((_idx(pos, 3) as? Int ?? 0) &- 1)
            let vis1: [[Bool]] = (computeVis((h as! [[Int]]), P, Q, r1, c1) as! [[Bool]])
            let vis2: [[Bool]] = (computeVis((h as! [[Int]]), P, Q, r2, c2) as! [[Bool]])
            let res = _int(bfs((h as! [[Int]]), (vis1 as! [[Bool]]), (vis2 as! [[Bool]]), P, Q, r1, c1, r2, c2))
            if ((res == (0 &- 1))) {
                print(_p("Mission impossible!"))
            } else {
                print(_p((_p((_p("The shortest path is ") + _p(_p(res)))) + _p(" steps long."))))
            }
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
