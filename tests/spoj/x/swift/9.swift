// Generated by Mochi transpiler v0.10.74 on 2025-08-27 07:27:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
    func parseInt(_ s: String) -> Int {
        var i = 0
        var n = 0
        while ((i < _int(((s).count)))) {
            n = _int(((n &* 10) &+ _int(_int(_idx(digits, String(_slice(Array(s), i, (i &+ 1))))!))))
            i = _int((i &+ 1))
        }
        return n
    }
    func split(_ s: String) -> [String] {
        var parts: [String] = ([] as! [String])
        var cur: String = ""
        var i = 0
        while ((i < _int(((s).count)))) {
            let ch = String(_slice(Array(s), i, (i &+ 1)))
            if ((ch == " ")) {
                if ((_int(((cur).count)) > 0)) {
                    parts = (_append(parts, cur) as! [String])
                    cur = ""
                }
            } else {
                cur = ((_p(cur) + _p(ch)) as! String)
            }
            i = _int((i &+ 1))
        }
        if ((_int(((cur).count)) > 0)) {
            parts = (_append(parts, cur) as! [String])
        }
        return parts
    }
    func absf(_ x: Double) -> Double {
        if ((x < 0.0)) {
            return -x
        } else {
            return x
        }
    }
    func sqrt(_ x: Double) -> Double {
        if ((x <= 0.0)) {
            return 0.0
        }
        var r = x
        var prev = 0.0
        while ((_num(absf(_num((r - prev)))) > 9.9999999999999998e-13)) {
            prev = _num(r)
            r = _num((_num((r + (x / r))) / 2.0))
        }
        return r
    }
    func makeBoolGrid(_ P: Int, _ Q: Int) -> [[Bool]] {
        var g: [[Bool]] = ([] as! [[Bool]])
        var i = 0
        while ((i < P)) {
            var row: [Bool] = ([] as! [Bool])
            var j = 0
            while ((j < Q)) {
                row = (_append(row, false) as! [Bool])
                j = _int((j &+ 1))
            }
            g = (_append(g, row) as! [[Bool]])
            i = _int((i &+ 1))
        }
        return g
    }
    func visible(_ grid: [[Int]], _ P: Int, _ Q: Int, _ R: Int, _ C: Int, _ BR: Int, _ BC: Int) -> Bool {
        let X1 = (_num(C) - 0.5)
        let Y1 = (_num(R) - 0.5)
        let Z1 = (_num(_idx(_idx(grid, _int((R &- 1))), _int((C &- 1)))) + 0.5)
        let X2 = (_num(BC) - 0.5)
        let Y2 = (_num(BR) - 0.5)
        let Z2 = (_num(_idx(_idx(grid, _int((BR &- 1))), _int((BC &- 1)))) + 0.5)
        let Dx = (X2 - X1)
        let Dy = (Y2 - Y1)
        let Dz = (Z2 - Z1)
        let dist = _num(sqrt(_num((((Dx * Dx) + (Dy * Dy)) + (Dz * Dz)))))
        var steps: Int = (_int(_int((dist * 20.0))) &+ 1)
        let stepT = (1.0 / _num(steps))
        var i = 1
        while ((i < steps)) {
            let t = (stepT * _num(i))
            let X = (X1 + (Dx * t))
            let Y = (Y1 + (Dy * t))
            let Z = (Z1 + (Dz * t))
            let rIdx = (Int(Y) &+ 1)
            let cIdx = (Int(X) &+ 1)
            if (((((rIdx < 1) || (rIdx > P)) || (cIdx < 1)) || (cIdx > Q))) {
                return false
            }
            let H = _num(_idx(_idx(grid, _int((rIdx &- 1))), _int((cIdx &- 1))))
            if ((Z <= H)) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func computeVis(_ grid: [[Int]], _ P: Int, _ Q: Int, _ BR: Int, _ BC: Int) -> [[Bool]] {
        var vis = (makeBoolGrid(P, Q) as! [[Bool]])
        var r = 1
        while ((r <= P)) {
            var c = 1
            while ((c <= Q)) {
                var _tmp4 = (_idx(vis, _int((r &- 1))) as! [Bool])
                _tmp4 = _set(_tmp4, _int((c &- 1)), { let _tmp6 = visible((grid as! [[Int]]), P, Q, r, c, BR, BC); return _tmp6 }())
                vis = _set(vis, _int((r &- 1)), { let _tmp7 = (_tmp4 as! [Bool]); return _tmp7 }())
                c = _int((c &+ 1))
            }
            r = _int((r &+ 1))
        }
        return vis
    }
    func bfs(_ grid: [[Int]], _ P: Int, _ Q: Int, _ R1: Int, _ C1: Int, _ R2: Int, _ C2: Int) -> Int {
        let vis1: [[Bool]] = (computeVis((grid as! [[Int]]), P, Q, R1, C1) as! [[Bool]])
        let vis2: [[Bool]] = (computeVis((grid as! [[Int]]), P, Q, R2, C2) as! [[Bool]])
        var visited = (makeBoolGrid(P, Q) as! [[Bool]])
        var qR: [Int] = ([] as! [Int])
        var qC: [Int] = ([] as! [Int])
        var qD: [Int] = ([] as! [Int])
        qR = (_append(qR, R1) as! [Int])
        qC = (_append(qC, C1) as! [Int])
        qD = (_append(qD, 0) as! [Int])
        var _tmp5 = (_idx(visited, _int((R1 &- 1))) as! [Bool])
        _tmp5 = _set(_tmp5, _int((C1 &- 1)), { let _tmp8 = true; return _tmp8 }())
        visited = _set(visited, _int((R1 &- 1)), { let _tmp9 = (_tmp5 as! [Bool]); return _tmp9 }())
        var head = 0
        while ((head < _int(((qR).count)))) {
            let r = (_idx(qR, head) as? Int ?? 0)
            let c = (_idx(qC, head) as? Int ?? 0)
            let d = (_idx(qD, head) as? Int ?? 0)
            if (((r == R2) && (c == C2))) {
                return d
            }
            let hr = (_idx(_idx(grid, _int((r &- 1))), _int((c &- 1))) as? Int ?? 0)
            var idx = 0
            while ((idx < 4)) {
                var nr = r
                var nc = c
                if ((idx == 0)) {
                    nr = _int((nr &- 1))
                }
                if ((idx == 1)) {
                    nr = _int((nr &+ 1))
                }
                if ((idx == 2)) {
                    nc = _int((nc &- 1))
                }
                if ((idx == 3)) {
                    nc = _int((nc &+ 1))
                }
                if (((((nr >= 1) && (nr <= P)) && (nc >= 1)) && (nc <= Q))) {
                    if (!(_idx(_idx(visited, _int((nr &- 1))), _int((nc &- 1))) ?? false)) {
                        let hn = (_idx(_idx(grid, _int((nr &- 1))), _int((nc &- 1))) as? Int ?? 0)
                        let diff = (hn &- hr)
                        if (((diff <= 1) && (diff >= (0 &- 3)))) {
                            if (((_idx(_idx(vis1, _int((nr &- 1))), _int((nc &- 1))) as! Bool) || (_idx(_idx(vis2, _int((nr &- 1))), _int((nc &- 1))) as! Bool))) {
                                var _tmp6 = (_idx(visited, _int((nr &- 1))) as! [Bool])
                                _tmp6 = _set(_tmp6, _int((nc &- 1)), { let _tmp10 = true; return _tmp10 }())
                                visited = _set(visited, _int((nr &- 1)), { let _tmp11 = (_tmp6 as! [Bool]); return _tmp11 }())
                                qR = (_append(qR, nr) as! [Int])
                                qC = (_append(qC, nc) as! [Int])
                                qD = (_append(qD, (d &+ 1)) as! [Int])
                            }
                        }
                    }
                }
                idx = _int((idx &+ 1))
            }
            head = _int((head &+ 1))
        }
        return -1
    }
    func main() {
        let tLine = (readLine() ?? "0")
        if ((tLine == "")) {
            return
        }
        let t = _int(parseInt((tLine as! String)))
        var `case` = 0
        while ((`case` < t)) {
            var line = (readLine() ?? "0")
            while ((line == "")) {
                line = ((readLine() ?? "0") as! String)
            }
            let pq: [String] = (split((line as! String)) as! [String])
            let P = _int(parseInt((_idx(pq, 0) as! String)))
            let Q = _int(parseInt((_idx(pq, 1) as! String)))
            var grid: [[Int]] = ([] as! [[Int]])
            var r = 0
            while ((r < P)) {
                let rowParts: [String] = (split(((readLine() ?? "0") as! String)) as! [String])
                var row: [Int] = ([] as! [Int])
                var c = 0
                while ((c < Q)) {
                    row = (_append(row, _int(parseInt((_idx(rowParts, c) as! String)))) as! [Int])
                    c = _int((c &+ 1))
                }
                grid = (_append(grid, row) as! [[Int]])
                r = _int((r &+ 1))
            }
            let coords: [String] = (split(((readLine() ?? "0") as! String)) as! [String])
            let R1 = _int(parseInt((_idx(coords, 0) as! String)))
            let C1 = _int(parseInt((_idx(coords, 1) as! String)))
            let R2 = _int(parseInt((_idx(coords, 2) as! String)))
            let C2 = _int(parseInt((_idx(coords, 3) as! String)))
            let res = _int(bfs((grid as! [[Int]]), P, Q, R1, C1, R2, C2))
            if ((res < 0)) {
                print(_p("Mission impossible!"))
            } else {
                print(_p((_p((_p("The shortest path is ") + _p(_p(res)))) + _p(" steps long."))))
            }
            `case` = _int((`case` &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
