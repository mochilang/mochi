// Generated by Mochi transpiler v0.10.74 on 2025-08-26 14:37:38 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split_numbers(_ line: String) -> [Int] {
        var nums: [Int] = ([] as! [Int])
        var current = ""
        var i = 0
        while ((i < _int(((line).count)))) {
            let ch = String(_slice(Array(line), i, (i &+ 1)))
            if ((ch == " ")) {
                if ((current != "")) {
                    nums = (_append(nums, _int(_int(current))) as! [Int])
                    current = ""
                }
            } else {
                current = ((_p(current) + _p(ch)) as! String)
            }
            i = _int((i &+ 1))
        }
        if ((current != "")) {
            nums = (_append(nums, _int(_int(current))) as! [Int])
        }
        return nums
    }
    func point_in_poly(_ u: [Int], _ v: [Int], _ x: Double, _ y: Double) -> Bool {
        var inside = false
        var n = _int(((u).count))
        var i = 0
        while ((i < n)) {
            let j = _int((((i &+ 1) == n) ? 0 : (i &+ 1)))
            let x1 = Double((_idx(u, i) as? Int ?? 0))
            let y1 = Double((_idx(v, i) as? Int ?? 0))
            let x2 = Double((_idx(u, j) as? Int ?? 0))
            let y2 = Double((_idx(v, j) as? Int ?? 0))
            if (((_num(y1) > y) != (_num(y2) > y))) {
                let xx = (_num(x1) + ((_num((_num(x2) - _num(x1))) * _num((y - _num(y1)))) / _num((_num(y2) - _num(y1)))))
                if ((x < _num(xx))) {
                    inside = ((!inside) as! Bool)
                }
            }
            i = _int((i &+ 1))
        }
        return inside
    }
    func make3d(_ a: Int, _ b: Int, _ c: Int) -> [[[Bool]]] {
        var arr: [[[Bool]]] = ([] as! [[[Bool]]])
        var i = 0
        while ((i < a)) {
            var plane: [[Bool]] = ([] as! [[Bool]])
            var j = 0
            while ((j < b)) {
                var row: [Bool] = ([] as! [Bool])
                var k = 0
                while ((k < c)) {
                    row = (_append(row, false) as! [Bool])
                    k = _int((k &+ 1))
                }
                plane = (_append(plane, row) as! [[Bool]])
                j = _int((j &+ 1))
            }
            arr = (_append(arr, plane) as! [[[Bool]]])
            i = _int((i &+ 1))
        }
        return arr
    }
    func main() {
        let t = _int(_int((readLine() ?? "0")))
        var `case` = 0
        while ((`case` < t)) {
            `case` = _int((`case` &+ 1))
            let f = _int(_int((readLine() ?? "0")))
            var faces: [[String: Any?]] = ([] as! [[String: Any?]])
            var maxC = 0
            var fi = 0
            while ((fi < f)) {
                let line = (readLine() ?? "0")
                let nums: [Int] = (split_numbers((line as! String)) as! [Int])
                let p = (_idx(nums, 0) as? Int ?? 0)
                var pts: [[Int]] = ([] as! [[Int]])
                var idx = 1
                var pi = 0
                while ((pi < p)) {
                    let x = (_idx(nums, idx) as? Int ?? 0)
                    let y = (_idx(nums, (idx &+ 1)) as? Int ?? 0)
                    let z = (_idx(nums, (idx &+ 2)) as? Int ?? 0)
                    if ((x > maxC)) {
                        maxC = Int(x)
                    }
                    if ((y > maxC)) {
                        maxC = Int(y)
                    }
                    if ((z > maxC)) {
                        maxC = Int(z)
                    }
                    pts = (_append(pts, ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, x)
                        _arr = _append(_arr, y)
                        _arr = _append(_arr, z)
                        return _arr
                    }() as! [Int])) as! [[Int]])
                    idx = _int((idx &+ 3))
                    pi = _int((pi &+ 1))
                }
                faces = (((_append(faces, ["pts": pts]) as! [[String: Any?]]) as! [Any?]) as! [[String: Any?]])
                fi = _int((fi &+ 1))
            }
            let N = (maxC &+ 1)
            var wallX = (make3d((N &+ 1), N, N) as! [[[Bool]]])
            var wallY = (make3d(N, (N &+ 1), N) as! [[[Bool]]])
            var wallZ = (make3d(N, N, (N &+ 1)) as! [[[Bool]]])
            for _item in faces as! [[String: Any]] {
                let face = _item as! [String: Any]
                let pts: [[Int]] = ((face[String("pts")] ?? nil) as! [[Int]])
                var xs: [Int] = ([] as! [Int])
                var ys: [Int] = ([] as! [Int])
                var zs: [Int] = ([] as! [Int])
                for p in pts {
                    xs = (_append(xs, _int(_idx(p, 0))) as! [Int])
                    ys = (_append(ys, _int(_idx(p, 1))) as! [Int])
                    zs = (_append(zs, _int(_idx(p, 2))) as! [Int])
                }
                var sameX = true
                var i = 1
                while ((i < _int(((xs).count)))) {
                    if (((_idx(xs, i) as? Int ?? 0) != (_idx(xs, 0) as? Int ?? 0))) {
                        sameX = false
                    }
                    i = _int((i &+ 1))
                }
                var sameY = true
                i = 1
                while ((i < _int(((ys).count)))) {
                    if (((_idx(ys, i) as? Int ?? 0) != (_idx(ys, 0) as? Int ?? 0))) {
                        sameY = false
                    }
                    i = _int((i &+ 1))
                }
                if (sameX) {
                    let x = (_idx(xs, 0) as? Int ?? 0)
                    var py: [Int] = ([] as! [Int])
                    var pz: [Int] = ([] as! [Int])
                    for j in 0..<_int(((pts).count)) {
                        py = (_append(py, _int(_idx(_idx(pts, j), 1))) as! [Int])
                        pz = (_append(pz, _int(_idx(_idx(pts, j), 2))) as! [Int])
                    }
                    var minY = (_idx(py, 0) as? Int ?? 0)
                    var maxY = (_idx(py, 0) as? Int ?? 0)
                    var minZ = (_idx(pz, 0) as? Int ?? 0)
                    var maxZ = (_idx(pz, 0) as? Int ?? 0)
                    for v in py {
                        if ((v < minY)) {
                            minY = Int(v)
                        }
                        if ((v > maxY)) {
                            maxY = Int(v)
                        }
                    }
                    for v in pz {
                        if ((v < minZ)) {
                            minZ = Int(v)
                        }
                        if ((v > maxZ)) {
                            maxZ = Int(v)
                        }
                    }
                    var y = minY
                    while ((y < maxY)) {
                        var z = minZ
                        while ((z < maxZ)) {
                            if (point_in_poly((py as! [Int]), (pz as! [Int]), _num((_num(Double(y)) + 0.5)), _num((_num(Double(z)) + 0.5)))) {
                                wallX[x][y][z] = true
                            }
                            z = _int((z &+ 1))
                        }
                        y = _int((y &+ 1))
                    }
                } else if (sameY) {
                    let y = (_idx(ys, 0) as? Int ?? 0)
                    var px: [Int] = ([] as! [Int])
                    var pz: [Int] = ([] as! [Int])
                    for j in 0..<_int(((pts).count)) {
                        px = (_append(px, _int(_idx(_idx(pts, j), 0))) as! [Int])
                        pz = (_append(pz, _int(_idx(_idx(pts, j), 2))) as! [Int])
                    }
                    var minX = (_idx(px, 0) as? Int ?? 0)
                    var maxX = (_idx(px, 0) as? Int ?? 0)
                    var minZ = (_idx(pz, 0) as? Int ?? 0)
                    var maxZ = (_idx(pz, 0) as? Int ?? 0)
                    for v in px {
                        if ((v < minX)) {
                            minX = Int(v)
                        }
                        if ((v > maxX)) {
                            maxX = Int(v)
                        }
                    }
                    for v in pz {
                        if ((v < minZ)) {
                            minZ = Int(v)
                        }
                        if ((v > maxZ)) {
                            maxZ = Int(v)
                        }
                    }
                    var x = minX
                    while ((x < maxX)) {
                        var z = minZ
                        while ((z < maxZ)) {
                            if (point_in_poly((px as! [Int]), (pz as! [Int]), _num((_num(Double(x)) + 0.5)), _num((_num(Double(z)) + 0.5)))) {
                                wallY[x][y][z] = true
                            }
                            z = _int((z &+ 1))
                        }
                        x = _int((x &+ 1))
                    }
                } else {
                    let z = (_idx(zs, 0) as? Int ?? 0)
                    var px: [Int] = ([] as! [Int])
                    var py: [Int] = ([] as! [Int])
                    for j in 0..<_int(((pts).count)) {
                        px = (_append(px, _int(_idx(_idx(pts, j), 0))) as! [Int])
                        py = (_append(py, _int(_idx(_idx(pts, j), 1))) as! [Int])
                    }
                    var minX = (_idx(px, 0) as? Int ?? 0)
                    var maxX = (_idx(px, 0) as? Int ?? 0)
                    var minY = (_idx(py, 0) as? Int ?? 0)
                    var maxY = (_idx(py, 0) as? Int ?? 0)
                    for v in px {
                        if ((v < minX)) {
                            minX = Int(v)
                        }
                        if ((v > maxX)) {
                            maxX = Int(v)
                        }
                    }
                    for v in py {
                        if ((v < minY)) {
                            minY = Int(v)
                        }
                        if ((v > maxY)) {
                            maxY = Int(v)
                        }
                    }
                    var x = minX
                    while ((x < maxX)) {
                        var y = minY
                        while ((y < maxY)) {
                            if (point_in_poly((px as! [Int]), (py as! [Int]), _num((_num(Double(x)) + 0.5)), _num((_num(Double(y)) + 0.5)))) {
                                wallZ[x][y][z] = true
                            }
                            y = _int((y &+ 1))
                        }
                        x = _int((x &+ 1))
                    }
                }
                
            }
            var visited = (make3d(N, N, N) as! [[[Bool]]])
            var queue: [[Int]] = ({
                var _arr: [[Int]] = []
                _arr = _append(_arr, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, 0)
                    _arr = _append(_arr, 0)
                    _arr = _append(_arr, 0)
                    return _arr
                }() as! [Int]))
                return _arr
            }() as! [[Int]])
            visited[0][0][0] = true
            var head = 0
            var outside = 0
            while ((head < _int(((queue).count)))) {
                let cur: [Int] = (_idx(queue, head) as! [Int])
                head = _int((head &+ 1))
                let x = _int(_idx(cur, 0))
                let y = _int(_idx(cur, 1))
                let z = _int(_idx(cur, 2))
                outside = _int((outside &+ 1))
                if ((((x > 0) && !(_idx(_idx(_idx(wallX, x), y), z) ?? false)) && !(_idx(_idx(_idx(visited, (x &- 1)), y), z) ?? false))) {
                    visited[(x &- 1)][y][z] = true
                    queue = (_append(queue, ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, (x &- 1))
                        _arr = _append(_arr, y)
                        _arr = _append(_arr, z)
                        return _arr
                    }() as! [Int])) as! [[Int]])
                }
                if ((((x < (N &- 1)) && !(_idx(_idx(_idx(wallX, (x &+ 1)), y), z) ?? false)) && !(_idx(_idx(_idx(visited, (x &+ 1)), y), z) ?? false))) {
                    visited[(x &+ 1)][y][z] = true
                    queue = (_append(queue, ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, (x &+ 1))
                        _arr = _append(_arr, y)
                        _arr = _append(_arr, z)
                        return _arr
                    }() as! [Int])) as! [[Int]])
                }
                if ((((y > 0) && !(_idx(_idx(_idx(wallY, x), y), z) ?? false)) && !(_idx(_idx(_idx(visited, x), (y &- 1)), z) ?? false))) {
                    visited[x][(y &- 1)][z] = true
                    queue = (_append(queue, ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, x)
                        _arr = _append(_arr, (y &- 1))
                        _arr = _append(_arr, z)
                        return _arr
                    }() as! [Int])) as! [[Int]])
                }
                if ((((y < (N &- 1)) && !(_idx(_idx(_idx(wallY, x), (y &+ 1)), z) ?? false)) && !(_idx(_idx(_idx(visited, x), (y &+ 1)), z) ?? false))) {
                    visited[x][(y &+ 1)][z] = true
                    queue = (_append(queue, ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, x)
                        _arr = _append(_arr, (y &+ 1))
                        _arr = _append(_arr, z)
                        return _arr
                    }() as! [Int])) as! [[Int]])
                }
                if ((((z > 0) && !(_idx(_idx(_idx(wallZ, x), y), z) ?? false)) && !(_idx(_idx(_idx(visited, x), y), (z &- 1)) ?? false))) {
                    visited[x][y][(z &- 1)] = true
                    queue = (_append(queue, ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, x)
                        _arr = _append(_arr, y)
                        _arr = _append(_arr, (z &- 1))
                        return _arr
                    }() as! [Int])) as! [[Int]])
                }
                if ((((z < (N &- 1)) && !(_idx(_idx(_idx(wallZ, x), y), (z &+ 1)) ?? false)) && !(_idx(_idx(_idx(visited, x), y), (z &+ 1)) ?? false))) {
                    visited[x][y][(z &+ 1)] = true
                    queue = (_append(queue, ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, x)
                        _arr = _append(_arr, y)
                        _arr = _append(_arr, (z &+ 1))
                        return _arr
                    }() as! [Int])) as! [[Int]])
                }
            }
            let total = ((N &* N) &* N)
            let volume = (total &- outside)
            print(_p((_p((_p("The bulk is composed of ") + _p(_p(volume)))) + _p(" units."))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
