// Generated by Mochi transpiler v0.10.74 on 2025-08-27 07:27:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split(_ s: String, _ sep: String) -> [String] {
        var parts: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while ((i < _int(((s).count)))) {
            if ((((_int(((sep).count)) > 0) && ((i &+ _int(((sep).count))) <= _int(((s).count)))) && (String(describing: String(_slice(Array(s), i, (i &+ _int(((sep).count)))))) == sep))) {
                parts = (_append(parts, cur) as! [String])
                cur = ""
                i = _int((i &+ _int(((sep).count))))
            } else {
                cur = ((_p(cur) + _p(String(_slice(Array(s), i, (i &+ 1))))) as! String)
                i = _int((i &+ 1))
            }
        }
        parts = (_append(parts, cur) as! [String])
        return parts
    }
    func parse_ints(_ line: String) -> [Int] {
        let pieces: [String] = (_split(line, " ") as! [String])
        var nums: [Int] = ([] as! [Int])
        var i = 0
        while ((i < _int(((pieces).count)))) {
            let p = (_idx(pieces, i) as! String)
            if ((_int(((p).count)) > 0)) {
                nums = (_append(nums, _int(p)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return nums
    }
    func sort_unique(_ arr: inout [Int]) -> [Int] {
        var i = 1
        while ((i < _int(((arr).count)))) {
            var j = i
            while (((j > 0) && ((_idx(arr, (j &- 1)) as? Int ?? 0) > (_idx(arr, j) as? Int ?? 0)))) {
                let tmp = (_idx(arr, (j &- 1)) as? Int ?? 0)
                arr = _set(arr, (j &- 1), { let _tmp8 = (_idx(arr, j) as? Int ?? 0); return _tmp8 }())
                arr = _set(arr, j, { let _tmp9 = Int(tmp); return _tmp9 }())
                j = _int((j &- 1))
            }
            i = _int((i &+ 1))
        }
        var res: [Int] = ([] as! [Int])
        i = 0
        while ((i < _int(((arr).count)))) {
            if (((i == 0) || ((_idx(arr, i) as? Int ?? 0) != (_idx(arr, (i &- 1)) as? Int ?? 0)))) {
                res = (_append(res, (_idx(arr, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func pointInPoly(_ xs: [Int], _ ys: [Int], _ px: Double, _ py: Double) -> Bool {
        var inside = false
        var i = 0
        var j = (_int(((xs).count)) &- 1)
        while ((i < _int(((xs).count)))) {
            let xi = _num(_idx(xs, i))
            let yi = _num(_idx(ys, i))
            let xj = _num(_idx(xs, j))
            let yj = _num(_idx(ys, j))
            if ((((yi > py) && (yj <= py)) || ((yj > py) && (yi <= py)))) {
                let xint = (((_num((xj - xi)) * _num((py - yi))) / _num((yj - yi))) + xi)
                if ((px < xint)) {
                    inside = ((!inside) as! Bool)
                }
            }
            j = Int(i)
            i = _int((i &+ 1))
        }
        return inside
    }
    func make3DBool(_ a: Int, _ b: Int, _ c: Int) -> [[[Bool]]] {
        var arr: [[[Bool]]] = ([] as! [[[Bool]]])
        var i = 0
        while ((i < a)) {
            var plane: [[Bool]] = ([] as! [[Bool]])
            var j = 0
            while ((j < b)) {
                var row: [Bool] = ([] as! [Bool])
                var k = 0
                while ((k < c)) {
                    row = (_append(row, false) as! [Bool])
                    k = _int((k &+ 1))
                }
                plane = (_append(plane, row) as! [[Bool]])
                j = _int((j &+ 1))
            }
            arr = (_append(arr, plane) as! [[[Bool]]])
            i = _int((i &+ 1))
        }
        return arr
    }
    func main() {
        let tLine = (readLine() ?? "0")
        if ((tLine == "")) {
            return
        }
        let t = _int(tLine)
        var `case` = 0
        while ((`case` < t)) {
            let fLine = (readLine() ?? "0")
            let F = _int(fLine)
            var xs: [Int] = ([] as! [Int])
            var ys: [Int] = ([] as! [Int])
            var zs: [Int] = ([] as! [Int])
            xs = (_append(xs, 0) as! [Int])
            xs = (_append(xs, 1001) as! [Int])
            ys = (_append(ys, 0) as! [Int])
            ys = (_append(ys, 1001) as! [Int])
            zs = (_append(zs, 0) as! [Int])
            zs = (_append(zs, 1001) as! [Int])
            var faceXCoord: [Int] = ([] as! [Int])
            var faceYPoly: [[Int]] = ([] as! [[Int]])
            var faceZPoly: [[Int]] = ([] as! [[Int]])
            var i = 0
            while ((i < F)) {
                let line = (readLine() ?? "0")
                let nums: [Int] = (parse_ints((line as! String)) as! [Int])
                let P = (_idx(nums, 0) as? Int ?? 0)
                var ptsX: [Int] = ([] as! [Int])
                var ptsY: [Int] = ([] as! [Int])
                var ptsZ: [Int] = ([] as! [Int])
                var j = 0
                while ((j < P)) {
                    let x = (_idx(nums, (1 &+ (3 &* j))) as? Int ?? 0)
                    let y = (_idx(nums, ((1 &+ (3 &* j)) &+ 1)) as? Int ?? 0)
                    let z = (_idx(nums, ((1 &+ (3 &* j)) &+ 2)) as? Int ?? 0)
                    ptsX = (_append(ptsX, x) as! [Int])
                    ptsY = (_append(ptsY, y) as! [Int])
                    ptsZ = (_append(ptsZ, z) as! [Int])
                    xs = (_append(xs, x) as! [Int])
                    ys = (_append(ys, y) as! [Int])
                    zs = (_append(zs, z) as! [Int])
                    j = _int((j &+ 1))
                }
                var allSame = true
                j = 1
                while ((j < P)) {
                    if (((_idx(ptsX, j) as? Int ?? 0) != (_idx(ptsX, 0) as? Int ?? 0))) {
                        allSame = false
                    }
                    j = _int((j &+ 1))
                }
                if (allSame) {
                    faceXCoord = (_append(faceXCoord, (_idx(ptsX, 0) as? Int ?? 0)) as! [Int])
                    faceYPoly = (_append(faceYPoly, ptsY) as! [[Int]])
                    faceZPoly = (_append(faceZPoly, ptsZ) as! [[Int]])
                }
                i = _int((i &+ 1))
            }
            xs = (sort_unique(&xs) as! [Int])
            ys = (sort_unique(&ys) as! [Int])
            zs = (sort_unique(&zs) as! [Int])
            let nx = (_int(((xs).count)) &- 1)
            let ny = (_int(((ys).count)) &- 1)
            let nz = (_int(((zs).count)) &- 1)
            var xIndex: [Int: Int] = ([:] as! [Int: Int])
            i = 0
            while ((i < _int(((xs).count)))) {
                xIndex = _set(xIndex, (_idx(xs, i) as? Int ?? 0), { let _tmp10 = Int(i); return _tmp10 }())
                i = _int((i &+ 1))
            }
            var dx: [Int] = ([] as! [Int])
            i = 0
            while ((i < nx)) {
                dx = (_append(dx, ((_idx(xs, (i &+ 1)) as? Int ?? 0) &- (_idx(xs, i) as? Int ?? 0))) as! [Int])
                i = _int((i &+ 1))
            }
            var dy: [Int] = ([] as! [Int])
            i = 0
            while ((i < ny)) {
                dy = (_append(dy, ((_idx(ys, (i &+ 1)) as? Int ?? 0) &- (_idx(ys, i) as? Int ?? 0))) as! [Int])
                i = _int((i &+ 1))
            }
            var dz: [Int] = ([] as! [Int])
            i = 0
            while ((i < nz)) {
                dz = (_append(dz, ((_idx(zs, (i &+ 1)) as? Int ?? 0) &- (_idx(zs, i) as? Int ?? 0))) as! [Int])
                i = _int((i &+ 1))
            }
            var blockX = (make3DBool(_int(((xs).count)), ny, nz) as! [[[Bool]]])
            i = 0
            while ((i < _int(((faceXCoord).count)))) {
                let coord = (_idx(faceXCoord, i) as? Int ?? 0)
                let polyY: [Int] = (_idx(faceYPoly, i) as! [Int])
                let polyZ: [Int] = (_idx(faceZPoly, i) as! [Int])
                let xi = ((xIndex[coord] ?? 0) as? Int ?? 0)
                var j = 0
                while ((j < ny)) {
                    let cy = (_num(((_idx(ys, j) as? Int ?? 0) &+ (_idx(ys, (j &+ 1)) as? Int ?? 0))) / 2.0)
                    var k = 0
                    while ((k < nz)) {
                        let cz = (_num(((_idx(zs, k) as? Int ?? 0) &+ (_idx(zs, (k &+ 1)) as? Int ?? 0))) / 2.0)
                        if (pointInPoly((polyY as! [Int]), (polyZ as! [Int]), _num(cy), _num(cz))) {
                            var _tmp5 = (_idx(blockX, xi) as! [[Bool]])
                            var _tmp6 = (_idx(_tmp5, j) as! [Bool])
                            _tmp6 = _set(_tmp6, k, { let _tmp11 = true; return _tmp11 }())
                            _tmp5 = _set(_tmp5, j, { let _tmp12 = (_tmp6 as! [Bool]); return _tmp12 }())
                            blockX = _set(blockX, xi, { let _tmp13 = (_tmp5 as! [[Bool]]); return _tmp13 }())
                        }
                        k = _int((k &+ 1))
                    }
                    j = _int((j &+ 1))
                }
                i = _int((i &+ 1))
            }
            var solid = (make3DBool(nx, ny, nz) as! [[[Bool]]])
            var j2 = 0
            while ((j2 < ny)) {
                var k2 = 0
                while ((k2 < nz)) {
                    var inside = false
                    var i2 = 0
                    while ((i2 < nx)) {
                        if ((_idx(_idx(_idx(blockX, i2), j2), k2) as! Bool)) {
                            inside = ((!inside) as! Bool)
                        }
                        if (inside) {
                            var _tmp7 = (_idx(solid, i2) as! [[Bool]])
                            var _tmp8 = (_idx(_tmp7, j2) as! [Bool])
                            _tmp8 = _set(_tmp8, k2, { let _tmp14 = true; return _tmp14 }())
                            _tmp7 = _set(_tmp7, j2, { let _tmp15 = (_tmp8 as! [Bool]); return _tmp15 }())
                            solid = _set(solid, i2, { let _tmp16 = (_tmp7 as! [[Bool]]); return _tmp16 }())
                        }
                        i2 = _int((i2 &+ 1))
                    }
                    k2 = _int((k2 &+ 1))
                }
                j2 = _int((j2 &+ 1))
            }
            var volume = 0
            var i3 = 0
            while ((i3 < nx)) {
                var j3 = 0
                while ((j3 < ny)) {
                    var k3 = 0
                    while ((k3 < nz)) {
                        if ((_idx(_idx(_idx(solid, i3), j3), k3) as! Bool)) {
                            volume = _int((volume &+ (((_idx(dx, i3) as? Int ?? 0) &* (_idx(dy, j3) as? Int ?? 0)) &* (_idx(dz, k3) as? Int ?? 0))))
                        }
                        k3 = _int((k3 &+ 1))
                    }
                    j3 = _int((j3 &+ 1))
                }
                i3 = _int((i3 &+ 1))
            }
            print(_p((_p((_p("The bulk is composed of ") + _p(_p(volume)))) + _p(" units."))))
            `case` = _int((`case` &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
