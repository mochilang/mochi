// Generated by Mochi transpiler v0.10.74 on 2025-08-26 14:30:38 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _repeat(_ s: String, _ n: Int) -> String {
    if n <= 0 { return "" }
    return String(repeating: s, count: n)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let digitMap = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
    func `repeat`(_ s: String, _ n: Int) -> String {
        var r = ""
        for _ in 0..<n {
            r = ((_p(r) + _p(s)) as! String)
        }
        return r
    }
    func add_str(_ a: String, _ b: String) -> String {
        var i = (_int(((a).count)) &- 1)
        var j = (_int(((b).count)) &- 1)
        var carry = 0
        var res = ""
        while ((((i >= 0) || (j >= 0)) || (carry > 0))) {
            var da = 0
            if ((i >= 0)) {
                da = _int(_int(_idx(digitMap, String(_slice(Array(a), i, (i &+ 1))))!))
            }
            var db = 0
            if ((j >= 0)) {
                db = _int(_int(_idx(digitMap, String(_slice(Array(b), j, (j &+ 1))))!))
            }
            var sum = ((da &+ db) &+ carry)
            res = ((_p(_p(((sum % 10 + 10) % 10))) + _p(res)) as! String)
            carry = _int(Int((Double(sum) / Double(10)).rounded(.down)))
            i = _int((i &- 1))
            j = _int((j &- 1))
        }
        return res
    }
    func sub_str(_ a: String, _ b: String) -> String {
        var i = (_int(((a).count)) &- 1)
        var j = (_int(((b).count)) &- 1)
        var borrow = 0
        var res = ""
        while ((i >= 0)) {
            var da = (_int(_idx(digitMap, String(_slice(Array(a), i, (i &+ 1))))!) &- borrow)
            var db = 0
            if ((j >= 0)) {
                db = _int(_int(_idx(digitMap, String(_slice(Array(b), j, (j &+ 1))))!))
            }
            if ((da < db)) {
                da = _int((da &+ 10))
                borrow = 1
            } else {
                borrow = 0
            }
            var diff = (da &- db)
            res = ((_p(_p(diff)) + _p(res)) as! String)
            i = _int((i &- 1))
            j = _int((j &- 1))
        }
        var k = 0
        while (((k < _int(((res).count))) && (String(_slice(Array(res), k, (k &+ 1))) == "0"))) {
            k = _int((k &+ 1))
        }
        if ((k == _int(((res).count)))) {
            return "0"
        }
        return String(_slice(Array(res), k, Array(res).count))
    }
    func mul_digit(_ a: String, _ d: Int) -> String {
        if ((d == 0)) {
            return "0"
        }
        var i = (_int(((a).count)) &- 1)
        var carry = 0
        var res = ""
        while ((i >= 0)) {
            var prod = ((_int(_idx(digitMap, String(_slice(Array(a), i, (i &+ 1))))!) &* d) &+ carry)
            res = ((_p(_p(((prod % 10 + 10) % 10))) + _p(res)) as! String)
            carry = _int(Int((Double(prod) / Double(10)).rounded(.down)))
            i = _int((i &- 1))
        }
        if ((carry > 0)) {
            res = ((_p(_p(carry)) + _p(res)) as! String)
        }
        var k = 0
        while (((k < _int(((res).count))) && (String(_slice(Array(res), k, (k &+ 1))) == "0"))) {
            k = _int((k &+ 1))
        }
        if ((k == _int(((res).count)))) {
            return "0"
        }
        return String(_slice(Array(res), k, Array(res).count))
    }
    func mul_str(_ a: String, _ b: String) -> [String: Any?] {
        var result = "0"
        var shift = 0
        var parts: [Any?] = []
        var i = (_int(((b).count)) &- 1)
        while ((i >= 0)) {
            let d = _int(_idx(digitMap, String(_slice(Array(b), i, (i &+ 1))))!)
            let part = String(describing: mul_digit((a as! String), d))
            parts = (((_append(parts, ["val": part, "shift": shift]) as! [Any?]) as! [Any]) as! [Any?])
            var shifted = part
            for _ in 0..<shift {
                shifted = ((_p(shifted) + _p("0")) as! String)
            }
            result = String(describing: add_str((result as! String), (shifted as! String)))
            shift = _int((shift &+ 1))
            i = _int((i &- 1))
        }
        return (["res": result, "parts": parts] as! [String: Any?])
    }
    func pad_left(_ s: String, _ total: Int) -> String {
        var r = ""
        for _ in 0..<_int((total &- _int(((s).count)))) {
            r = ((_p(r) + _p(" ")) as! String)
        }
        return (_p(r) + _p(s))
    }
    func main() {
        let tStr = (readLine() ?? "0")
        if ((tStr == "")) {
            return
        }
        let t = _int(_int(tStr))
        for _ in 0..<t {
            var line = (readLine() ?? "0")
            if ((line == "")) {
                continue
            }
            var idx = 0
            while ((idx < _int(((line).count)))) {
                let ch = String(_slice(Array(line), idx, (idx &+ 1)))
                if ((((ch == "+") || (ch == "-")) || (ch == "*"))) {
                    break
                }
                idx = _int((idx &+ 1))
            }
            let a = String(_slice(Array(line), 0, idx))
            let op = String(_slice(Array(line), idx, (idx &+ 1)))
            let b = String(_slice(Array(line), (idx &+ 1), Array(line).count))
            var res = ""
            var parts: [Any?] = []
            if ((op == "+")) {
                res = String(describing: add_str((a as! String), (b as! String)))
            } else if ((op == "-")) {
                res = String(describing: sub_str((a as! String), (b as! String)))
            } else {
                let r: [String: Any?] = (mul_str((a as! String), (b as! String)) as! [String: Any?])
                res = ((r[String("res")] ?? nil) as! String)
                parts = ((r[String("parts")] ?? nil) as! [Any?])
            }
            
            var width = _int(((a).count))
            let secondLen = (_int(((b).count)) &+ 1)
            if ((secondLen > width)) {
                width = Int(secondLen)
            }
            if ((_int(((res).count)) > width)) {
                width = _int(((res).count))
            }
            for p in parts {
                let l = (_int((((_idx((p as! [String: Any]), "val") as! String)).count)) &+ _int(_int(_idx((p as! [String: Any]), "shift"))))
                if ((l > width)) {
                    width = Int(l)
                }
            }
            print(_p(String(describing: pad_left((a as! String), width))))
            print(_p(String(describing: pad_left(((_p(op) + _p(b)) as! String), width))))
            var dash1 = 0
            if ((op == "*")) {
                if ((_int(((parts).count)) > 0)) {
                    dash1 = _int((_int(((b).count)) &+ 1))
                    let firstPart = (((_idx(parts, 0) as! [String: Any?])[String("val")] ?? nil) as! String)
                    if ((_int(((firstPart).count)) > dash1)) {
                        dash1 = _int(((firstPart).count))
                    }
                } else {
                    dash1 = _int((_int(((b).count)) &+ 1))
                    if ((_int(((res).count)) > dash1)) {
                        dash1 = _int(((res).count))
                    }
                }
            } else {
                dash1 = _int((_int(((b).count)) &+ 1))
                if ((_int(((res).count)) > dash1)) {
                    dash1 = _int(((res).count))
                }
            }
            print(_p(String(describing: pad_left(String(describing: _repeat("-", dash1)), width))))
            if (((op == "*") && (_int(((b).count)) > 1))) {
                for p in parts {
                    let val = (_idx((p as! [String: Any]), "val") as! String)
                    let shift = _int(_idx((p as! [String: Any]), "shift"))
                    let spaces = ((width &- shift) &- _int(((val).count)))
                    var line = ""
                    for _ in 0..<spaces {
                        line = ((_p(line) + _p(" ")) as! String)
                    }
                    line = ((_p(line) + _p(val)) as! String)
                    print(_p(line))
                }
                print(_p(String(describing: pad_left(String(describing: _repeat("-", _int(((res).count)))), width))))
            }
            print(_p(String(describing: pad_left((res as! String), width))))
            print(_p(""))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
