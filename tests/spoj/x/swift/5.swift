// Generated by Mochi transpiler v0.10.74 on 2025-08-26 14:28:51 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func next_pal(_ s: String) -> String {
        let digitMap = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        var n = _int(((s).count))
        var num: [Int] = ([] as! [Int])
        for i in 0..<n {
            num = (_append(num, _int(_idx(digitMap, String(_slice(Array(s), i, (i &+ 1))))!)) as! [Int])
        }
        var all9 = true
        for d in num {
            if ((d != 9)) {
                all9 = false
                break
            }
        }
        if (all9) {
            var res = "1"
            for _ in 0..<_int((n &- 1)) {
                res = ((_p(res) + _p("0")) as! String)
            }
            res = ((_p(res) + _p("1")) as! String)
            return res
        }
        var left = (Int((Double(n) / Double(2)).rounded(.down)) &- 1)
        var right = _int(((((n % 2 + 2) % 2) == 0) ? Int((Double(n) / Double(2)).rounded(.down)) : (Int((Double(n) / Double(2)).rounded(.down)) &+ 1)))
        while ((((left >= 0) && (right < n)) && ((_idx(num, left) as? Int ?? 0) == (_idx(num, right) as? Int ?? 0)))) {
            left = _int((left &- 1))
            right = _int((right &+ 1))
        }
        var smaller = ((left < 0) || ((_idx(num, left) as? Int ?? 0) < (_idx(num, right) as? Int ?? 0)))
        left = _int((Int((Double(n) / Double(2)).rounded(.down)) &- 1))
        right = _int(((((n % 2 + 2) % 2) == 0) ? Int((Double(n) / Double(2)).rounded(.down)) : (Int((Double(n) / Double(2)).rounded(.down)) &+ 1)))
        while ((left >= 0)) {
            num = _set(num, right, { let _tmp0 = (_idx(num, left) as? Int ?? 0); return _tmp0 }())
            left = _int((left &- 1))
            right = _int((right &+ 1))
        }
        if (smaller) {
            var carry = 1
            left = _int((Int((Double(n) / Double(2)).rounded(.down)) &- 1))
            if ((((n % 2 + 2) % 2) == 1)) {
                var mid = Int((Double(n) / Double(2)).rounded(.down))
                num = _set(num, mid, { let _tmp1 = _int(((_idx(num, mid) as? Int ?? 0) &+ carry)); return _tmp1 }())
                carry = _int(Int((Double((_idx(num, mid) as? Int ?? 0)) / Double(10)).rounded(.down)))
                num = _set(num, mid, { let _tmp2 = _int((((_idx(num, mid) as? Int ?? 0) % 10 + 10) % 10)); return _tmp2 }())
                right = _int((mid &+ 1))
            } else {
                right = _int(Int((Double(n) / Double(2)).rounded(.down)))
            }
            while ((left >= 0)) {
                num = _set(num, left, { let _tmp3 = _int(((_idx(num, left) as? Int ?? 0) &+ carry)); return _tmp3 }())
                carry = _int(Int((Double((_idx(num, left) as? Int ?? 0)) / Double(10)).rounded(.down)))
                num = _set(num, left, { let _tmp4 = _int((((_idx(num, left) as? Int ?? 0) % 10 + 10) % 10)); return _tmp4 }())
                num = _set(num, right, { let _tmp5 = (_idx(num, left) as? Int ?? 0); return _tmp5 }())
                left = _int((left &- 1))
                right = _int((right &+ 1))
            }
        }
        var out = ""
        for d in num {
            out = ((_p(out) + _p(_p(d))) as! String)
        }
        return out
    }
    func parseIntStr(_ str: String) -> Int {
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        var i = 0
        var n = 0
        while ((i < _int(((str).count)))) {
            n = _int(((n &* 10) &+ _int(_int(_idx(digits, String(_slice(Array(str), i, (i &+ 1))))!))))
            i = _int((i &+ 1))
        }
        return n
    }
    func main() {
        let tStr = (readLine() ?? "0")
        if ((tStr == "")) {
            return
        }
        let t = _int(Int(String(describing: (tStr as! String)))!)
        for _ in 0..<t {
            let s = (readLine() ?? "0")
            print(_p(String(describing: next_pal((s as! String)))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
