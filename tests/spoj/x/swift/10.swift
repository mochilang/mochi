// Generated by Mochi transpiler v0.10.74 on 2025-08-27 07:31:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parseIntStr(_ str: String) -> Int {
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        var i = 0
        var n = 0
        while ((i < _int(((str).count)))) {
            n = _int(((n &* 10) &+ _int(_int(_idx(digits, String(_slice(Array(str), i, (i &+ 1))))!))))
            i = _int((i &+ 1))
        }
        return n
    }
    func precedence(_ op: String) -> Int {
        if (((op == "+") || (op == "-"))) {
            return 1
        }
        if (((op == "*") || (op == "/"))) {
            return 2
        }
        return 0
    }
    func parse(_ s: String) -> Any? {
        var ops: [String] = ([] as! [String])
        var vals: [Any?] = []
        var i = 0
        while ((i < _int(((s).count)))) {
            let ch = String(_slice(Array(s), i, (i &+ 1)))
            if (((ch >= "a") && (ch <= "z"))) {
                vals = (((_append(vals, ["kind": "var", "val": ch]) as! [Any?]) as! [Any]) as! [Any?])
            } else if ((ch == "(")) {
                ops = (_append(ops, ch) as! [String])
            } else if ((ch == ")")) {
                while (((_int(((ops).count)) > 0) && ((_idx(ops, (_int(((ops).count)) &- 1)) as! String) != "("))) {
                    let op = (_idx(ops, (_int(((ops).count)) &- 1)) as! String)
                    ops = (_slice(Array(ops), 0, (_int(((ops).count)) &- 1)) as! [String])
                    let right = _idx(vals, (_int(((vals).count)) &- 1))
                    vals = (_slice(Array(vals), 0, (_int(((vals).count)) &- 1)) as! [Any?])
                    let left = _idx(vals, (_int(((vals).count)) &- 1))
                    vals = (_slice(Array(vals), 0, (_int(((vals).count)) &- 1)) as! [Any?])
                    vals = (((_append(vals, ["kind": "op", "op": op, "left": left, "right": right]) as! [Any?]) as! [Any]) as! [Any?])
                }
                ops = (_slice(Array(ops), 0, (_int(((ops).count)) &- 1)) as! [String])
            } else {
                while ((((_int(((ops).count)) > 0) && ((_idx(ops, (_int(((ops).count)) &- 1)) as! String) != "(")) && (_int(precedence((_idx(ops, (_int(((ops).count)) &- 1)) as! String))) >= _int(precedence((ch as! String)))))) {
                    let op = (_idx(ops, (_int(((ops).count)) &- 1)) as! String)
                    ops = (_slice(Array(ops), 0, (_int(((ops).count)) &- 1)) as! [String])
                    let right = _idx(vals, (_int(((vals).count)) &- 1))
                    vals = (_slice(Array(vals), 0, (_int(((vals).count)) &- 1)) as! [Any?])
                    let left = _idx(vals, (_int(((vals).count)) &- 1))
                    vals = (_slice(Array(vals), 0, (_int(((vals).count)) &- 1)) as! [Any?])
                    vals = (((_append(vals, ["kind": "op", "op": op, "left": left, "right": right]) as! [Any?]) as! [Any]) as! [Any?])
                }
                ops = (_append(ops, ch) as! [String])
            }
            
            
            i = _int((i &+ 1))
        }
        while ((_int(((ops).count)) > 0)) {
            let op = (_idx(ops, (_int(((ops).count)) &- 1)) as! String)
            ops = (_slice(Array(ops), 0, (_int(((ops).count)) &- 1)) as! [String])
            let right = _idx(vals, (_int(((vals).count)) &- 1))
            vals = (_slice(Array(vals), 0, (_int(((vals).count)) &- 1)) as! [Any?])
            let left = _idx(vals, (_int(((vals).count)) &- 1))
            vals = (_slice(Array(vals), 0, (_int(((vals).count)) &- 1)) as! [Any?])
            vals = (((_append(vals, ["kind": "op", "op": op, "left": left, "right": right]) as! [Any?]) as! [Any]) as! [Any?])
        }
        return _idx(vals, (_int(((vals).count)) &- 1))
    }
    func needParen(_ parent: String, _ isRight: Bool, _ child: Any?) -> Bool {
        if ((String(describing: (child as! [String: Any?])[String("kind")]!) != "op")) {
            return false
        }
        let p = _int(precedence((parent as! String)))
        let c = _int(precedence(((child as! [String: Any?])[String("op")]! as! String)))
        if ((c < p)) {
            return true
        }
        if ((c > p)) {
            return false
        }
        if ((((parent == "-") && isRight) && ((String(describing: (child as! [String: Any?])[String("op")]!) == "+") || (String(describing: (child as! [String: Any?])[String("op")]!) == "-")))) {
            return true
        }
        if ((((parent == "/") && isRight) && ((String(describing: (child as! [String: Any?])[String("op")]!) == "*") || (String(describing: (child as! [String: Any?])[String("op")]!) == "/")))) {
            return true
        }
        return false
    }
    func formatRec(_ node: Any?, _ parent: String, _ isRight: Bool) -> String {
        if ((String(describing: (node as! [String: Any?])[String("kind")]!) != "op")) {
            return ((node as! [String: Any?])[String("val")]! as! String)
        }
        var left = String(describing: formatRec((node as! [String: Any?])[String("left")]!, ((node as! [String: Any?])[String("op")]! as! String), false))
        var right = String(describing: formatRec((node as! [String: Any?])[String("right")]!, ((node as! [String: Any?])[String("op")]! as! String), true))
        var res = (_p((_p(left) + _p(String(describing: (node as! [String: Any?])[String("op")]!)))) + _p(right))
        if (((parent != "") && needParen((parent as! String), (isRight as! Bool), node))) {
            res = (_p((_p("(") + _p(String(describing: res)))) + _p(")"))
        }
        return (res as! String)
    }
    func makeNice(_ s: String) -> String {
        let root = parse((s as! String))
        return String(describing: formatRec(root, "", false))
    }
    func main() {
        let tStr = (readLine() ?? "0")
        if ((tStr == "")) {
            return
        }
        let t = _int(Int(String(describing: (tStr as! String)))!)
        for _ in 0..<t {
            let line = (readLine() ?? "0")
            print(_p(String(describing: makeNice((line as! String)))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
