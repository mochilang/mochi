// Generated by Mochi transpiler v0.10.74 on 2025-08-26 14:28:39 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split(_ s: String, _ sep: String) -> [String] {
        var parts: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while ((i < _int(((s).count)))) {
            if ((((_int(((sep).count)) > 0) && ((i &+ _int(((sep).count))) <= _int(((s).count)))) && (String(describing: String(_slice(Array(s), i, (i &+ _int(((sep).count)))))) == sep))) {
                parts = (_append(parts, cur) as! [String])
                cur = ""
                i = _int((i &+ _int(((sep).count))))
            } else {
                cur = ((_p(cur) + _p(String(_slice(Array(s), i, (i &+ 1))))) as! String)
                i = _int((i &+ 1))
            }
        }
        parts = (_append(parts, cur) as! [String])
        return parts
    }
    func precompute(_ limit: Int) -> [Int] {
        var sieve: [Bool] = ([] as! [Bool])
        for i in 0..<_int((limit &+ 1)) {
            sieve = (_append(sieve, true) as! [Bool])
        }
        sieve = _set(sieve, 0, { let _tmp0 = false; return _tmp0 }())
        sieve = _set(sieve, 1, { let _tmp1 = false; return _tmp1 }())
        var p: Int = 2
        while (((p &* p) <= limit)) {
            if ((_idx(sieve, p) as! Bool)) {
                var j: Int = (p &* p)
                while ((j <= limit)) {
                    sieve = _set(sieve, j, { let _tmp2 = false; return _tmp2 }())
                    j = _int((j &+ p))
                }
            }
            p = _int((p &+ 1))
        }
        var primes: [Int] = ([] as! [Int])
        for i in 2..<_int((limit &+ 1)) {
            if ((_idx(sieve, i) as! Bool)) {
                primes = (_append(primes, i) as! [Int])
            }
        }
        return primes
    }
    var primes: [Int] = (precompute(32000) as! [Int])
    let t = _int((readLine() ?? "0"))
    var case_idx: Int = 0
    while ((case_idx < t)) {
        let line = (readLine() ?? "0")
        let parts: [String] = (_split(line, " ") as! [String])
        let m = _int(_idx(parts, 0))
        let n = _int(_idx(parts, 1))
        let size = ((n &- m) &+ 1)
        var segment: [Bool] = ([] as! [Bool])
        for i in 0..<size {
            segment = (_append(segment, true) as! [Bool])
        }
        for p in primes {
            if (((p &* p) > n)) {
                break
            }
            var start = (p &* p)
            if ((start < m)) {
                let rem = ((m % p + p) % p)
                if ((rem == 0)) {
                    start = Int(m)
                } else {
                    start = _int((m &+ _int((p &- rem))))
                }
            }
            var j = start
            while ((j <= n)) {
                segment = _set(segment, (j &- m), { let _tmp3 = false; return _tmp3 }())
                j = _int((j &+ p))
            }
        }
        if ((m == 1)) {
            segment = _set(segment, 0, { let _tmp4 = false; return _tmp4 }())
        }
        var i = 0
        while ((i < size)) {
            if ((_idx(segment, i) as! Bool)) {
                print(_p((i &+ m)))
            }
            i = _int((i &+ 1))
        }
        if ((case_idx < (t &- 1))) {
            print(_p(""))
        }
        case_idx = _int((case_idx &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
