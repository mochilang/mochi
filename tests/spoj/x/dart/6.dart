// Generated by Mochi transpiler
import 'dart:io';

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _repeat(String s, int n) => n <= 0 ? '' : List.filled(n, s).join();

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

Map<String, int> digitMap = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
String repeat(String s, int n) {
  String r = "";
  for (int __ = 0; __ < n; __++) {
    r = r + s;
  }
  return r;
}

String add_str(String a, String b) {
  int i = a.length - 1;
  int j = b.length - 1;
  int carry = 0;
  String res = "";
  while (i >= 0 || j >= 0 || carry > 0) {
    int da = 0;
    if (i >= 0) {
    da = ((digitMap[_substr(a, i, i + 1)] ?? 0)).toInt();
  }
    int db = 0;
    if (j >= 0) {
    db = ((digitMap[_substr(b, j, j + 1)] ?? 0)).toInt();
  }
    int sum = da + db + carry;
    res = _str(sum % 10) + res;
    carry = sum ~/ 10;
    i = i - 1;
    j = j - 1;
  }
  return res;
}

String sub_str(String a, String b) {
  int i = a.length - 1;
  int j = b.length - 1;
  int borrow = 0;
  String res = "";
  while (i >= 0) {
    int da = (((digitMap[_substr(a, i, i + 1)] ?? 0)).toInt()) - borrow;
    int db = 0;
    if (j >= 0) {
    db = ((digitMap[_substr(b, j, j + 1)] ?? 0)).toInt();
  }
    if (da < db) {
    da = da + 10;
    borrow = 1;
  } else {
    borrow = 0;
  }
    int diff = da - db;
    res = _str(diff) + res;
    i = i - 1;
    j = j - 1;
  }
  int k = 0;
  while (k < res.length && _substr(res, k, k + 1) == "0") {
    k = k + 1;
  }
  if (k == res.length) {
    return "0";
  }
  return _substr(res, k, res.length);
}

String mul_digit(String a, int d) {
  if (d == 0) {
    return "0";
  }
  int i = a.length - 1;
  int carry = 0;
  String res = "";
  while (i >= 0) {
    int prod = (((digitMap[_substr(a, i, i + 1)] ?? 0)).toInt()) * d + carry;
    res = _str(prod % 10) + res;
    carry = prod ~/ 10;
    i = i - 1;
  }
  if (carry > 0) {
    res = _str(carry) + res;
  }
  int k = 0;
  while (k < res.length && _substr(res, k, k + 1) == "0") {
    k = k + 1;
  }
  if (k == res.length) {
    return "0";
  }
  return _substr(res, k, res.length);
}

Map<String, dynamic> mul_str(String a, String b) {
  String result = "0";
  int shift = 0;
  List<dynamic> parts = <dynamic>[];
  int i = b.length - 1;
  while (i >= 0) {
    int d = ((digitMap[_substr(b, i, i + 1)] ?? 0)).toInt();
    String _part = mul_digit(a, d);
    parts = [...parts, {"val": _part, "shift": shift}];
    String shifted = _part;
    for (int __ = 0; __ < shift; __++) {
    shifted = shifted + "0";
  }
    result = add_str(result, shifted);
    shift = shift + 1;
    i = i - 1;
  }
  return {"res": result, "parts": parts};
}

String pad_left(String s, int total) {
  String r = "";
  for (int __ = 0; __ < total - s.length; __++) {
    r = r + " ";
  }
  return r + s;
}

void _main() {
  String tStr = stdin.readLineSync()?.trim() ?? '';
  if (tStr == "") {
    return;
  }
  int t = int.parse(tStr);
  for (int __ = 0; __ < t; __++) {
    String line = stdin.readLineSync()?.trim() ?? '';
    if (line == "") {
    continue;
  }
    int idx = 0;
    while (idx < line.length) {
    String ch = _substr(line, idx, idx + 1);
    if (ch == "+" || ch == "-" || ch == "*") {
    break;
  }
    idx = idx + 1;
  }
    String a = _substr(line, 0, idx);
    String op = _substr(line, idx, idx + 1);
    String b = _substr(line, idx + 1, line.length);
    String res = "";
    List<dynamic> parts = <dynamic>[];
    if (op == "+") {
    res = add_str(a, b);
  } else {
    if (op == "-") {
    res = sub_str(a, b);
  } else {
    Map<String, dynamic> r = mul_str(a, b);
    res = (r["res"]!) as String;
    parts = List<dynamic>.from((r["parts"]!));
  };
  }
    int width = a.length;
    int secondLen = b.length + 1;
    if (secondLen > width) {
    width = secondLen;
  }
    if (res.length > width) {
    width = res.length;
  }
    for (dynamic p in parts) {
    int l = (p["val"] as String).length + ((() { var __tmp = (p["shift"]); return int.tryParse(__tmp.toString()) ?? __tmp.toString().codeUnitAt(0); })());
    if (l > width) {
    width = l;
  }
  }
    print(pad_left(a, width));
    print(pad_left(op + b, width));
    int dash1 = 0;
    if (op == "*") {
    if (parts.length > 0) {
    dash1 = b.length + 1;
    String firstPart = parts[0]["val"] as String;
    if (firstPart.length > dash1) {
    dash1 = firstPart.length;
  };
  } else {
    dash1 = b.length + 1;
    if (res.length > dash1) {
    dash1 = res.length;
  };
  };
  } else {
    dash1 = b.length + 1;
    if (res.length > dash1) {
    dash1 = res.length;
  };
  }
    print(pad_left(_repeat("-", dash1), width));
    if (op == "*" && b.length > 1) {
    for (dynamic p in parts) {
    String val = p["val"] as String;
    int shift = (() { var __tmp = (p["shift"]); return int.tryParse(__tmp.toString()) ?? __tmp.toString().codeUnitAt(0); })();
    int spaces = width - shift - val.length;
    String line = "";
    for (int __ = 0; __ < spaces; __++) {
    line = line + " ";
  }
    line = line + val;
    print(line);
  };
    print(pad_left(_repeat("-", res.length), width));
  }
    print(pad_left(res, width));
    print("");
  }
}

void _start() {
  _main();
}

void main() => _start();
