// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int is_substring(String a, String b) {
  int la = a.length;
  int lb = b.length;
  int i = 0;
  while (i + lb <= la) {
    if (_substr(a, i, i + lb) == b) {
    return 1;
  }
    i = i + 1;
  }
  return 0;
}

List<int> solve(List<String> lines) {
  List<int> res = <int>[];
  for (String line in lines) {
    List<String> parts = <String>[];
    String cur = "";
    int i = 0;
    while (i < line.length) {
    String ch = _substr(line, i, i + 1);
    if (ch == " ") {
    parts = [...parts, cur];
    cur = "";
  } else {
    cur = cur + ch;
  }
    i = i + 1;
  }
    parts = [...parts, cur];
    String a = parts[0];
    String b = parts[1];
    res = [...res, is_substring(a, b)];
  }
  return res;
}

List<String> sample_input = ["1010110010 10110", "1110111011 10011"];
void main() {
  for (int r in solve(sample_input)) {
    print(r);
  }
}
