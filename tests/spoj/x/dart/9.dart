// Generated by Mochi transpiler
import 'dart:io';

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int parseInt(String str) {
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  int i = 0;
  int n = 0;
  while (i < str.length) {
    String ch = _substr(str, i, i + 1);
    if (ch != " ") {
    n = n * 10 + (digits[ch] ?? 0);
  }
    i = i + 1;
  }
  return n;
}

List<int> parseInts(String line) {
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  List<int> nums = <int>[];
  int cur = 0;
  bool inNum = false;
  int i = 0;
  while (i < line.length) {
    String ch = _substr(line, i, i + 1);
    if (ch == " ") {
    if (inNum) {
    nums = [...nums, cur];
    cur = 0;
    inNum = false;
  };
  } else {
    cur = cur * 10 + (digits[ch] ?? 0);
    inNum = true;
  }
    i = i + 1;
  }
  if (inNum) {
    nums = [...nums, cur];
  }
  return nums;
}

int abs(int x) {
  if (x < 0) {
    return 0 - x;
  } else {
    return x;
  }
}

bool visible(List<List<int>> h, int r1, int c1, int r2, int c2) {
  if (r1 == r2 && c1 == c2) {
    return true;
  }
  int h0 = h[r1][c1];
  int h1 = h[r2][c2];
  int dr = r2 - r1;
  int dc = c2 - c1;
  num steps = dr.abs();
  if (dc.abs() > steps) {
    steps = dc.abs();
  }
  double x = c1.toDouble() + 0.5;
  double y = r1.toDouble() + 0.5;
  double z = h0.toDouble() + 0.5;
  double incX = dc.toDouble() / steps.toDouble();
  double incY = dr.toDouble() / steps.toDouble();
  double incZ = (h1 - h0).toDouble() / steps.toDouble();
  int i = 1;
  while (i < steps) {
    x = x + incX;
    y = y + incY;
    z = z + incZ;
    int cx = x.toInt();
    int cy = y.toInt();
    if (z <= h[cy][cx].toDouble()) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

List<List<bool>> computeVis(List<List<int>> h, int P, int Q, int r, int c) {
  List<List<bool>> vis = <List<bool>>[];
  for (int i = 0; i < P; i++) {
    List<bool> row = <bool>[];
    for (int j = 0; j < Q; j++) {
    row = [...row, visible(h, i, j, r, c)];
  }
    vis = ([...vis, row] as List<dynamic>).map((e) => (List<bool>.from(e) as List<bool>)).toList();
  }
  return vis;
}

int bfs(List<List<int>> h, List<List<bool>> vis1, List<List<bool>> vis2, int P, int Q, int r1, int c1, int r2, int c2) {
  List<List<int>> dist = <List<int>>[];
  for (int i = 0; i < P; i++) {
    List<int> row = <int>[];
    for (int j = 0; j < Q; j++) {
    row = [...row, 0 - 1];
  }
    dist = ([...dist, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  List<int> qr = <int>[];
  List<int> qc = <int>[];
  qr = [...qr, r1];
  qc = [...qc, c1];
  while (dist[r1]!.length <= c1) { dist[r1]!.add(0); } dist[r1]![c1] = 0;
  int head = 0;
  List<int> drs = [-1, 1, 0, 0];
  List<int> dcs = [0, 0, -1, 1];
  while (head < qr.length) {
    int r = qr[head];
    int c = qc[head];
    head = head + 1;
    if (r == r2 && c == c2) {
    break;
  }
    int hcur = h[r][c];
    int k = 0;
    while (k < 4) {
    int nr = r + drs[k];
    int nc = c + dcs[k];
    if (nr >= 0 && nr < P && nc >= 0 && nc < Q) {
    if (dist[nr][nc] == 0 - 1) {
    int nh = h[nr][nc];
    if (nh <= hcur + 1 && nh >= hcur - 3) {
    if (vis1[nr][nc] || vis2[nr][nc]) {
    while (dist[nr]!.length <= nc) { dist[nr]!.add(0); } dist[nr]![nc] = dist[r][c] + 1;
    qr = [...qr, nr];
    qc = [...qc, nc];
  };
  };
  };
  }
    k = k + 1;
  }
  }
  return dist[r2][c2];
}

void _main() {
  String tStr = stdin.readLineSync()?.trim() ?? '';
  if (tStr == "") {
    return;
  }
  int T = parseInt(tStr);
  for (int __ = 0; __ < T; __++) {
    String line = stdin.readLineSync()?.trim() ?? '';
    while (line == "") {
    line = stdin.readLineSync()?.trim() ?? '';
  }
    List<int> dims = parseInts(line);
    int P = dims[0];
    int Q = dims[1];
    List<List<int>> h = <List<int>>[];
    for (int i = 0; i < P; i++) {
    List<int> rowVals = parseInts(stdin.readLineSync()?.trim() ?? '');
    h = ([...h, rowVals] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
    String posLine = stdin.readLineSync()?.trim() ?? '';
    List<int> pos = parseInts(posLine);
    int r1 = pos[0] - 1;
    int c1 = pos[1] - 1;
    int r2 = pos[2] - 1;
    int c2 = pos[3] - 1;
    List<List<bool>> vis1 = computeVis(h, P, Q, r1, c1);
    List<List<bool>> vis2 = computeVis(h, P, Q, r2, c2);
    int res = bfs(h, vis1, vis2, P, Q, r1, c1, r2, c2);
    if (res == 0 - 1) {
    print("Mission impossible!");
  } else {
    print("The shortest path is " + _str(res) + " steps long.");
  }
  }
}

void _start() {
  _main();
}

void main() => _start();
