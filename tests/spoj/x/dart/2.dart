// Generated by Mochi transpiler
import 'dart:io';

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<String> split(String s, String sep) {
  List<String> parts = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    if (sep.length > 0 && i + sep.length <= s.length && _substr(s, i, i + sep.length) == sep) {
    parts = [...parts, cur];
    cur = "";
    i = i + sep.length;
  } else {
    cur = cur + _substr(s, i, i + 1);
    i = i + 1;
  }
  }
  parts = [...parts, cur];
  return parts;
}

List<int> precompute(int limit) {
  List<bool> sieve = <bool>[];
  for (int i = 0; i < limit + 1; i++) {
    sieve = [...sieve, true];
  }
  while (sieve.length <= 0) { sieve.add(false); } sieve[0] = false;
  while (sieve.length <= 1) { sieve.add(false); } sieve[1] = false;
  int p = 2;
  while (p * p <= limit) {
    if ((sieve[p] ?? false)) {
    int j = p * p;
    while (j <= limit) {
    while (sieve.length <= j) { sieve.add(false); } sieve[j] = false;
    j = j + p;
  };
  }
    p = p + 1;
  }
  List<int> primes = <int>[];
  for (int i = 2; i < limit + 1; i++) {
    if ((sieve[i] ?? false)) {
    primes = [...primes, i];
  }
  }
  return primes;
}

List<int> primes = precompute(32000);
int t = (() { var __tmp = (stdin.readLineSync()?.trim() ?? ''); return int.tryParse(__tmp.toString()) ?? __tmp.toString().codeUnitAt(0); })();
int case_idx = 0;
void main() {
  while (case_idx < t) {
    String line = stdin.readLineSync()?.trim() ?? '';
    dynamic parts = line.split(" ");
    int m = (() { var __tmp = (parts[0]); return int.tryParse(__tmp.toString()) ?? __tmp.toString().codeUnitAt(0); })();
    int n = (() { var __tmp = (parts[1]); return int.tryParse(__tmp.toString()) ?? __tmp.toString().codeUnitAt(0); })();
    int size = n - m + 1;
    List<bool> segment = <bool>[];
    for (int i = 0; i < size; i++) {
    segment = [...segment, true];
  }
    for (int p in primes) {
    if (p * p > n) {
    break;
  }
    int start = p * p;
    if (start < m) {
    int rem = m % p;
    if (rem == 0) {
    start = m;
  } else {
    start = m + (p - rem);
  };
  }
    int j = start;
    while (j <= n) {
    while (segment.length <= j - m) { segment.add(false); } segment[j - m] = false;
    j = j + p;
  }
  }
    if (m == 1) {
    while (segment.length <= 0) { segment.add(false); } segment[0] = false;
  }
    int i = 0;
    while (i < size) {
    if ((segment[i] ?? false)) {
    print(i + m);
  }
    i = i + 1;
  }
    if (case_idx < t - 1) {
    print("");
  }
    case_idx = case_idx + 1;
  }
}
