// Generated by Mochi transpiler
import 'dart:io';

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int precedence(String op) {
  if (op == "+" || op == "-") {
    return 1;
  }
  if (op == "*" || op == "/") {
    return 2;
  }
  if (op == "^") {
    return 3;
  }
  return 0;
}

String popTop(List<String> stack) {
  return stack[stack.length - 1];
}

List<String> popStack(List<String> stack) {
  List<String> newStack = <String>[];
  int i = 0;
  while (i < stack.length - 1) {
    newStack = [...newStack, stack[i]];
    i = i + 1;
  }
  return newStack;
}

String toRPN(String expr) {
  String out = "";
  List<String> stack = <String>[];
  int i = 0;
  while (i < expr.length) {
    String ch = _substr(expr, i, i + 1);
    if (ch.compareTo("a") >= 0 && ch.compareTo("z") <= 0) {
    out = out + ch;
  } else {
    if (ch == "(") {
    stack = [...stack, ch];
  } else {
    if (ch == ")") {
    while (stack.length > 0) {
    String top = popTop(stack);
    if (top == "(") {
    stack = popStack(stack);
    break;
  }
    out = out + top;
    stack = popStack(stack);
  };
  } else {
    int prec = precedence(ch);
    while (stack.length > 0) {
    String top = popTop(stack);
    if (top == "(") {
    break;
  }
    int topPrec = precedence(top);
    if (topPrec > prec || topPrec == prec && ch != "^") {
    out = out + top;
    stack = popStack(stack);
  } else {
    break;
  }
  };
    stack = [...stack, ch];
  };
  };
  }
    i = i + 1;
  }
  while (stack.length > 0) {
    String top = popTop(stack);
    out = out + top;
    stack = popStack(stack);
  }
  return out;
}

void _main() {
  int t = int.parse(stdin.readLineSync()?.trim() ?? '');
  int i = 0;
  while (i < t) {
    String expr = stdin.readLineSync()?.trim() ?? '';
    print(toRPN(expr));
    i = i + 1;
  }
}

void _start() {
  _main();
}

void main() => _start();
