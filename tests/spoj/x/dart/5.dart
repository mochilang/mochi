// Generated by Mochi transpiler
import 'dart:io';

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

String next_pal(String s) {
  Map<String, int> digitMap = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  int n = s.length;
  List<int> _num = <int>[];
  for (int i = 0; i < n; i++) {
    _num = [..._num, ((digitMap[_substr(s, i, i + 1)] ?? 0)).toInt()];
  }
  bool all9 = true;
  for (int d in _num) {
    if (d != 9) {
    all9 = false;
    break;
  }
  }
  if (all9) {
    String res = "1";
    for (int __ = 0; __ < n - 1; __++) {
    res = res + "0";
  };
    res = res + "1";
    return res;
  }
  int left = n ~/ 2 - 1;
  int right = (n % 2 == 0 ? n ~/ 2 : n ~/ 2 + 1);
  while (left >= 0 && right < n && _num[left] == _num[right]) {
    left = left - 1;
    right = right + 1;
  }
  bool smaller = left < 0 || _num[left] < _num[right];
  left = n ~/ 2 - 1;
  right = (n % 2 == 0 ? n ~/ 2 : n ~/ 2 + 1);
  while (left >= 0) {
    while (_num.length <= right) { _num.add(0); } _num[right] = _num[left];
    left = left - 1;
    right = right + 1;
  }
  if (smaller) {
    int carry = 1;
    left = n ~/ 2 - 1;
    if (n % 2 == 1) {
    int mid = n ~/ 2;
    while (_num.length <= mid) { _num.add(0); } _num[mid] = _num[mid] + carry;
    carry = _num[mid] ~/ 10;
    while (_num.length <= mid) { _num.add(0); } _num[mid] = _num[mid] % 10;
    right = mid + 1;
  } else {
    right = n ~/ 2;
  };
    while (left >= 0) {
    while (_num.length <= left) { _num.add(0); } _num[left] = _num[left] + carry;
    carry = _num[left] ~/ 10;
    while (_num.length <= left) { _num.add(0); } _num[left] = _num[left] % 10;
    while (_num.length <= right) { _num.add(0); } _num[right] = _num[left];
    left = left - 1;
    right = right + 1;
  };
  }
  String out = "";
  for (int d in _num) {
    out = out + _str(d);
  }
  return out;
}

int parseIntStr(String str) {
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  int i = 0;
  int n = 0;
  while (i < str.length) {
    n = n * 10 + (((digits[_substr(str, i, i + 1)] ?? 0)).toInt());
    i = i + 1;
  }
  return n;
}

void _main() {
  String tStr = stdin.readLineSync()?.trim() ?? '';
  if (tStr == "") {
    return;
  }
  int t = int.parse(tStr);
  for (int __ = 0; __ < t; __++) {
    String s = stdin.readLineSync()?.trim() ?? '';
    print(next_pal(s));
  }
}

void _start() {
  _main();
}

void main() => _start();
