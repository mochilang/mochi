;; Generated by Mochi 0.10.74 on 2025-08-26 14:25 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port racket/vector net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/spoj/x/mochi")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (cond
       [(and (inexact? x) (integer? x)) (format "~a.0" (inexact->exact x))]
       [else (number->string x)])]
    [(vector? x) (format "~a" (map (lambda (v) (cond [(hash? v) (read (open-input-string (to-string v)))] [(vector? v) (vector->list v)] [else v])) (vector->list x)))]
    [(hash? x)
     (format "~a"
             (for/hash ([k (in-hash-keys x)])
               (values k (let ([v (hash-ref x k)]) (if (vector? v) (vector->list v) v)))))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (cond
    [(string? lst) (substring lst start end)]
    [(vector? lst) (vector->list (vector-copy lst start end))]
    [else (take (drop lst start) (- end start))]))

(define (slice seq start end)
  (define len (cond [(string? seq) (string-length seq)] [(vector? seq) (vector-length seq)] [(list? seq) (length seq)] [else 0]))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (cond
    [(string? seq) (substring seq s e)]
    [(vector? seq) (vector-copy seq s e)]
    [else (sublist seq s e)]))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (appendv a b)
  (cond
    [(vector? a) (vector-append a (cond [(vector? b) b] [(list? b) (list->vector b)] [else (vector b)]))]
    [(list? a) (append a (cond [(list? b) b] [(vector? b) (vector->list b)] [else (list b)]))]
    [else (append a b)]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) 0)] [(vector? lst) (if (and (>= i 0) (< i (vector-length lst))) (vector-ref lst i) 0)] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (cond
    [(vector? lst) (when (< i (vector-length lst)) (vector-set! lst i val)) lst]
    [else
     (define len (length lst))
     (cond
       [(>= i len) (append lst (make-list (- i len) '()) (list val))]
       [(zero? i) (cons val (cdr lst))]
       [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))])]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define digitMap (let ([h (make-hash)]) (hash-set! h "0" 0) (hash-set! h "1" 1) (hash-set! h "2" 2) (hash-set! h "3" 3) (hash-set! h "4" 4) (hash-set! h "5" 5) (hash-set! h "6" 6) (hash-set! h "7" 7) (hash-set! h "8" 8) (hash-set! h "9" 9) h))
(define (repeat s n)
  (let/ec _return (begin
(define r "")
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ n)
(set! r (string-append r s))
      (set! _ (+ _ 1))
      (loop)))
))
(_return r)
))
)
(define (add_str a b)
  (let/ec _return (begin
(define i (- (cond [(not a) 0] [(string? a) (string-length a)] [(vector? a) (vector-length a)] [(hash? a) (hash-count a)] [(list? a) (length a)] [else 0]) 1))
(define j (- (cond [(not b) 0] [(string? b) (string-length b)] [(vector? b) (vector-length b)] [(hash? b) (hash-count b)] [(list? b) (length b)] [else 0]) 1))
(define carry 0)
(define res "")
(let/ec _break (let loop ()
  (if (or (or (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ([__l carry] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (begin
    (let/ec _cont
      (define da 0)
      (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(set! da (int (if digitMap (hash-ref digitMap (slice a i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)))
) (void))
      (define db 0)
      (if (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(set! db (int (if digitMap (hash-ref digitMap (slice b j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)))
) (void))
      (define sum (let ([__l (let ([__l da] [__r db]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r carry]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! res (string-append (to-string (modulo sum 10)) res))
      (set! carry (floor (/ sum 10)))
      (set! i (- i 1))
      (set! j (- j 1))
    )
    (loop)) (void))))
(_return res)
))
)
(define (sub_str a b)
  (let/ec _return (begin
(define i (- (cond [(not a) 0] [(string? a) (string-length a)] [(vector? a) (vector-length a)] [(hash? a) (hash-count a)] [(list? a) (length a)] [else 0]) 1))
(define j (- (cond [(not b) 0] [(string? b) (string-length b)] [(vector? b) (vector-length b)] [(hash? b) (hash-count b)] [(list? b) (length b)] [else 0]) 1))
(define borrow 0)
(define res "")
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define da (- (int (if digitMap (hash-ref digitMap (slice a i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)) borrow))
      (define db 0)
      (if (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(set! db (int (if digitMap (hash-ref digitMap (slice b j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)))
) (void))
      (if (let ([__l da] [__r db]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! da (let ([__l da] [__r 10]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! borrow 1)
) (let ()
(set! borrow 0)
))
      (define diff (- da db))
      (set! res (string-append (to-string diff) res))
      (set! i (- i 1))
      (set! j (- j 1))
    )
    (loop)) (void))))
(define k 0)
(let/ec _break (let loop ()
  (if (and (let ([__l k] [__r (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (string=? (slice res k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "0")) (begin
    (let/ec _cont
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (equal? k (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0])) (let ()
(_return "0")
) (void))
(_return (slice res k (string-length res)))
))
)
(define (mul_digit a d)
  (let/ec _return (begin
(if (equal? d 0) (let ()
(_return "0")
) (void))
(define i (- (cond [(not a) 0] [(string? a) (string-length a)] [(vector? a) (vector-length a)] [(hash? a) (hash-count a)] [(list? a) (length a)] [else 0]) 1))
(define carry 0)
(define res "")
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define prod (let ([__l (* (int (if digitMap (hash-ref digitMap (slice a i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)) d)] [__r carry]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! res (string-append (to-string (modulo prod 10)) res))
      (set! carry (floor (/ prod 10)))
      (set! i (- i 1))
    )
    (loop)) (void))))
(if (let ([__l carry] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! res (string-append (to-string carry) res))
) (void))
(define k 0)
(let/ec _break (let loop ()
  (if (and (let ([__l k] [__r (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (string=? (slice res k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "0")) (begin
    (let/ec _cont
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (equal? k (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0])) (let ()
(_return "0")
) (void))
(_return (slice res k (string-length res)))
))
)
(define (mul_str a b)
  (let/ec _return (begin
(define result "0")
(define shift 0)
(define parts (vector))
(define i (- (cond [(not b) 0] [(string? b) (string-length b)] [(vector? b) (vector-length b)] [(hash? b) (hash-count b)] [(list? b) (length b)] [else 0]) 1))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define d (int (if digitMap (hash-ref digitMap (slice b i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)))
      (define part (mul_digit a d))
      (set! parts (appendv (or parts (vector)) (vector (let ([h (make-hash)]) (hash-set! h "val" part) (hash-set! h "shift" shift) h))))
      (define shifted part)
      (let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ shift)
(set! shifted (string-append shifted "0"))
      (set! _ (+ _ 1))
      (loop)))
))
      (set! result (add_str result shifted))
      (set! shift (let ([__l shift] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (- i 1))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "res" result) (hash-set! h "parts" parts) h))
))
)
(define (pad_left s total)
  (let/ec _return (begin
(define r "")
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ (- total (cond [(not s) 0] [(string? s) (string-length s)] [(vector? s) (vector-length s)] [(hash? s) (hash-count s)] [(list? s) (length s)] [else 0])))
(set! r (string-append r " "))
      (set! _ (+ _ 1))
      (loop)))
))
(_return (string-append r s))
))
)
(define (main)
  (let/ec _return (begin
(define tStr (input))
(if (string=? tStr "") (let ()
(_return void)
) (void))
(define t (int tStr))
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ t)
(define line (input))
(if (string=? line "") (let ()
(begin (set! _ (+ _ 1)) (loop))
) (void))
(define idx 0)
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not line) 0] [(string? line) (string-length line)] [(vector? line) (vector-length line)] [(hash? line) (hash-count line)] [(list? line) (length line)] [else 0])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ch (slice line idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (or (or (string=? ch "+") (string=? ch "-")) (string=? ch "*")) (let ()
(_break)
) (void))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define a (slice line 0 idx))
(define op (slice line idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define b (slice line (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (string-length line)))
(define res "")
(define parts (vector))
(if (string=? op "+") (let ()
(set! res (add_str a b))
) (let ()
(if (string=? op "-") (let ()
(set! res (sub_str a b))
) (let ()
(define r (mul_str a b))
(set! res (format "~a" (if r (hash-ref r "res" #f) #f)))
(set! parts (if r (hash-ref r "parts" #f) #f))
))
))
(define width (cond [(not a) 0] [(string? a) (string-length a)] [(vector? a) (vector-length a)] [(hash? a) (hash-count a)] [(list? a) (length a)] [else 0]))
(define secondLen (let ([__l (cond [(not b) 0] [(string? b) (string-length b)] [(vector? b) (vector-length b)] [(hash? b) (hash-count b)] [(list? b) (length b)] [else 0])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l secondLen] [__r width]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! width secondLen)
) (void))
(if (let ([__l (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0])] [__r width]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! width (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0]))
) (void))
(let ([__seq parts]) (let/ec _break (for ([p (if (hash? __seq) (in-hash-keys __seq) __seq)])
  (let/ec _cont
(define l (let ([__l (cond [(not (format "~a" (if p (if (hash? p) (hash-ref p "val" #f) (safe-index p (int "val"))) #f))) 0] [(string? (format "~a" (if p (if (hash? p) (hash-ref p "val" #f) (safe-index p (int "val"))) #f))) (string-length (format "~a" (if p (if (hash? p) (hash-ref p "val" #f) (safe-index p (int "val"))) #f)))] [(vector? (format "~a" (if p (if (hash? p) (hash-ref p "val" #f) (safe-index p (int "val"))) #f))) (vector-length (format "~a" (if p (if (hash? p) (hash-ref p "val" #f) (safe-index p (int "val"))) #f)))] [(hash? (format "~a" (if p (if (hash? p) (hash-ref p "val" #f) (safe-index p (int "val"))) #f))) (hash-count (format "~a" (if p (if (hash? p) (hash-ref p "val" #f) (safe-index p (int "val"))) #f)))] [(list? (format "~a" (if p (if (hash? p) (hash-ref p "val" #f) (safe-index p (int "val"))) #f))) (length (format "~a" (if p (if (hash? p) (hash-ref p "val" #f) (safe-index p (int "val"))) #f)))] [else 0])] [__r (int (if p (if (hash? p) (hash-ref p "shift" #f) (safe-index p (int "shift"))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l l] [__r width]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! width l)
) (void))
  ))))
(displayln (to-string (pad_left a width)))
(displayln (to-string (pad_left (string-append op b) width)))
(define dash1 0)
(if (string=? op "*") (let ()
(if (let ([__l (cond [(not parts) 0] [(string? parts) (string-length parts)] [(vector? parts) (vector-length parts)] [(hash? parts) (hash-count parts)] [(list? parts) (length parts)] [else 0])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! dash1 (let ([__l (cond [(not b) 0] [(string? b) (string-length b)] [(vector? b) (vector-length b)] [(hash? b) (hash-count b)] [(list? b) (length b)] [else 0])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define firstPart (format "~a" (if (if parts (if (hash? parts) (hash-ref parts 0 #f) (safe-index parts (int 0))) #f) (if (hash? (if parts (if (hash? parts) (hash-ref parts 0 #f) (safe-index parts (int 0))) #f)) (hash-ref (if parts (if (hash? parts) (hash-ref parts 0 #f) (safe-index parts (int 0))) #f) "val" #f) (safe-index (if parts (if (hash? parts) (hash-ref parts 0 #f) (safe-index parts (int 0))) #f) (int "val"))) #f)))
(if (let ([__l (cond [(not firstPart) 0] [(string? firstPart) (string-length firstPart)] [(vector? firstPart) (vector-length firstPart)] [(hash? firstPart) (hash-count firstPart)] [(list? firstPart) (length firstPart)] [else 0])] [__r dash1]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! dash1 (cond [(not firstPart) 0] [(string? firstPart) (string-length firstPart)] [(vector? firstPart) (vector-length firstPart)] [(hash? firstPart) (hash-count firstPart)] [(list? firstPart) (length firstPart)] [else 0]))
) (void))
) (let ()
(set! dash1 (let ([__l (cond [(not b) 0] [(string? b) (string-length b)] [(vector? b) (vector-length b)] [(hash? b) (hash-count b)] [(list? b) (length b)] [else 0])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0])] [__r dash1]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! dash1 (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0]))
) (void))
))
) (let ()
(set! dash1 (let ([__l (cond [(not b) 0] [(string? b) (string-length b)] [(vector? b) (vector-length b)] [(hash? b) (hash-count b)] [(list? b) (length b)] [else 0])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0])] [__r dash1]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! dash1 (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0]))
) (void))
))
(displayln (to-string (pad_left (repeat "-" dash1) width)))
(if (and (string=? op "*") (let ([__l (cond [(not b) 0] [(string? b) (string-length b)] [(vector? b) (vector-length b)] [(hash? b) (hash-count b)] [(list? b) (length b)] [else 0])] [__r 1]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(let ([__seq parts]) (let/ec _break (for ([p (if (hash? __seq) (in-hash-keys __seq) __seq)])
  (let/ec _cont
(define val (format "~a" (if p (if (hash? p) (hash-ref p "val" #f) (safe-index p (int "val"))) #f)))
(define shift (int (if p (if (hash? p) (hash-ref p "shift" #f) (safe-index p (int "shift"))) #f)))
(define spaces (- (- width shift) (cond [(not val) 0] [(string? val) (string-length val)] [(vector? val) (vector-length val)] [(hash? val) (hash-count val)] [(list? val) (length val)] [else 0])))
(define line "")
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ spaces)
(set! line (string-append line " "))
      (set! _ (+ _ 1))
      (loop)))
))
(set! line (string-append line val))
(displayln (to-string line))
  ))))
(displayln (to-string (pad_left (repeat "-" (cond [(not res) 0] [(string? res) (string-length res)] [(vector? res) (vector-length res)] [(hash? res) (hash-count res)] [(list? res) (length res)] [else 0])) width)))
) (void))
(displayln (to-string (pad_left res width)))
(displayln (to-string ""))
      (set! _ (+ _ 1))
      (loop)))
))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
