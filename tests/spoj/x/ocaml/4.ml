(* Generated by Mochi transpiler v0.10.74 on 2025-08-26 11:55 +0700 *)


let rec __is_list v =
  let open Obj in
  let rec loop x =
    let r = repr x in
    if is_int r then (magic r : int) = 0
    else
      match tag r with
      | 0 -> loop (field r 1)
      | _ -> false
  in
  loop v

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec precedence op =
  let __ret = ref 0 in
  (try
  if ((op = "+") || (op = "-")) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  if ((op = "*") || (op = "/")) then (
  __ret := (Obj.magic (2) : int); raise Return
  );
  if (op = "^") then (
  __ret := (Obj.magic (3) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and popTop stack =
  let __ret = ref "" in
  (try
  let stack = (Obj.magic stack : string list) in
  __ret := (Obj.magic ((let __l = stack in let __i = (List.length (stack) - 1) in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "")) : string); raise Return
  with Return -> !__ret)

and popStack stack =
  let __ret = ref ([] : (string) list) in
  (try
  let stack = (Obj.magic stack : string list) in
  let newStack = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < (List.length (stack) - 1)) do
    try
  newStack := (Obj.magic ((List.append (!newStack) [(Obj.magic ((let __l = stack in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "")) : string)])) : string list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!newStack) : string list); raise Return
  with Return -> !__ret)

and toRPN expr =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let stack = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (expr)) do
    try
  let ch = (let __s = expr in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if ((ch >= "a") && (ch <= "z")) then (
  out := (!out ^ ch);
  ) else (
  if (ch = "(") then (
  stack := (Obj.magic ((List.append (!stack) [(Obj.magic (ch) : string)])) : string list);
  ) else (
  if (ch = ")") then (
  (try while (List.length (!stack) > 0) do
    try
  let top = popTop (!stack) in
  if (top = "(") then (
  stack := (Obj.magic (popStack (!stack)) : string list);
  raise Break;
  );
  out := (!out ^ top);
  stack := (Obj.magic (popStack (!stack)) : string list);
    with Continue -> ()
  done with Break -> ());
  ) else (
  let prec = precedence (ch) in
  (try while (List.length (!stack) > 0) do
    try
  let top = popTop (!stack) in
  if (top = "(") then (
  raise Break;
  );
  let topPrec = precedence (top) in
  if ((topPrec > prec) || ((topPrec = prec) && (ch <> "^"))) then (
  out := (!out ^ top);
  stack := (Obj.magic (popStack (!stack)) : string list);
  ) else (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  stack := (Obj.magic ((List.append (!stack) [(Obj.magic (ch) : string)])) : string list);
  );
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (List.length (!stack) > 0) do
    try
  let top = popTop (!stack) in
  out := (!out ^ top);
  stack := (Obj.magic (popStack (!stack)) : string list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let t = int_of_string ((try read_line () with End_of_file -> "")) in
  let i = ref (0) in
  (try while (!i < t) do
    try
  let expr = (try read_line () with End_of_file -> "") in
  print_endline ((toRPN (expr)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()
