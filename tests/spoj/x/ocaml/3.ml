(* Generated by Mochi transpiler v0.10.74 on 2025-08-26 11:55 +0700 *)


let rec __is_list v =
  let open Obj in
  let rec loop x =
    let r = repr x in
    if is_int r then (magic r : int) = 0
    else
      match tag r with
      | 0 -> loop (field r 1)
      | _ -> false
  in
  loop v

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec is_substring a b =
  let __ret = ref 0 in
  (try
  let la = String.length (a) in
  let lb = String.length (b) in
  let i = ref (0) in
  (try while ((!i + lb) <= la) do
    try
  if ((let __s = a in let __st = !i in let __len = ((!i + lb) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = b) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and solve lines =
  let __ret = ref ([] : (int) list) in
  (try
  let lines = (Obj.magic lines : string list) in
  let res = ref (([] : (int) list)) in
  (try List.iter (fun line ->
    try
  let parts = ref (([] : (string) list)) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (line)) do
    try
  let ch = (let __s = line in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if (ch = " ") then (
  parts := (Obj.magic ((List.append (!parts) [(Obj.magic (!cur) : string)])) : string list);
  cur := "";
  ) else (
  cur := (!cur ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  parts := (Obj.magic ((List.append (!parts) [(Obj.magic (!cur) : string)])) : string list);
  let a = (let __l = !parts in let __i = 0 in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") in
  let b = (let __l = !parts in let __i = 1 in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") in
  res := (Obj.magic ((List.append (!res) [(Obj.magic (is_substring (a) (b)) : int)])) : int list);
    with Continue -> ()) (lines) with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)


let sample_input = ref (["1010110010 10110"; "1110111011 10011"])
let () =
  (try List.iter (fun r ->
    try
  print_endline (string_of_int r);
    with Continue -> ()) (solve (!sample_input)) with Break -> ());
  ()
