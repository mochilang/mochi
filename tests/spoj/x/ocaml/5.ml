(* Generated by Mochi transpiler v0.10.74 on 2025-08-26 11:55 +0700 *)


let rec __is_list v =
  let open Obj in
  let rec loop x =
    let r = repr x in
    if is_int r then (magic r : int) = 0
    else
      match tag r with
      | 0 -> loop (field r 1)
      | _ -> false
  in
  loop v

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec next_pal s =
  let __ret = ref "" in
  (try
  let digitMap = ref ([(__str (Obj.repr ("0")), 0); (__str (Obj.repr ("1")), 1); (__str (Obj.repr ("2")), 2); (__str (Obj.repr ("3")), 3); (__str (Obj.repr ("4")), 4); (__str (Obj.repr ("5")), 5); (__str (Obj.repr ("6")), 6); (__str (Obj.repr ("7")), 7); (__str (Obj.repr ("8")), 8); (__str (Obj.repr ("9")), 9)]) in
  let n = ref (String.length (s)) in
  let num = ref (([] : (int) list)) in
  (try for i = 0 to (!n - 1) do
    try
  num := (Obj.magic ((List.append (!num) [(Obj.magic ((match List.assoc_opt (__str (Obj.repr ((let __s = s in let __st = i in let __len = ((i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")))) (!digitMap) with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
    with Continue -> ()
  done with Break -> ());
  let all9 = ref (true) in
  (try List.iter (fun d ->
    try
  if (d <> 9) then (
  all9 := false;
  raise Break;
  );
    with Continue -> ()) (!num) with Break -> ());
  if !all9 then (
  let res = ref ("1") in
  (try for _ = 0 to ((!n - 1) - 1) do
    try
  res := (!res ^ "0");
    with Continue -> ()
  done with Break -> ());
  res := (!res ^ "1");
  __ret := (Obj.magic (!res) : string); raise Return
  );
  let left = ref (((!n / 2) - 1)) in
  let right = ref (if (((!n mod 2 + 2) mod 2) = 0) then (!n / 2) else ((!n / 2) + 1)) in
  (try while (((!left >= 0) && (!right < !n)) && ((let __l = !num in let __i = !left in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = (let __l = !num in let __i = !right in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) do
    try
  left := (!left - 1);
  right := (!right + 1);
    with Continue -> ()
  done with Break -> ());
  let smaller = ref (((!left < 0) || ((let __l = !num in let __i = !left in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) < (let __l = !num in let __i = !right in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)))) in
  left := ((!n / 2) - 1);
  right := if (((!n mod 2 + 2) mod 2) = 0) then (!n / 2) else ((!n / 2) + 1);
  (try while (!left >= 0) do
    try
  num := (List.mapi (fun __i __x -> if __i = !right then (let __l = !num in let __i = !left in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) else __x) (!num));
  left := (!left - 1);
  right := (!right + 1);
    with Continue -> ()
  done with Break -> ());
  if !smaller then (
  let carry = ref (1) in
  left := ((!n / 2) - 1);
  if (((!n mod 2 + 2) mod 2) = 1) then (
  let mid = ref ((!n / 2)) in
  num := (List.mapi (fun __i __x -> if __i = !mid then ((let __l = !num in let __i = !mid in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + !carry) else __x) (!num));
  carry := ((let __l = !num in let __i = !mid in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) / 10);
  num := (List.mapi (fun __i __x -> if __i = !mid then (((let __l = !num in let __i = !mid in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) mod 10 + 10) mod 10) else __x) (!num));
  right := (!mid + 1);
  ) else (
  right := (!n / 2);
  );
  (try while (!left >= 0) do
    try
  num := (List.mapi (fun __i __x -> if __i = !left then ((let __l = !num in let __i = !left in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + !carry) else __x) (!num));
  carry := ((let __l = !num in let __i = !left in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) / 10);
  num := (List.mapi (fun __i __x -> if __i = !left then (((let __l = !num in let __i = !left in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) mod 10 + 10) mod 10) else __x) (!num));
  num := (List.mapi (fun __i __x -> if __i = !right then (let __l = !num in let __i = !left in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) else __x) (!num));
  left := (!left - 1);
  right := (!right + 1);
    with Continue -> ()
  done with Break -> ());
  );
  let out = ref ("") in
  (try List.iter (fun d ->
    try
  out := (!out ^ (string_of_int (Obj.magic (d) : int)));
    with Continue -> ()) (!num) with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and parseIntStr str =
  let __ret = ref 0 in
  (try
  let digits = ref ([(__str (Obj.repr ("0")), 0); (__str (Obj.repr ("1")), 1); (__str (Obj.repr ("2")), 2); (__str (Obj.repr ("3")), 3); (__str (Obj.repr ("4")), 4); (__str (Obj.repr ("5")), 5); (__str (Obj.repr ("6")), 6); (__str (Obj.repr ("7")), 7); (__str (Obj.repr ("8")), 8); (__str (Obj.repr ("9")), 9)]) in
  let i = ref (0) in
  let n = ref (0) in
  (try while (!i < String.length (str)) do
    try
  n := ((!n * 10) + (match List.assoc_opt (__str (Obj.repr ((let __s = str in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")))) (!digits) with Some v -> (Obj.magic v : int) | None -> 0));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let tStr = (try read_line () with End_of_file -> "") in
  if (tStr = "") then (
  __ret := (); raise Return
  );
  let t = parseIntStr (tStr) in
  (try for _ = 0 to (t - 1) do
    try
  let s = (try read_line () with End_of_file -> "") in
  print_endline ((next_pal (s)));
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()
