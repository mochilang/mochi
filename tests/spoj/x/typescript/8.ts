// Generated by Mochi v0.10.74 on 2025-08-27 07:54:56 GMT+7

function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    if ((((_len(sep) > 0) && ((i + _len(sep)) <= _len(s))) && ((s).substring(i, (i + _len(sep))) === sep))) {
      parts.push(cur);
      cur = "";
      i = (i + _len(sep));
    } else {
      cur = (cur + s.slice(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts.push(cur);
  return parts;
}
function parse_ints(line: string): number[] {
  let pieces: string[] = split(line, " ");
  let nums: number[] = [];
  for (const p of pieces) {
    if ((_len(p) > 0)) {
      nums.push(Math.trunc(p));
    }
  }
  return nums;
}
function main() {
  let tLine: string = _input();
  if ((tLine === "")) {
    return;
  }
  let t: number = Math.trunc(tLine);
  let caseIdx: number = 0;
  while ((caseIdx < t)) {
    let header: number[] = parse_ints(_input());
    let s: number = header[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? header.length + _mochi_idx : _mochi_idx;})()];
    let c: number = header[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? header.length + _mochi_idx : _mochi_idx;})()];
    let seq: number[] = parse_ints(_input());
    let levels: number[][] = [];
    levels.push(seq);
    let current: number[] = seq;
    while ((_len(current) > 1)) {
      let next: number[] = [];
      let i: number = 0;
      while (((i + 1) < _len(current))) {
        next.push((current[(()=>{const _mochi_idx = Math.trunc((i + 1)); return _mochi_idx < 0 ? current.length + _mochi_idx : _mochi_idx;})()] - current[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? current.length + _mochi_idx : _mochi_idx;})()]));
        i = (i + 1);
      }
      levels.push(next);
      current = next;
    }
    let depth: number = (_len(levels) - 1);
    let step: number = 0;
    let res: number[] = [];
    while ((step < c)) {
      let bottom: number[] = levels[(()=>{const _mochi_idx = depth; return _mochi_idx < 0 ? levels.length + _mochi_idx : _mochi_idx;})()];
      bottom.push(bottom[(()=>{const _mochi_idx = Math.trunc((_len(bottom) - 1)); return _mochi_idx < 0 ? bottom.length + _mochi_idx : _mochi_idx;})()]);
      levels[(()=>{const _mochi_idx = depth; return _mochi_idx < 0 ? levels.length + _mochi_idx : _mochi_idx;})()] = bottom;
      let level: number = (depth - 1);
      while ((level >= 0)) {
        let arr: number[] = levels[(()=>{const _mochi_idx = level; return _mochi_idx < 0 ? levels.length + _mochi_idx : _mochi_idx;})()];
        let arrBelow: number[] = levels[(()=>{const _mochi_idx = Math.trunc((level + 1)); return _mochi_idx < 0 ? levels.length + _mochi_idx : _mochi_idx;})()];
        let nextVal: number = (arr[(()=>{const _mochi_idx = Math.trunc((_len(arr) - 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] + arrBelow[(()=>{const _mochi_idx = Math.trunc((_len(arrBelow) - 1)); return _mochi_idx < 0 ? arrBelow.length + _mochi_idx : _mochi_idx;})()]);
        arr.push(nextVal);
        levels[(()=>{const _mochi_idx = level; return _mochi_idx < 0 ? levels.length + _mochi_idx : _mochi_idx;})()] = arr;
        level = (level - 1);
      }
      res.push(levels[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? levels.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((_len(levels[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? levels.length + _mochi_idx : _mochi_idx;})()]) - 1)); return _mochi_idx < 0 ? levels[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? levels.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      step = (step + 1);
    }
    let out: string = "";
    let i2: number = 0;
    while ((i2 < _len(res))) {
      if ((i2 > 0)) {
        out = (out + " ");
      }
      out = (out + _str(res[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()]));
      i2 = (i2 + 1);
    }
    console.log(_str(out));
    caseIdx = (caseIdx + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return '[' + x.map(_str).join(', ') + ']';
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

