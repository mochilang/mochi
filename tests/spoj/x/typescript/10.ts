// Generated by Mochi v0.10.74 on 2025-08-27 07:54:56 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function parseIntStr(str: string): number {
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  let i: number = 0;
  let n: number = 0;
  while ((i < _len(str))) {
    n = ((n * 10) + Math.trunc(digits[str.slice(i, (i + 1))]));
    i = (i + 1);
  }
  return n;
}
function precedence(op: string): number {
  if (((op === "+") || (op === "-"))) {
    return 1;
  }
  if (((op === "*") || (op === "/"))) {
    return 2;
  }
  return 0;
}
function parse(s: string) {
  let ops: string[] = [];
  let vals: any[] = [];
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s.slice(i, (i + 1));
    if (((ch >= "a") && (ch <= "z"))) {
      vals.push({kind: "var", val: ch});
    } else {
      if ((ch === "(")) {
        ops.push(ch);
      } else {
        if ((ch === ")")) {
          while (((_len(ops) > 0) && (ops[(()=>{const _mochi_idx = Math.trunc((_len(ops) - 1)); return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()] !== "("))) {
            let op: string = ops[(()=>{const _mochi_idx = Math.trunc((_len(ops) - 1)); return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()];
            ops = ops.slice(0, (_len(ops) - 1));
            let right = vals[(()=>{const _mochi_idx = Math.trunc((_len(vals) - 1)); return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()];
            vals = vals.slice(0, (_len(vals) - 1));
            let left = vals[(()=>{const _mochi_idx = Math.trunc((_len(vals) - 1)); return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()];
            vals = vals.slice(0, (_len(vals) - 1));
            vals.push({kind: "op", op, left, right});
          }
          ops = ops.slice(0, (_len(ops) - 1));
        } else {
          while ((((_len(ops) > 0) && (ops[(()=>{const _mochi_idx = Math.trunc((_len(ops) - 1)); return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()] !== "(")) && (precedence(ops[(()=>{const _mochi_idx = Math.trunc((_len(ops) - 1)); return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()]) >= precedence(ch)))) {
            let op: string = ops[(()=>{const _mochi_idx = Math.trunc((_len(ops) - 1)); return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()];
            ops = ops.slice(0, (_len(ops) - 1));
            let right = vals[(()=>{const _mochi_idx = Math.trunc((_len(vals) - 1)); return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()];
            vals = vals.slice(0, (_len(vals) - 1));
            let left = vals[(()=>{const _mochi_idx = Math.trunc((_len(vals) - 1)); return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()];
            vals = vals.slice(0, (_len(vals) - 1));
            vals.push({kind: "op", op, left, right});
          }
          ops.push(ch);
        }
      }
    }
    i = (i + 1);
  }
  while ((_len(ops) > 0)) {
    let op: string = ops[(()=>{const _mochi_idx = Math.trunc((_len(ops) - 1)); return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()];
    ops = ops.slice(0, (_len(ops) - 1));
    let right = vals[(()=>{const _mochi_idx = Math.trunc((_len(vals) - 1)); return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()];
    vals = vals.slice(0, (_len(vals) - 1));
    let left = vals[(()=>{const _mochi_idx = Math.trunc((_len(vals) - 1)); return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()];
    vals = vals.slice(0, (_len(vals) - 1));
    vals.push({kind: "op", op, left, right});
  }
  return vals[(()=>{const _mochi_idx = Math.trunc((_len(vals) - 1)); return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()];
}
function needParen(parent: string, isRight: boolean, child): boolean {
  if ((child.kind !== "op")) {
    return false;
  }
  let p: number = precedence(parent);
  let c: number = precedence(child.op);
  if ((c < p)) {
    return true;
  }
  if ((c > p)) {
    return false;
  }
  if ((((parent === "-") && isRight) && ((child.op === "+") || (child.op === "-")))) {
    return true;
  }
  if ((((parent === "/") && isRight) && ((child.op === "*") || (child.op === "/")))) {
    return true;
  }
  return false;
}
function formatRec(node, parent: string, isRight: boolean): string {
  if ((node.kind !== "op")) {
    return node.val;
  }
  let left: string = formatRec(node.left, node.op, false);
  let right: string = formatRec(node.right, node.op, true);
  let res: string = ((left + node.op) + right);
  if (((parent !== "") && needParen(parent, isRight, node))) {
    res = (("(" + res) + ")");
  }
  return res;
}
function makeNice(s: string): string {
  let root = parse(s);
  return formatRec(root, "", false);
}
function main() {
  let tStr: string = _input();
  if ((tStr === "")) {
    return;
  }
  let t = parseIntStr(tStr);
  for (let _ = 0; _ < t; _++) {
    let line: string = _input();
    console.log(_str(makeNice(line)));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return '[' + x.map(_str).join(', ') + ']';
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

