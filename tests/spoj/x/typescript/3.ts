// Generated by Mochi v0.10.74 on 2025-08-26 14:34:34 GMT+7

function is_substring(a: string, b: string): number {
  let la: number = _len(a);
  let lb: number = _len(b);
  let i: number = 0;
  while (((i + lb) <= la)) {
    if ((a.slice(i, (i + lb)) === b)) {
      return 1;
    }
    i = (i + 1);
  }
  return 0;
}
function solve(lines: string[]): number[] {
  let res: number[] = [];
  for (const line of lines) {
    let parts: string[] = [];
    let cur: string = "";
    let i: number = 0;
    while ((i < _len(line))) {
      let ch: string = line.slice(i, (i + 1));
      if ((ch === " ")) {
        parts.push(cur);
        cur = "";
      } else {
        cur = (cur + ch);
      }
      i = (i + 1);
    }
    parts.push(cur);
    let a: string = parts[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? parts.length + _mochi_idx : _mochi_idx;})()];
    let b: string = parts[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? parts.length + _mochi_idx : _mochi_idx;})()];
    res.push(is_substring(a, b));
  }
  return res;
}
let sample_input: string[] = ["1010110010 10110", "1110111011 10011"];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return '[' + x.map(_str).join(', ') + ']';
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  for (const r of solve(sample_input)) {
    console.log(_str(r));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

