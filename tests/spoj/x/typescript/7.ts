// Generated by Mochi v0.10.74 on 2025-08-27 07:54:55 GMT+7

function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    if ((((_len(sep) > 0) && ((i + _len(sep)) <= _len(s))) && ((s).substring(i, (i + _len(sep))) === sep))) {
      parts.push(cur);
      cur = "";
      i = (i + _len(sep));
    } else {
      cur = (cur + s.slice(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts.push(cur);
  return parts;
}
function parse_ints(line: string): number[] {
  let pieces: string[] = split(line, " ");
  let nums: number[] = [];
  let i: number = 0;
  while ((i < _len(pieces))) {
    let p: string = pieces[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? pieces.length + _mochi_idx : _mochi_idx;})()];
    if ((_len(p) > 0)) {
      nums.push(Math.trunc(p));
    }
    i = (i + 1);
  }
  return nums;
}
function sort_unique(arr: number[]): number[] {
  let i: number = 1;
  while ((i < _len(arr))) {
    let j: number = i;
    while (((j > 0) && (arr[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]))) {
      let tmp: number = arr[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
      arr[(()=>{const _mochi_idx = (j - 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
      arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = tmp;
      j = (j - 1);
    }
    i = (i + 1);
  }
  let res: number[] = [];
  i = 0;
  while ((i < _len(arr))) {
    if (((i === 0) || (arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] !== arr[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]))) {
      res.push(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function pointInPoly(xs: number[], ys: number[], px: number, py: number): boolean {
  let inside: boolean = false;
  let i: number = 0;
  let j: number = (_len(xs) - 1);
  while ((i < _len(xs))) {
    let xi: number = xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()];
    let yi: number = ys[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ys.length + _mochi_idx : _mochi_idx;})()];
    let xj: number = xs[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()];
    let yj: number = ys[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ys.length + _mochi_idx : _mochi_idx;})()];
    if ((((yi > py) && (yj <= py)) || ((yj > py) && (yi <= py)))) {
      let xint: number = (Math.trunc(((xj - xi) * (py - yi)) / (yj - yi)) + xi);
      if ((px < xint)) {
        inside = !inside;
      }
    }
    j = i;
    i = (i + 1);
  }
  return inside;
}
function make3DBool(a: number, b: number, c: number): boolean[][][] {
  let arr: boolean[][][] = [];
  let i: number = 0;
  while ((i < a)) {
    let plane: boolean[][] = [];
    let j: number = 0;
    while ((j < b)) {
      let row: boolean[] = [];
      let k: number = 0;
      while ((k < c)) {
        row.push(false);
        k = (k + 1);
      }
      plane.push(row);
      j = (j + 1);
    }
    arr.push(plane);
    i = (i + 1);
  }
  return arr;
}
function main() {
  let tLine: string = _input();
  if ((tLine === "")) {
    return;
  }
  let t: number = Math.trunc(tLine);
  let _case: number = 0;
  while ((_case < t)) {
    let fLine: string = _input();
    let F: number = Math.trunc(fLine);
    let xs: number[] = [];
    let ys: number[] = [];
    let zs: number[] = [];
    xs.push(0);
    xs.push(1001);
    ys.push(0);
    ys.push(1001);
    zs.push(0);
    zs.push(1001);
    let faceXCoord: number[] = [];
    let faceYPoly: number[][] = [];
    let faceZPoly: number[][] = [];
    let i: number = 0;
    while ((i < F)) {
      let line: string = _input();
      let nums: number[] = parse_ints(line);
      let P: number = nums[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()];
      let ptsX: number[] = [];
      let ptsY: number[] = [];
      let ptsZ: number[] = [];
      let j: number = 0;
      while ((j < P)) {
        let x: number = nums[(()=>{const _mochi_idx = Math.trunc((1 + (3 * j))); return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()];
        let y: number = nums[(()=>{const _mochi_idx = Math.trunc(((1 + (3 * j)) + 1)); return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()];
        let z: number = nums[(()=>{const _mochi_idx = Math.trunc(((1 + (3 * j)) + 2)); return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()];
        ptsX.push(x);
        ptsY.push(y);
        ptsZ.push(z);
        xs.push(x);
        ys.push(y);
        zs.push(z);
        j = (j + 1);
      }
      let allSame: boolean = true;
      j = 1;
      while ((j < P)) {
        if ((ptsX[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ptsX.length + _mochi_idx : _mochi_idx;})()] !== ptsX[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? ptsX.length + _mochi_idx : _mochi_idx;})()])) {
          allSame = false;
        }
        j = (j + 1);
      }
      if (allSame) {
        faceXCoord.push(ptsX[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? ptsX.length + _mochi_idx : _mochi_idx;})()]);
        faceYPoly.push(ptsY);
        faceZPoly.push(ptsZ);
      }
      i = (i + 1);
    }
    xs = sort_unique(xs);
    ys = sort_unique(ys);
    zs = sort_unique(zs);
    let nx: number = (_len(xs) - 1);
    let ny: number = (_len(ys) - 1);
    let nz: number = (_len(zs) - 1);
    let xIndex: Record<number, number> = {};
    i = 0;
    while ((i < _len(xs))) {
      xIndex[(()=>{const _mochi_idx = xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? xIndex.length + _mochi_idx : _mochi_idx;})()] = i;
      i = (i + 1);
    }
    let dx: number[] = [];
    i = 0;
    while ((i < nx)) {
      dx.push((xs[(()=>{const _mochi_idx = Math.trunc((i + 1)); return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] - xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]));
      i = (i + 1);
    }
    let dy: number[] = [];
    i = 0;
    while ((i < ny)) {
      dy.push((ys[(()=>{const _mochi_idx = Math.trunc((i + 1)); return _mochi_idx < 0 ? ys.length + _mochi_idx : _mochi_idx;})()] - ys[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ys.length + _mochi_idx : _mochi_idx;})()]));
      i = (i + 1);
    }
    let dz: number[] = [];
    i = 0;
    while ((i < nz)) {
      dz.push((zs[(()=>{const _mochi_idx = Math.trunc((i + 1)); return _mochi_idx < 0 ? zs.length + _mochi_idx : _mochi_idx;})()] - zs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? zs.length + _mochi_idx : _mochi_idx;})()]));
      i = (i + 1);
    }
    let blockX: boolean[][][] = make3DBool(_len(xs), ny, nz);
    i = 0;
    while ((i < _len(faceXCoord))) {
      let coord: number = faceXCoord[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? faceXCoord.length + _mochi_idx : _mochi_idx;})()];
      let polyY: number[] = faceYPoly[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? faceYPoly.length + _mochi_idx : _mochi_idx;})()];
      let polyZ: number[] = faceZPoly[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? faceZPoly.length + _mochi_idx : _mochi_idx;})()];
      let xi: number = xIndex[coord];
      let j: number = 0;
      while ((j < ny)) {
        let cy: number = ((ys[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ys.length + _mochi_idx : _mochi_idx;})()] + ys[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? ys.length + _mochi_idx : _mochi_idx;})()]) / 2.0);
        let k: number = 0;
        while ((k < nz)) {
          let cz: number = ((zs[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? zs.length + _mochi_idx : _mochi_idx;})()] + zs[(()=>{const _mochi_idx = Math.trunc((k + 1)); return _mochi_idx < 0 ? zs.length + _mochi_idx : _mochi_idx;})()]) / 2.0);
          if (pointInPoly(polyY, polyZ, cy, cz)) {
            blockX[(()=>{const _mochi_idx = xi; return _mochi_idx < 0 ? blockX.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? blockX[(()=>{const _mochi_idx = xi; return _mochi_idx < 0 ? blockX.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? blockX[(()=>{const _mochi_idx = xi; return _mochi_idx < 0 ? blockX.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? blockX[(()=>{const _mochi_idx = xi; return _mochi_idx < 0 ? blockX.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
          }
          k = (k + 1);
        }
        j = (j + 1);
      }
      i = (i + 1);
    }
    let solid: boolean[][][] = make3DBool(nx, ny, nz);
    let j2: number = 0;
    while ((j2 < ny)) {
      let k2: number = 0;
      while ((k2 < nz)) {
        let inside: boolean = false;
        let i2: number = 0;
        while ((i2 < nx)) {
          if (blockX[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? blockX.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? blockX[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? blockX.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k2; return _mochi_idx < 0 ? blockX[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? blockX.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? blockX[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? blockX.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) {
            inside = !inside;
          }
          if (inside) {
            solid[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? solid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? solid[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? solid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k2; return _mochi_idx < 0 ? solid[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? solid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? solid[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? solid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
          }
          i2 = (i2 + 1);
        }
        k2 = (k2 + 1);
      }
      j2 = (j2 + 1);
    }
    let volume: number = 0;
    let i3: number = 0;
    while ((i3 < nx)) {
      let j3: number = 0;
      while ((j3 < ny)) {
        let k3: number = 0;
        while ((k3 < nz)) {
          if (solid[(()=>{const _mochi_idx = i3; return _mochi_idx < 0 ? solid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j3; return _mochi_idx < 0 ? solid[(()=>{const _mochi_idx = i3; return _mochi_idx < 0 ? solid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k3; return _mochi_idx < 0 ? solid[(()=>{const _mochi_idx = i3; return _mochi_idx < 0 ? solid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j3; return _mochi_idx < 0 ? solid[(()=>{const _mochi_idx = i3; return _mochi_idx < 0 ? solid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) {
            volume = (volume + ((dx[(()=>{const _mochi_idx = i3; return _mochi_idx < 0 ? dx.length + _mochi_idx : _mochi_idx;})()] * dy[(()=>{const _mochi_idx = j3; return _mochi_idx < 0 ? dy.length + _mochi_idx : _mochi_idx;})()]) * dz[(()=>{const _mochi_idx = k3; return _mochi_idx < 0 ? dz.length + _mochi_idx : _mochi_idx;})()]));
          }
          k3 = (k3 + 1);
        }
        j3 = (j3 + 1);
      }
      i3 = (i3 + 1);
    }
    console.log(_str((("The bulk is composed of " + _str(volume)) + " units.")));
    _case = (_case + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return '[' + x.map(_str).join(', ') + ']';
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

