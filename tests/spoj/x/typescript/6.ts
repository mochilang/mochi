// Generated by Mochi v0.10.74 on 2025-08-27 07:54:55 GMT+7

export interface DigitMap { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
let digitMap: DigitMap = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
function repeat(s: string, n: number): string {
  let r: string = "";
  for (let _ = 0; _ < n; _++) {
    r = (r + s);
  }
  return r;
}
function add_str(a: string, b: string): string {
  let i: number = (_len(a) - 1);
  let j: number = (_len(b) - 1);
  let carry: number = 0;
  let res: string = "";
  while ((((i >= 0) || (j >= 0)) || (carry > 0))) {
    let da: number = 0;
    if ((i >= 0)) {
      da = Math.trunc(digitMap[a.slice(i, (i + 1))]);
    }
    let db: number = 0;
    if ((j >= 0)) {
      db = Math.trunc(digitMap[b.slice(j, (j + 1))]);
    }
    let sum: number = ((da + db) + carry);
    res = (_str((sum % 10)) + res);
    carry = Math.trunc(sum / 10);
    i = (i - 1);
    j = (j - 1);
  }
  return res;
}
function sub_str(a: string, b: string): string {
  let i: number = (_len(a) - 1);
  let j: number = (_len(b) - 1);
  let borrow: number = 0;
  let res: string = "";
  while ((i >= 0)) {
    let da = (Math.trunc(digitMap[a.slice(i, (i + 1))]) - borrow);
    let db: number = 0;
    if ((j >= 0)) {
      db = Math.trunc(digitMap[b.slice(j, (j + 1))]);
    }
    if ((da < db)) {
      da = (da + 10);
      borrow = 1;
    } else {
      borrow = 0;
    }
    let diff = (da - db);
    res = (_str(diff) + res);
    i = (i - 1);
    j = (j - 1);
  }
  let k: number = 0;
  while (((k < _len(res)) && (res.slice(k, (k + 1)) === "0"))) {
    k = (k + 1);
  }
  if ((k === _len(res))) {
    return "0";
  }
  return res.slice(k);
}
function mul_digit(a: string, d: number): string {
  if ((d === 0)) {
    return "0";
  }
  let i: number = (_len(a) - 1);
  let carry: number = 0;
  let res: string = "";
  while ((i >= 0)) {
    let prod = ((Math.trunc(digitMap[a.slice(i, (i + 1))]) * d) + carry);
    res = (_str((prod % 10)) + res);
    carry = Math.trunc(prod / 10);
    i = (i - 1);
  }
  if ((carry > 0)) {
    res = (_str(carry) + res);
  }
  let k: number = 0;
  while (((k < _len(res)) && (res.slice(k, (k + 1)) === "0"))) {
    k = (k + 1);
  }
  if ((k === _len(res))) {
    return "0";
  }
  return res.slice(k);
}
function mul_str(a: string, b: string): Record<string, any> {
  let result: string = "0";
  let shift: number = 0;
  let parts: any[] = [];
  let i: number = (_len(b) - 1);
  while ((i >= 0)) {
    let d = Math.trunc(digitMap[b.slice(i, (i + 1))]);
    let part: string = mul_digit(a, d);
    parts.push({val: part, shift});
    let shifted: string = part;
    for (let _ = 0; _ < shift; _++) {
      shifted = (shifted + "0");
    }
    result = add_str(result, shifted);
    shift = (shift + 1);
    i = (i - 1);
  }
  return {res: result, parts};
}
function pad_left(s: string, total: number): string {
  let r: string = "";
  for (let _ = 0; _ < (total - _len(s)); _++) {
    r = (r + " ");
  }
  return (r + s);
}
function main() {
  let tStr: string = _input();
  if ((tStr === "")) {
    return;
  }
  let t: number = Math.trunc(tStr);
  for (let _ = 0; _ < t; _++) {
    let line: string = _input();
    if ((line === "")) {
      continue
    }
    let idx: number = 0;
    while ((idx < _len(line))) {
      let ch: string = line.slice(idx, (idx + 1));
      if ((((ch === "+") || (ch === "-")) || (ch === "*"))) {
        break
      }
      idx = (idx + 1);
    }
    let a: string = line.slice(0, idx);
    let op: string = line.slice(idx, (idx + 1));
    let b: string = line.slice((idx + 1));
    let res: string = "";
    let parts: any[] = [];
    if ((op === "+")) {
      res = add_str(a, b);
    } else {
      if ((op === "-")) {
        res = sub_str(a, b);
      } else {
        let r: Record<string, any> = mul_str(a, b);
        res = r.res;
        parts = r.parts;
      }
    }
    let width: number = _len(a);
    let secondLen: number = (_len(b) + 1);
    if ((secondLen > width)) {
      width = secondLen;
    }
    if ((_len(res) > width)) {
      width = _len(res);
    }
    for (const p of parts) {
      let l: number = (_len(p.val) + Math.trunc(p.shift));
      if ((l > width)) {
        width = l;
      }
    }
    console.log(_str(pad_left(a, width)));
    console.log(_str(pad_left((op + b), width)));
    let dash1: number = 0;
    if ((op === "*")) {
      if ((_len(parts) > 0)) {
        dash1 = (_len(b) + 1);
        let firstPart: string = parts[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? parts.length + _mochi_idx : _mochi_idx;})()].val;
        if ((_len(firstPart) > dash1)) {
          dash1 = _len(firstPart);
        }
      } else {
        dash1 = (_len(b) + 1);
        if ((_len(res) > dash1)) {
          dash1 = _len(res);
        }
      }
    } else {
      dash1 = (_len(b) + 1);
      if ((_len(res) > dash1)) {
        dash1 = _len(res);
      }
    }
    console.log(_str(pad_left(repeat("-", dash1), width)));
    if (((op === "*") && (_len(b) > 1))) {
      for (const p of parts) {
        let val: string = p.val;
        let shift: number = Math.trunc(p.shift);
        let spaces: number = ((width - shift) - _len(val));
        line = "";
        for (let _ = 0; _ < spaces; _++) {
          line = (line + " ");
        }
        line = (line + val);
        console.log(_str(line));
      }
      console.log(_str(pad_left(repeat("-", _len(res)), width)));
    }
    console.log(_str(pad_left(res, width)));
    console.log(_str(""));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return '[' + x.map(_str).join(', ') + ']';
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

