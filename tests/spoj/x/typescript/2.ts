// Generated by Mochi v0.10.74 on 2025-08-27 07:54:54 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
function parseIntStr(str: string): number {
  let i: number = 0;
  let n: number = 0;
  while ((i < _len(str))) {
    n = ((n * 10) + Math.trunc(digits[str[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? str.length + _mochi_idx : _mochi_idx;})()]]));
    i = (i + 1);
  }
  return n;
}
function sieve(limit: number): number[] {
  let isPrime: boolean[] = [];
  let i: number = 0;
  while ((i <= limit)) {
    isPrime.push(true);
    i = (i + 1);
  }
  isPrime[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? isPrime.length + _mochi_idx : _mochi_idx;})()] = false;
  if ((limit >= 1)) {
    isPrime[(()=>{const _mochi_idx = 1; return _mochi_idx < 0 ? isPrime.length + _mochi_idx : _mochi_idx;})()] = false;
  }
  let p: number = 2;
  while (((p * p) <= limit)) {
    if (isPrime[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? isPrime.length + _mochi_idx : _mochi_idx;})()]) {
      let mult: number = (p * p);
      while ((mult <= limit)) {
        isPrime[(()=>{const _mochi_idx = mult; return _mochi_idx < 0 ? isPrime.length + _mochi_idx : _mochi_idx;})()] = false;
        mult = (mult + p);
      }
    }
    p = (p + 1);
  }
  let primes: number[] = [];
  i = 2;
  while ((i <= limit)) {
    if (isPrime[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? isPrime.length + _mochi_idx : _mochi_idx;})()]) {
      primes.push(i);
    }
    i = (i + 1);
  }
  return primes;
}
function segment(m: number, n: number, primes: number[]) {
  let size: number = ((n - m) + 1);
  let isPrime: boolean[] = [];
  let i: number = 0;
  while ((i < size)) {
    isPrime.push(true);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(primes))) {
    let p: number = Math.trunc(primes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? primes.length + _mochi_idx : _mochi_idx;})()]);
    if (((p * p) > n)) {
      break
    }
    let start: number = (p * p);
    if ((start < m)) {
      start = (Math.trunc(((m + p) - 1) / p) * p);
    }
    let j: number = start;
    while ((j <= n)) {
      isPrime[(()=>{const _mochi_idx = (j - m); return _mochi_idx < 0 ? isPrime.length + _mochi_idx : _mochi_idx;})()] = false;
      j = (j + p);
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < size)) {
    let num = (m + i);
    if (((num > 1) && isPrime[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? isPrime.length + _mochi_idx : _mochi_idx;})()])) {
      console.log(_str(num));
    }
    i = (i + 1);
  }
}
function main() {
  let tStr: string = _input();
  if ((tStr === "")) {
    return;
  }
  let t = parseIntStr(tStr);
  let primes: number[] = sieve(31623);
  let _case: number = 0;
  while ((_case < t)) {
    let line: string = _input();
    let idx: number = 0;
    let m: number = 0;
    while (((idx < _len(line)) && (line[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? line.length + _mochi_idx : _mochi_idx;})()] !== " "))) {
      m = ((m * 10) + Math.trunc(digits[line[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? line.length + _mochi_idx : _mochi_idx;})()]]));
      idx = (idx + 1);
    }
    idx = (idx + 1);
    let n: number = 0;
    while ((idx < _len(line))) {
      n = ((n * 10) + Math.trunc(digits[line[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? line.length + _mochi_idx : _mochi_idx;})()]]));
      idx = (idx + 1);
    }
    segment(m, n, primes);
    _case = (_case + 1);
    if ((_case < t)) {
      console.log(_str(""));
    }
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return '[' + x.map(_str).join(', ') + ']';
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

