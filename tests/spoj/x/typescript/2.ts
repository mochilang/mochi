// Generated by Mochi v0.10.74 on 2025-08-26 14:34:07 GMT+7

function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    if ((((_len(sep) > 0) && ((i + _len(sep)) <= _len(s))) && ((s).substring(i, (i + _len(sep))) === sep))) {
      parts.push(cur);
      cur = "";
      i = (i + _len(sep));
    } else {
      cur = (cur + s.slice(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts.push(cur);
  return parts;
}
function precompute(limit: number): number[] {
  let sieve: boolean[] = [];
  for (let i = 0; i < (limit + 1); i++) {
    sieve.push(true);
  }
  sieve[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? sieve.length + _mochi_idx : _mochi_idx;})()] = false;
  sieve[(()=>{const _mochi_idx = 1; return _mochi_idx < 0 ? sieve.length + _mochi_idx : _mochi_idx;})()] = false;
  let p: number = 2;
  while (((p * p) <= limit)) {
    if (sieve[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? sieve.length + _mochi_idx : _mochi_idx;})()]) {
      let j: number = (p * p);
      while ((j <= limit)) {
        sieve[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? sieve.length + _mochi_idx : _mochi_idx;})()] = false;
        j = (j + p);
      }
    }
    p = (p + 1);
  }
  let primes: number[] = [];
  for (let i = 2; i < (limit + 1); i++) {
    if (sieve[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? sieve.length + _mochi_idx : _mochi_idx;})()]) {
      primes.push(i);
    }
  }
  return primes;
}
let case_idx: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return '[' + x.map(_str).join(', ') + ']';
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
let primes: number[]
let t: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
primes = precompute(32000)
t = Math.trunc(_input())
  while ((case_idx < t)) {
    let line: string = _input();
    let parts: string[] = split(line, " ");
    let m: number = Math.trunc(parts[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? parts.length + _mochi_idx : _mochi_idx;})()]);
    let n: number = Math.trunc(parts[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? parts.length + _mochi_idx : _mochi_idx;})()]);
    let size: number = ((n - m) + 1);
    let segment: boolean[] = [];
    for (let i = 0; i < size; i++) {
      segment.push(true);
    }
    for (const p of primes) {
      if (((p * p) > n)) {
        break
      }
      let start: number = (p * p);
      if ((start < m)) {
        let rem: number = (m % p);
        if ((rem === 0)) {
          start = m;
        } else {
          start = (m + (p - rem));
        }
      }
      let j: number = start;
      while ((j <= n)) {
        segment[(()=>{const _mochi_idx = (j - m); return _mochi_idx < 0 ? segment.length + _mochi_idx : _mochi_idx;})()] = false;
        j = (j + p);
      }
    }
    if ((m === 1)) {
      segment[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? segment.length + _mochi_idx : _mochi_idx;})()] = false;
    }
    let i: number = 0;
    while ((i < size)) {
      if (segment[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? segment.length + _mochi_idx : _mochi_idx;})()]) {
        console.log(_str((i + m)));
      }
      i = (i + 1);
    }
    if ((case_idx < (t - 1))) {
      console.log(_str(""));
    }
    case_idx = (case_idx + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

