// Generated by Mochi v0.10.74 on 2025-08-26 14:41:22 GMT+7

export interface DigitMap { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function next_pal(s: string): string {
  let digitMap: DigitMap = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  let n: number = _len(s);
  let num: number[] = [];
  for (let i = 0; i < n; i++) {
    num.push(Math.trunc(digitMap[s.slice(i, (i + 1))]));
  }
  let all9: boolean = true;
  for (const d of num) {
    if ((d !== 9)) {
      all9 = false;
      break
    }
  }
  if (all9) {
    let res: string = "1";
    for (let _ = 0; _ < (n - 1); _++) {
      res = (res + "0");
    }
    res = (res + "1");
    return res;
  }
  let left: number = (Math.trunc(n / 2) - 1);
  let right: number = (((n % 2) === 0) ? Math.trunc(n / 2) : (Math.trunc(n / 2) + 1));
  while ((((left >= 0) && (right < n)) && (num[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] === num[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()]))) {
    left = (left - 1);
    right = (right + 1);
  }
  let smaller = ((left < 0) || (num[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] < num[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()]));
  left = (Math.trunc(n / 2) - 1);
  right = (((n % 2) === 0) ? Math.trunc(n / 2) : (Math.trunc(n / 2) + 1));
  while ((left >= 0)) {
    num[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] = num[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()];
    left = (left - 1);
    right = (right + 1);
  }
  if (smaller) {
    let carry: number = 1;
    left = (Math.trunc(n / 2) - 1);
    if (((n % 2) === 1)) {
      let mid: number = Math.trunc(n / 2);
      num[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] = (num[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] + carry);
      carry = Math.trunc(num[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] / 10);
      num[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] = (num[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] % 10);
      right = (mid + 1);
    } else {
      right = Math.trunc(n / 2);
    }
    while ((left >= 0)) {
      num[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] = (num[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] + carry);
      carry = Math.trunc(num[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] / 10);
      num[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] = (num[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] % 10);
      num[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()] = num[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? num.length + _mochi_idx : _mochi_idx;})()];
      left = (left - 1);
      right = (right + 1);
    }
  }
  let out: string = "";
  for (const d of num) {
    out = (out + _str(d));
  }
  return out;
}
function parseIntStr(str: string): number {
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  let i: number = 0;
  let n: number = 0;
  while ((i < _len(str))) {
    n = ((n * 10) + Math.trunc(digits[str.slice(i, (i + 1))]));
    i = (i + 1);
  }
  return n;
}
function main() {
  let tStr: string = _input();
  if ((tStr === "")) {
    return;
  }
  let t = parseIntStr(tStr);
  for (let _ = 0; _ < t; _++) {
    let s: string = _input();
    console.log(_str(next_pal(s)));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return '[' + x.map(_str).join(', ') + ']';
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

