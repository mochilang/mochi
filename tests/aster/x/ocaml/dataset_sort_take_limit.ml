(* Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:38 +0700 *)

let () =
  let products = [[("name", "Laptop"); ("price", 1500)]; [("name", "Smartphone"); ("price", 900)]; [("name", "Tablet"); ("price", 600)]; [("name", "Monitor"); ("price", 300)]; [("name", "Keyboard"); ("price", 100)]; [("name", "Mouse"); ("price", 50)]; [("name", "Headphones"); ("price", 200)]] in
  let expensive = (let __tmp0 = (List.map (fun p -> p) products) in
  let __tmp0 = List.sort (fun a b -> compare (List.assoc "brice" b) (List.assoc "arice" a)) __tmp0 in
  let rec drop n l = if n <= 0 then l else match l with [] -> [] | _::t -> drop (n-1) t in
  let rec take n l = if n <= 0 then [] else match l with [] -> [] | x::xs -> x :: take (n-1) xs in
  let __tmp0 = drop (1) __tmp0 in
  let __tmp0 = take (3) __tmp0 in
  __tmp0) in
  print_endline (String.concat " " (List.filter (fun s -> s <> "") ["--- Top products (excluding most expensive) ---"]));
  (try List.iter (fun item ->
    try
  print_endline (String.concat " " (List.filter (fun s -> s <> "") [(List.assoc "name" item); "costs $"; string_of_int (List.assoc "price" item))]));
    with Continue -> ()) expensive with Break -> ())
