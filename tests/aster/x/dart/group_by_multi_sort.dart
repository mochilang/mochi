// Generated by Mochi transpiler
class S1 {
  final dynamic a;
  final dynamic b;
  final num total;
  const S1({required this.a, required this.b, required this.total});
}
class Item {
  final String a;
  final int b;
  final int val;
  const Item({required this.a, required this.b, required this.val});
}
void main() {
  final List<Item> items = [Item(a: "x", b: 1, val: 2), Item(a: "x", b: 2, val: 3), Item(a: "y", b: 1, val: 4), Item(a: "y", b: 2, val: 1)];
  final List<S1> grouped = (() final groups = <String, Map, <String, dynamic>>{};
for (var i in items) {
  var key = {, };
  var ks = key.toString;
  var g = groups[ks];
  if (g) {
    g = {'key': key, };
     = g;
  }
  (type_cast_expression).add(i);
}
final _list = groups.values.toList;
_list.sort(((a, b) [for (var x in b) x.val].isEmpty0([for (var x in b) x.val], .reduce, ((a, b) a + b)) ? .compareTo : ([for (var x in a) x.val].isEmpty ? 0 : ([for (var x in a) x.val], .reduce, ((a, b) a + b)))));
final res = [<S1>];
for (var g in _list) {
  res.add(S1(a: g["key"].a, b: g["key"].b, total: [for (var x in g) x.val].isEmpty ? 0 : ([for (var x in g) x.val], .reduce, ((a, b) a + b))));
}
return res;
);
  print("[" + grouped.join(', ') + "]");
}
