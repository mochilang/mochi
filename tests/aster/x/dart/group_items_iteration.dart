// Generated by Mochi transpiler
class Data {
  final String tag;
  final int val;
  const Data({required this.tag, required this.val});
}
void main() {
  final List<Data> data = [Data(tag: "a", val: 1), Data(tag: "a", val: 2), Data(tag: "b", val: 3)];
  final List<Map, <String, dynamic>> groups = (() var groups = <String, Map, <String, dynamic>>{};
for (var d in data) {
  var key = d.tag;
  var ks = key.toString;
  var g = groups[ks];
  if (g) {
    g = {'key': key, };
     = g;
  }
  (type_cast_expression).add(d);
}
var _list = groups.values.toList;
var res = [<Map, <String, dynamic>>];
for (var g in _list) {
  res.add(g);
}
return res;
);
  List<dynamic> tmp;
  for (var g in groups) {
    int total = 0;
    for (inferred_type; x; g) {
      total = total + x.val;
    }
    tmp = [...tmp, {, "total": total}];
  }
  final List<dynamic> result = (List, .of, ([for (var r in tmp) r]), cascade_section);
  print("[" + result.join(', ') + "]");
}
