// Generated by Mochi transpiler v0.10.34 on 2025-07-21 23:13:23 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <optional>
#include <sstream>
#include <iomanip>
template_declaration
template_declaration
struct CustomersItem {
    int id;
    std::string name;
};
struct OrdersItem {
    int id;
    int customerId;
};
struct ItemsItem {
    int orderId;
    std::string sku;
};
struct ResultItem {
    int orderId;
    std::string name;
    std::optional<ItemsItem> item;
};
std::ostream &operator<<(std::ostream &os, const CustomersItem &v) {
    os << '{' << "'id': " << v.id << ", " << "'name': '" << v.name << "'" + '}';
    return os;
}
std::ostream &operator<<(std::ostream &os, const OrdersItem &v) {
    os << '{' << "'id': " << v.id << ", " << "'customerId': " << v.customerId + '}';
    return os;
}
std::ostream &operator<<(std::ostream &os, const ItemsItem &v) {
    os << '{' << "'orderId': " << v.orderId << ", " << "'sku': '" << v.sku << "'" + '}';
    return os;
}
std::ostream &operator<<(std::ostream &os, const ResultItem &v) {
    os << '{' << "'orderId': " << v.orderId << ", " << "'name': '" << v.name << "'" << ", " << "'item': " << v.item + '}';
    return os;
}
std::vector<CustomersItem> customers = std::vector{CustomersItem{.id = 1, .name = std::string("Alice")}, CustomersItem{.id = 2, .name = std::string("Bob")}};
std::vector<OrdersItem> orders = std::vector{OrdersItem{.id = 100, .customerId = 1}, OrdersItem{.id = 101, .customerId = 2}};
std::vector<ItemsItem> items = std::vector{ItemsItem{.orderId = 100, .sku = std::string("a")}};
std::vector<ResultItem> result = ([] {
    std::vector<ResultItem> __items;
    for (auto o : orders) {
        for (auto c : customers) {
            if ((o.customerId == c.id)) {
                bool __matched = false;
                for (auto __i : items) {
                    auto i = __i;
                    if ((o.id == i.orderId)) {
                        __matched = true;
                        compound_statement
                    }
                }
                if (!__matched) {
                    std::optional<ItemsItem> i = std::nullopt;
                    __items.push_back(ResultItem{.orderId = o.id, .name = c.name, .item = i});
                }
            }
        }
    }
    return __items;
}());
int main() {
    std::cout << std::string("--- Left Join Multi ---") << std::endl;
    for (auto r : result) {
        std::cout << r.orderId << " " << r.name << " " << r.item << std::endl;
    }
    return 0;
}
