// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:19:55 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <unordered_map>
#include <sstream>
#include <iomanip>
struct CustomersItem {
    int id;
    std::string name;
};
struct OrdersItem {
    int id;
    int customerId;
};
struct GGroup {
    std::string key;
    std::vector<CustomersItem> items;
    auto function_declarator;
    auto function_declarator;
    size_t function_declarator;
};
struct StatsItem {
    std::string name;
    int count;
};
std::vector<CustomersItem> customers = std::vector{CustomersItem{.id = 1, .name = std::string("Alice")}, CustomersItem{.id = 2, .name = std::string("Bob")}};
std::vector<OrdersItem> orders = std::vector{OrdersItem{.id = 100, .customerId = 1}, OrdersItem{.id = 101, .customerId = 1}, OrdersItem{.id = 102, .customerId = 2}};
std::vector<StatsItem> stats = ([] {
    std::vector<StatsItem> __items;
    std::vector<GGroup> __groups;
    std::unordered_map<std::string, size_t> __idx;
    for (auto o : orders) {
        for (auto c : customers) {
            if ((o.customerId == c.id)) {
                auto __key = c.name;
                auto it = __idx.find(__key);
                if (it == __idx.end()) {
                    GGroup __g = {__key};
                    __g.items.push_back(c);
                    assignment_expression;
                    __groups.push_back(__g);
                }
            }
        }
    }
    for (auto &__g : __groups) {
        GGroup g = __g;
        __items.push_back(StatsItem{.name = g.key, .count = g.size()});
    }
    return __items;
}());
int main() {
    std::cout << std::boolalpha << std::string("--- Orders per customer ---") << std::endl;
    for (auto s : stats) {
        std::cout << std::boolalpha << s.name << ' ' << std::string("orders:") << ' ' << s.count << std::endl;
    }
    return 0;
}
