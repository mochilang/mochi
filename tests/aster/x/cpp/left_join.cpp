// Generated by Mochi transpiler v0.10.34 on 2025-07-21 20:45:53 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <optional>
#include <sstream>
#include <iomanip>
template_declaration
struct CustomersItem {
    int id;
    std::string name;
};
struct OrdersItem {
    int id;
    int customerId;
    int total;
};
struct ResultItem {
    int orderId;
    std::optional<CustomersItem> customer;
    int total;
};
std::ostream &operator<<(std::ostream &os, const CustomersItem &v) {
    os << '{' << "'id': " << v.id << ", " << "'name': '" << v.name << "'" + '}';
    return os;
}
std::ostream &operator<<(std::ostream &os, const OrdersItem &v) {
    os << '{' << "'id': " << v.id << ", " << "'customerId': " << v.customerId << ", " << "'total': " << v.total + '}';
    return os;
}
std::ostream &operator<<(std::ostream &os, const ResultItem &v) {
    os << '{' << "'orderId': " << v.orderId << ", " << "'customer': " << v.customer << ", " << "'total': " << v.total + '}';
    return os;
}
std::vector<CustomersItem> customers = std::vector{CustomersItem{.id = 1, .name = "Alice"}, CustomersItem{.id = 2, .name = "Bob"}};
std::vector<OrdersItem> orders = std::vector{OrdersItem{.id = 100, .customerId = 1, .total = 250}, OrdersItem{.id = 101, .customerId = 3, .total = 80}};
auto result = ([] {
    std::vector<ResultItem> __items;
    for (auto o : orders) {
        bool __matched = false;
        for (auto __c : customers) {
            auto c = __c;
            if ((o.customerId == c.id)) {
                __matched = true;
                compound_statement
            }
        }
        if (!__matched) {
            std::optional<CustomersItem> c = std::nullopt;
            __items.push_back(ResultItem{.orderId = o.id, .customer = c, .total = o.total});
        }
    }
    return __items;
}());
int main() {
    std::cout << (compound_statement()) << std::endl;
    for (auto entry : result) {
        std::cout << (compound_statement()) << ' ' << (compound_statement()) << ' ' << (compound_statement()) << ' ' << (compound_statement()) << ' ' << (compound_statement()) << ' ' << (compound_statement()) << std::endl;
    }
    return 0;
}
