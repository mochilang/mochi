// Generated by Mochi transpiler v0.10.34 on 2025-07-21 22:59:36 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <numeric>
#include <unordered_map>
#include <sstream>
#include <iomanip>
#include <optional>
template_declaration
template_declaration
struct NationsItem {
    int id;
    std::string name;
};
struct SuppliersItem {
    int id;
    int nation;
};
struct PartsuppItem {
    int part;
    int supplier;
    double cost;
    int qty;
};
struct FilteredItem {
    int part;
    double value;
};
struct GGroup {
    int key;
    std::vector<FilteredItem> items;
    auto function_declarator;
    auto function_declarator;
    size_t function_declarator;
};
struct GroupedItem {
    int part;
    double total;
};
std::ostream function_declarator() {
    os << '{' << "'id': " << v.id << ", " << "'name': '" << v.name << "'" + '}';
    return os;
}
std::ostream function_declarator() {
    os << '{' << "'id': " << v.id << ", " << "'nation': " << v.nation + '}';
    return os;
}
std::ostream function_declarator() {
    os << '{' << "'part': " << v.part << ", " << "'supplier': " << v.supplier << ", " << "'cost': " << v.cost << ", " << "'qty': " << v.qty + '}';
    return os;
}
std::ostream function_declarator() {
    os << '{' << "'part': " << v.part << ", " << "'value': " << v.value + '}';
    return os;
}
std::ostream function_declarator() {
    os << '{' << "'key': " << v.key << ", " << "'items': " << v.items + '}';
    return os;
}
std::ostream function_declarator() {
    os << '{' << "'part': " << v.part << ", " << "'total': " << v.total + '}';
    return os;
}
std::vector<NationsItem> nations = std::vector{NationsItem{.id = 1, .name = std::string("A")}, NationsItem{.id = 2, .name = std::string("B")}};
std::vector<SuppliersItem> suppliers = std::vector{SuppliersItem{.id = 1, .nation = 1}, SuppliersItem{.id = 2, .nation = 2}};
std::vector<PartsuppItem> partsupp = std::vector{PartsuppItem{.part = 100, .supplier = 1, .cost = 10.0, .qty = 2}, PartsuppItem{.part = 100, .supplier = 2, .cost = 20.0, .qty = 1}, PartsuppItem{.part = 200, .supplier = 1, .cost = 5.0, .qty = 3}};
std::vector<FilteredItem> filtered = ([] {
    std::vector<FilteredItem> __items;
    for (auto ps : partsupp) {
        for (auto s : suppliers) {
            for (auto n : nations) {
                if ((((n.name == std::string("A")) && (s.id == ps.supplier)) && (n.id == s.nation))) {
                    __items.push_back(FilteredItem{.part = ps.part, .value = (ps.cost * ps.qty)});
                }
            }
        }
    }
    return __items;
}());
std::vector<GroupedItem> grouped = ([] {
    std::vector<GroupedItem> __items;
    std::vector<GGroup> __groups;
    std::unordered_map<int, size_t> __idx;
    for (auto x : filtered) {
        auto __key = x.part;
        auto it = __idx.find(__key);
        if (it == __idx.end()) {
            GGroup __g = {__key};
            __g.items.push_back(x);
            assignment_expression;
            __groups.push_back(__g);
        }
    }
    for (auto &__g : __groups) {
        GGroup g = __g;
        __items.push_back(GroupedItem{.part = g.key, .total = (compound_statement())});
    }
    return __items;
}());
int main() {
    std::cout << grouped << std::endl;
    return 0;
}
