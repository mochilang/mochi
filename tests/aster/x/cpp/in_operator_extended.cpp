// Generated by Mochi transpiler v0.10.34 on 2025-07-21 21:02:50 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <type_traits>
#include <map>
#include <optional>
template_declaration
auto xs = std::vector{1, 2, 3};
std::vector<int> ys = ([] {
    std::vector<int> __items;
    for (auto x : xs) {
        if (((x % 2) == 1)) {
            __items.push_back(x);
        }
    }
    return __items;
}());
auto m = std::map<std::string, int>{{"a", 1}};
auto s = std::string("hello");
int main() {
    std::cout << ((const auto &c, const auto &v) {
        if (std::is_same_v<std::decay_t<decltype>, std::string>) {
            return c.find(v) != std::string::npos;
        }
    })(ys, 1) << std::endl;
    std::cout << ((const auto &c, const auto &v) {
        if (std::is_same_v<std::decay_t<decltype>, std::string>) {
            return c.find(v) != std::string::npos;
        }
    })(ys, 2) << std::endl;
    std::cout << ((const auto &c, const auto &v) {
        if (std::is_same_v<std::decay_t<decltype>, std::string>) {
            return c.find(v) != std::string::npos;
        }
    })(m, std::string("a")) << std::endl;
    std::cout << ((const auto &c, const auto &v) {
        if (std::is_same_v<std::decay_t<decltype>, std::string>) {
            return c.find(v) != std::string::npos;
        }
    })(m, std::string("b")) << std::endl;
    std::cout << ((const auto &c, const auto &v) {
        if (std::is_same_v<std::decay_t<decltype>, std::string>) {
            return c.find(v) != std::string::npos;
        }
    })(s, std::string("ell")) << std::endl;
    std::cout << ((const auto &c, const auto &v) {
        if (std::is_same_v<std::decay_t<decltype>, std::string>) {
            return c.find(v) != std::string::npos;
        }
    })(s, std::string("foo")) << std::endl;
    return 0;
}
