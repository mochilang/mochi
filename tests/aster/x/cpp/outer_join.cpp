// Generated by Mochi transpiler v0.10.35 on 2025-07-22 13:04:37 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <optional>
#include <sstream>
#include <iomanip>
struct CustomersItem {
    int id;
    std::string name;
    auto operator<=>(const CustomersItem) const;
};
struct OrdersItem {
    int id;
    int customerId;
    int total;
    auto operator<=>(const OrdersItem) const;
};
struct ResultItem {
    std::optional<OrdersItem> order;
    std::optional<CustomersItem> customer;
    auto operator<=>(const ResultItem) const;
};
std::ostream &operator<<(std::ostream &os, const CustomersItem &v) {
    os << '{' << "'id': " << v.id << ", " << "'name': " << "'" << v.name << "'" << '}';
    return os;
}
std::ostream &operator<<(std::ostream &os, const OrdersItem &v) {
    os << '{' << "'id': " << v.id << ", " << "'customerId': " << v.customerId << ", " << "'total': " << v.total << '}';
    return os;
}
std::ostream &operator<<(std::ostream &os, const ResultItem &v) {
    os << '{' << "'order': ";
    if (v.order) {
        os << *v.order;
    }
    os << ", " << "'customer': ";
    if (v.customer) {
        os << *v.customer;
    }
    os << '}';
    return os;
}
std::vector<CustomersItem> customers = std::vector{CustomersItem{.id = 1, .name = std::string("Alice")}, CustomersItem{.id = 2, .name = std::string("Bob")}, CustomersItem{.id = 3, .name = std::string("Charlie")}, CustomersItem{.id = 4, .name = std::string("Diana")}};
std::vector<OrdersItem> orders = std::vector{OrdersItem{.id = 100, .customerId = 1, .total = 250}, OrdersItem{.id = 101, .customerId = 2, .total = 125}, OrdersItem{.id = 102, .customerId = 1, .total = 300}, OrdersItem{.id = 103, .customerId = 5, .total = 80}};
std::vector<ResultItem> result = ([] {
    std::vector<ResultItem> __items;
    for (auto o : orders) {
        bool __matched = false;
        for (auto c : customers) {
            if ((o.customerId == c.id)) {
                __matched = true;
                compound_statement
            }
        }
        if (!__matched) {
            std::optional<CustomersItem> c = std::nullopt;
            compound_statement
        }
    }
    for (auto c : customers) {
        bool __matched = false;
        for (auto o : orders) {
            if ((o.customerId == c.id)) {
                __matched = true;
                break;
            }
        }
        if (!__matched) {
            std::optional<OrdersItem> o = std::nullopt;
            std::optional<CustomersItem> c_opt = parameter_list;
            auto c = c_opt;
            __items.push_back(ResultItem{.order = o, .customer = c});
        }
    }
    return __items;
}());
int main() {
    std::cout << std::string("--- Outer Join using syntax ---");
    std::cout << std::endl;
    for (ResultItem row : result) {
        if (row.order) {
            if (row.customer) {
                std::cout << std::string("Order");
                std::cout << " ";
                std::cout << row.order.id;
                std::cout << " ";
                std::cout << std::string("by");
                std::cout << " ";
                std::cout << row.customer.name;
                std::cout << " ";
                std::cout << std::string("- $");
                std::cout << " ";
                std::cout << row.order.total;
                std::cout << std::endl;
            }
        }
    }
    return 0;
}
