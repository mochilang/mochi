;; Generated by Mochi 0.10.33 on 2025-07-21 18:06 +0700


#lang racket


(require racket/list racket/string)


(define customers
  (list
    (hash "id" 1 "name" "Alice")
    (hash "id" 2 "name" "Bob")
    (hash "id" 3 "name" "Charlie")))


(define orders
  (list
    (hash "id" 100 "customerId" 1 "total" 250)
    (hash "id" 101 "customerId" 2 "total" 125)
    (hash "id" 102 "customerId" 1 "total" 300)))


(define result
  (let
    ((_res '()))
    (for
      ((o orders))
      (for
        ((c customers))
        (set! _res
          (append _res
            (list
              (hash "orderId"
                (hash-ref o "id") "orderCustomerId"
                (hash-ref o "customerId") "pairedCustomerName"
                (hash-ref c "name") "orderTotal"
                (hash-ref o "total")))))))
    _res))


(displayln "--- Cross Join: All order-customer pairs ---")


(for
  ((entry result))
  (displayln
    (string-join
      (filter
        (lambda
          (s)
          (not
            (string=? s "")))
        (list
          (format "~a" "Order")
          (format "~a"
            (hash-ref entry "orderId"))
          (format "~a" "(customerId:")
          (format "~a"
            (hash-ref entry "orderCustomerId"))
          (format "~a" ", total: $")
          (format "~a"
            (hash-ref entry "orderTotal"))
          (format "~a" ") paired with")
          (format "~a"
            (hash-ref entry "pairedCustomerName")))) " ")))
