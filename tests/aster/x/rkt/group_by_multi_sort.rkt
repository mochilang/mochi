;; Generated by Mochi 0.10.34 on 2025-07-22 10:07 +0700


#lang racket/base


(require racket/list racket/string json)


(define items
  (list
    (hash "a" "x" "b" 1 "val" 2)
    (hash "a" "x" "b" 2 "val" 3)
    (hash "a" "y" "b" 1 "val" 4)
    (hash "a" "y" "b" 2 "val" 1)))


(define grouped
  (let
    ((_groups
        (make-hash))
      (_res '()))
    (for
      ((i items))
      (let*
        ((_key
            (hash "a"
              (hash-ref i "a") "b"
              (hash-ref i "b")))
          (_g
            (hash-ref _groups _key
              (lambda
                ()
                (let
                  ((h
                      (make-hash)))
                  (hash-set! h "key" _key)
                  (hash-set! h "items" '())
                  (hash-set! _groups _key h) h)))))
        (hash-set! _g "items"
          (append
            (hash-ref _g "items")
            (list i)))))
    (for
      ((g
          (hash-values _groups)))
      (let
        ((val
            (hash "a"
              (hash-ref
                (hash-ref g "key") "a") "b"
              (hash-ref
                (hash-ref g "key") "b") "total"
              (apply +
                (for*/list
                  ((x
                      (hash-ref g "items")))
                  (hash-ref x "val")))))
          (key
            (-
              (apply +
                (for*/list
                  ((x
                      (hash-ref g "items")))
                  (hash-ref x "val"))))))
        (set! _res
          (append _res
            (list
              (cons key val))))))
    (set! _res
      (sort _res < #:key car))
    (set! _res
      (map cdr _res))
    _res))


(displayln grouped)
