;; Generated by Mochi 0.10.34 on 2025-07-21 23:34 +0700


#lang racket


(require racket/list racket/string json)


(define data
  (list
    (hash "tag" "a" "val" 1)
    (hash "tag" "a" "val" 2)
    (hash "tag" "b" "val" 3)))


(define groups
  (let
    ((_groups
        (make-hash))
      (_res '()))
    (for
      ((d data))
      (let*
        ((_key
            (hash-ref d "tag"))
          (_g
            (hash-ref _groups _key
              (lambda
                ()
                (let
                  ((h
                      (make-hash)))
                  (hash-set! h "key" _key)
                  (hash-set! h "items" '())
                  (hash-set! _groups _key h) h)))))
        (hash-set! _g "items"
          (append
            (hash-ref _g "items")
            (list d)))))
    (for
      ((g
          (hash-values _groups)))
      (let
        ((val g))
        (set! _res
          (append _res
            (list val)))))
    _res))


(define tmp
  (list))


(for
  ((g groups))
  (define total 0)
  (for
    ((x
        (hash-ref g "items")))
    (set! total
      (+ total
        (hash-ref x "val"))))
  (set! tmp
    (append tmp
      (list
        (hash "tag"
          (hash-ref g "key") "total" total)))))


(define result
  (let
    ((_res '()))
    (for
      ((r tmp))
      (set! _res
        (append _res
          (list
            (cons
              (hash-ref r "tag") r)))))
    (set! _res
      (sort _res
        (lambda
          (a b)
          (cond
            ((and
                (number? a)
                (number? b))
              (< a b))
            ((and
                (string? a)
                (string? b))
              (string<? a b))
            (else
              (string<?
                (format "~a" a)
                (format "~a" b))))) #:key car))
    (set! _res
      (map cdr _res))
    _res))


(displayln result)
