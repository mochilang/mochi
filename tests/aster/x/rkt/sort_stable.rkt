;; Generated by Mochi 0.10.36 on 2025-07-22 17:10 +0700

#lang racket/base

(require racket/list racket/string racket/math json)

(define items
  (list
    (hash "n" 1 "v" "a")
    (hash "n" 1 "v" "b")
    (hash "n" 2 "v" "c")))

(define result
  (let
    ((_res '()))
    (for
      ((i items))
      (set! _res
        (append _res
          (list
            (cons
              (hash-ref i "n")
              (hash-ref i "v"))))))
    (set! _res
      (sort _res
        (lambda
          (a b)
          (cond
            ((and
                (number? a)
                (number? b))
              (< a b))
            ((and
                (string? a)
                (string? b))
              (string<? a b))
            (else
              (string<?
                (format "~a" a)
                (format "~a" b))))) #:key car))
    (set! _res
      (map cdr _res)) _res))

(displayln result)
