#!/usr/bin/env escript
-module(main).

-export([main/1]).

% Generated by Mochi transpiler v0.10.34 (b6741d6c9) on 2025-07-22 10:07 +0700
main(_) ->
    Customers = [#{"id" => 1, "name" => "Alice"}, #{"id" => 2, "name" => "Bob"}],
    Orders = [#{"id" => 100, "customerId" => 1}, #{"id" => 101, "customerId" => 2}],
    Items = [#{"orderId" => 100, "sku" => "a"}],
    Result = lists:reverse(lists:foldl(fun (O, Acc0) ->     {Matched, Acc} = lists:foldl(fun (I, {M, A}) ->     case (maps:get("id", maps:get("o", O)) == maps:get("orderId", I)) of
        true ->         {true, [#{"orderId" => maps:get("id", maps:get("o", O)), "name" => maps:get("name", maps:get("c", O)), "item" => I}|A]}
;
        _ ->         {M, A}

    end
 end, {false, Acc0}, Items),
    case Matched of
        true ->         Acc
;
        false ->         [(fun() -> I = nil, #{"orderId" => maps:get("id", maps:get("o", O)), "name" => maps:get("name", maps:get("c", O)), "item" => I} end())|Acc]

    end
 end, [], [#{"o" => O, "c" => C} || O <- Orders, C <- Customers, (maps:get("customerId", O) == maps:get("id", C))])),
    io:format("~s~n", ["--- Left Join Multi ---"]),
    lists:foreach(fun (R) ->     io:format("~p ~p ~p~n", [maps:get("orderId", R), maps:get("name", R), maps:get("item", R)])
 end, Result)
.
