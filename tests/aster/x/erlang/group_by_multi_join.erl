#!/usr/bin/env escript
-module(main).

-export([main/1]).

% Generated by Mochi transpiler v0.10.34 (89c2d21b5) on 2025-07-21 21:58 +0700
main(_) ->
    Nations = [#{"id" => 1, "name" => "A"}, #{"id" => 2, "name" => "B"}],
    Suppliers = [#{"id" => 1, "nation" => 1}, #{"id" => 2, "nation" => 2}],
    Partsupp = [#{"part" => 100, "supplier" => 1, "cost" => 10, "qty" => 2}, #{"part" => 100, "supplier" => 2, "cost" => 20, "qty" => 1}, #{"part" => 200, "supplier" => 1, "cost" => 5, "qty" => 3}],
    Filtered = [#{"part" => maps:get("part", Ps), "value" => (maps:get("cost", Ps) * maps:get("qty", Ps))} || Ps <- Partsupp, S <- Suppliers, N <- Nations, (((maps:get("id", S) == maps:get("supplier", Ps)) andalso (maps:get("id", N) == maps:get("nation", S))) andalso (maps:get("name", N) == "A"))],
    Grouped = lists:map(fun (P) ->     Key = element(1, P),
    Items = element(2, P),
    #{"part" => Key, "total" => lists:sum([maps:get("value", R) || R <- Items])}
 end, maps:to_list(lists:foldl(fun (P, Acc) ->     K = element(1, P),
    V = element(2, P),
    maps:put(K, (maps:get(K, Acc, []) ++ [V]), Acc)
 end, #{}, [{maps:get("part", X), X} || X <- Filtered]))),
    io:format("~p~n", [Grouped])
.
