{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
import Prelude hiding  (a, b, total, val)
-- Generated by Mochi transpiler v0.10.34 on 2025-07-22 05:31 GMT+7
import Data.List (intercalate, isInfixOf, union, intersect, nub, sortOn, (\\))
data MGroup = k a MGroup {key :: k, items :: [a]}
data GenType1 = GenType1 {a :: String, b :: Int, val :: Int} deriving Show Eq
data GenType2 = GenType2 {a :: String, b :: Int} deriving Show Eq
data GenType3 = GenType3 {a :: String, b :: Int, total :: Int} deriving Show Eq
grouped = [GenType3 {a = g.key.a, b = g.key.b, total = sum [x.val | x <- g.items]} | g <- sortOn (\g -> -sum [x.val | x <- g.items]) [MGroup {key = k, items = [i | i <- items, GenType2 {a = i.a, b = i.b} == k]} | k <- nub ([GenType2 {a = i.a, b = i.b} | i <- items])]]
items = [GenType1 {a = "x", b = 1, val = 2}, GenType1 {a = "x", b = 2, val = 3}, GenType1 {a = "y", b = 1, val = 4}, GenType1 {a = "y", b = 2, val = 1}]
main :: IO ()
main = do
    print (grouped)
