fun divisors(n: int): list<int> {
  var divs: list<int> = [1]
  var divs2: list<int>
  var i: int = 2
  while ((i * i) <= n) {
    if ((n % i) == 0) {
      let j: int = ((n / i)) as int
      divs = append(divs, i)
      if (i != j) {
        divs2 = append(divs2, j)
      }
    }
    i = (i + 1)
  }
  var j: int = (len(divs2) - 1)
  while (j >= 0) {
    divs = append(divs, divs2[j])
    j = (j - 1)
  }
  return divs
}
fun sum(xs: list<int>): int {
  var tot: int = 0
  for v in xs {
    tot = (tot + v)
  }
  return tot
}
fun sumStr(xs: list<int>): string {
  var s: string = ""
  var i: int = 0
  while (i < len(xs)) {
    s = ((s + str(xs[i])) + " + ")
    i = (i + 1)
  }
  return substring(s, 0, (len(s) - 3))
}
fun pad2(n: int): string {
  let s: string = str(n)
  if (len(s) < 2) {
    return (" " + s)
  }
  return s
}
fun pad5(n: int): string {
  var s: string = str(n)
  while (len(s) < 5) {
    s = (" " + s)
  }
  return s
}
fun abundantOdd(searchFrom: int, countFrom: int, countTo: int, printOne: bool): int {
  var count: int = countFrom
  var n: int = searchFrom
  while (count < countTo) {
    let divs: list<int> = divisors(n)
    let tot: int = sum(divs)
    if (tot > n) {
      count = (count + 1)
      if (printOne && (count < countTo)) {
        n = (n + 2)
        continue
      }
      let s: string = sumStr(divs)
      if !printOne {
        print(((((((pad2(count) + ". ") + pad5(n)) + " < ") + s) + " = ") + str(tot)))
      } else {
        print(((((str(n) + " < ") + s) + " = ") + str(tot)))
      }
    }
    n = (n + 2)
  }
  return n
}
fun main(): any {
  let max: int = 25
  print((("The first " + str(max)) + " abundant odd numbers are:"))
  let n: int = abundantOdd(1, 0, max, false)
  print("\nThe one thousandth abundant odd number is:")
  abundantOdd(n, max, 1000, true)
  print("\nThe first abundant odd number above one billion is:")
  abundantOdd(1000000001, 0, 1, true)
}
main()
