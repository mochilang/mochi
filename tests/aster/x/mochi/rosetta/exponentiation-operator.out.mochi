fun printExpI(b: int, p: int): void {
  if (p < 0) {
    print((((str(b) + "^") + str(p)) + ": negative power not allowed"))
  }
  var r: int = 1
  var i: int = 1
  while (i <= p) {
    r = (r * b)
    i = (i + 1)
  }
  print(((((str(b) + "^") + str(p)) + ": ") + str(r)))
}
fun expF(b: float, p: int): float {
  var neg: bool = false
  if (p < 0) {
    neg = true
    p = -p
  }
  var r: float = 1
  var pow: float = b
  while (p > 0) {
    if ((p % 2) == 1) {
      r = (r * pow)
    }
    pow = (pow * pow)
    p = (p / 2)
  }
  if neg {
    r = (1 / r)
  }
  return r
}
fun printExpF(b: float, p: int): void {
  if ((b == 0) && (p < 0)) {
    print((((str(b) + "^") + str(p)) + ": +Inf"))
  }
  print(((((str(b) + "^") + str(p)) + ": ") + str(expF(b, p))))
}
print("expI tests")
printExpI(2, 10)
printExpI(2, -10)
printExpI(-2, 10)
printExpI(-2, 11)
printExpI(11, 0)
print("overflow undetected")
printExpI(10, 10)
print("\nexpF tests:")
printExpF(2, 10)
printExpF(2, -10)
printExpF(-2, 10)
printExpF(-2, 11)
printExpF(11, 0)
print("disallowed in expI, allowed here")
printExpF(0, -1)
print("other interesting cases for 32 bit float type")
printExpF(10, 39)
printExpF(10, -39)
printExpF(-10, 39)
