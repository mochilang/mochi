fun qsel(a: list<float>, k: int): float {
  var arr: list<float> = a
  while (len(arr) > 1) {
    var px: int = (now() % len(arr))
    var pv: float = arr[px]
    let last: int = (len(arr) - 1)
    let tmp: float = arr[px]
    arr[px] = arr[last]
    arr[last] = tmp
    px = 0
    var i: int = 0
    while (i < last) {
      let v: float = arr[i]
      if (v < pv) {
        let tmp2: float = arr[px]
        arr[px] = arr[i]
        arr[i] = tmp2
        px = (px + 1)
      }
      i = (i + 1)
    }
    if (px == k) {
      return pv
    }
    if (k < px) {
      arr = arr[0:px]
    } else {
      let tmp2: float = arr[px]
      arr[px] = pv
      arr[last] = tmp2
      arr = arr[start]
      k = (k - ((px + 1)))
    }
  }
  return arr[0]
}
fun median(list: list<float>): float {
  var arr: list<float> = list
  let half: int = ((len(arr) / 2)) as int
  let med: float = qsel(arr, half)
  if ((len(arr) % 2) == 0) {
    return (((med + qsel(arr, (half - 1)))) / 2)
  }
  return med
}
print(str(median([3, 1, 4, 1])))
print(str(median([3, 1, 4, 1, 5])))
