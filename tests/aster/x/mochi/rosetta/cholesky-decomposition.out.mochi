fun sqrtApprox(x: float): float {
  var guess: float = x
  var i: int = 0
  while (i < 20) {
    guess = (((guess + (x / guess))) / 2)
    i = (i + 1)
  }
  return guess
}
fun cholesky(a: list<list<float>>): list<list<float>> {
  let n: int = len(a)
  var l: list<list<float>>
  var i: int = 0
  while (i < n) {
    var row: list<float>
    var j: int = 0
    while (j < n) {
      row = append(row, 0)
      j = (j + 1)
    }
    l = append(l, row)
    i = (i + 1)
  }
  i = 0
  while (i < n) {
    var j: int = 0
    while (j <= i) {
      var sum: float = a[i][j]
      var k: int = 0
      while (k < j) {
        sum = (sum - (l[i][k] * l[j][k]))
        k = (k + 1)
      }
      if (i == j) {
        l[i][j] = sqrtApprox(sum)
      } else {
        l[i][j] = (sum / l[j][j])
      }
      j = (j + 1)
    }
    i = (i + 1)
  }
  return l
}
fun printMat(m: list<list<float>>): void {
  var i: int = 0
  while (i < len(m)) {
    var line: string = ""
    var j: int = 0
    while (j < len(m[i])) {
      line = (line + str(m[i][j]))
      if (j < (len(m[i]) - 1)) {
        line = (line + " ")
      }
      j = (j + 1)
    }
    print(line)
    i = (i + 1)
  }
}
fun demo(a: list<list<float>>): void {
  print("A:")
  printMat(a)
  let l: list<list<float>> = cholesky(a)
  print("L:")
  printMat(l)
}
demo([[25, 15, -5], [15, 18, 0], [-5, 0, 11]])
demo([[18, 22, 54, 42], [22, 70, 86, 62], [54, 86, 174, 134], [42, 62, 134, 106]])
