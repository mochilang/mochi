fun sieve(limit: int): list<bool> {
  var primes: list<bool>
  var i: int = 0
  while (i < limit) {
    primes = append(primes, true)
    i = (i + 1)
  }
  primes[0] = false
  primes[1] = false
  var p: int = 2
  while ((p * p) < limit) {
    if primes[p] {
      var k: int = (p * p)
      while (k < limit) {
        primes[k] = false
        k = (k + p)
      }
    }
    p = (p + 1)
  }
  return primes
}
fun goldbachCount(primes: list<bool>, n: int): int {
  var c: int = 0
  var i: int = 1
  while (i <= (n / 2)) {
    if (primes[i] && primes[(n - i)]) {
      c = (c + 1)
    }
    i = (i + 1)
  }
  return c
}
fun pad(n: int): string {
  if (n < 10) {
    return ("  " + str(n))
  }
  if (n < 100) {
    return (" " + str(n))
  }
  return str(n)
}
fun main(): void {
  var primes: list<bool> = sieve(1000)
  print("The first 100 Goldbach numbers:")
  var line: string = ""
  var n: int = 2
  var count: int = 0
  while (count < 100) {
    let v: int = goldbachCount(primes, (2 * n))
    line = ((line + pad(v)) + " ")
    count = (count + 1)
    n = (n + 1)
    if ((count % 10) == 0) {
      print(substring(line, 0, (len(line) - 1)))
      line = ""
    }
  }
  let val: int = goldbachCount(primes, 1000)
  print(("\nThe 1,000th Goldbach number = " + str(val)))
}
main()
