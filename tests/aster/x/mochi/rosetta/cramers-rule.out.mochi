fun det(m: list<list<float>>): float {
  let n: int = len(m)
  if (n == 1) {
    return m[0][0]
  }
  var total: float = 0
  var sign: float = 1
  var c: int = 0
  while (c < n) {
    var sub: list<list<float>>
    var r: int = 1
    while (r < n) {
      var row: list<float>
      var cc: int = 0
      while (cc < n) {
        if (cc != c) {
          row = append(row, m[r][cc])
        }
        cc = (cc + 1)
      }
      sub = append(sub, row)
      r = (r + 1)
    }
    total = (total + ((sign * m[0][c]) * det(sub)))
    sign = (sign * (-1))
    c = (c + 1)
  }
  return total
}
fun replaceCol(m: list<list<float>>, col: int, v: list<float>): list<list<float>> {
  var res: list<list<float>>
  var r: int = 0
  while (r < len(m)) {
    var row: list<float>
    var c: int = 0
    while (c < len(m[r])) {
      if (c == col) {
        row = append(row, v[r])
      } else {
        row = append(row, m[r][c])
      }
      c = (c + 1)
    }
    res = append(res, row)
    r = (r + 1)
  }
  return res
}
let m: list<list<float>> = [[2, -1, 5, 1], [3, 2, 2, -6], [1, 3, 3, -1], [5, -2, -3, 3]]
let v: list<float> = [-3, -32, -47, 49]
let d: float = det(m)
var x: list<float>
var i: int = 0
while (i < len(v)) {
  let mc: list<list<float>> = replaceCol(m, i, v)
  x = append(x, (det(mc) / d))
  i = (i + 1)
}
var s: string = "["
var j: int = 0
while (j < len(x)) {
  s = (s + str(x[j]))
  if (j < (len(x) - 1)) {
    s = (s + " ")
  }
  j = (j + 1)
}
s = (s + "]")
print(s)
