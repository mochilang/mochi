var board: list<int> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0]
let solved: list<int> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0]
var empty: int = 15
var moves: int = 0
var quit: bool = false
fun randMove(): int {
  return (now() % 4)
}
fun isSolved(): bool {
  var i: int = 0
  while (i < 16) {
    if (board[i] != solved[i]) {
      return false
    }
    i = (i + 1)
  }
  return true
}
type MoveResult {
  idx: int
  ok: bool
}
fun isValidMove(m: int): MoveResult {
  if (m == 0) {
    return MoveResult {idx: (empty - 4), ok: ((empty / 4) > 0)}
  }
  if (m == 1) {
    return MoveResult {idx: (empty + 4), ok: ((empty / 4) < 3)}
  }
  if (m == 2) {
    return MoveResult {idx: (empty + 1), ok: ((empty % 4) < 3)}
  }
  if (m == 3) {
    return MoveResult {idx: (empty - 1), ok: ((empty % 4) > 0)}
  }
  return MoveResult {idx: 0, ok: false}
}
fun doMove(m: int): bool {
  let r: MoveResult = isValidMove(m)
  if !r.ok {
    return false
  }
  let i: int = empty
  let j: int = r.idx
  let tmp: int = board[i]
  board[i] = board[j]
  board[j] = tmp
  empty = j
  moves = (moves + 1)
  return true
}
fun shuffle(n: int): any {
  var i: int = 0
  while ((i < n) || isSolved()) {
    if doMove(randMove()) {
      i = (i + 1)
    }
  }
}
fun printBoard(): any {
  var line: string = ""
  var i: int = 0
  while (i < 16) {
    let val: int = board[i]
    if (val == 0) {
      line = (line + "  .")
    } else {
      let s: string = str(val)
      if (val < 10) {
        line = ((line + "  ") + s)
      } else {
        line = ((line + " ") + s)
      }
    }
    if ((i % 4) == 3) {
      print(line)
      line = ""
    }
    i = (i + 1)
  }
}
fun playOneMove(): any {
  while true {
    print((("Enter move #" + str((moves + 1))) + " (U, D, L, R, or Q): "))
    let s: any = input()
    if (s == "") {
      continue
    }
    let c: any = s[0:1]
    var m: int = 0
    if ((c == "U") || (c == "u")) {
      m = 0
    } else     if ((c == "D") || (c == "d")) {
      m = 1
    } else     if ((c == "R") || (c == "r")) {
      m = 2
    } else     if ((c == "L") || (c == "l")) {
      m = 3
    } else     if ((c == "Q") || (c == "q")) {
      print((("Quiting after " + str(moves)) + " moves."))
      quit = true
    } else {
      print(((("Please enter \"U\", \"D\", \"L\", or \"R\" to move the empty cell\n" + "up, down, left, or right. You can also enter \"Q\" to quit.\n") + "Upper or lowercase is accepted and only the first non-blank\n") + "character is important (i.e. you may enter \"up\" if you like)."))
      continue
    }
    if !doMove(m) {
      print("That is not a valid move at the moment.")
      continue
    }
  }
}
fun play(): any {
  print("Starting board:")
  while (!quit && (isSolved() == false)) {
    print("")
    printBoard()
    playOneMove()
  }
  if isSolved() {
    print((("You solved the puzzle in " + str(moves)) + " moves."))
  }
}
fun main(): any {
  shuffle(50)
  play()
}
main()
