// Generated by Mochi v0.10.35 on 2025-07-22 14:07:04 GMT+7
export interface Result { a: string; b: number; val: number }
export interface Item { a: string; b: number; val: number }
const items: Item[] = [{a: "x", b: 1, val: 2}, {a: "x", b: 2, val: 3}, {a: "y", b: 1, val: 4}, {a: "y", b: 2, val: 1}];
const grouped: Record<string, any>[] = (() => {
    const groups = new Map<string, { key: any; items: any[] }>;
    for (const i of items) {
        const k = {a: i["a"], b: i["b"]};
        const ks = JSON.stringify(k);
        let g = groups.get(ks);
        if ((!g)) {
            g = {key: k, items: []};
            groups.set(ks, g);
        }
        g.items.push(i);
    }
    let ordered = Array.from(groups.values());
    const result: Result[] = [];
    const pairs = ordered.map(grp => {
        const g = grp;
        return {g: g, key: -(() => {
            const result = [];
            for (const x of g["items"]) {
                result.push(x["val"]);
            }
            const out = result;
            return out;
        })().reduce((a, b) => a + b, 0.0)};
    });
    pairs.sort((a, b) => {
        const ak = a.key;
        const bk = b.key;
        if ((ak < bk))
            return -1;
        if ((ak > bk))
            return 1;
        const sak = JSON.stringify(ak);
        const sbk = JSON.stringify(bk);
        return sak < sbk ? -1 : sak > sbk ? 1 : 0;
    });
    ordered = pairs.map(p => p.g);
    for (const g of ordered) {
        result.push({a: g["key"]["a"], b: g["key"]["b"], total: (() => {
            const result = [];
            for (const x of g["items"]) {
                result.push(x["val"]);
            }
            const out = result;
            return out;
        })().reduce((a, b) => a + b, 0.0)});
    }
    return result;
})();
console.log(String("[" + (grouped).join(", ") + "]"));
