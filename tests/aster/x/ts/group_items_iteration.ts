// Generated by Mochi v0.10.35 on 2025-07-22 14:07:04 GMT+7
export interface Result { tag: string; val: number }
export interface Data { tag: string; val: number }
const data: Data[] = [{tag: "a", val: 1}, {tag: "a", val: 2}, {tag: "b", val: 3}];
const groups: any[] = (() => {
    const groups = new Map<string, { key: any; items: any[] }>;
    for (const d of data) {
        const k = d["tag"];
        const ks = JSON.stringify(k);
        let g = groups.get(ks);
        if ((!g)) {
            g = {key: k, items: []};
            groups.set(ks, g);
        }
        g.items.push(d);
    }
    let ordered = Array.from(groups.values());
    const result = [];
    for (const g of ordered) {
        result.push(g);
    }
    return result;
})();
let tmp: any[] = [];
for (const g of groups) {
    let total = 0;
    for (const x of g["items"]) {
        total = (total + x["val"]);
    }
    tmp = [...tmp, {tag: g["key"], total}];
}
const result: any[] = (() => {
    const result = [];
    for (const r of tmp) {
        result.push({k: r["tag"], v: r});
    }
    result.sort((a, b) => {
        const ak = a.k;
        const bk = b.k;
        if ((ak < bk))
            return -1;
        if ((ak > bk))
            return 1;
        const sak = JSON.stringify(ak);
        const sbk = JSON.stringify(bk);
        return sak < sbk ? -1 : sak > sbk ? 1 : 0;
    });
    const out = result.map(r => r.v);
    return out;
})();
console.log(String("[" + (result).join(", ") + "]"));
