{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
import Prelude hiding  (cost, id, name, nation, part, qty, supplier, total, value)
-- Generated by Mochi transpiler v0.10.34 on 2025-07-21 23:08 GMT+7
import Data.List (intercalate, isInfixOf, union, intersect, nub, sortOn, (\\))
data MGroup = k a MGroup {key :: k, items :: [a]}
data GenType1 = GenType1 {id :: Int, name :: String} deriving (Show)
data GenType2 = GenType2 {id :: Int, nation :: Int} deriving (Show)
data GenType3 = GenType3 {part :: Int, supplier :: Int, cost :: Double, qty :: Int} deriving (Show)
data GenType4 = GenType4 {part :: Int, value :: Double} deriving (Show)
data GenType5 = GenType5 {part :: Int, total :: Int} deriving (Show)
filtered = [GenType4 {part = ps.part, value = ps.cost * fromIntegral (ps.qty)} | ps <- partsupp, s <- suppliers, n <- nations, s.id == ps.supplier && n.id == s.nation && n.name == "A"]
grouped = [GenType5 {part = g.key, total = round (sum [r.value | r <- g.items])} | g <- [MGroup {key = k, items = [x | x <- filtered, x.part == k]} | k <- nub ([x.part | x <- filtered])]]
nations = [GenType1 {id = 1, name = "A"}, GenType1 {id = 2, name = "B"}]
partsupp = [GenType3 {part = 100, supplier = 1, cost = 10, qty = 2}, GenType3 {part = 100, supplier = 2, cost = 20, qty = 1}, GenType3 {part = 200, supplier = 1, cost = 5, qty = 3}]
suppliers = [GenType2 {id = 1, nation = 1}, GenType2 {id = 2, nation = 2}]
main :: IO ()
main = do
    print (grouped)
