# Generated by Mochi transpiler v0.10.33 on 2025-07-21 16:07 +0700
class MGroup
  include(Enumerable)
  attr_accessor(:key, :items)
  def initialize(k, it)
    
    
  end
  def each(block_parameter)
    each(block_argument)
  end
end
People = Struct.new(:name, :age, :city, keyword_init: true)
people = [People.new(name: "Alice", age: 30, city: "Paris"), People.new(name: "Bob", age: 15, city: "Hanoi"), People.new(name: "Charlie", age: 65, city: "Paris"), People.new(name: "Diana", age: 45, city: "Hanoi"), People.new(name: "Eve", age: 70, city: "Paris"), People.new(name: "Frank", age: 22, city: "Hanoi")]
StatsItem = Struct.new(:city, :count, :avg_age, keyword_init: true)
stats = (begin
  
  for person in people
    k = person["city"]
    groups[k] ||= []
    groups[k] << person
  end
  result = []
  groups.each do |k, items|
    g = MGroup.new(k, items)
    result << StatsItem.new(city: g["key"], count: g.length, avg_age: ((begin
      _res = []
      for p in g
        _res << p["age"]
      end
      _res
    end).sum.to_f / (begin
      _res = []
      for p in g
        _res << p["age"]
      end
      _res
    end).length))
  end
  result
end)
puts("--- People grouped by city ---")
for s in stats
  puts(([s["city"], ": count =", s["count"], ", avg_age =", s["avg_age"]]).join(" ").rstrip())
end
