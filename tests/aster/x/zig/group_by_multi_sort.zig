// Generated by Mochi Zig transpiler on 2025-07-22 10:01 +0700
const std = @import("std");
const Entry2 = struct {
    a: i64,
    b: i64,
    total: i64,
};
const Item = struct {
    a: []u8,
    b: i64,
    val: i64,
};
const Group0 = struct {
    key: std.StringHashMap(i64),
    items: []Item,
};
pub fn main() void {
    const items: [_]Item = [_]Item{.{.a = "x", .b = 1, .val = 2}, .{.a = "x", .b = 2, .val = 3}, .{.a = "y", .b = 1, .val = 4}, .{.a = "y", .b = 2, .val = 1}};
    const grouped = blk: {
        const groups_map = std.AutoHashMap(std.StringHashMap(i64), std.ArrayList(Item)).init(std.heap.page_allocator);
        for (items) |i| {
            const k = blk: {
                const m = std.StringHashMap([]u8).init(std.heap.page_allocator);
                m.put("a", i.a);
                m.put("b", i.b);
                break :blk m;
            };
            if (groups_map.getPtr(k)) {
            }
        }
        const groups = std.ArrayList(Group0).init(std.heap.page_allocator);
        const it = groups_map.iterator();
        it.next()kv{
            groups.append(.{.key = kv.key, .items = kv.value.toOwnedSlice()});
        }
        const arr = groups.toOwnedSlice();
        const result = std.ArrayList(struct {
            key: i64,
            val: Entry2,
        }).init(std.heap.page_allocator);
        for (arr) |g| {
            result.append(.{.key = sum(blk: {
                const arr = std.ArrayList(i64).init(std.heap.page_allocator);
                for (g) |x| {
                    arr.append(x.val);
                }
                const tmp = arr.toOwnedSlice();
                break :blk tmp;
            }), .val = .{.a = g.key.a, .b = g.key.b, .total = sum(blk: {
                const arr = std.ArrayList(i64).init(std.heap.page_allocator);
                for (g) |x| {
                    arr.append(x.val);
                }
                const tmp = arr.toOwnedSlice();
                break :blk tmp;
            })}});
        }
        const tmp = result.toOwnedSlice();
        std.sort.sort(struct {
            key: i64,
            val: Entry2,
        }, tmp, struct {
        }.lt);
        const arr2 = std.ArrayList(Entry2).init(std.heap.page_allocator);
        for (tmp) |it| {
            arr2.append(it.val);
        }
        const tmp = arr2.toOwnedSlice();
        break :blk tmp;
    };
    std.io.getStdOut().writer().print("{any}\n", .{grouped});
}
