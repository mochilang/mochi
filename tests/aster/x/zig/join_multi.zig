// Generated by Mochi Zig transpiler on 2025-07-21 10:57 +0000
const std = @import("std");
const Entry = struct {
    name: []u8,
    sku: i64,
};
const Customer = struct {
    id: i64,
    name: []u8,
};
pub fn main() void {
    const customers: [_]Customer = [_]Customer{.{.id = 1, .name = "Alice"}, .{.id = 2, .name = "Bob"}};
    const orders = [_]std.StringHashMap(i64){blk: {
        const m = std.StringHashMap(i64).init(std.heap.page_allocator);
        m.put("id", 100);
        m.put("customerId", 1);
        break :blk m;
    }, blk: {
        const m = std.StringHashMap(i64).init(std.heap.page_allocator);
        m.put("id", 101);
        m.put("customerId", 2);
        break :blk m;
    }};
    const items = [_]std.StringHashMap(i64){blk: {
        const m = std.StringHashMap(i64).init(std.heap.page_allocator);
        m.put("orderId", 100);
        m.put("sku", "a");
        break :blk m;
    }, blk: {
        const m = std.StringHashMap(i64).init(std.heap.page_allocator);
        m.put("orderId", 101);
        m.put("sku", "b");
        break :blk m;
    }};
    const result: []Entry = blk: {
        const arr = std.ArrayList(Entry).init(std.heap.page_allocator);
        for (orders) |o| {
            for (customers) |c| {
                for (items) |i| {
                    if (o.customer_id + c.id + o.id + i.order_id) {
                        arr.append(.{.name = c.name, .sku = i.sku});
                    }
                }
            }
        }
        const tmp = arr.toOwnedSlice();
        break :blk tmp;
    };
    try std.io.getStdOut().writer().print("{s}\n", .{"--- Multi Join ---"});
    for (result) |r| {
        try std.io.getStdOut().writer().print("{any} {s} {any}\n", .{r.name, "bought item", r.sku});
    }
}
