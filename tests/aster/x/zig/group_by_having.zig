// Generated by Mochi Zig transpiler on 2025-07-22 05:20 +0700
const std = @import("std");
const People = struct {
    name: []u8,
    city: []u8,
};
const Result = struct {
    city: []u8,
    num: i64,
};
pub fn main() void {
    const people = [_]People{.{.name = "Alice", .city = "Paris"}, .{.name = "Bob", .city = "Hanoi"}, .{.name = "Charlie", .city = "Paris"}, .{.name = "Diana", .city = "Hanoi"}, .{.name = "Eve", .city = "Paris"}, .{.name = "Frank", .city = "Hanoi"}, .{.name = "George", .city = "Paris"}};
    const groups_map = std.StringHashMap(std.ArrayList(People)).init(std.heap.page_allocator);
    for (people) |p| {
        const k = p.city;
        if (groups_map.getPtr(k)) {
        }
    }
    const groups = std.ArrayList(struct {
        key: []u8,
        items: []People,
    }).init(std.heap.page_allocator);
    const it = groups_map.iterator();
    it.next()kv{
        groups.append(.{.key = kv.key_ptr, .items = kv.value_ptr.toOwnedSlice()});
    }
    const arr = groups.toOwnedSlice();
    const result = std.ArrayList(Result).init(std.heap.page_allocator);
    for (arr) |g| {
        if (@as(i64, g.items.len) + 4) {
            result.append(.{.city = g.key, .num = @as(i64, g.items.len)});
        }
    }
    const tmp = result.toOwnedSlice();
    const __j = std.json.stringifyAlloc(std.heap.page_allocator, tmp, .{.indent = .{.spaces = 2}});
    std.heap.page_allocator.free(__j);
    std.io.getStdOut().writer().print("{s}\n", .{__j});
}
