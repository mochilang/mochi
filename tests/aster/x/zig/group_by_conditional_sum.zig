// Generated by Mochi Zig transpiler on 2025-07-21 10:57 +0000
const std = @import("std");
const Item = struct {
    cat: []u8,
    val: i64,
    flag: bool,
};
const Group0 = struct {
    key: []u8,
    items: []Item,
};
pub fn main() void {
    const items: [_]Item = [_]Item{.{.cat = "a", .val = 10, }, .{.cat = "a", .val = 5, }, .{.cat = "b", .val = 20, }};
    const result = blk: {
        const groups_map = std.AutoHashMap([]u8, std.ArrayList(Item)).init(std.heap.page_allocator);
        for (items) |i| {
            const k = i.cat;
            if (groups_map.getPtr(k)) {
            }
        }
        const groups = std.ArrayList(Group0).init(std.heap.page_allocator);
        const it = groups_map.iterator();
        it.next()kv{
            groups.append(.{.key = kv.key, .items = kv.value.toOwnedSlice()});
        }
        const arr = groups.toOwnedSlice();
        const result = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator);
        for (arr) |g| {
            result.append(blk: {
                const m = std.StringHashMap(i64).init(std.heap.page_allocator);
                m.put("cat", g.key);
                m.put("share", sum(blk: {
                    const arr = std.ArrayList(i64).init(std.heap.page_allocator);
                    for (g) |x| {
                        arr.append(x.flagx.val0);
                    }
                    const tmp = arr.toOwnedSlice();
                    break :blk tmp;
                }) + sum(blk: {
                    const arr = std.ArrayList(i64).init(std.heap.page_allocator);
                    for (g) |x| {
                        arr.append(x.val);
                    }
                    const tmp = arr.toOwnedSlice();
                    break :blk tmp;
                }));
                break :blk m;
            });
        }
        const tmp = result.toOwnedSlice();
        std.sort.sort(Group0, tmp, struct {
        }.lt);
        break :blk tmp;
    };
    try std.io.getStdOut().writer().print("{any}\n", .{result});
}
