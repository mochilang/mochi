// Generated by Mochi Zig transpiler on 2025-07-21 10:57 +0000
const std = @import("std");
const Data = struct {
    tag: []u8,
    val: i64,
};
const Group0 = struct {
    key: []u8,
    items: []Data,
};
pub fn main() void {
    const data: [_]Data = [_]Data{.{.tag = "a", .val = 1}, .{.tag = "a", .val = 2}, .{.tag = "b", .val = 3}};
    const groups = blk: {
        const groups_map = std.AutoHashMap([]u8, std.ArrayList(Data)).init(std.heap.page_allocator);
        for (data) |d| {
            const k = d.tag;
            if (groups_map.getPtr(k)) {
            }
        }
        const groups = std.ArrayList(Group0).init(std.heap.page_allocator);
        const it = groups_map.iterator();
        it.next()kv{
            groups.append(.{.key = kv.key, .items = kv.value.toOwnedSlice()});
        }
        const arr = groups.toOwnedSlice();
        const result = std.ArrayList(i64).init(std.heap.page_allocator);
        for (arr) |g| {
            result.append(g);
        }
        const tmp = result.toOwnedSlice();
        break :blk tmp;
    };
    const tmp = ;
    for (groups) |g| {
        const total: i64 = 0;
        for (g.items) |x| {
            const total = total + x.val;
        }
        const tmp = append(tmp, blk: {
            const m = std.StringHashMap(i64).init(std.heap.page_allocator);
            m.put("tag", g.key);
            m.put("total", total);
            break :blk m;
        });
    }
    const result: []i64 = blk: {
        const arr = std.ArrayList(struct {
            key: i64,
            val: i64,
        }).init(std.heap.page_allocator);
        for (tmp) |r| {
            arr.append(.{.key = r.tag, .val = r});
        }
        const tmp = arr.toOwnedSlice();
        std.sort.sort(struct {
            key: i64,
            val: i64,
        }, tmp, struct {
        }.lt);
        const result = std.ArrayList(i64).init(std.heap.page_allocator);
        for (tmp) |it| {
            result.append(it.val);
        }
        const tmp = result.toOwnedSlice();
        break :blk tmp;
    };
    try std.io.getStdOut().writer().print("{any}\n", .{result});
}
