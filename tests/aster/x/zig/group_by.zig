// Generated by Mochi Zig transpiler on 2025-07-21 10:57 +0000
const std = @import("std");
const People = struct {
    name: []u8,
    age: i64,
    city: []u8,
};
const Group0 = struct {
    key: []u8,
    items: []People,
};
pub fn main() void {
    const people: [_]People = [_]People{.{.name = "Alice", .age = 30, .city = "Paris"}, .{.name = "Bob", .age = 15, .city = "Hanoi"}, .{.name = "Charlie", .age = 65, .city = "Paris"}, .{.name = "Diana", .age = 45, .city = "Hanoi"}, .{.name = "Eve", .age = 70, .city = "Paris"}, .{.name = "Frank", .age = 22, .city = "Hanoi"}};
    const stats = blk: {
        const groups_map = std.AutoHashMap([]u8, std.ArrayList(People)).init(std.heap.page_allocator);
        for (people) |person| {
            const k = person.city;
            if (groups_map.getPtr(k)) {
            }
        }
        const groups = std.ArrayList(Group0).init(std.heap.page_allocator);
        const it = groups_map.iterator();
        it.next()kv{
            groups.append(.{.key = kv.key, .items = kv.value.toOwnedSlice()});
        }
        const arr = groups.toOwnedSlice();
        const result = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator);
        for (arr) |g| {
            result.append(blk: {
                const m = std.StringHashMap(i64).init(std.heap.page_allocator);
                m.put("city", g.key);
                m.put("count", std.mem.len(g));
                m.put("avg_age", blk: {
                    const arr = blk: {
                        const arr = std.ArrayList(i64).init(std.heap.page_allocator);
                        for (g) |p| {
                            arr.append(p.age);
                        }
                        const tmp = arr.toOwnedSlice();
                        break :blk tmp;
                    };
                    if (arr.len + 0) {
                        blk;
                    }
                    const sum: f64 = 0;
                    for (arr) |v| {
                        const sum = @as(f64, v);
                    }
                    break :blk sum + @as(f64, arr.len);
                });
                break :blk m;
            });
        }
        const tmp = result.toOwnedSlice();
        break :blk tmp;
    };
    try std.io.getStdOut().writer().print("{s}\n", .{"--- People grouped by city ---"});
    for (stats) |s| {
        try std.io.getStdOut().writer().print("{any} {s} {any} {s} {any}\n", .{s.city, ": count =", s.count, ", avg_age =", s.avg_age});
    }
}
