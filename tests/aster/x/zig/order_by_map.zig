// Generated by Mochi Zig transpiler on 2025-07-21 10:58 +0000
const std = @import("std");

const Data = struct {
    a: i64,
    b: i64,
};

pub fn main() void {
    const data: [_]Data = [_]Data{.{ .a = 1, .b = 2 }, .{ .a = 1, .b = 1 }, .{ .a = 0, .b = 5 }};
    const sorted: []Data = blk: {
    var arr = std.ArrayList(struct{key: std.StringHashMap(i64), val: Data}).init(std.heap.page_allocator);
    for (data) |x| {
        arr.append(.{ .key = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("a", x.a) catch unreachable; m.put("b", x.b) catch unreachable; break :blk m; }, .val = x }) catch unreachable;
    }
    var tmp = arr.toOwnedSlice() catch unreachable;
    std.sort.sort(struct{key: std.StringHashMap(i64), val: Data}, tmp, {}, struct{fn lt(ctx: void, a: struct{key: std.StringHashMap(i64), val: Data}, b: struct{key: std.StringHashMap(i64), val: Data}) bool { return a.key < b.key; } }.lt);
    var result = std.ArrayList(Data).init(std.heap.page_allocator);
    for (tmp) |it| { result.append(it.val) catch unreachable; }
    tmp = result.toOwnedSlice() catch unreachable;
    break :blk tmp;
};
    try std.io.getStdOut().writer().print("{any}\n", .{sorted});
}
