// Generated by Mochi Zig transpiler on 2025-07-21 10:57 +0000
const std = @import("std");
const Product = struct {
    name: []u8,
    price: i64,
};
pub fn main() void {
    const products: [_]Product = [_]Product{.{.name = "Laptop", .price = 1500}, .{.name = "Smartphone", .price = 900}, .{.name = "Tablet", .price = 600}, .{.name = "Monitor", .price = 300}, .{.name = "Keyboard", .price = 100}, .{.name = "Mouse", .price = 50}, .{.name = "Headphones", .price = 200}};
    const expensive: []Product = blk: {
        const arr = std.ArrayList(struct {
            key: i64,
            val: Product,
        }).init(std.heap.page_allocator);
        for (products) |p| {
            arr.append(.{.key = p.price, .val = p});
        }
        const tmp = arr.toOwnedSlice();
        std.sort.sort(struct {
            key: i64,
            val: Product,
        }, tmp, struct {
        }.lt);
        const result = std.ArrayList(Product).init(std.heap.page_allocator);
        for (tmp) |it| {
            result.append(it.val);
        }
        const tmp = result.toOwnedSlice();
        const start: usize = 0;
        const start = @intCast(usize, 1);
        const end: usize = tmp.len;
        const end = @min(tmp.len, start + @intCast(usize, 3));
        const tmp = tmp[start..end];
        break :blk tmp;
    };
    try std.io.getStdOut().writer().print("{s}\n", .{"--- Top products (excluding most expensive) ---"});
    for (expensive) |item| {
        try std.io.getStdOut().writer().print("{any} {s} {any}\n", .{item.name, "costs $", item.price});
    }
}
