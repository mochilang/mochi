// Generated by Mochi Zig transpiler on 2025-07-21 10:57 +0000
const std = @import("std");
const Customer = struct {
    id: i64,
    name: []u8,
};
const Group0 = struct {
    key: []u8,
    items: []Customer,
};
pub fn main() void {
    const customers: [_]Customer = [_]Customer{.{.id = 1, .name = "Alice"}, .{.id = 2, .name = "Bob"}, .{.id = 3, .name = "Charlie"}};
    const orders = [_]std.StringHashMap(i64){blk: {
        const m = std.StringHashMap(i64).init(std.heap.page_allocator);
        m.put("id", 100);
        m.put("customerId", 1);
        break :blk m;
    }, blk: {
        const m = std.StringHashMap(i64).init(std.heap.page_allocator);
        m.put("id", 101);
        m.put("customerId", 1);
        break :blk m;
    }, blk: {
        const m = std.StringHashMap(i64).init(std.heap.page_allocator);
        m.put("id", 102);
        m.put("customerId", 2);
        break :blk m;
    }};
    const stats = blk: {
        const groups_map = std.AutoHashMap([]u8, std.ArrayList(Customer)).init(std.heap.page_allocator);
        for (customers) |c| {
            const k = c.name;
            if (groups_map.getPtr(k)) {
            }
        }
        const groups = std.ArrayList(Group0).init(std.heap.page_allocator);
        const it = groups_map.iterator();
        it.next()kv{
            groups.append(.{.key = kv.key, .items = kv.value.toOwnedSlice()});
        }
        const arr = groups.toOwnedSlice();
        const result = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator);
        for (arr) |g| {
            result.append(blk: {
                const m = std.StringHashMap(i64).init(std.heap.page_allocator);
                m.put("name", g.key);
                m.put("count", std.mem.len(blk: {
                    const arr = std.ArrayList(Customer).init(std.heap.page_allocator);
                    for (g) |r| {
                        if (r.o) {
                            arr.append(r);
                        }
                    }
                    const tmp = arr.toOwnedSlice();
                    break :blk tmp;
                }));
                break :blk m;
            });
        }
        const tmp = result.toOwnedSlice();
        break :blk tmp;
    };
    try std.io.getStdOut().writer().print("{s}\n", .{"--- Group Left Join ---"});
    for (stats) |s| {
        try std.io.getStdOut().writer().print("{any} {s} {any}\n", .{s.name, "orders:", s.count});
    }
}
