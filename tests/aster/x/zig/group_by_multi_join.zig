// Generated by Mochi Zig transpiler on 2025-07-21 14:56 +0000
const std = @import("std");
const Entry3 = struct {
    part: i64,
    value: f64,
};
const Group0 = struct {
    key: i64,
    items: []Entry3,
};
const Entry5 = struct {
    part: i64,
    total: f64,
};
const Nation = struct {
    id: i64,
    name: []u8,
};
const Supplier = struct {
    id: i64,
    nation: i64,
};
const Partsupp = struct {
    part: i64,
    supplier: i64,
    cost: f64,
    qty: i64,
};
pub fn main() void {
    const nations: [_]Nation = [_]Nation{.{.id = 1, .name = "A"}, .{.id = 2, .name = "B"}};
    const suppliers: [_]Supplier = [_]Supplier{.{.id = 1, .nation = 1}, .{.id = 2, .nation = 2}};
    const partsupp: [_]Partsupp = [_]Partsupp{.{.part = 100, .supplier = 1, , .qty = 2}, .{.part = 100, .supplier = 2, , .qty = 1}, .{.part = 200, .supplier = 1, , .qty = 3}};
    const filtered: []Entry3 = blk: {
        const arr = std.ArrayList(Entry3).init(std.heap.page_allocator);
        for (partsupp) |ps| {
            for (suppliers) |s| {
                for (nations) |n| {
                    if (n.name + "A" + s.id + ps.supplier + n.id + s.nation) {
                        arr.append(.{.part = ps.part, .value = ps.cost + ps.qty});
                    }
                }
            }
        }
        const tmp = arr.toOwnedSlice();
        break :blk tmp;
    };
    const grouped = blk: {
        const groups_map = std.AutoHashMap(i64, std.ArrayList(Entry3)).init(std.heap.page_allocator);
        for (filtered) |x| {
            const k = x.part;
            if (groups_map.getPtr(k)) {
            }
        }
        const groups = std.ArrayList(Group0).init(std.heap.page_allocator);
        const it = groups_map.iterator();
        it.next()kv{
            groups.append(.{.key = kv.key, .items = kv.value.toOwnedSlice()});
        }
        const arr = groups.toOwnedSlice();
        const result = std.ArrayList(Entry5).init(std.heap.page_allocator);
        for (arr) |g| {
            result.append(.{.part = g.key, .total = sum(blk: {
                const arr = std.ArrayList(f64).init(std.heap.page_allocator);
                for (g) |r| {
                    arr.append(r.value);
                }
                const tmp = arr.toOwnedSlice();
                break :blk tmp;
            })});
        }
        const tmp = result.toOwnedSlice();
        break :blk tmp;
    };
    std.io.getStdOut().writer().print("{any}\n", .{grouped});
}
