// Generated by Mochi Zig transpiler on 2025-07-21 10:57 +0000
const std = @import("std");
const Customer = struct {
    id: i64,
    name: []u8,
};
const Item = struct {
    order_id: i64,
    sku: []u8,
};
const Entry = struct {
    order_id: i64,
    name: []u8,
    item: Item,
};
pub fn main() void {
    const customers: [_]Customer = [_]Customer{.{.id = 1, .name = "Alice"}, .{.id = 2, .name = "Bob"}};
    const orders = [_]std.StringHashMap(i64){blk: {
        const m = std.StringHashMap(i64).init(std.heap.page_allocator);
        m.put("id", 100);
        m.put("customerId", 1);
        break :blk m;
    }, blk: {
        const m = std.StringHashMap(i64).init(std.heap.page_allocator);
        m.put("id", 101);
        m.put("customerId", 2);
        break :blk m;
    }};
    const items: [_]Item = [_]Item{.{.order_id = 100, .sku = "a"}};
    const result: []Entry = blk: {
        const arr = std.ArrayList(Entry).init(std.heap.page_allocator);
        for (orders) |o| {
            for (customers) |c| {
                for (items) |i| {
                    if (o.customer_id + c.id + o.id + i.order_id) {
                        arr.append(.{.order_id = o.id, .name = c.name, .item = i});
                    }
                }
            }
        }
        const tmp = arr.toOwnedSlice();
        break :blk tmp;
    };
    try std.io.getStdOut().writer().print("{s}\n", .{"--- Left Join Multi ---"});
    for (result) |r| {
        try std.io.getStdOut().writer().print("{any} {any} {any}\n", .{r.order_id, r.name, r.item});
    }
}
