// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:06 +0700
use std::collections::HashMap;
#[derive(Clone)]
struct Group<K, V> {
    key: K,
    items: Vec<V>,
}
#[derive(Debug, Clone)]
struct CustomersItem {
    id: i64,
    name: String,
}
impl std::fmt::Display for CustomersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"id\": {}", self.id)?;
        write!(f, ", ")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, "}}")
    }
}
#[derive(Debug, Clone)]
struct OrdersItem {
    id: i64,
    customerId: i64,
}
impl std::fmt::Display for OrdersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"id\": {}", self.id)?;
        write!(f, ", ")?;
        write!(f, "\"customerId\": {}", self.customerId)?;
        write!(f, "}}")
    }
}
#[derive(Debug, Clone)]
struct QueryItem {
    name: String,
    count: i64,
}
impl std::fmt::Display for QueryItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"count\": {}", self.count)?;
        write!(f, "}}")
    }
}
fn main() {
    let customers: Vec<CustomersItem> = vec![CustomersItem {id: 1, name: String::from("Alice")}, CustomersItem {id: 2, name: String::from("Bob")}];
    let orders: Vec<OrdersItem> = vec![OrdersItem {id: 100, customerId: 1}, OrdersItem {id: 101, customerId: 1}, OrdersItem {id: 102, customerId: 2}];
    let stats: Vec<QueryItem> = {
        let mut _q: Vec<QueryItem> = Vec::new();
        let mut _groups: HashMap<String, Group<String, OrdersItem>> = HashMap::new();
        let mut _order: Vec<String> = Vec::new();
        for o in &orders {
            for c in &customers {
                if (o.customerId == c.id) {
                    let key = c.name.clone();
                    let ks = format!("{:?}", &key);
                    let e = _groups.entry(ks.clone()).or_insert_with(|| {
                        _order.push(ks.clone());
                        Group::<String, OrdersItem> {key: key.clone(), items: Vec::new()}
                    });
                    e.items.push(o.clone());
                }
            }
        }
        for ks in _order {
            let g = &_groups[&ks];
            _q.push(QueryItem {name: String::from(g.key.clone()), count: g.items.len() as i64});
        }
        _q
    };
    println!("{}", "--- Orders per customer ---");
    for s in &stats {
        println!("{}", format!("{} {} {}", s.name, "orders:", s.count).trim_end());
    }
}
