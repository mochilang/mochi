// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:06 +0700
#[derive(Debug, Clone)]
struct PeopleItem {
    name: String,
    age: i64,
}
impl std::fmt::Display for PeopleItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"age\": {}", self.age)?;
        write!(f, "}}")
    }
}
#[derive(Debug, Clone)]
struct QueryItem {
    name: String,
    age: i64,
    is_senior: bool,
}
impl std::fmt::Display for QueryItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"age\": {}", self.age)?;
        write!(f, ", ")?;
        write!(f, "\"is_senior\": {}", self.is_senior)?;
        write!(f, "}}")
    }
}
fn main() {
    let people: Vec<PeopleItem> = vec![PeopleItem {name: String::from("Alice"), age: 30}, PeopleItem {name: String::from("Bob"), age: 15}, PeopleItem {name: String::from("Charlie"), age: 65}, PeopleItem {name: String::from("Diana"), age: 45}];
    let adults: Vec<QueryItem> = {
        let mut _q: Vec<QueryItem> = Vec::new();
        for person in &people {
            if (person.age >= 18) {
                _q.push(QueryItem {name: person.clone().name.clone(), age: person.clone().age, is_senior: (person.clone().age >= 60)});
            }
        }
        _q
    };
    println!("{}", "--- Adults ---");
    for person in &adults {
        println!("{}", format!("{} {} {} {}", person.name, "is", person.age, if person.is_senior { " (senior)" } else { "" }).trim_end());
    }
}
