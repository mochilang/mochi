// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:06 +0700
#[derive(Debug, Clone)]
struct CustomersItem {
    id: i64,
    name: String,
}
impl std::fmt::Display for CustomersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"id\": {}", self.id)?;
        write!(f, ", ")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, "}}")
    }
}
#[derive(Debug, Clone)]
struct OrdersItem {
    id: i64,
    customerId: i64,
    total: i64,
}
impl std::fmt::Display for OrdersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"id\": {}", self.id)?;
        write!(f, ", ")?;
        write!(f, "\"customerId\": {}", self.customerId)?;
        write!(f, ", ")?;
        write!(f, "\"total\": {}", self.total)?;
        write!(f, "}}")
    }
}
#[derive(Debug, Clone)]
struct QueryItem {
    customerName: String,
    order: OrdersItem,
}
impl std::fmt::Display for QueryItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"customerName\": \"{}\"", self.customerName)?;
        write!(f, ", ")?;
        write!(f, "\"order\": {}", self.order)?;
        write!(f, "}}")
    }
}
fn main() {
    let customers: Vec<CustomersItem> = vec![CustomersItem {id: 1, name: String::from("Alice")}, CustomersItem {id: 2, name: String::from("Bob")}, CustomersItem {id: 3, name: String::from("Charlie")}, CustomersItem {id: 4, name: String::from("Diana")}];
    let orders: Vec<OrdersItem> = vec![OrdersItem {id: 100, customerId: 1, total: 250}, OrdersItem {id: 101, customerId: 2, total: 125}, OrdersItem {id: 102, customerId: 1, total: 300}];
    let result: Vec<QueryItem> = {
        let mut _q: Vec<QueryItem> = Vec::new();
        for o in &orders {
            for c in &customers {
                if (o.customerId == c.id) {
                    _q.push(QueryItem {customerName: c.clone().name.clone(), order: o.clone()});
                }
            }
        }
        _q
    };
    println!("{}", "--- Right Join using syntax ---");
    for entry in &result {
        if true {
            println!("{}", format!("{} {} {} {} {} {}", "Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total).trim_end());
        } else {
            println!("{}", format!("{} {} {}", "Customer", entry.customerName, "has no orders").trim_end());
        }
    }
}
