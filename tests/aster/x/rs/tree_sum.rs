// Generated by Mochi transpiler v0.10.35 on 2025-07-22 11:32 +0700
#[derive(Debug, Clone)]
enum Tree {
    Leaf,
    Node { left: Box<Tree>, value: i64, right: Box<Tree> },
}
fn sum_tree(t: &Tree) -> i64 {
    return match t { Tree::Leaf => 0, Tree::Node { left: left, value: value, right: right } => ((sum_tree(&left) + value) + sum_tree(&right)) }
}
fn main() {
    let t: Tree = Tree::Node {left: Box::new(Tree::Leaf), value: 1, right: Box::new(Tree::Node {left: Box::new(Tree::Leaf), value: 2, right: Box::new(Tree::Leaf)})};
    println!("{}", sum_tree(&t));
}
