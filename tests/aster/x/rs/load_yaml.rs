// Generated by Mochi transpiler v0.10.34 on 2025-07-21 20:06 +0700
#[derive(Debug, Clone)]
struct Person {
    name: String,
    age: i64,
    email: String,
}
impl std::fmt::Display for Person {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"age\": {}", self.age)?;
        write!(f, ", ")?;
        write!(f, "\"email\": \"{}\"", self.email)?;
        write!(f, "}}")
    }
}
#[derive(Debug, Clone)]
struct QueryItem {
    name: String,
    email: String,
}
impl std::fmt::Display for QueryItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"email\": \"{}\"", self.email)?;
        write!(f, "}}")
    }
}
fn main() {
    let people: Vec<Person> = vec![Person {age: 30, email: String::from("alice@example.com"), name: String::from("Alice")}, Person {age: 15, email: String::from("bob@example.com"), name: String::from("Bob")}, Person {age: 20, email: String::from("charlie@example.com"), name: String::from("Charlie")}];
    let adults: Vec<QueryItem> = {
        let mut _q: Vec<QueryItem> = Vec::new();
        for p in &people {
            if (p.age >= 18) {
                _q.push(QueryItem {name: p.clone().name.clone(), email: p.clone().email.clone()});
            }
        }
        _q
    };
    for a in &adults {
        println!("{}", format!("{} {}", a.name, a.email).trim_end());
    }
}
