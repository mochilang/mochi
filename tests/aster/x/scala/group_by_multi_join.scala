// Generated by Mochi v0.10.33 on 2025-07-21 19:24:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def main(args: Array[String]): Unit = {
    case class Item(id: Int, name: String)
    case class Item1(id: Int, nation: Int)
    case class Item2(part: Int, supplier: Int, cost: Double, qty: Int)
    case class QueryItem(part: Any, value: Any)
    val nations: ArrayBuffer[Item] = ArrayBuffer(Item(1, "A"), Item(2, "B"))
    val suppliers: ArrayBuffer[Item1] = ArrayBuffer(Item1(1, 1), Item1(2, 2))
    val partsupp: ArrayBuffer[Item2] = ArrayBuffer(Item2(100, 1, 10, 2), Item2(100, 2, 20, 1), Item2(200, 1, 5, 3))
    val filtered: ArrayBuffer[QueryItem] = ({
      var _res = ArrayBuffer[QueryItem]()
      for (ps <- partsupp) {
        for (s <- suppliers) {
          for (n <- nations) {
            if (s.id == ps.supplier && n.id == s.nation) {
              _res.append(QueryItem(ps.part, ps.cost * ps.qty))
            }
          }
        }
      }
      _res
    })
    val grouped: ArrayBuffer[Map[String, Any]] = ArrayBuffer.from(filtered.groupBy(() => x.part).map(case (k, g) => Map("key" -> k, "items" -> ArrayBuffer.from(g))).map(() => Map("part" -> g("key"), "total" -> ({
      var _res = ArrayBuffer[Any]()
      for (r <- g) {
        _res.append(r.value)
      }
      _res
    }).sum)))
    println(grouped)
  }
}
