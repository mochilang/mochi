// Generated by Mochi v0.10.33 on 2025-07-21 19:25:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def main(args: Array[String]): Unit = {
    case class Item(n_nationkey: Int, n_name: String)
    case class Item1(c_custkey: Int, c_name: String, c_acctbal: Double, c_nationkey: Int, c_address: String, c_phone: String, c_comment: String)
    case class Item2(o_orderkey: Int, o_custkey: Int, o_orderdate: String)
    case class Item3(l_orderkey: Int, l_returnflag: String, l_extendedprice: Double, l_discount: Double)
    val nation: ArrayBuffer[Item] = ArrayBuffer(Item(1, "BRAZIL"))
    val customer: ArrayBuffer[Item1] = ArrayBuffer(Item1(1, "Alice", 100, 1, "123 St", "123-456", "Loyal"))
    val orders: ArrayBuffer[Item2] = ArrayBuffer(Item2(1000, 1, "1993-10-15"), Item2(2000, 1, "1994-01-02"))
    val lineitem: ArrayBuffer[Item3] = ArrayBuffer(Item3(1000, "R", 1000), Item3(2000, "N", 500, 0))
    val start_date: String = "1993-10-01"
    val end_date: String = "1994-01-01"
    val result: ArrayBuffer[Map[String, Any]] = ArrayBuffer.from(customer.groupBy(() => Map("c_custkey" -> c.c_custkey, "c_name" -> c.c_name, "c_acctbal" -> c.c_acctbal, "c_address" -> c.c_address, "c_phone" -> c.c_phone, "c_comment" -> c.c_comment, "n_name" -> n.n_name)).filter(() => o.o_custkey == c.c_custkey && l.l_orderkey == o.o_orderkey && n.n_nationkey == c.c_nationkey && o.o_orderdate >= start_date && o.o_orderdate < end_date && l.l_returnflag == "R").map(case (k, g) => Map("key" -> k, "items" -> ArrayBuffer.from(g))).toSeq.sortBy(() => 0 - ({
      var _res = ArrayBuffer[Any]()
      for (x <- g) {
        _res.append(x.l.l_extendedprice * 1 - x.l.l_discount)
      }
      _res
    }).sum).map().map(() => Map("c_custkey" -> g("key").c_custkey, "c_name" -> g("key").c_name, "revenue" -> ({
      var _res = ArrayBuffer[Any]()
      for (x <- g) {
        _res.append(x.l.l_extendedprice * 1 - x.l.l_discount)
      }
      _res
    }).sum, "c_acctbal" -> g("key").c_acctbal, "n_name" -> g("key").n_name, "c_address" -> g("key").c_address, "c_phone" -> g("key").c_phone, "c_comment" -> g("key").c_comment)))
    println(result)
  }
}
