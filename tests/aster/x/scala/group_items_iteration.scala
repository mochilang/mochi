// Generated by Mochi v0.10.33 on 2025-07-21 16:41:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def main(args: Array[String]): Unit = {
    case class Item(tag: String, )
    val data: ArrayBuffer[Item] = ArrayBuffer(Item("a", 1), Item("a", 2), Item("b", 3))
    val groups: ArrayBuffer[Any] = ({
      var _groups = Map[Any, Map[String, Any]]()
      var _res = ArrayBuffer[Any]()
      for (d <- data) {
        val _key = d.tag
        val _g = _groups.getOrElseUpdate(_key, Map("key" -> _key, "items" -> ArrayBuffer[Any]()))
        _g("items").asInstanceOf[ArrayBuffer[Any]].append(d) for (g <- _groups.values)(_res.append(g))
        _res
      }
    })
    var tmp = ArrayBuffer[Any]
    for (g <- groups) {
      var total = Int
      for (x <- g.items) {
        total = total + x.val
      }
      tmp = tmp :+ Map("tag" -> g.key, "total" -> total)
    }
    val result: ArrayBuffer[Any] = ({
      var _tmp = ArrayBuffer[(Any, Any)]()
      for (r <- tmp) {
        _tmp.append((r.tag, r))
      }
      var _res = _tmp.sortBy().map()
      _res
    })
    println(result)
  }
}
