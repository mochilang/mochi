# Code generated by Mochi transpiler.
# Version 0.10.36, generated on 2025-07-22 17:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
@dataclass
class Nation:
    id: int
    name: str
nations = [Nation(1, "A"), Nation(2, "B")]
@dataclass
class Supplier:
    id: int
    nation: int
suppliers = [Supplier(1, 1), Supplier(2, 2)]
@dataclass
class PartSupp:
    part: int
    supplier: int
    cost: float
    qty: int
partsupp = [PartSupp(100, 1, 10.0, 2), PartSupp(100, 2, 20.0, 1), PartSupp(200, 1, 5.0, 3)]
@dataclass
class Filtered:
    part: int
    value: float
filtered = [Filtered(ps.part, ps.cost * ps.qty) for ps in partsupp for s in suppliers for n in nations if s.id == ps.supplier and n.id == s.nation and n.name == "A"]
@dataclass
class GroupedGroup:
    key: int
    items: list
_grouped_groups = {}
for x in filtered:
    _g = _grouped_groups.setdefault(x.part, GroupedGroup(x.part, []))
    _g.items.append(x)
@dataclass
class Grouped:
    part: str
    total: any
grouped = [Grouped(g.key, sum([r.value for r in g.items])) for g in _grouped_groups.values()]
print([dataclasses.asdict(_x) for _x in grouped])
