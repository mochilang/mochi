# Code generated by Mochi transpiler.
# Version 0.10.36, generated on 2025-07-22 17:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
@dataclass
class Nation:
    n_nationkey: int
    n_name: str
nation = [Nation(1, "BRAZIL")]
@dataclass
class Customer:
    c_custkey: int
    c_name: str
    c_acctbal: float
    c_nationkey: int
    c_address: str
    c_phone: str
    c_comment: str
customer = [Customer(1, "Alice", 100.0, 1, "123 St", "123-456", "Loyal")]
@dataclass
class Order:
    o_orderkey: int
    o_custkey: int
    o_orderdate: str
orders = [Order(1000, 1, "1993-10-15"), Order(2000, 1, "1994-01-02")]
@dataclass
class Lineitem:
    l_orderkey: int
    l_returnflag: str
    l_extendedprice: float
    l_discount: float
lineitem = [Lineitem(1000, "R", 1000.0, 0.1), Lineitem(2000, "N", 500.0, 0.0)]
start_date = "1993-10-01"
end_date = "1994-01-01"
@dataclass
class GKey:
    c_custkey: int
    c_name: str
    c_acctbal: float
    c_address: str
    c_phone: str
    c_comment: str
    n_name: str
@dataclass
class ResultGroup:
    key: GKey
    items: list
@dataclass
class ResultRow:
    c: any
    o: any
    l: any
    n: any
_result_groups = {}
for c in customer:
    for o in [o for o in orders if o.o_custkey == c.c_custkey]:
        for l in [l for l in lineitem if l.l_orderkey == o.o_orderkey]:
            for n in [n for n in nation if n.n_nationkey == c.c_nationkey]:
                if o.o_orderdate >= start_date and o.o_orderdate < end_date and l.l_returnflag == "R":
                    _g = _result_groups.setdefault(tuple([c.c_custkey, c.c_name, c.c_acctbal, c.c_address, c.c_phone, c.c_comment, n.n_name]), ResultGroup(GKey(c.c_custkey, c.c_name, c.c_acctbal, c.c_address, c.c_phone, c.c_comment, n.n_name), []))
                    _g.items.append(ResultRow(c, o, l, n))
@dataclass
class Result:
    c_custkey: str
    c_name: str
    revenue: any
    c_acctbal: float
    n_name: str
    c_address: str
    c_phone: str
    c_comment: str
result = [Result(g.key.c_custkey, g.key.c_name, sum([x.l.l_extendedprice * (1 - x.l.l_discount) for x in g.items]), g.key.c_acctbal, g.key.n_name, g.key.c_address, g.key.c_phone, g.key.c_comment) for g in sorted(_result_groups.values(), key=lambda g: sum([x.l.l_extendedprice * (1 - x.l.l_discount) for x in g.items]), reverse=True)]
print([dataclasses.asdict(_x) for _x in result])
