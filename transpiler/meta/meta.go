//go:build slow

package meta

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

// Version returns the Mochi version string from the repository root.
func Version() string {
	root := RepoRoot()
	if root == "" {
		return "dev"
	}
	data, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(data))
}

// RepoRoot attempts to locate the repository root directory containing go.mod.
func RepoRoot() string {
	dir, err := os.Getwd()
	if err != nil {
		return ""
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return ""
}

// Header returns a header comment describing the Mochi version and current time.
func Header(prefix string) []byte {
	loc := time.FixedZone("GMT+7", 7*3600)
	t := time.Now().In(loc)
	ver := Version()
	return []byte(fmt.Sprintf("%s Generated by Mochi v%s on %s\n", prefix, ver, t.Format("2006-01-02 15:04:05 MST")))
}

// EnsureDeno verifies that the Deno binary is installed and attempts to install it if missing.
func EnsureDeno() error {
	if _, err := exec.LookPath("deno"); err == nil {
		return nil
	}
	fmt.Println("\U0001F985 Installing Deno...")
	if runtime.GOOS == "windows" {
		if _, err := exec.LookPath("choco"); err == nil {
			cmd := exec.Command("choco", "install", "-y", "deno")
			cmd.Stdout = os.Stdout
			cmd.Stderr = os.Stderr
			if err := cmd.Run(); err == nil {
				return nil
			}
		} else if _, err := exec.LookPath("scoop"); err == nil {
			cmd := exec.Command("scoop", "install", "deno")
			cmd.Stdout = os.Stdout
			cmd.Stderr = os.Stderr
			if err := cmd.Run(); err == nil {
				return nil
			}
		}
	}
	home := os.Getenv("HOME")
	if home == "" {
		home = "/tmp"
	}
	installDir := filepath.Join(home, ".deno")
	cmd := exec.Command("sh", "-c", fmt.Sprintf("curl -fsSL https://deno.land/install.sh | DENO_INSTALL=%s sh", installDir))
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		return err
	}
	denoSrc := filepath.Join(installDir, "bin", "deno")
	if _, err := os.Stat(denoSrc); err == nil {
		if err := exec.Command("install", "-m", "755", denoSrc, "/usr/local/bin/deno").Run(); err == nil {
			return nil
		}
		dest := filepath.Join(home, "bin", "deno")
		if err := os.MkdirAll(filepath.Dir(dest), 0755); err == nil {
			if err := os.Rename(denoSrc, dest); err == nil {
				return nil
			}
		}
	}
	return fmt.Errorf("failed to install deno")
}
