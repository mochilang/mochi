//go:build !slow

package meta

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"
)

// Version returns the Mochi version string from the repository root.
func Version() string {
	root := RepoRoot()
	if root == "" {
		return "dev"
	}
	data, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(data))
}

// RepoRoot attempts to locate the repository root directory containing go.mod.
func RepoRoot() string {
	dir, err := os.Getwd()
	if err != nil {
		return ""
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return ""
}

// Header returns a header comment describing the Mochi version and current time.
func Header(prefix string) []byte {
	loc := time.FixedZone("GMT+7", 7*3600)
	t := time.Now().In(loc)
	ver := Version()
	return []byte(fmt.Sprintf("%s Generated by Mochi v%s on %s\n", prefix, ver, t.Format("2006-01-02 15:04:05 MST")))
}

// EnsureDeno verifies that the Deno binary is installed. Unlike the slow
// implementation it does not attempt to install Deno automatically.
func EnsureDeno() error {
	if _, err := exec.LookPath("deno"); err != nil {
		return fmt.Errorf("deno not installed")
	}
	return nil
}
