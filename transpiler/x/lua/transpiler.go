package lua

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"mochi/ast"
	"mochi/parser"
	"mochi/types"
)

// Program represents a simple Lua program consisting of a sequence of
// statements.
type Program struct {
	Stmts []Stmt
}

type Stmt interface{ emit(io.Writer) }

type Expr interface{ emit(io.Writer) }

type ExprStmt struct{ Expr Expr }

type CallExpr struct {
	Func string
	Args []Expr
}

type StringLit struct{ Value string }

func (s *ExprStmt) emit(w io.Writer) { s.Expr.emit(w) }

func (c *CallExpr) emit(w io.Writer) {
	io.WriteString(w, c.Func)
	io.WriteString(w, "(")
	for i, a := range c.Args {
		if i > 0 {
			io.WriteString(w, ", ")
		}
		a.emit(w)
	}
	io.WriteString(w, ")")
}

func (s *StringLit) emit(w io.Writer) { fmt.Fprintf(w, "%q", s.Value) }

func repoRoot() string {
	dir, err := os.Getwd()
	if err != nil {
		return ""
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return ""
}

func version() string {
	root := repoRoot()
	if root == "" {
		return "dev"
	}
	data, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(data))
}

func header() string {
	loc := time.FixedZone("GMT+7", 7*3600)
	t := time.Now().In(loc)
	return fmt.Sprintf("-- Generated by Mochi v%s on %s\n", version(), t.Format("2006-01-02 15:04:05 MST"))
}

// Emit converts the AST back into Lua source code with a standard header.
func Emit(p *Program) []byte {
	var b bytes.Buffer
	b.WriteString(header())
	for i, st := range p.Stmts {
		if i > 0 {
			b.WriteByte('\n')
		}
		st.emit(&b)
		b.WriteByte('\n')
	}
	return b.Bytes()
}

// Transpile converts a Mochi AST into a simple Lua AST. Only a tiny subset
// of the language is supported: programs consisting of calls to the builtin
// print function with string literal arguments.
func Transpile(prog *parser.Program, env *types.Env) (*Program, error) {
	_ = env
	lp := &Program{}
	for _, st := range prog.Statements {
		if st.Expr == nil {
			return nil, fmt.Errorf("unsupported statement")
		}
		call := st.Expr.Expr.Binary.Left.Value.Target.Call
		if call == nil || call.Func != "print" {
			return nil, fmt.Errorf("unsupported expression")
		}
		if len(call.Args) != 1 {
			return nil, fmt.Errorf("print expects one argument")
		}
		arg := call.Args[0]
		lit := arg.Binary.Left.Value.Target.Lit
		if lit == nil || lit.Str == nil {
			return nil, fmt.Errorf("unsupported argument")
		}
		lp.Stmts = append(lp.Stmts, &ExprStmt{Expr: &CallExpr{
			Func: "print",
			Args: []Expr{&StringLit{Value: *lit.Str}},
		}})
	}
	return lp, nil
}

// Print renders a tree representation of the Lua AST to stdout. It is
// useful for debugging and tests.
func Print(p *Program) {
	toNode(p).Print("")
}

func toNode(p *Program) *ast.Node {
	n := &ast.Node{Kind: "program"}
	for _, st := range p.Stmts {
		n.Children = append(n.Children, stmtNode(st))
	}
	return n
}

func stmtNode(s Stmt) *ast.Node {
	switch st := s.(type) {
	case *ExprStmt:
		return &ast.Node{Kind: "expr_stmt", Children: []*ast.Node{exprNode(st.Expr)}}
	default:
		return &ast.Node{Kind: "unknown"}
	}
}

func exprNode(e Expr) *ast.Node {
	switch ex := e.(type) {
	case *CallExpr:
		n := &ast.Node{Kind: "call", Value: ex.Func}
		for _, a := range ex.Args {
			n.Children = append(n.Children, exprNode(a))
		}
		return n
	case *StringLit:
		return &ast.Node{Kind: "string", Value: ex.Value}
	default:
		return &ast.Node{Kind: "unknown"}
	}
}
