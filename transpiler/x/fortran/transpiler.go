//go:build slow

package fortran

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"mochi/parser"
	"mochi/types"
)

// Program represents a simple Fortran program consisting of a list of statements.
type Program struct {
	Stmts []Stmt
}

type Stmt interface{ emit(io.Writer) }

type PrintStmt struct{ Value string }

func (p *PrintStmt) emit(w io.Writer) {
	escaped := strings.ReplaceAll(p.Value, "\"", "\"\"")
	fmt.Fprintf(w, "  print *, \"%s\"\n", escaped)
}

func repoRoot() string {
	dir, err := os.Getwd()
	if err != nil {
		return ""
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return ""
}

func version() string {
	root := repoRoot()
	if root == "" {
		return "dev"
	}
	b, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(b))
}

func header() string {
	loc := time.FixedZone("GMT+7", 7*3600)
	t := time.Now().In(loc)
	return fmt.Sprintf("! Generated by Mochi transpiler v%s on %s\n", version(), t.Format("2006-01-02 15:04:05 MST"))
}

// Emit generates the Fortran source for the program.
func (p *Program) Emit() []byte {
	var buf bytes.Buffer
	buf.WriteString(header())
	buf.WriteString("program main\n")
	for _, s := range p.Stmts {
		s.emit(&buf)
	}
	buf.WriteString("end program main\n")
	return buf.Bytes()
}

// Transpile converts a Mochi AST to the Fortran AST used by this package.
func Transpile(prog *parser.Program, env *types.Env) (*Program, error) {
	_ = env
	fp := &Program{}
	for _, st := range prog.Statements {
		if st.Expr == nil {
			return nil, fmt.Errorf("unsupported statement")
		}
		if str, ok := extractPrintString(st.Expr.Expr); ok {
			fp.Stmts = append(fp.Stmts, &PrintStmt{Value: str})
		} else {
			return nil, fmt.Errorf("unsupported expression")
		}
	}
	return fp, nil
}

func extractPrintString(e *parser.Expr) (string, bool) {
	if e == nil || e.Binary == nil || e.Binary.Left == nil {
		return "", false
	}
	u := e.Binary.Left
	if u.Value == nil || u.Value.Target == nil || u.Value.Target.Call == nil {
		return "", false
	}
	call := u.Value.Target.Call
	if call.Func != "print" || len(call.Args) != 1 {
		return "", false
	}
	arg := call.Args[0]
	if arg == nil || arg.Binary == nil || arg.Binary.Left == nil {
		return "", false
	}
	pv := arg.Binary.Left.Value
	if pv == nil || pv.Target == nil || pv.Target.Lit == nil || pv.Target.Lit.Str == nil {
		return "", false
	}
	return *pv.Target.Lit.Str, true
}
