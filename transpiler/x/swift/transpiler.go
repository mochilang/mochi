package swifttrans

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"mochi/ast"
	"mochi/parser"
	"mochi/types"
)

// Program is a sequence of Swift statements.
type Program struct {
	Stmts []Stmt
}

type Stmt interface{ emit(io.Writer) }

type PrintStmt struct{ Value string }

func (p *PrintStmt) emit(w io.Writer) {
	fmt.Fprintf(w, "print(%q)\n", p.Value)
}

func repoRoot() string {
	dir, err := os.Getwd()
	if err != nil {
		return ""
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return ""
}

func version() string {
	root := repoRoot()
	if root == "" {
		return "dev"
	}
	data, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(data))
}

func header() string {
	loc := time.FixedZone("GMT+7", 7*3600)
	t := time.Now().In(loc)
	return fmt.Sprintf("// Generated by Mochi transpiler v%s on %s\n",
		version(), t.Format("2006-01-02 15:04:05 MST"))
}

// Emit returns the Swift source for the program.
func (p *Program) Emit() []byte {
	var buf bytes.Buffer
	buf.WriteString(header())
	for _, s := range p.Stmts {
		s.emit(&buf)
	}
	if b := buf.Bytes(); len(b) > 0 && b[len(b)-1] != '\n' {
		buf.WriteByte('\n')
	}
	return buf.Bytes()
}

// Transpile converts a Mochi program into a simple Swift AST.
func Transpile(env *types.Env, prog *parser.Program) (*Program, error) {
	_ = env
	p := &Program{}
	for _, st := range prog.Statements {
		if st.Expr != nil {
			call := st.Expr.Expr.Binary.Left.Value.Target.Call
			if call != nil && call.Func == "print" && len(call.Args) == 1 {
				arg := call.Args[0]
				lit := arg.Binary.Left.Value.Target.Lit
				if lit != nil && lit.Str != nil {
					p.Stmts = append(p.Stmts, &PrintStmt{Value: *lit.Str})
					continue
				}
			}
			return nil, fmt.Errorf("unsupported expression")
		}
		return nil, fmt.Errorf("unsupported statement")
	}
	return p, nil
}

// Print writes a lisp-like representation of the AST to stdout using the ast package.
func Print(prog *Program) {
	fmt.Print(toNode(prog).String())
}

// toNode converts the Program to an ast.Node tree.
func toNode(p *Program) *ast.Node {
	n := &ast.Node{Kind: "program"}
	for _, s := range p.Stmts {
		n.Children = append(n.Children, stmtNode(s))
	}
	return n
}

func stmtNode(s Stmt) *ast.Node {
	switch st := s.(type) {
	case *PrintStmt:
		return &ast.Node{Kind: "print", Value: st.Value}
	default:
		return &ast.Node{Kind: "stmt"}
	}
}
