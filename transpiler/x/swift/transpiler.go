//go:build slow

package swifttrans

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"mochi/ast"
	"mochi/parser"
	"mochi/types"
)

// Program is a sequence of Swift statements.
type Program struct {
	Stmts []Stmt
}

type Stmt interface{ emit(io.Writer) }

type Expr interface{ emit(io.Writer) }

type FunDecl struct {
	Name   string
	Params []Param
	Ret    string
	Body   []Stmt
}

type Param struct {
	Name string
	Type string
}

type ReturnStmt struct{ Expr Expr }

type CallExpr struct {
	Func string
	Args []Expr
}

type WhileStmt struct {
	Cond Expr
	Body []Stmt
}

type IfStmt struct {
	Cond   Expr
	Then   []Stmt
	ElseIf *IfStmt
	Else   []Stmt
}

func (i *IfStmt) emit(w io.Writer) {
	fmt.Fprint(w, "if ")
	i.Cond.emit(w)
	fmt.Fprint(w, " {\n")
	for _, s := range i.Then {
		s.emit(w)
	}
	fmt.Fprint(w, "}")
	if i.ElseIf != nil {
		fmt.Fprint(w, " else ")
		i.ElseIf.emit(w)
	} else if len(i.Else) > 0 {
		fmt.Fprint(w, " else {\n")
		for _, s := range i.Else {
			s.emit(w)
		}
		fmt.Fprint(w, "}")
	}
	fmt.Fprint(w, "\n")
}

type CondExpr struct {
	Cond Expr
	Then Expr
	Else Expr
}

func (c *CondExpr) emit(w io.Writer) {
	fmt.Fprint(w, "(")
	c.Cond.emit(w)
	fmt.Fprint(w, " ? ")
	c.Then.emit(w)
	fmt.Fprint(w, " : ")
	c.Else.emit(w)
	fmt.Fprint(w, ")")
}

type PrintStmt struct{ Expr Expr }

func (p *PrintStmt) emit(w io.Writer) {
	fmt.Fprint(w, "print(")
	p.Expr.emit(w)
	fmt.Fprint(w, ")\n")
}

type VarDecl struct {
	Name  string
	Const bool
	Type  string
	Expr  Expr
}

func (v *VarDecl) emit(w io.Writer) {
	kw := "var"
	if v.Const && v.Expr != nil {
		kw = "let"
	}
	fmt.Fprint(w, kw+" "+v.Name)
	if v.Type != "" {
		fmt.Fprintf(w, ": %s", v.Type)
	}
	if v.Expr != nil {
		fmt.Fprint(w, " = ")
		v.Expr.emit(w)
	}
	fmt.Fprint(w, "\n")
}

type AssignStmt struct {
	Name string
	Expr Expr
}

func (a *AssignStmt) emit(w io.Writer) {
	fmt.Fprint(w, a.Name+" = ")
	a.Expr.emit(w)
	fmt.Fprint(w, "\n")
}

type LitExpr struct {
	Value    string
	IsString bool
}

func (l *LitExpr) emit(w io.Writer) {
	if l.IsString {
		fmt.Fprintf(w, "%q", l.Value)
	} else {
		fmt.Fprint(w, l.Value)
	}
}

type NameExpr struct{ Name string }

func (n *NameExpr) emit(w io.Writer) { fmt.Fprint(w, n.Name) }

type BinaryExpr struct {
	Left  Expr
	Op    string
	Right Expr
}

func (b *BinaryExpr) emit(w io.Writer) {
	if b.Op == "in" {
		fmt.Fprint(w, "(")
		b.Right.emit(w)
		fmt.Fprint(w, ".contains(")
		b.Left.emit(w)
		fmt.Fprint(w, "))")
		return
	}
	fmt.Fprint(w, "(")
	b.Left.emit(w)
	fmt.Fprintf(w, " %s ", b.Op)
	b.Right.emit(w)
	fmt.Fprint(w, ")")
}

type UnaryExpr struct {
	Op   string
	Expr Expr
}

func (u *UnaryExpr) emit(w io.Writer) {
	fmt.Fprint(w, u.Op)
	u.Expr.emit(w)
}

func (c *CallExpr) emit(w io.Writer) {
	switch c.Func {
	case "str":
		fmt.Fprint(w, "String(")
		if len(c.Args) > 0 {
			c.Args[0].emit(w)
		}
		fmt.Fprint(w, ")")
		return
	case "substring":
		if len(c.Args) == 3 {
			fmt.Fprint(w, "String(Array(")
			c.Args[0].emit(w)
			fmt.Fprint(w, ")[")
			c.Args[1].emit(w)
			fmt.Fprint(w, "..<")
			c.Args[2].emit(w)
			fmt.Fprint(w, "])")
			return
		}
	}
	fmt.Fprint(w, c.Func)
	fmt.Fprint(w, "(")
	for i, a := range c.Args {
		if i > 0 {
			fmt.Fprint(w, ", ")
		}
		a.emit(w)
	}
	fmt.Fprint(w, ")")
}

func (r *ReturnStmt) emit(w io.Writer) {
	fmt.Fprint(w, "return")
	if r.Expr != nil {
		fmt.Fprint(w, " ")
		r.Expr.emit(w)
	}
	fmt.Fprint(w, "\n")
}

func (f *FunDecl) emit(w io.Writer) {
	fmt.Fprintf(w, "func %s(", f.Name)
	for i, p := range f.Params {
		if i > 0 {
			fmt.Fprint(w, ", ")
		}
		if p.Type != "" {
			fmt.Fprintf(w, "_ %s: %s", p.Name, p.Type)
		} else {
			fmt.Fprintf(w, "_ %s", p.Name)
		}
	}
	fmt.Fprint(w, ")")
	if f.Ret != "" {
		fmt.Fprintf(w, " -> %s", f.Ret)
	}
	fmt.Fprint(w, " {\n")
	for _, s := range f.Body {
		s.emit(w)
	}
	fmt.Fprint(w, "}\n")
}

func (ws *WhileStmt) emit(w io.Writer) {
	fmt.Fprint(w, "while ")
	if ws.Cond != nil {
		ws.Cond.emit(w)
	} else {
		fmt.Fprint(w, "true")
	}
	fmt.Fprint(w, " {\n")
	for _, st := range ws.Body {
		st.emit(w)
	}
	fmt.Fprint(w, "}\n")
}

func repoRoot() string {
	dir, err := os.Getwd()
	if err != nil {
		return ""
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return ""
}

func version() string {
	root := repoRoot()
	if root == "" {
		return "dev"
	}
	data, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(data))
}

func header() string {
	loc := time.FixedZone("GMT+7", 7*3600)
	t := time.Now().In(loc)
	return fmt.Sprintf("// Generated by Mochi transpiler v%s on %s\n",
		version(), t.Format("2006-01-02 15:04:05 MST"))
}

func formatCode(src []byte) []byte {
	var out bytes.Buffer
	indent := 0
	scanner := bufio.NewScanner(bytes.NewReader(src))
	for scanner.Scan() {
		line := scanner.Text()
		trimmed := strings.TrimSpace(line)
		if strings.HasPrefix(trimmed, "}") && indent > 0 {
			indent--
		}
		for i := 0; i < indent; i++ {
			out.WriteString("    ")
		}
		out.WriteString(trimmed)
		out.WriteByte('\n')
		if strings.HasSuffix(trimmed, "{") {
			indent++
		}
	}
	return out.Bytes()
}

// Emit returns the Swift source for the program.
func (p *Program) Emit() []byte {
	var buf bytes.Buffer
	buf.WriteString(header())
	for _, s := range p.Stmts {
		s.emit(&buf)
	}
	if b := buf.Bytes(); len(b) > 0 && b[len(b)-1] != '\n' {
		buf.WriteByte('\n')
	}
	return formatCode(buf.Bytes())
}

// Transpile converts a Mochi program into a simple Swift AST.
func Transpile(env *types.Env, prog *parser.Program) (*Program, error) {
	_ = env
	p := &Program{}
	stmts, err := convertStmts(prog.Statements)
	if err != nil {
		return nil, err
	}
	p.Stmts = stmts
	return p, nil
}

func convertStmts(list []*parser.Statement) ([]Stmt, error) {
	var out []Stmt
	for _, st := range list {
		cs, err := convertStmt(st)
		if err != nil {
			return nil, err
		}
		out = append(out, cs)
	}
	return out, nil
}

func convertStmt(st *parser.Statement) (Stmt, error) {
	switch {
	case st.Expr != nil:
		call := st.Expr.Expr.Binary.Left.Value.Target.Call
		if call != nil && call.Func == "print" && len(call.Args) == 1 {
			arg := call.Args[0]
			if val, str, ok := evalPrintArg(arg); ok {
				return &PrintStmt{Expr: &LitExpr{Value: val, IsString: str}}, nil
			}
			ex, err := convertExpr(arg)
			if err != nil {
				return nil, err
			}
			return &PrintStmt{Expr: ex}, nil
		}
		return nil, fmt.Errorf("unsupported expression")
	case st.Let != nil:
		var ex Expr
		var err error
		if st.Let.Value != nil {
			ex, err = convertExpr(st.Let.Value)
			if err != nil {
				return nil, err
			}
		} else if st.Let.Type != nil {
			ex = zeroValue(st.Let.Type)
		}
		return &VarDecl{Name: st.Let.Name, Const: true, Type: toSwiftType(st.Let.Type), Expr: ex}, nil
	case st.Var != nil:
		var ex Expr
		var err error
		if st.Var.Value != nil {
			ex, err = convertExpr(st.Var.Value)
			if err != nil {
				return nil, err
			}
		} else if st.Var.Type != nil {
			ex = zeroValue(st.Var.Type)
		}
		return &VarDecl{Name: st.Var.Name, Const: false, Type: toSwiftType(st.Var.Type), Expr: ex}, nil
	case st.Assign != nil && len(st.Assign.Index) == 0 && len(st.Assign.Field) == 0:
		ex, err := convertExpr(st.Assign.Value)
		if err != nil {
			return nil, err
		}
		return &AssignStmt{Name: st.Assign.Name, Expr: ex}, nil
	case st.Fun != nil:
		return convertFunDecl(st.Fun)
	case st.Return != nil:
		return convertReturnStmt(st.Return)
	case st.While != nil:
		return convertWhileStmt(st.While)
	case st.If != nil:
		return convertIfStmt(st.If)
	default:
		return nil, fmt.Errorf("unsupported statement")
	}
}

func convertIfStmt(i *parser.IfStmt) (Stmt, error) {
	cond, err := convertExpr(i.Cond)
	if err != nil {
		return nil, err
	}
	thenStmts, err := convertStmts(i.Then)
	if err != nil {
		return nil, err
	}
	var elseIf *IfStmt
	if i.ElseIf != nil {
		s, err := convertIfStmt(i.ElseIf)
		if err != nil {
			return nil, err
		}
		elseIf = s.(*IfStmt)
	}
	var elseStmts []Stmt
	if i.Else != nil {
		elseStmts, err = convertStmts(i.Else)
		if err != nil {
			return nil, err
		}
	}
	return &IfStmt{Cond: cond, Then: thenStmts, ElseIf: elseIf, Else: elseStmts}, nil
}

func convertFunDecl(f *parser.FunStmt) (Stmt, error) {
	fn := &FunDecl{Name: f.Name, Ret: toSwiftType(f.Return)}
	for _, p := range f.Params {
		fn.Params = append(fn.Params, Param{Name: p.Name, Type: toSwiftType(p.Type)})
	}
	body, err := convertStmts(f.Body)
	if err != nil {
		return nil, err
	}
	fn.Body = body
	return fn, nil
}

func convertReturnStmt(r *parser.ReturnStmt) (Stmt, error) {
	var ex Expr
	var err error
	if r.Value != nil {
		ex, err = convertExpr(r.Value)
		if err != nil {
			return nil, err
		}
	}
	return &ReturnStmt{Expr: ex}, nil
}

func convertWhileStmt(wst *parser.WhileStmt) (Stmt, error) {
	cond, err := convertExpr(wst.Cond)
	if err != nil {
		return nil, err
	}
	body, err := convertStmts(wst.Body)
	if err != nil {
		return nil, err
	}
	return &WhileStmt{Cond: cond, Body: body}, nil
}

func evalPrintArg(arg *parser.Expr) (val string, isString bool, ok bool) {
	lit := arg.Binary.Left.Value.Target.Lit
	if lit != nil && len(arg.Binary.Left.Ops) == 0 && len(arg.Binary.Left.Value.Ops) == 0 && len(arg.Binary.Right) == 0 {
		switch {
		case lit.Str != nil:
			return *lit.Str, true, true
		case lit.Int != nil:
			return fmt.Sprintf("%d", *lit.Int), false, true
		}
	}

	if v, ok := intConst(arg); ok {
		return fmt.Sprintf("%d", v), false, true
	}

	// cast string literal to int
	if lit != nil && lit.Str != nil && len(arg.Binary.Left.Value.Ops) == 1 {
		if c := arg.Binary.Left.Value.Ops[0].Cast; c != nil && c.Type != nil && c.Type.Simple != nil && *c.Type.Simple == "int" {
			return *lit.Str, false, true
		}
	}

	if lit != nil && len(arg.Binary.Right) == 1 {
		op := arg.Binary.Right[0]
		rightLit := op.Right.Target.Lit
		if rightLit != nil && rightLit.Str != nil && lit.Str != nil {
			switch op.Op {
			case "+":
				return *lit.Str + *rightLit.Str, true, true
			case "<", "<=", ">", ">=":
				left := *lit.Str
				right := *rightLit.Str
				var res bool
				switch op.Op {
				case "<":
					res = left < right
				case "<=":
					res = left <= right
				case ">":
					res = left > right
				case ">=":
					res = left >= right
				}
				if res {
					return "1", false, true
				}
				return "0", false, true
			}
		}
	}

	return "", false, false
}

// Print writes a lisp-like representation of the AST to stdout using the ast package.
func Print(prog *Program) {
	fmt.Print(toNode(prog).String())
}

// toNode converts the Program to an ast.Node tree.
func toNode(p *Program) *ast.Node {
	n := &ast.Node{Kind: "program"}
	for _, s := range p.Stmts {
		n.Children = append(n.Children, stmtNode(s))
	}
	return n
}

func stmtNode(s Stmt) *ast.Node {
	switch st := s.(type) {
	case *PrintStmt:
		return &ast.Node{Kind: "print"}
	case *VarDecl:
		return &ast.Node{Kind: "var", Value: st.Name}
	case *AssignStmt:
		return &ast.Node{Kind: "assign", Value: st.Name}
	case *FunDecl:
		return &ast.Node{Kind: "fun", Value: st.Name}
	case *ReturnStmt:
		return &ast.Node{Kind: "return"}
	case *WhileStmt:
		return &ast.Node{Kind: "while"}
	default:
		return &ast.Node{Kind: "stmt"}
	}
}

func intConst(e *parser.Expr) (int, bool) {
	if e == nil || e.Binary == nil {
		return 0, false
	}
	return evalIntConstBinary(e.Binary)
}

func evalIntConstBinary(be *parser.BinaryExpr) (int, bool) {
	v, ok := evalIntConstUnary(be.Left)
	if !ok {
		return 0, false
	}
	vals := []int{v}
	ops := []string{}
	for _, op := range be.Right {
		r, ok := evalIntConstPostfix(op.Right)
		if !ok {
			return 0, false
		}
		vals = append(vals, r)
		ops = append(ops, op.Op)
	}

	for i := 0; i < len(ops); {
		switch ops[i] {
		case "*":
			vals[i] *= vals[i+1]
		case "/":
			if vals[i+1] == 0 {
				return 0, false
			}
			vals[i] /= vals[i+1]
		case "%":
			if vals[i+1] == 0 {
				return 0, false
			}
			vals[i] %= vals[i+1]
		default:
			i++
			continue
		}
		vals = append(vals[:i+1], vals[i+2:]...)
		ops = append(ops[:i], ops[i+1:]...)
	}

	res := vals[0]
	for i, op := range ops {
		switch op {
		case "+":
			res += vals[i+1]
		case "-":
			res -= vals[i+1]
		default:
			return 0, false
		}
	}
	return res, true
}

func evalIntConstUnary(u *parser.Unary) (int, bool) {
	val, ok := evalIntConstPostfix(u.Value)
	if !ok {
		return 0, false
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		switch u.Ops[i] {
		case "-":
			val = -val
		case "+":
			// ignore
		default:
			return 0, false
		}
	}
	return val, true
}

func evalIntConstPostfix(p *parser.PostfixExpr) (int, bool) {
	if p == nil || len(p.Ops) != 0 {
		return 0, false
	}
	return evalIntConstPrimary(p.Target)
}

func evalIntConstPrimary(pr *parser.Primary) (int, bool) {
	if pr == nil {
		return 0, false
	}
	if pr.Lit != nil && pr.Lit.Int != nil {
		return int(*pr.Lit.Int), true
	}
	if pr.Group != nil {
		return intConst(pr.Group)
	}
	return 0, false
}

func convertExpr(e *parser.Expr) (Expr, error) {
	if e == nil || e.Binary == nil {
		return nil, fmt.Errorf("unsupported expression")
	}
	first, err := convertUnary(e.Binary.Left)
	if err != nil {
		return nil, err
	}
	expr := first
	for _, op := range e.Binary.Right {
		right, err := convertPostfix(op.Right)
		if err != nil {
			return nil, err
		}
		expr = &BinaryExpr{Left: expr, Op: op.Op, Right: right}
	}
	return expr, nil
}

func convertUnary(u *parser.Unary) (Expr, error) {
	if u == nil {
		return nil, fmt.Errorf("nil unary")
	}
	expr, err := convertPostfix(u.Value)
	if err != nil {
		return nil, err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		switch u.Ops[i] {
		case "-":
			expr = &UnaryExpr{Op: "-", Expr: expr}
		case "+":
			// ignore
		default:
			return nil, fmt.Errorf("unsupported unary op")
		}
	}
	return expr, nil
}

func convertPostfix(p *parser.PostfixExpr) (Expr, error) {
	if p == nil || len(p.Ops) != 0 {
		return nil, fmt.Errorf("unsupported postfix")
	}
	return convertPrimary(p.Target)
}

func convertIfExpr(i *parser.IfExpr) (Expr, error) {
	cond, err := convertExpr(i.Cond)
	if err != nil {
		return nil, err
	}
	thenExpr, err := convertExpr(i.Then)
	if err != nil {
		return nil, err
	}
	if i.ElseIf != nil {
		elseExpr, err := convertIfExpr(i.ElseIf)
		if err != nil {
			return nil, err
		}
		return &CondExpr{Cond: cond, Then: thenExpr, Else: elseExpr}, nil
	}
	var elseExpr Expr
	if i.Else != nil {
		elseExpr, err = convertExpr(i.Else)
		if err != nil {
			return nil, err
		}
	} else {
		elseExpr = &LitExpr{Value: "0", IsString: false}
	}
	return &CondExpr{Cond: cond, Then: thenExpr, Else: elseExpr}, nil
}

func convertPrimary(pr *parser.Primary) (Expr, error) {
	switch {
	case pr == nil:
		return nil, fmt.Errorf("nil primary")
	case pr.Lit != nil:
		if pr.Lit.Str != nil {
			return &LitExpr{Value: *pr.Lit.Str, IsString: true}, nil
		}
		if pr.Lit.Int != nil {
			return &LitExpr{Value: fmt.Sprintf("%d", *pr.Lit.Int), IsString: false}, nil
		}
		if pr.Lit.Bool != nil {
			if *pr.Lit.Bool {
				return &LitExpr{Value: "true", IsString: false}, nil
			}
			return &LitExpr{Value: "false", IsString: false}, nil
		}
		return nil, fmt.Errorf("unsupported literal")
	case pr.Call != nil:
		if pr.Call.Func == "len" && len(pr.Call.Args) == 1 {
			if n, ok := evalLenConst(pr.Call.Args[0]); ok {
				return &LitExpr{Value: fmt.Sprintf("%d", n), IsString: false}, nil
			}
		}
		ce := &CallExpr{Func: pr.Call.Func}
		for _, a := range pr.Call.Args {
			ae, err := convertExpr(a)
			if err != nil {
				return nil, err
			}
			ce.Args = append(ce.Args, ae)
		}
		return ce, nil
	case pr.Group != nil:
		return convertExpr(pr.Group)
	case pr.If != nil:
		return convertIfExpr(pr.If)
	case pr.Selector != nil && len(pr.Selector.Tail) == 0:
		return &NameExpr{Name: pr.Selector.Root}, nil
	}
	return nil, fmt.Errorf("unsupported primary")
}

func evalLenConst(e *parser.Expr) (int, bool) {
	if e == nil || e.Binary == nil {
		return 0, false
	}
	left := e.Binary.Left
	if len(left.Ops) != 0 || len(e.Binary.Right) != 0 {
		return 0, false
	}
	t := left.Value.Target
	switch {
	case t.Lit != nil && t.Lit.Str != nil:
		return len(*t.Lit.Str), true
	case t.List != nil:
		return len(t.List.Elems), true
	case t.Map != nil:
		return len(t.Map.Items), true
	default:
		return 0, false
	}
}

func zeroValue(t *parser.TypeRef) Expr {
	if t == nil || t.Simple == nil {
		return &LitExpr{Value: "0", IsString: false}
	}
	switch *t.Simple {
	case "int":
		return &LitExpr{Value: "0", IsString: false}
	case "string":
		return &LitExpr{Value: "", IsString: true}
	case "bool":
		return &LitExpr{Value: "false", IsString: false}
	default:
		return &LitExpr{Value: "0", IsString: false}
	}
}

func toSwiftType(t *parser.TypeRef) string {
	if t == nil || t.Simple == nil {
		return ""
	}
	switch *t.Simple {
	case "int":
		return "Int"
	case "string":
		return "String"
	case "bool":
		return "Bool"
	default:
		return "Any"
	}
}

// TestIntConst is a helper for debugging
