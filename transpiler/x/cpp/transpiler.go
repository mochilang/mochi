//go:build slow

package cpp

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	"mochi/parser"
	"mochi/types"
)

var version string
var currentProgram *Program
var currentEnv *types.Env

func init() {
	_, file, _, _ := runtime.Caller(0)
	root := filepath.Join(filepath.Dir(file), "../../..")
	if b, err := os.ReadFile(filepath.Join(root, "VERSION")); err == nil {
		version = strings.TrimSpace(string(b))
	} else {
		version = "unknown"
	}
}

type Program struct {
	Includes  []string
	Globals   []Stmt
	Functions []*Func
}

func (p *Program) addInclude(inc string) {
	for _, v := range p.Includes {
		if v == inc {
			return
		}
	}
	p.Includes = append(p.Includes, inc)
}

type Param struct {
	Name string
	Type string
}

type Func struct {
	Name       string
	Params     []Param
	ReturnType string
	Body       []Stmt
}

type Stmt interface{ emit(io.Writer, int) }

type Expr interface{ emit(io.Writer) }

type PrintStmt struct{ Values []Expr }

// WhileStmt represents a simple while loop.
type WhileStmt struct {
	Cond Expr
	Body []Stmt
}

// LenExpr represents the builtin len() for strings.
type LenExpr struct{ Value Expr }

type StringLit struct{ Value string }

type IntLit struct{ Value int }

type BoolLit struct{ Value bool }

// BreakStmt represents a break statement.
type BreakStmt struct{}

// ContinueStmt represents a continue statement.
type ContinueStmt struct{}

// ListLit represents a list literal converted to std::vector.
type ListLit struct{ Elems []Expr }

// UnaryExpr represents a prefix unary operation like negation or logical not.
type UnaryExpr struct {
	Op   string
	Expr Expr
}

type SelectorExpr struct {
	Target Expr
	Field  string
}

type IndexExpr struct {
	Target Expr
	Index  Expr
}

// MapLit represents a simple map literal using std::map.
type MapLit struct {
	Keys      []Expr
	Values    []Expr
	KeyType   string
	ValueType string
}

type SliceExpr struct {
	Target Expr
	Start  Expr
	End    Expr
}

type ContainsExpr struct {
	Value Expr
	Sub   Expr
}

type InExpr struct {
	Value Expr
	Coll  Expr
}

type SumExpr struct{ Arg Expr }

// AppendExpr represents a call to the `append` builtin on a list.
type AppendExpr struct {
	List Expr
	Elem Expr
}

// AvgExpr represents a call to the `avg` builtin on a list of numbers.
type AvgExpr struct{ List Expr }

// StrExpr represents the `str` builtin for converting values to strings.
type StrExpr struct{ Value Expr }

// ValuesExpr represents the `values` builtin for maps.
type ValuesExpr struct{ Map Expr }

// MinExpr represents the `min` builtin for lists of numbers.
type MinExpr struct{ List Expr }

// MaxExpr represents the `max` builtin for lists of numbers.
type MaxExpr struct{ List Expr }

type CastExpr struct {
	Value Expr
	Type  string
}

type SubstringExpr struct {
	Value Expr
	Start Expr
	End   Expr
}

type CallExpr struct {
	Name string
	Args []Expr
}

type LambdaExpr struct {
	Params []Param
	Body   Expr
}

type ReturnStmt struct{ Value Expr }

type VarRef struct{ Name string }

type BinaryExpr struct {
	Left  Expr
	Op    string
	Right Expr
}

type LetStmt struct {
	Name  string
	Type  string
	Value Expr
}

type AssignStmt struct {
	Name  string
	Value Expr
}

// AssignIndexStmt represents assignment to an indexed element like m[k] = v.
type AssignIndexStmt struct {
	Target Expr
	Index  Expr
	Value  Expr
}

type ForStmt struct {
	Var        string
	Start, End Expr
	Body       []Stmt
	IsMap      bool
}

type IfStmt struct {
	Cond   Expr
	Then   []Stmt
	ElseIf *IfStmt
	Else   []Stmt
}

type IfExpr struct {
	Cond   Expr
	Then   Expr
	ElseIf *IfExpr
	Else   Expr
}

func (p *Program) Emit() []byte {
	var buf bytes.Buffer
	p.write(&buf)
	return buf.Bytes()
}

func (p *Program) write(w io.Writer) {
	v := strings.TrimSpace(version)
	loc := time.FixedZone("GMT+7", 7*3600)
	ts := time.Now().In(loc).Format("2006-01-02 15:04:05 MST")
	fmt.Fprintf(w, "// Generated by Mochi transpiler v%s on %s\n", v, ts)
	for _, inc := range p.Includes {
		fmt.Fprintf(w, "#include %s\n", inc)
	}
	fmt.Fprintln(w)
	currentProgram = p
	// emit helper functions first
	first := true
	var mainFn *Func
	for _, fn := range p.Functions {
		if fn.Name == "main" {
			mainFn = fn
			continue
		}
		if !first {
			fmt.Fprintln(w)
		}
		first = false
		fn.emit(w)
	}
	if len(p.Functions) > 1 {
		fmt.Fprintln(w)
	}
	for _, st := range p.Globals {
		st.emit(w, 0)
	}
	if mainFn != nil {
		if len(p.Globals) > 0 {
			fmt.Fprintln(w)
		} else if !first {
			fmt.Fprintln(w)
		}
		mainFn.emit(w)
	}
	currentProgram = nil
}

func (f *Func) emit(w io.Writer) {
	fmt.Fprintf(w, "%s %s(", f.ReturnType, f.Name)
	for i, p := range f.Params {
		if i > 0 {
			io.WriteString(w, ", ")
		}
		typ := p.Type
		if typ == "" {
			io.WriteString(w, "auto ")
		} else {
			io.WriteString(w, typ+" ")
		}
		io.WriteString(w, p.Name)
	}
	fmt.Fprintln(w, ") {")
	for _, st := range f.Body {
		st.emit(w, 1)
	}
	if f.Name == "main" {
		fmt.Fprintln(w, "    return 0;")
	}
	fmt.Fprintln(w, "}")
}

func (s *PrintStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "std::cout << std::boolalpha")
	for i, v := range s.Values {
		io.WriteString(w, " << ")
		if i > 0 {
			io.WriteString(w, " \" \" << ")
		}
		switch ex := v.(type) {
		case *UnaryExpr:
			if ex.Op == "!" {
				io.WriteString(w, "static_cast<int>(")
				ex.emit(w)
				io.WriteString(w, ")")
				continue
			}
			ex.emit(w)
			continue
		case *BinaryExpr:
			if ex.Op == "&&" || ex.Op == "||" {
				io.WriteString(w, "static_cast<int>(")
				ex.emit(w)
				io.WriteString(w, ")")
				continue
			}
			ex.emit(w)
			continue
		case *ListLit:
			if currentProgram != nil {
				currentProgram.addInclude("<sstream>")
			}
			io.WriteString(w, "([&]{ std::ostringstream ss; auto tmp = ")
			ex.emit(w)
			io.WriteString(w, "; for(size_t i=0;i<tmp.size();++i){ if(i>0) ss<<\" \"; ss<<tmp[i]; } return ss.str(); }())")
		case *SliceExpr:
			if currentProgram != nil {
				currentProgram.addInclude("<sstream>")
			}
			io.WriteString(w, "([&]{ auto tmp = ")
			ex.emit(w)
			io.WriteString(w, "; if constexpr(std::is_same_v<std::decay_t<decltype(tmp)>, std::string>) return tmp; std::ostringstream ss; for(size_t i=0;i<tmp.size();++i){ if(i>0) ss<<\" \"; ss<<tmp[i]; } return ss.str(); }())")
		case *AppendExpr:
			if currentProgram != nil {
				currentProgram.addInclude("<sstream>")
			}
			io.WriteString(w, "([&]{ std::ostringstream ss; auto tmp = ")
			ex.emit(w)
			io.WriteString(w, "; for(size_t i=0;i<tmp.size();++i){ if(i>0) ss<<\" \"; ss<<tmp[i]; } return ss.str(); }())")
		case *AvgExpr:
			if currentProgram != nil {
				currentProgram.addInclude("<sstream>")
			}
			io.WriteString(w, "([&]{ std::ostringstream ss; ss<<std::fixed<<std::setprecision(1)<<")
			ex.emit(w)
			io.WriteString(w, "; return ss.str(); }())")
		case *ValuesExpr:
			if currentProgram != nil {
				currentProgram.addInclude("<sstream>")
			}
			io.WriteString(w, "([&]{ std::ostringstream ss; auto tmp = ")
			ex.emit(w)
			io.WriteString(w, "; for(size_t i=0;i<tmp.size();++i){ if(i>0) ss<<\" \"; ss<<tmp[i]; } return ss.str(); }())")
		default:
			v.emit(w)
		}
	}
	io.WriteString(w, " << std::endl;\n")
}

func (wst *WhileStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "while (")
	wst.Cond.emit(w)
	io.WriteString(w, ") {\n")
	for _, st := range wst.Body {
		st.emit(w, indent+1)
	}
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "}\n")
}

func (l *LenExpr) emit(w io.Writer) {
	l.Value.emit(w)
	io.WriteString(w, ".size()")
}

func (l *ListLit) emit(w io.Writer) {
	io.WriteString(w, "std::vector{")
	for i, e := range l.Elems {
		if i > 0 {
			io.WriteString(w, ", ")
		}
		e.emit(w)
	}
	io.WriteString(w, "}")
}

func (m *MapLit) emit(w io.Writer) {
	fmt.Fprintf(w, "std::map<%s, %s>{", m.KeyType, m.ValueType)
	for i := range m.Keys {
		if i > 0 {
			io.WriteString(w, ", ")
		}
		io.WriteString(w, "{")
		m.Keys[i].emit(w)
		io.WriteString(w, ", ")
		m.Values[i].emit(w)
		io.WriteString(w, "}")
	}
	io.WriteString(w, "}")
}

func (s *StringLit) emit(w io.Writer) {
	fmt.Fprintf(w, "std::string(%q)", s.Value)
}

func (i *IntLit) emit(w io.Writer) { fmt.Fprintf(w, "%d", i.Value) }

func (b *BoolLit) emit(w io.Writer) {
	if b.Value {
		io.WriteString(w, "true")
	} else {
		io.WriteString(w, "false")
	}
}

func (u *UnaryExpr) emit(w io.Writer) {
	io.WriteString(w, u.Op)
	u.Expr.emit(w)
}

func (s *SelectorExpr) emit(w io.Writer) {
	s.Target.emit(w)
	io.WriteString(w, ".")
	io.WriteString(w, s.Field)
}

func (i *IndexExpr) emit(w io.Writer) {
	i.Target.emit(w)
	io.WriteString(w, "[")
	i.Index.emit(w)
	io.WriteString(w, "]")
}

func (s *SliceExpr) emit(w io.Writer) {
	io.WriteString(w, "([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(")
	s.Start.emit(w)
	io.WriteString(w, ", ")
	s.End.emit(w)
	io.WriteString(w, " - ")
	s.Start.emit(w)
	io.WriteString(w, "); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+")
	s.Start.emit(w)
	io.WriteString(w, ", c.begin()+")
	s.End.emit(w)
	io.WriteString(w, "); })(")
	s.Target.emit(w)
	io.WriteString(w, ")")
}

func (c *ContainsExpr) emit(w io.Writer) {
	io.WriteString(w, "(")
	c.Value.emit(w)
	io.WriteString(w, ".find(")
	c.Sub.emit(w)
	io.WriteString(w, ") != std::string::npos")
	io.WriteString(w, ")")
}

func (in *InExpr) emit(w io.Writer) {
	if currentProgram != nil {
		currentProgram.addInclude("<algorithm>")
		currentProgram.addInclude("<type_traits>")
	}
	io.WriteString(w, "([&](const auto& c, const auto& v){ ")
	io.WriteString(w, "if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } ")
	io.WriteString(w, "else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } ")
	io.WriteString(w, "else { return std::find(c.begin(), c.end(), v) != c.end(); } })(")
	in.Coll.emit(w)
	io.WriteString(w, ", ")
	in.Value.emit(w)
	io.WriteString(w, ")")
}

func (s *SumExpr) emit(w io.Writer) {
	if currentProgram != nil {
		currentProgram.addInclude("<numeric>")
	}
	if lit, ok := s.Arg.(*ListLit); ok {
		io.WriteString(w, "([&]{ auto tmp = ")
		lit.emit(w)
		io.WriteString(w, "; return std::accumulate(tmp.begin(), tmp.end(), 0); })()")
	} else {
		io.WriteString(w, "std::accumulate(")
		s.Arg.emit(w)
		io.WriteString(w, ".begin(), ")
		s.Arg.emit(w)
		io.WriteString(w, ".end(), 0)")
	}
}

func (a *AppendExpr) emit(w io.Writer) {
	io.WriteString(w, "([&]{ auto v = ")
	a.List.emit(w)
	io.WriteString(w, "; v.push_back(")
	a.Elem.emit(w)
	io.WriteString(w, "); return v; }())")
}

func (a *AvgExpr) emit(w io.Writer) {
	if currentProgram != nil {
		currentProgram.addInclude("<numeric>")
		currentProgram.addInclude("<sstream>")
		currentProgram.addInclude("<iomanip>")
	}
	io.WriteString(w, "([&]{ auto tmp = ")
	a.List.emit(w)
	io.WriteString(w, "; return tmp.empty() ? 0.0 : std::accumulate(tmp.begin(), tmp.end(), 0.0) / tmp.size(); }())")
}

func (s *StrExpr) emit(w io.Writer) {
	if currentProgram != nil {
		currentProgram.addInclude("<sstream>")
	}
	io.WriteString(w, "([&]{ std::ostringstream ss; ss<<")
	s.Value.emit(w)
	io.WriteString(w, "; return ss.str(); }())")
}

func (v *ValuesExpr) emit(w io.Writer) {
	if currentProgram != nil {
		currentProgram.addInclude("<vector>")
	}
	io.WriteString(w, "([&]{ std::vector<decltype(")
	v.Map.emit(w)
	io.WriteString(w, ".begin()->second)> vals; for(const auto& __p : ")
	v.Map.emit(w)
	io.WriteString(w, ") vals.push_back(__p.second); return vals; }())")
}

func (m *MinExpr) emit(w io.Writer) {
	if currentProgram != nil {
		currentProgram.addInclude("<algorithm>")
	}
	io.WriteString(w, "(*std::min_element(")
	m.List.emit(w)
	io.WriteString(w, ".begin(), ")
	m.List.emit(w)
	io.WriteString(w, ".end()))")
}

func (m *MaxExpr) emit(w io.Writer) {
	if currentProgram != nil {
		currentProgram.addInclude("<algorithm>")
	}
	io.WriteString(w, "(*std::max_element(")
	m.List.emit(w)
	io.WriteString(w, ".begin(), ")
	m.List.emit(w)
	io.WriteString(w, ".end()))")
}

func (c *CastExpr) emit(w io.Writer) {
	if c.Type == "int" {
		io.WriteString(w, "std::stoi(")
		c.Value.emit(w)
		io.WriteString(w, ")")
	} else {
		io.WriteString(w, "(")
		io.WriteString(w, c.Type)
		io.WriteString(w, ")(")
		c.Value.emit(w)
		io.WriteString(w, ")")
	}
}

func (s *SubstringExpr) emit(w io.Writer) {
	s.Value.emit(w)
	io.WriteString(w, ".substr(")
	s.Start.emit(w)
	io.WriteString(w, ", ")
	s.End.emit(w)
	io.WriteString(w, " - ")
	s.Start.emit(w)
	io.WriteString(w, ")")
}

func (v *VarRef) emit(w io.Writer) { io.WriteString(w, v.Name) }

func (c *CallExpr) emit(w io.Writer) {
	io.WriteString(w, c.Name)
	io.WriteString(w, "(")
	for i, a := range c.Args {
		if i > 0 {
			io.WriteString(w, ", ")
		}
		a.emit(w)
	}
	io.WriteString(w, ")")
}

func (l *LambdaExpr) emit(w io.Writer) {
	io.WriteString(w, "[=](")
	for i, p := range l.Params {
		if i > 0 {
			io.WriteString(w, ", ")
		}
		if p.Type == "" {
			io.WriteString(w, "auto ")
		} else {
			io.WriteString(w, p.Type+" ")
		}
		io.WriteString(w, p.Name)
	}
	io.WriteString(w, ") { return ")
	l.Body.emit(w)
	io.WriteString(w, "; }")
}

func (b *BinaryExpr) emit(w io.Writer) {
	if b.Op == "/" {
		io.WriteString(w, "((double)(")
		b.Left.emit(w)
		io.WriteString(w, ") / (")
		b.Right.emit(w)
		io.WriteString(w, "))")
		return
	}
	io.WriteString(w, "(")
	b.Left.emit(w)
	io.WriteString(w, " "+b.Op+" ")
	b.Right.emit(w)
	io.WriteString(w, ")")
}

func (s *LetStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	typ := s.Type
	if typ == "" {
		io.WriteString(w, "auto ")
	} else {
		io.WriteString(w, typ+" ")
	}
	io.WriteString(w, s.Name)
	if s.Value != nil {
		io.WriteString(w, " = ")
		s.Value.emit(w)
	} else if typ != "" {
		io.WriteString(w, " = ")
		io.WriteString(w, defaultValueForType(typ))
	}
	io.WriteString(w, ";\n")
}

func (a *AssignStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, a.Name)
	io.WriteString(w, " = ")
	a.Value.emit(w)
	io.WriteString(w, ";\n")
}

func (a *AssignIndexStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	a.Target.emit(w)
	io.WriteString(w, "[")
	a.Index.emit(w)
	io.WriteString(w, "] = ")
	a.Value.emit(w)
	io.WriteString(w, ";\n")
}

func (r *ReturnStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "return")
	if r.Value != nil {
		io.WriteString(w, " ")
		r.Value.emit(w)
	}
	io.WriteString(w, ";\n")
}

func (b *BreakStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "break;\n")
}

func (c *ContinueStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "continue;\n")
}

func (f *ForStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	if f.End == nil {
		if f.IsMap {
			io.WriteString(w, "for (const auto& __p : ")
			f.Start.emit(w)
			io.WriteString(w, ") {\n")
			for i := 0; i < indent+1; i++ {
				io.WriteString(w, "    ")
			}
			io.WriteString(w, "auto ")
			io.WriteString(w, f.Var)
			io.WriteString(w, " = __p.first;\n")
		} else {
			io.WriteString(w, "for (auto ")
			io.WriteString(w, f.Var)
			io.WriteString(w, " : ")
			f.Start.emit(w)
			io.WriteString(w, ") {\n")
		}
	} else {
		io.WriteString(w, "for (int ")
		io.WriteString(w, f.Var)
		io.WriteString(w, " = ")
		f.Start.emit(w)
		io.WriteString(w, "; ")
		io.WriteString(w, f.Var)
		io.WriteString(w, " < ")
		f.End.emit(w)
		io.WriteString(w, "; ")
		io.WriteString(w, f.Var)
		io.WriteString(w, "++ ) {\n")
	}
	for _, st := range f.Body {
		st.emit(w, indent+1)
	}
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "}\n")
}

func (i *IfStmt) emit(w io.Writer, indent int) {
	for j := 0; j < indent; j++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "if (")
	i.Cond.emit(w)
	io.WriteString(w, ") {\n")
	for _, st := range i.Then {
		st.emit(w, indent+1)
	}
	for j := 0; j < indent; j++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "}")
	if i.ElseIf != nil {
		io.WriteString(w, " else ")
		i.ElseIf.emit(w, indent)
	} else if len(i.Else) > 0 {
		io.WriteString(w, " else {\n")
		for _, st := range i.Else {
			st.emit(w, indent+1)
		}
		for j := 0; j < indent; j++ {
			io.WriteString(w, "    ")
		}
		io.WriteString(w, "}")
	}
	io.WriteString(w, "\n")
}

func (i *IfExpr) emit(w io.Writer) {
	io.WriteString(w, "(")
	i.Cond.emit(w)
	io.WriteString(w, " ? ")
	i.Then.emit(w)
	io.WriteString(w, " : ")
	if i.ElseIf != nil {
		i.ElseIf.emit(w)
	} else if i.Else != nil {
		i.Else.emit(w)
	}
	io.WriteString(w, ")")
}

func Transpile(prog *parser.Program, env *types.Env) (*Program, error) {
	cp := &Program{Includes: []string{"<iostream>", "<string>"}}
	currentProgram = cp
	currentEnv = env
	defer func() { currentProgram = nil; currentEnv = nil }()
	var body []Stmt
	var globals []Stmt
	for _, stmt := range prog.Statements {
		switch {
		case stmt.Fun != nil:
			fn, err := convertFun(stmt.Fun)
			if err != nil {
				return nil, err
			}
			cp.Functions = append(cp.Functions, fn)
		case stmt.Expr != nil:
			if call := extractCall(stmt.Expr.Expr); call != nil && call.Func == "print" {
				var args []Expr
				for _, a := range call.Args {
					ce, err := convertExpr(a)
					if err != nil {
						return nil, err
					}
					args = append(args, ce)
				}
				body = append(body, &PrintStmt{Values: args})
			} else {
				return nil, fmt.Errorf("unsupported expression")
			}
		case stmt.Let != nil:
			var val Expr
			var err error
			if stmt.Let.Value != nil {
				val, err = convertExpr(stmt.Let.Value)
				if err != nil {
					return nil, err
				}
			}
			typ := ""
			if stmt.Let.Type != nil && stmt.Let.Type.Simple != nil {
				typ = cppType(*stmt.Let.Type.Simple)
			}
			globals = append(globals, &LetStmt{Name: stmt.Let.Name, Type: typ, Value: val})
		case stmt.Var != nil:
			var val Expr
			var err error
			if stmt.Var.Value != nil {
				val, err = convertExpr(stmt.Var.Value)
				if err != nil {
					return nil, err
				}
			}
			typ := ""
			if stmt.Var.Type != nil && stmt.Var.Type.Simple != nil {
				typ = cppType(*stmt.Var.Type.Simple)
			}
			globals = append(globals, &LetStmt{Name: stmt.Var.Name, Type: typ, Value: val})
		case stmt.Assign != nil:
			val, err := convertExpr(stmt.Assign.Value)
			if err != nil {
				return nil, err
			}
			if len(stmt.Assign.Index) > 0 {
				parts := stmt.Assign.Index
				if parts[len(parts)-1].Colon != nil {
					return nil, fmt.Errorf("unsupported index assignment")
				}
				idx, err := convertExpr(parts[len(parts)-1].Start)
				if err != nil {
					return nil, err
				}
				var target Expr = &VarRef{Name: stmt.Assign.Name}
				for _, sp := range parts[:len(parts)-1] {
					if sp.Colon != nil {
						return nil, fmt.Errorf("unsupported index assignment")
					}
					id, err := convertExpr(sp.Start)
					if err != nil {
						return nil, err
					}
					target = &IndexExpr{Target: target, Index: id}
				}
				body = append(body, &AssignIndexStmt{Target: target, Index: idx, Value: val})
			} else {
				body = append(body, &AssignStmt{Name: stmt.Assign.Name, Value: val})
			}
		case stmt.For != nil:
			start, err := convertExpr(stmt.For.Source)
			if err != nil {
				return nil, err
			}
			var end Expr
			if stmt.For.RangeEnd != nil {
				end, err = convertExpr(stmt.For.RangeEnd)
				if err != nil {
					return nil, err
				}
			}
			fs := &ForStmt{Var: stmt.For.Name, Start: start, End: end}
			if currentEnv != nil {
				if t := types.TypeOfExpr(stmt.For.Source, currentEnv); t != nil {
					if _, ok := t.(types.MapType); ok {
						fs.IsMap = true
					}
				}
			}
			for _, s := range stmt.For.Body {
				st, err := convertStmt(s)
				if err != nil {
					return nil, err
				}
				fs.Body = append(fs.Body, st)
			}
			body = append(body, fs)
		case stmt.While != nil:
			ws, err := convertWhileStmt(stmt.While)
			if err != nil {
				return nil, err
			}
			body = append(body, ws)
		case stmt.If != nil:
			ifs, err := convertIfStmt(stmt.If)
			if err != nil {
				return nil, err
			}
			body = append(body, ifs)
		default:
			return nil, fmt.Errorf("unsupported statement")
		}
	}
	cp.Globals = globals
	cp.Functions = append(cp.Functions, &Func{Name: "main", ReturnType: "int", Body: body})
	return cp, nil
}

func extractCall(e *parser.Expr) *parser.CallExpr {
	if e == nil || e.Binary == nil || e.Binary.Left == nil {
		return nil
	}
	u := e.Binary.Left
	if u.Value == nil || u.Value.Target == nil || u.Value.Target.Call == nil {
		return nil
	}
	return u.Value.Target.Call
}

func convertStmt(s *parser.Statement) (Stmt, error) {
	switch {
	case s.Expr != nil:
		if call := extractCall(s.Expr.Expr); call != nil && call.Func == "print" {
			var args []Expr
			for _, a := range call.Args {
				ce, err := convertExpr(a)
				if err != nil {
					return nil, err
				}
				args = append(args, ce)
			}
			return &PrintStmt{Values: args}, nil
		}
	case s.Let != nil:
		var val Expr
		var err error
		if s.Let.Value != nil {
			val, err = convertExpr(s.Let.Value)
			if err != nil {
				return nil, err
			}
		}
		typ := ""
		if s.Let.Type != nil && s.Let.Type.Simple != nil {
			typ = cppType(*s.Let.Type.Simple)
		} else if s.Let.Value != nil {
			typ = guessType(s.Let.Value)
		}
		return &LetStmt{Name: s.Let.Name, Type: typ, Value: val}, nil
	case s.Var != nil:
		var val Expr
		var err error
		if s.Var.Value != nil {
			val, err = convertExpr(s.Var.Value)
			if err != nil {
				return nil, err
			}
		}
		typ := ""
		if s.Var.Type != nil && s.Var.Type.Simple != nil {
			typ = cppType(*s.Var.Type.Simple)
		} else if s.Var.Value != nil {
			typ = guessType(s.Var.Value)
		}
		return &LetStmt{Name: s.Var.Name, Type: typ, Value: val}, nil
	case s.Assign != nil:
		val, err := convertExpr(s.Assign.Value)
		if err != nil {
			return nil, err
		}
		if len(s.Assign.Index) > 0 {
			parts := s.Assign.Index
			if parts[len(parts)-1].Colon != nil {
				return nil, fmt.Errorf("unsupported index assignment")
			}
			idx, err := convertExpr(parts[len(parts)-1].Start)
			if err != nil {
				return nil, err
			}
			var target Expr = &VarRef{Name: s.Assign.Name}
			for _, sp := range parts[:len(parts)-1] {
				if sp.Colon != nil {
					return nil, fmt.Errorf("unsupported index assignment")
				}
				id, err := convertExpr(sp.Start)
				if err != nil {
					return nil, err
				}
				target = &IndexExpr{Target: target, Index: id}
			}
			return &AssignIndexStmt{Target: target, Index: idx, Value: val}, nil
		}
		return &AssignStmt{Name: s.Assign.Name, Value: val}, nil
	case s.Break != nil:
		return &BreakStmt{}, nil
	case s.Continue != nil:
		return &ContinueStmt{}, nil
	case s.Return != nil:
		var val Expr
		if s.Return.Value != nil {
			var err error
			val, err = convertExpr(s.Return.Value)
			if err != nil {
				return nil, err
			}
		}
		return &ReturnStmt{Value: val}, nil
	case s.If != nil:
		return convertIfStmt(s.If)
	case s.While != nil:
		return convertWhileStmt(s.While)
	}
	return nil, fmt.Errorf("unsupported statement")
}

func convertExpr(e *parser.Expr) (Expr, error) {
	if e == nil {
		return nil, fmt.Errorf("nil expr")
	}
	return convertBinary(e.Binary)
}

func convertBinary(b *parser.BinaryExpr) (Expr, error) {
	left, err := convertUnary(b.Left)
	if err != nil {
		return nil, err
	}
	if len(b.Right) == 0 {
		return left, nil
	}
	expr := left
	for _, op := range b.Right {
		right, err := convertPostfix(op.Right)
		if err != nil {
			return nil, err
		}
		if op.Op == "in" {
			if currentProgram != nil {
				currentProgram.addInclude("<algorithm>")
				currentProgram.addInclude("<type_traits>")
			}
			expr = &InExpr{Value: expr, Coll: right}
		} else {
			expr = &BinaryExpr{Left: expr, Op: op.Op, Right: right}
		}
	}
	return expr, nil
}

func convertUnary(u *parser.Unary) (Expr, error) {
	if u == nil {
		return nil, fmt.Errorf("nil unary")
	}
	expr, err := convertPostfix(u.Value)
	if err != nil {
		return nil, err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		op := u.Ops[i]
		expr = &UnaryExpr{Op: op, Expr: expr}
	}
	return expr, nil
}

func convertPostfix(p *parser.PostfixExpr) (Expr, error) {
	expr, err := convertPrimary(p.Target)
	if err != nil {
		return nil, err
	}
	for _, op := range p.Ops {
		switch {
		case op.Index != nil:
			if op.Index.Colon != nil {
				if op.Index.Colon2 != nil || op.Index.Step != nil {
					return nil, fmt.Errorf("slice not supported")
				}
				start, err := convertExpr(op.Index.Start)
				if err != nil {
					return nil, err
				}
				end, err := convertExpr(op.Index.End)
				if err != nil {
					return nil, err
				}
				if currentProgram != nil {
					currentProgram.addInclude("<vector>")
					currentProgram.addInclude("<type_traits>")
				}
				expr = &SliceExpr{Target: expr, Start: start, End: end}
			} else if op.Index.Colon2 != nil || op.Index.End != nil || op.Index.Step != nil {
				return nil, fmt.Errorf("slice not supported")
			} else {
				idx, err := convertExpr(op.Index.Start)
				if err != nil {
					return nil, err
				}
				expr = &IndexExpr{Target: expr, Index: idx}
			}
		case op.Call != nil:
			var args []Expr
			for _, a := range op.Call.Args {
				ce, err := convertExpr(a)
				if err != nil {
					return nil, err
				}
				args = append(args, ce)
			}
			if sel, ok := expr.(*SelectorExpr); ok && sel.Field == "contains" && len(args) == 1 {
				expr = &ContainsExpr{Value: sel.Target, Sub: args[0]}
			} else if vr, ok := expr.(*VarRef); ok {
				expr = &CallExpr{Name: vr.Name, Args: args}
			} else {
				return nil, fmt.Errorf("unsupported call")
			}
		case op.Cast != nil && op.Cast.Type != nil && op.Cast.Type.Simple != nil:
			typ := cppType(*op.Cast.Type.Simple)
			expr = &CastExpr{Value: expr, Type: typ}
		default:
			return nil, fmt.Errorf("unsupported postfix")
		}
	}
	return expr, nil
}

func convertIfStmt(is *parser.IfStmt) (*IfStmt, error) {
	cond, err := convertExpr(is.Cond)
	if err != nil {
		return nil, err
	}
	var then []Stmt
	for _, st := range is.Then {
		cs, err := convertStmt(st)
		if err != nil {
			return nil, err
		}
		then = append(then, cs)
	}
	var elseStmts []Stmt
	if is.Else != nil {
		for _, st := range is.Else {
			cs, err := convertStmt(st)
			if err != nil {
				return nil, err
			}
			elseStmts = append(elseStmts, cs)
		}
	}
	var elseIf *IfStmt
	if is.ElseIf != nil {
		ei, err := convertIfStmt(is.ElseIf)
		if err != nil {
			return nil, err
		}
		elseIf = ei
	}
	return &IfStmt{Cond: cond, Then: then, ElseIf: elseIf, Else: elseStmts}, nil
}

func convertWhileStmt(ws *parser.WhileStmt) (*WhileStmt, error) {
	cond, err := convertExpr(ws.Cond)
	if err != nil {
		return nil, err
	}
	var body []Stmt
	for _, st := range ws.Body {
		cs, err := convertStmt(st)
		if err != nil {
			return nil, err
		}
		body = append(body, cs)
	}
	return &WhileStmt{Cond: cond, Body: body}, nil
}

func convertFun(fn *parser.FunStmt) (*Func, error) {
	var body []Stmt
	for _, st := range fn.Body {
		s, err := convertStmt(st)
		if err != nil {
			return nil, err
		}
		body = append(body, s)
	}
	var params []Param
	for _, p := range fn.Params {
		typ := ""
		if p.Type != nil && p.Type.Simple != nil {
			typ = cppType(*p.Type.Simple)
		}
		params = append(params, Param{Name: p.Name, Type: typ})
	}
	ret := "int"
	if fn.Return == nil {
		ret = "void"
	} else if fn.Return.Simple != nil {
		ret = cppType(*fn.Return.Simple)
	} else {
		// for function, struct or generic return types use auto to
		// allow the compiler to deduce the concrete closure type
		ret = "auto"
	}
	return &Func{Name: fn.Name, Params: params, ReturnType: ret, Body: body}, nil
}

func convertPrimary(p *parser.Primary) (Expr, error) {
	switch {
	case p.Lit != nil:
		return convertLiteral(p.Lit)
	case p.Call != nil:
		switch p.Call.Func {
		case "len":
			if len(p.Call.Args) == 1 {
				arg, err := convertExpr(p.Call.Args[0])
				if err != nil {
					return nil, err
				}
				return &LenExpr{Value: arg}, nil
			}
		case "sum":
			if len(p.Call.Args) == 1 {
				arg, err := convertExpr(p.Call.Args[0])
				if err != nil {
					return nil, err
				}
				if currentProgram != nil {
					currentProgram.addInclude("<numeric>")
				}
				return &SumExpr{Arg: arg}, nil
			}
		case "append":
			if len(p.Call.Args) == 2 {
				l0, err := convertExpr(p.Call.Args[0])
				if err != nil {
					return nil, err
				}
				l1, err := convertExpr(p.Call.Args[1])
				if err != nil {
					return nil, err
				}
				return &AppendExpr{List: l0, Elem: l1}, nil
			}
		case "avg":
			if len(p.Call.Args) == 1 {
				arg, err := convertExpr(p.Call.Args[0])
				if err != nil {
					return nil, err
				}
				if currentProgram != nil {
					currentProgram.addInclude("<numeric>")
					currentProgram.addInclude("<sstream>")
					currentProgram.addInclude("<iomanip>")
				}
				return &AvgExpr{List: arg}, nil
			}
		case "str":
			if len(p.Call.Args) == 1 {
				arg, err := convertExpr(p.Call.Args[0])
				if err != nil {
					return nil, err
				}
				if currentProgram != nil {
					currentProgram.addInclude("<sstream>")
				}
				return &StrExpr{Value: arg}, nil
			}
		case "count":
			if len(p.Call.Args) == 1 {
				arg, err := convertExpr(p.Call.Args[0])
				if err != nil {
					return nil, err
				}
				return &LenExpr{Value: arg}, nil
			}
		case "values":
			if len(p.Call.Args) == 1 {
				arg, err := convertExpr(p.Call.Args[0])
				if err != nil {
					return nil, err
				}
				if currentProgram != nil {
					currentProgram.addInclude("<vector>")
					currentProgram.addInclude("<sstream>")
				}
				return &ValuesExpr{Map: arg}, nil
			}
		case "min":
			if len(p.Call.Args) == 1 {
				arg, err := convertExpr(p.Call.Args[0])
				if err != nil {
					return nil, err
				}
				if currentProgram != nil {
					currentProgram.addInclude("<algorithm>")
				}
				return &MinExpr{List: arg}, nil
			}
		case "max":
			if len(p.Call.Args) == 1 {
				arg, err := convertExpr(p.Call.Args[0])
				if err != nil {
					return nil, err
				}
				if currentProgram != nil {
					currentProgram.addInclude("<algorithm>")
				}
				return &MaxExpr{List: arg}, nil
			}
		case "substring":
			if len(p.Call.Args) == 3 {
				v0, err := convertExpr(p.Call.Args[0])
				if err != nil {
					return nil, err
				}
				v1, err := convertExpr(p.Call.Args[1])
				if err != nil {
					return nil, err
				}
				v2, err := convertExpr(p.Call.Args[2])
				if err != nil {
					return nil, err
				}
				return &SubstringExpr{Value: v0, Start: v1, End: v2}, nil
			}
		}
		var args []Expr
		for _, a := range p.Call.Args {
			ce, err := convertExpr(a)
			if err != nil {
				return nil, err
			}
			args = append(args, ce)
		}
		return &CallExpr{Name: p.Call.Func, Args: args}, nil
	case p.Selector != nil:
		expr := Expr(&VarRef{Name: p.Selector.Root})
		for _, f := range p.Selector.Tail {
			expr = &SelectorExpr{Target: expr, Field: f}
		}
		return expr, nil
	case p.If != nil:
		return convertIfExpr(p.If)
	case p.List != nil:
		if currentProgram != nil {
			currentProgram.addInclude("<vector>")
		}
		var elems []Expr
		for _, e := range p.List.Elems {
			ce, err := convertExpr(e)
			if err != nil {
				return nil, err
			}
			elems = append(elems, ce)
		}
		return &ListLit{Elems: elems}, nil
	case p.Map != nil:
		if currentProgram != nil {
			currentProgram.addInclude("<map>")
		}
		if len(p.Map.Items) == 0 {
			return &MapLit{KeyType: "auto", ValueType: "auto"}, nil
		}
		kt := guessType(p.Map.Items[0].Key)
		vt := guessType(p.Map.Items[0].Value)
		keys := make([]Expr, len(p.Map.Items))
		vals := make([]Expr, len(p.Map.Items))
		for i, it := range p.Map.Items {
			ke, err := convertExpr(it.Key)
			if err != nil {
				return nil, err
			}
			ve, err := convertExpr(it.Value)
			if err != nil {
				return nil, err
			}
			keys[i] = ke
			vals[i] = ve
		}
		return &MapLit{Keys: keys, Values: vals, KeyType: kt, ValueType: vt}, nil
	case p.FunExpr != nil && p.FunExpr.ExprBody != nil:
		var params []Param
		for _, pa := range p.FunExpr.Params {
			typ := ""
			if pa.Type != nil && pa.Type.Simple != nil {
				typ = cppType(*pa.Type.Simple)
			}
			params = append(params, Param{Name: pa.Name, Type: typ})
		}
		body, err := convertExpr(p.FunExpr.ExprBody)
		if err != nil {
			return nil, err
		}
		return &LambdaExpr{Params: params, Body: body}, nil
	case p.Group != nil:
		return convertExpr(p.Group)
	default:
		return nil, fmt.Errorf("unsupported expression")
	}
}

func convertLiteral(l *parser.Literal) (Expr, error) {
	switch {
	case l.Str != nil:
		return &StringLit{Value: *l.Str}, nil
	case l.Int != nil:
		return &IntLit{Value: int(*l.Int)}, nil
	case l.Bool != nil:
		return &BoolLit{Value: bool(*l.Bool)}, nil
	default:
		return nil, fmt.Errorf("unsupported literal")
	}
}

func convertIfExpr(ie *parser.IfExpr) (*IfExpr, error) {
	cond, err := convertExpr(ie.Cond)
	if err != nil {
		return nil, err
	}
	thenExpr, err := convertExpr(ie.Then)
	if err != nil {
		return nil, err
	}
	var elseExpr Expr
	var elseIf *IfExpr
	if ie.ElseIf != nil {
		ei, err := convertIfExpr(ie.ElseIf)
		if err != nil {
			return nil, err
		}
		elseIf = ei
	} else if ie.Else != nil {
		elseExpr, err = convertExpr(ie.Else)
		if err != nil {
			return nil, err
		}
	}
	return &IfExpr{Cond: cond, Then: thenExpr, ElseIf: elseIf, Else: elseExpr}, nil
}

func cppType(t string) string {
	switch t {
	case "int":
		return "int"
	case "float":
		return "double"
	case "bool":
		return "bool"
	case "string":
		return "std::string"
	}
	return "auto"
}

func cppTypeFrom(tp types.Type) string {
	switch t := tp.(type) {
	case types.IntType:
		return "int"
	case types.Int64Type:
		return "int64_t"
	case types.FloatType:
		return "double"
	case types.BoolType:
		return "bool"
	case types.StringType:
		return "std::string"
	case types.ListType:
		return fmt.Sprintf("std::vector<%s>", cppTypeFrom(t.Elem))
	case types.MapType:
		return fmt.Sprintf("std::map<%s, %s>", cppTypeFrom(t.Key), cppTypeFrom(t.Value))
	default:
		return "auto"
	}
}

func guessType(e *parser.Expr) string {
	if e == nil {
		return "auto"
	}
	if currentEnv != nil {
		typ := types.TypeOfExpr(e, currentEnv)
		if typ != nil {
			if _, ok := typ.(types.AnyType); !ok {
				return cppTypeFrom(typ)
			}
		}
	}
	if types.IsStringExpr(e, currentEnv) {
		return "std::string"
	}
	if types.IsBoolExpr(e, currentEnv) {
		return "bool"
	}
	if types.IsFloatExpr(e, currentEnv) {
		return "double"
	}
	if types.IsListExpr(e, currentEnv) {
		if e.Binary != nil && e.Binary.Left != nil && e.Binary.Left.Value != nil {
			if list := e.Binary.Left.Value.Target.List; list != nil && len(list.Elems) > 0 {
				et := guessType(list.Elems[0])
				return fmt.Sprintf("std::vector<%s>", et)
			}
		}
		return "std::vector<auto>"
	}
	if types.IsMapExpr(e, currentEnv) {
		if e.Binary != nil && e.Binary.Left != nil && e.Binary.Left.Value != nil {
			if mp := e.Binary.Left.Value.Target.Map; mp != nil && len(mp.Items) > 0 {
				kt := guessType(mp.Items[0].Key)
				vt := guessType(mp.Items[0].Value)
				return fmt.Sprintf("std::map<%s, %s>", kt, vt)
			}
		}
		return "std::map<auto, auto>"
	}
	if e.Binary == nil || e.Binary.Left == nil || e.Binary.Left.Value == nil || e.Binary.Left.Value.Target == nil {
		return "auto"
	}
	pf := e.Binary.Left.Value
	if lit := pf.Target.Lit; lit != nil {
		if lit.Int != nil {
			return "int"
		}
		if lit.Bool != nil {
			return "bool"
		}
		if lit.Str != nil {
			return "std::string"
		}
	}
	if list := pf.Target.List; list != nil && len(list.Elems) > 0 {
		et := guessType(list.Elems[0])
		return fmt.Sprintf("std::vector<%s>", et)
	}
	if mp := pf.Target.Map; mp != nil && len(mp.Items) > 0 {
		kt := guessType(mp.Items[0].Key)
		vt := guessType(mp.Items[0].Value)
		return fmt.Sprintf("std::map<%s, %s>", kt, vt)
	}
	return "auto"
}

func defaultValueForType(t string) string {
	switch t {
	case "int", "double":
		return "0"
	case "bool":
		return "false"
	case "std::string":
		return "\"\""
	}
	return "{}"
}
