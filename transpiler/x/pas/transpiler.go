//go:build slow

package pas

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"mochi/parser"
	"mochi/types"
)

func quote(s string) string {
	s = strings.ReplaceAll(s, "'", "''")
	return "'" + s + "'"
}

// Program is a minimal Pascal AST consisting of a sequence of statements.
type Program struct {
	Stmts []Stmt
}

// Stmt represents a Pascal statement.
type Stmt interface{ emit(io.Writer) }

// PrintStmt prints a string literal using writeln.
type PrintStmt struct{ Text string }

func (p *PrintStmt) emit(w io.Writer) {
	fmt.Fprintf(w, "writeln(%s);", quote(p.Text))
}

// Emit renders Pascal code for the program with a deterministic header.
func (p *Program) Emit() []byte {
	var buf bytes.Buffer
	loc := time.FixedZone("GMT+7", 7*3600)
	now := time.Now().In(loc)
	fmt.Fprintf(&buf, "// Generated by Mochi transpiler v%s on %s\n", version(), now.Format("2006-01-02 15:04:05 MST"))
	buf.WriteString("program Main;\n")
	buf.WriteString("begin\n")
	for _, s := range p.Stmts {
		buf.WriteString("  ")
		s.emit(&buf)
		buf.WriteString("\n")
	}
	buf.WriteString("end.\n")
	return buf.Bytes()
}

// Transpile converts a Mochi AST to our Pascal AST.
func Transpile(env *types.Env, prog *parser.Program) (*Program, error) {
	_ = env
	pr := &Program{}
	for _, st := range prog.Statements {
		if st.Expr != nil {
			call := st.Expr.Expr.Binary.Left.Value.Target.Call
			if call != nil && call.Func == "print" && len(call.Args) == 1 {
				arg := call.Args[0]
				lit := arg.Binary.Left.Value.Target.Lit
				if lit != nil && lit.Str != nil {
					pr.Stmts = append(pr.Stmts, &PrintStmt{Text: *lit.Str})
					continue
				}
			}
			return nil, fmt.Errorf("unsupported expression")
		}
		return nil, fmt.Errorf("unsupported statement")
	}
	return pr, nil
}

func repoRoot() (string, error) {
	dir, err := os.Getwd()
	if err != nil {
		return "", err
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir, nil
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return "", fmt.Errorf("go.mod not found")
}

func version() string {
	root, err := repoRoot()
	if err != nil {
		return "unknown"
	}
	b, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "unknown"
	}
	return strings.TrimSpace(string(b))
}
