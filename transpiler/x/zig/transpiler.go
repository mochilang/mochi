package zigt

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"mochi/ast"
	"mochi/parser"
	"mochi/types"
)

// Program represents a Zig source file with one or more functions.
type Program struct {
	Functions []*Func
}

type Func struct {
	Name string
	Body []Stmt
}

type Stmt interface{ emit(io.Writer, int) }

type Expr interface{ emit(io.Writer) }

// PrintStmt writes a value using std.debug.print.
type PrintStmt struct{ Value Expr }

type VarDecl struct {
	Const bool
	Name  string
	Value Expr
}

type AssignStmt struct {
	Name  string
	Value Expr
}

type WhileStmt struct {
	Cond Expr
	Body []Stmt
}

type StringLit struct{ Value string }
type IntLit struct{ Value int }
type VarRef struct{ Name string }
type BinaryExpr struct {
	Op          string
	Left, Right Expr
}

func repoRoot() (string, error) {
	dir, err := os.Getwd()
	if err != nil {
		return "", err
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir, nil
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return "", fmt.Errorf("go.mod not found")
}

func version() string {
	root, err := repoRoot()
	if err != nil {
		return "dev"
	}
	b, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(b))
}

func header() string {
	loc := time.FixedZone("GMT+7", 7*3600)
	ts := time.Now().In(loc).Format("2006-01-02 15:04:05 MST")
	return fmt.Sprintf("// Generated by Mochi transpiler v%s on %s\n", version(), ts)
}

// Emit returns the Zig source code for the program.
func (p *Program) Emit() []byte {
	var buf bytes.Buffer
	buf.WriteString(header())
	buf.WriteString("const std = @import(\"std\");\n\n")
	for i, fn := range p.Functions {
		if i > 0 {
			buf.WriteString("\n")
		}
		fn.emit(&buf)
	}
	return buf.Bytes()
}

func (f *Func) emit(w io.Writer) {
	fmt.Fprintf(w, "pub fn %s() void {\n", f.Name)
	for _, st := range f.Body {
		st.emit(w, 1)
	}
	fmt.Fprintln(w, "}")
}

func (s *PrintStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "std.debug.print(\"{any}\\n\", .{")
	s.Value.emit(w)
	io.WriteString(w, "});\n")
}

func (s *StringLit) emit(w io.Writer) { fmt.Fprintf(w, "%q", s.Value) }
func (i *IntLit) emit(w io.Writer)    { fmt.Fprintf(w, "%d", i.Value) }
func (v *VarRef) emit(w io.Writer)    { io.WriteString(w, v.Name) }
func (b *BinaryExpr) emit(w io.Writer) {
	b.Left.emit(w)
	fmt.Fprintf(w, " %s ", b.Op)
	b.Right.emit(w)
}

func (d *VarDecl) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	if d.Const {
		io.WriteString(w, "const ")
	} else {
		io.WriteString(w, "var ")
	}
	io.WriteString(w, d.Name)
	if d.Value != nil {
		io.WriteString(w, " = ")
		d.Value.emit(w)
	}
	io.WriteString(w, ";\n")
}

func (a *AssignStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, a.Name)
	io.WriteString(w, " = ")
	a.Value.emit(w)
	io.WriteString(w, ";\n")
}

func (ws *WhileStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "while (")
	if ws.Cond != nil {
		ws.Cond.emit(w)
	}
	io.WriteString(w, ") {\n")
	for _, st := range ws.Body {
		st.emit(w, indent+1)
	}
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "}\n")
}

// Transpile converts a Mochi program into our simple Zig AST.
func Transpile(prog *parser.Program, env *types.Env) (*Program, error) {
	main := &Func{Name: "main"}
	body, err := compileStmts(prog.Statements)
	if err != nil {
		return nil, err
	}
	main.Body = append(main.Body, body...)
	p := &Program{Functions: []*Func{main}}
	_ = env
	return p, nil
}

func compileStmts(list []*parser.Statement) ([]Stmt, error) {
	var out []Stmt
	for _, s := range list {
		st, err := compileStmt(s)
		if err != nil {
			return nil, err
		}
		if st != nil {
			out = append(out, st)
		}
	}
	return out, nil
}

func compileStmt(s *parser.Statement) (Stmt, error) {
	switch {
	case s.Expr != nil:
		call := s.Expr.Expr.Binary.Left.Value.Target.Call
		if call != nil && call.Func == "print" && len(call.Args) == 1 {
			arg := convertExpr(call.Args[0])
			if arg != nil {
				return &PrintStmt{Value: arg}, nil
			}
		}
	case s.Let != nil:
		return &VarDecl{Const: true, Name: s.Let.Name, Value: convertExpr(s.Let.Value)}, nil
	case s.Var != nil:
		return &VarDecl{Const: false, Name: s.Var.Name, Value: convertExpr(s.Var.Value)}, nil
	case s.Assign != nil:
		return &AssignStmt{Name: s.Assign.Name, Value: convertExpr(s.Assign.Value)}, nil
	case s.While != nil:
		cond := convertExpr(s.While.Cond)
		body, err := compileStmts(s.While.Body)
		if err != nil {
			return nil, err
		}
		return &WhileStmt{Cond: cond, Body: body}, nil
	}
	return nil, fmt.Errorf("unsupported statement")
}

func convertExpr(e *parser.Expr) Expr {
	if e == nil || e.Binary == nil {
		return nil
	}
	left := convertUnary(e.Binary.Left)
	if len(e.Binary.Right) == 0 {
		return left
	}
	if len(e.Binary.Right) == 1 {
		op := e.Binary.Right[0]
		right := convertUnary(&parser.Unary{Value: op.Right})
		if left != nil && right != nil {
			return &BinaryExpr{Op: op.Op, Left: left, Right: right}
		}
	}
	return nil
}

func convertUnary(u *parser.Unary) Expr {
	if u == nil || u.Value == nil {
		return nil
	}
	if g := u.Value.Target.Group; g != nil {
		return convertExpr(g)
	}
	if sel := u.Value.Target.Selector; sel != nil && len(sel.Tail) == 0 && len(u.Ops) == 0 {
		return &VarRef{Name: sel.Root}
	}
	lit := u.Value.Target.Lit
	if lit == nil {
		return nil
	}
	if lit.Str != nil && len(u.Ops) == 0 {
		return &StringLit{Value: *lit.Str}
	}
	if lit.Int != nil {
		v := int(*lit.Int)
		for _, op := range u.Ops {
			if op == "-" {
				v = -v
			}
		}
		return &IntLit{Value: v}
	}
	return nil
}

func extractPrintString(e *parser.Expr) (string, bool) {
	if e == nil || e.Binary == nil || len(e.Binary.Right) > 0 {
		return "", false
	}
	u := e.Binary.Left
	if u == nil || u.Value == nil || u.Value.Target == nil || u.Value.Target.Call == nil {
		return "", false
	}
	call := u.Value.Target.Call
	if call.Func != "print" || len(call.Args) != 1 {
		return "", false
	}
	arg := call.Args[0]
	if arg == nil || arg.Binary == nil || arg.Binary.Left == nil {
		return "", false
	}
	lit := arg.Binary.Left.Value
	if lit == nil || lit.Target == nil || lit.Target.Lit == nil || lit.Target.Lit.Str == nil {
		return "", false
	}
	return *lit.Target.Lit.Str, true
}

// Print pretty-prints the AST in a Lisp-like form.
func Print(p *Program) {
	toNode(p).Print("")
}

func toNode(p *Program) *ast.Node {
	n := &ast.Node{Kind: "program"}
	for _, f := range p.Functions {
		n.Children = append(n.Children, f.toNode())
	}
	return n
}

func (f *Func) toNode() *ast.Node {
	n := &ast.Node{Kind: "func", Value: f.Name}
	for _, st := range f.Body {
		n.Children = append(n.Children, toStmtNode(st))
	}
	return n
}

func toStmtNode(s Stmt) *ast.Node {
	switch st := s.(type) {
	case *PrintStmt:
		return &ast.Node{Kind: "print", Children: []*ast.Node{toExprNode(st.Value)}}
	case *VarDecl:
		kind := "var"
		if st.Const {
			kind = "let"
		}
		n := &ast.Node{Kind: kind, Value: st.Name}
		if st.Value != nil {
			n.Children = []*ast.Node{toExprNode(st.Value)}
		}
		return n
	case *AssignStmt:
		return &ast.Node{Kind: "assign", Value: st.Name, Children: []*ast.Node{toExprNode(st.Value)}}
	case *WhileStmt:
		n := &ast.Node{Kind: "while", Children: []*ast.Node{toExprNode(st.Cond)}}
		for _, b := range st.Body {
			n.Children = append(n.Children, toStmtNode(b))
		}
		return n
	default:
		return &ast.Node{Kind: "stmt"}
	}
}

func toExprNode(e Expr) *ast.Node {
	switch ex := e.(type) {
	case *StringLit:
		return &ast.Node{Kind: "str", Value: ex.Value}
	case *IntLit:
		return &ast.Node{Kind: "int", Value: fmt.Sprintf("%d", ex.Value)}
	case *VarRef:
		return &ast.Node{Kind: "var", Value: ex.Name}
	case *BinaryExpr:
		return &ast.Node{Kind: ex.Op, Children: []*ast.Node{toExprNode(ex.Left), toExprNode(ex.Right)}}
	default:
		return &ast.Node{Kind: "expr"}
	}
}
