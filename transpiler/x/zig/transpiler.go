package zigt

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"mochi/ast"
	"mochi/parser"
	"mochi/types"
)

// Program represents a Zig source file with one or more functions.
type Program struct {
	Functions []*Func
}

type Func struct {
	Name string
	Body []Stmt
}

type Stmt interface{ emit(io.Writer, int) }

type Expr interface{ emit(io.Writer) }

// PrintStmt writes a string literal using std.debug.print.
type PrintStmt struct{ Value Expr }

type StringLit struct{ Value string }

func repoRoot() (string, error) {
	dir, err := os.Getwd()
	if err != nil {
		return "", err
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir, nil
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return "", fmt.Errorf("go.mod not found")
}

func version() string {
	root, err := repoRoot()
	if err != nil {
		return "dev"
	}
	b, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(b))
}

func header() string {
	loc := time.FixedZone("GMT+7", 7*3600)
	ts := time.Now().In(loc).Format("2006-01-02 15:04:05 MST")
	return fmt.Sprintf("// Generated by Mochi transpiler v%s on %s\n", version(), ts)
}

// Emit returns the Zig source code for the program.
func (p *Program) Emit() []byte {
	var buf bytes.Buffer
	buf.WriteString(header())
	buf.WriteString("const std = @import(\"std\");\n\n")
	for i, fn := range p.Functions {
		if i > 0 {
			buf.WriteString("\n")
		}
		fn.emit(&buf)
	}
	return buf.Bytes()
}

func (f *Func) emit(w io.Writer) {
	fmt.Fprintf(w, "pub fn %s() void {\n", f.Name)
	for _, st := range f.Body {
		st.emit(w, 1)
	}
	fmt.Fprintln(w, "}")
}

func (s *PrintStmt) emit(w io.Writer, indent int) {
	for i := 0; i < indent; i++ {
		io.WriteString(w, "    ")
	}
	io.WriteString(w, "std.debug.print(")
	s.Value.emit(w)
	io.WriteString(w, ", .{});\n")
}

func (s *StringLit) emit(w io.Writer) { fmt.Fprintf(w, "%q", s.Value) }

// Transpile converts a Mochi program into our simple Zig AST.
func Transpile(prog *parser.Program, env *types.Env) (*Program, error) {
	main := &Func{Name: "main"}
	for _, st := range prog.Statements {
		if st.Expr == nil {
			return nil, fmt.Errorf("unsupported statement")
		}
		if str, ok := extractPrintString(st.Expr.Expr); ok {
			main.Body = append(main.Body, &PrintStmt{Value: &StringLit{Value: str + "\\n"}})
		} else {
			return nil, fmt.Errorf("unsupported expression")
		}
	}
	p := &Program{Functions: []*Func{main}}
	_ = env
	return p, nil
}

func extractPrintString(e *parser.Expr) (string, bool) {
	if e == nil || e.Binary == nil || len(e.Binary.Right) > 0 {
		return "", false
	}
	u := e.Binary.Left
	if u == nil || u.Value == nil || u.Value.Target == nil || u.Value.Target.Call == nil {
		return "", false
	}
	call := u.Value.Target.Call
	if call.Func != "print" || len(call.Args) != 1 {
		return "", false
	}
	arg := call.Args[0]
	if arg == nil || arg.Binary == nil || arg.Binary.Left == nil {
		return "", false
	}
	lit := arg.Binary.Left.Value
	if lit == nil || lit.Target == nil || lit.Target.Lit == nil || lit.Target.Lit.Str == nil {
		return "", false
	}
	return *lit.Target.Lit.Str, true
}

// Print pretty-prints the AST in a Lisp-like form.
func Print(p *Program) {
	toNode(p).Print("")
}

func toNode(p *Program) *ast.Node {
	n := &ast.Node{Kind: "program"}
	for _, f := range p.Functions {
		n.Children = append(n.Children, f.toNode())
	}
	return n
}

func (f *Func) toNode() *ast.Node {
	n := &ast.Node{Kind: "func", Value: f.Name}
	for _, st := range f.Body {
		n.Children = append(n.Children, toStmtNode(st))
	}
	return n
}

func toStmtNode(s Stmt) *ast.Node {
	switch st := s.(type) {
	case *PrintStmt:
		return &ast.Node{Kind: "print", Children: []*ast.Node{toExprNode(st.Value)}}
	default:
		return &ast.Node{Kind: "stmt"}
	}
}

func toExprNode(e Expr) *ast.Node {
	switch ex := e.(type) {
	case *StringLit:
		return &ast.Node{Kind: "str", Value: ex.Value}
	default:
		return &ast.Node{Kind: "expr"}
	}
}
