package erl

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"mochi/parser"
	"mochi/types"
)

// Program represents a simple Erlang module containing a main function.
type Program struct {
	Body []Expr
}

type Expr interface{ emit(io.Writer) }

type CallExpr struct {
	Func string
	Arg  string
}

func (c *CallExpr) emit(w io.Writer) {
	fmt.Fprintf(w, "%s(%q)", c.Func, c.Arg)
}

// Transpile converts a Mochi program to a minimal Erlang AST supporting
// string print statements.
func Transpile(prog *parser.Program, env *types.Env) (*Program, error) {
	_ = env
	p := &Program{}
	for _, st := range prog.Statements {
		if st.Expr == nil {
			return nil, fmt.Errorf("unsupported statement")
		}
		call := st.Expr.Expr.Binary.Left.Value.Target.Call
		if call == nil || call.Func != "print" || len(call.Args) != 1 {
			return nil, fmt.Errorf("unsupported expression")
		}
		arg := call.Args[0]
		lit := arg.Binary.Left.Value.Target.Lit
		if lit == nil || lit.Str == nil {
			return nil, fmt.Errorf("unsupported argument")
		}
		p.Body = append(p.Body, &CallExpr{Func: "io:format", Arg: *lit.Str + "~n"})
	}
	return p, nil
}

// Emit renders Erlang source for the program with a header.
func (p *Program) Emit() []byte {
	var buf bytes.Buffer
	buf.WriteString("#!/usr/bin/env escript\n")
	buf.Write(header())
	buf.WriteString("-module(main).\n")
	buf.WriteString("-export([main/1]).\n\n")
	buf.WriteString("main(_) ->\n")
	for i, e := range p.Body {
		buf.WriteString("    ")
		e.emit(&buf)
		if i < len(p.Body)-1 {
			buf.WriteString(",\n")
		} else {
			buf.WriteString(".\n")
		}
	}
	return buf.Bytes()
}

func repoRoot() string {
	dir, err := os.Getwd()
	if err != nil {
		return ""
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return ""
}

func version() string {
	root := repoRoot()
	if root == "" {
		return "dev"
	}
	b, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(b))
}

func header() []byte {
	t := time.Now().UTC().Format(time.RFC3339)
	return []byte(fmt.Sprintf("%% Generated by Mochi transpiler v%s on %s\n", version(), t))
}
