package rkt

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"mochi/parser"
	"mochi/types"
)

type Program struct {
	Stmts []Stmt
}

type Stmt interface{ emit(io.Writer) }

type PrintStmt struct{ Value string }

func (p *PrintStmt) emit(w io.Writer) {
	fmt.Fprintf(w, "(displayln %q)\n", p.Value)
}

func repoRoot() string {
	dir, _ := os.Getwd()
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return ""
}

func version() string {
	root := repoRoot()
	if root == "" {
		return "unknown"
	}
	b, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "unknown"
	}
	return strings.TrimSpace(string(b))
}

func header() string {
	loc := time.FixedZone("GMT+7", 7*3600)
	ts := time.Now().In(loc).Format("2006-01-02 15:04:05 MST")
	return fmt.Sprintf(";; Generated by Mochi %s on %s\n#lang racket\n", version(), ts)
}

func Emit(w io.Writer, p *Program) error {
	if _, err := io.WriteString(w, header()); err != nil {
		return err
	}
	for _, s := range p.Stmts {
		s.emit(w)
	}
	return nil
}

func Transpile(prog *parser.Program, env *types.Env) (*Program, error) {
	r := &Program{}
	for _, st := range prog.Statements {
		if st.Expr != nil {
			call := st.Expr.Expr.Binary.Left.Value.Target.Call
			if call != nil && call.Func == "print" && len(call.Args) == 1 {
				arg := call.Args[0]
				lit := arg.Binary.Left.Value.Target.Lit
				if lit != nil && lit.Str != nil {
					r.Stmts = append(r.Stmts, &PrintStmt{Value: *lit.Str})
					continue
				}
			}
		}
		return nil, fmt.Errorf("unsupported statement")
	}
	_ = env
	return r, nil
}
