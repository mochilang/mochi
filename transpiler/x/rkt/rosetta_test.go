//go:build slow

package rkt_test

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strings"
	"testing"
	"time"

	"mochi/parser"
	rkt "mochi/transpiler/x/rkt"
	"mochi/types"
)

func TestRacketTranspiler_Rosetta(t *testing.T) {
	t.Cleanup(updateRosettaChecklist)
	if _, err := exec.LookPath("racket"); err != nil {
		t.Skip("racket not installed")
	}

	root := repoRoot(t)
	srcDir := filepath.Join(root, "tests", "rosetta", "x", "Mochi")
	outDir := filepath.Join(root, "tests", "rosetta", "transpiler", "Racket")
	os.MkdirAll(outDir, 0o755)
	t.Cleanup(updateRosettaChecklist)

	outs, err := filepath.Glob(filepath.Join(srcDir, "*.out"))
	if err != nil {
		t.Fatalf("glob: %v", err)
	}
	sort.Strings(outs)
	if len(outs) == 0 {
		t.Fatal("no Mochi Rosetta tests found")
	}

	var firstErr error
	var firstName string
	for _, outPath := range outs {
		name := strings.TrimSuffix(filepath.Base(outPath), ".out")
		srcPath := filepath.Join(srcDir, name+".mochi")
		if _, err := os.Stat(srcPath); err != nil {
			t.Fatalf("missing source for %s", name)
		}
		if err := transpileAndRunRacket(root, srcPath, outPath, outDir, name); err != nil {
			firstErr = err
			firstName = name
			break
		}
	}
	if firstErr != nil {
		t.Fatalf("%s: %v", firstName, firstErr)
	}
}

func transpileAndRunRacket(root, srcPath, wantPath, outDir, name string) error {
	prog, err := parser.Parse(srcPath)
	if err != nil {
		writeRacketError(outDir, name, fmt.Errorf("parse error: %w", err))
		return err
	}
	env := types.NewEnv(nil)
	if errs := types.Check(prog, env); len(errs) > 0 {
		writeRacketError(outDir, name, fmt.Errorf("type error: %v", errs[0]))
		return errs[0]
	}
	ast, err := rkt.Transpile(prog, env)
	if err != nil {
		writeRacketError(outDir, name, fmt.Errorf("transpile error: %w", err))
		return err
	}
	var buf bytes.Buffer
	if err := rkt.Emit(&buf, ast); err != nil {
		writeRacketError(outDir, name, fmt.Errorf("emit error: %w", err))
		return err
	}
	rktFile := filepath.Join(outDir, name+".rkt")
	if err := os.WriteFile(rktFile, buf.Bytes(), 0o644); err != nil {
		return fmt.Errorf("write rkt: %w", err)
	}
	cmd := exec.Command("racket", rktFile)
	cmd.Env = append(os.Environ(), "MOCHI_ROOT="+root, "MOCHI_NOW_SEED=1")
	if data, err := os.ReadFile(strings.TrimSuffix(srcPath, ".mochi") + ".in"); err == nil {
		cmd.Stdin = bytes.NewReader(data)
	}
	out, err := cmd.CombinedOutput()
	got := bytes.TrimSpace(out)
	if err != nil {
		writeRacketError(outDir, name, fmt.Errorf("run error: %v\n%s", err, out))
		return err
	}
	want, err := os.ReadFile(wantPath)
	if err != nil {
		return fmt.Errorf("read golden: %w", err)
	}
	want = bytes.TrimSpace(want)
	if !bytes.Equal(got, want) {
		writeRacketError(outDir, name, fmt.Errorf("output mismatch\n-- got --\n%s\n-- want --\n%s", got, want))
		return fmt.Errorf("output mismatch")
	}
	if err := os.WriteFile(filepath.Join(outDir, name+".out"), got, 0o644); err != nil {
		return fmt.Errorf("write out: %w", err)
	}
	_ = os.Remove(filepath.Join(outDir, name+".error"))
	return nil
}

func writeRacketError(dir, name string, err error) {
	_ = os.WriteFile(filepath.Join(dir, name+".error"), []byte(err.Error()), 0o644)
}

func updateRosettaChecklist() {
	root := repoRoot(&testing.T{})
	srcDir := filepath.Join(root, "tests", "rosetta", "x", "Mochi")
	outDir := filepath.Join(root, "tests", "rosetta", "transpiler", "Racket")
	readmePath := filepath.Join(root, "transpiler", "x", "rkt", "ROSETTA.md")

	files, _ := filepath.Glob(filepath.Join(srcDir, "*.mochi"))
	sort.Strings(files)
	total := len(files)
	compiled := 0
	var lines []string
	for _, f := range files {
		name := strings.TrimSuffix(filepath.Base(f), ".mochi")
		mark := "[ ]"
		if _, err := os.Stat(filepath.Join(outDir, name+".out")); err == nil {
			if _, err2 := os.Stat(filepath.Join(outDir, name+".error")); os.IsNotExist(err2) {
				compiled++
			}
			mark = "[x]"
		}
		lines = append(lines, "- "+mark+" "+name)
	}
	out, err := exec.Command("git", "log", "-1", "--format=%cI").Output()
	ts := time.Now()
	if err == nil {
		if t, perr := time.Parse(time.RFC3339, strings.TrimSpace(string(out))); perr == nil {
			ts = t
		}
	}
	if loc, err := time.LoadLocation("Asia/Bangkok"); err == nil {
		ts = ts.In(loc)
	}
	var buf bytes.Buffer
	buf.WriteString("# Racket Rosetta Transpiler Output\n\n")
	buf.WriteString("This directory holds Racket source code generated by the Mochi transpiler from the programs in `tests/rosetta/x/Mochi`. Each file has the expected runtime output in a matching `.out` file. Compilation or runtime failures are stored in a corresponding `.error` file.\n\n")
	fmt.Fprintf(&buf, "Compiled programs: %d/%d\n", compiled, total)
	fmt.Fprintf(&buf, "Last updated: %s\n\n", ts.Format("2006-01-02 15:04 -0700"))
	buf.WriteString("## Program checklist\n")
	buf.WriteString(strings.Join(lines, "\n"))
	buf.WriteString("\n")
	_ = os.WriteFile(readmePath, buf.Bytes(), 0o644)
}
