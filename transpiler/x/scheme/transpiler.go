//go:build slow

package scheme

import (
	"bytes"
	"fmt"
	"io"
	"time"

	"mochi/parser"
	"mochi/types"
)

// Node represents a Scheme AST node.
type Node interface{ Emit(io.Writer) }

type Symbol string

func (s Symbol) Emit(w io.Writer) { io.WriteString(w, string(s)) }

type StringLit string

func (s StringLit) Emit(w io.Writer) { fmt.Fprintf(w, "%q", string(s)) }

type IntLit int

func (i IntLit) Emit(w io.Writer) { fmt.Fprintf(w, "%d", int(i)) }

type BoolLit bool

func (b BoolLit) Emit(w io.Writer) {
	if bool(b) {
		io.WriteString(w, "#t")
	} else {
		io.WriteString(w, "#f")
	}
}

type List struct{ Elems []Node }

func (l *List) Emit(w io.Writer) {
	io.WriteString(w, "(")
	for i, e := range l.Elems {
		if i > 0 {
			io.WriteString(w, " ")
		}
		if e != nil {
			e.Emit(w)
		}
	}
	io.WriteString(w, ")")
}

type Program struct{ Forms []Node }

func (p *Program) Emit(w io.Writer) {
	for i, f := range p.Forms {
		if f != nil {
			f.Emit(w)
		}
		if i < len(p.Forms)-1 {
			io.WriteString(w, "\n")
		}
	}
}

func EmitString(p *Program) []byte {
	var buf bytes.Buffer
	if p != nil {
		p.Emit(&buf)
	}
	return buf.Bytes()
}

func Format(src []byte) []byte {
	if len(src) > 0 && src[len(src)-1] != '\n' {
		src = append(src, '\n')
	}
	return append(header(), src...)
}

func header() []byte {
	t := time.Now().UTC().Format(time.RFC3339)
	return []byte(fmt.Sprintf(";; Generated by Mochi transpiler on %s\n", t))
}

func voidSym() Node { return &List{Elems: []Node{Symbol("void")}} }

func convertStmts(stmts []*parser.Statement) ([]Node, error) {
	var forms []Node
	for _, st := range stmts {
		f, err := convertStmt(st)
		if err != nil {
			return nil, err
		}
		if f != nil {
			forms = append(forms, f)
		}
	}
	return forms, nil
}

func convertIfStmt(is *parser.IfStmt) (Node, error) {
	cond, err := convertParserExpr(is.Cond)
	if err != nil {
		return nil, err
	}
	thenForms, err := convertStmts(is.Then)
	if err != nil {
		return nil, err
	}
	thenNode := &List{Elems: append([]Node{Symbol("begin")}, thenForms...)}
	var elseNode Node = voidSym()
	if is.ElseIf != nil {
		elseNode, err = convertIfStmt(is.ElseIf)
		if err != nil {
			return nil, err
		}
	} else if len(is.Else) > 0 {
		elseForms, err := convertStmts(is.Else)
		if err != nil {
			return nil, err
		}
		elseNode = &List{Elems: append([]Node{Symbol("begin")}, elseForms...)}
	}
	return &List{Elems: []Node{Symbol("if"), cond, thenNode, elseNode}}, nil
}

func convertStmt(st *parser.Statement) (Node, error) {
	switch {
	case st.Expr != nil:
		call := st.Expr.Expr.Binary.Left.Value.Target.Call
		if call != nil && call.Func == "print" && len(call.Args) == 1 && len(st.Expr.Expr.Binary.Right) == 0 {
			argExpr := call.Args[0]
			arg, err := convertParserExpr(argExpr)
			if err != nil {
				return nil, err
			}
			if isBoolParserExpr(argExpr) {
				arg = boolToInt(arg)
			}
			return &List{Elems: []Node{Symbol("begin"), &List{Elems: []Node{Symbol("display"), arg}}, &List{Elems: []Node{Symbol("newline")}}}}, nil
		}
		return nil, fmt.Errorf("unsupported expression statement")
	case st.Let != nil:
		name := st.Let.Name
		var val Node
		if st.Let.Value != nil {
			var err error
			val, err = convertParserExpr(st.Let.Value)
			if err != nil {
				return nil, err
			}
		} else if st.Let.Type != nil {
			if st.Let.Type.Simple != nil && *st.Let.Type.Simple == "int" {
				val = IntLit(0)
			} else {
				val = voidSym()
			}
		} else {
			val = voidSym()
		}
		return &List{Elems: []Node{Symbol("define"), Symbol(name), val}}, nil
	case st.Var != nil:
		name := st.Var.Name
		var val Node
		if st.Var.Value != nil {
			var err error
			val, err = convertParserExpr(st.Var.Value)
			if err != nil {
				return nil, err
			}
		} else if st.Var.Type != nil {
			if st.Var.Type.Simple != nil && *st.Var.Type.Simple == "int" {
				val = IntLit(0)
			} else {
				val = voidSym()
			}
		} else {
			val = voidSym()
		}
		return &List{Elems: []Node{Symbol("define"), Symbol(name), val}}, nil
	case st.Assign != nil && len(st.Assign.Index) == 0 && len(st.Assign.Field) == 0:
		val, err := convertParserExpr(st.Assign.Value)
		if err != nil {
			return nil, err
		}
		return &List{Elems: []Node{Symbol("set!"), Symbol(st.Assign.Name), val}}, nil
	case st.If != nil:
		return convertIfStmt(st.If)
	default:
		return nil, fmt.Errorf("unsupported statement")
	}
}

// Transpile converts a Mochi AST into a minimal Scheme AST supporting
// print statements with string literals.
func Transpile(prog *parser.Program, env *types.Env) (*Program, error) {
	_ = env
	p := &Program{}
	for _, st := range prog.Statements {
		form, err := convertStmt(st)
		if err != nil {
			return nil, err
		}
		if form != nil {
			if lst, ok := form.(*List); ok && len(lst.Elems) > 0 && lst.Elems[0] == Symbol("begin") {
				p.Forms = append(p.Forms, lst.Elems[1:]...)
			} else {
				p.Forms = append(p.Forms, form)
			}
		}
	}
	return p, nil
}

func boolToInt(expr Node) Node {
	return &List{Elems: []Node{Symbol("if"), expr, IntLit(1), IntLit(0)}}
}

func convertParserExpr(e *parser.Expr) (Node, error) {
	if e == nil || e.Binary == nil {
		return nil, fmt.Errorf("unsupported expression")
	}
	left, err := convertParserUnary(e.Binary.Left)
	if err != nil {
		return nil, err
	}
	exprs := []Node{left}
	ops := []string{}
	for _, op := range e.Binary.Right {
		right, err := convertParserPostfix(op.Right)
		if err != nil {
			return nil, err
		}
		for len(ops) > 0 && precedence(ops[len(ops)-1]) >= precedence(op.Op) {
			r := exprs[len(exprs)-1]
			exprs = exprs[:len(exprs)-1]
			l := exprs[len(exprs)-1]
			exprs = exprs[:len(exprs)-1]
			o := ops[len(ops)-1]
			ops = ops[:len(ops)-1]
			exprs = append(exprs, makeBinary(o, l, r))
		}
		ops = append(ops, op.Op)
		exprs = append(exprs, right)
	}
	for len(ops) > 0 {
		r := exprs[len(exprs)-1]
		exprs = exprs[:len(exprs)-1]
		l := exprs[len(exprs)-1]
		exprs = exprs[:len(exprs)-1]
		o := ops[len(ops)-1]
		ops = ops[:len(ops)-1]
		exprs = append(exprs, makeBinary(o, l, r))
	}
	if len(exprs) != 1 {
		return nil, fmt.Errorf("expr reduce error")
	}
	return exprs[0], nil
}

func convertParserUnary(u *parser.Unary) (Node, error) {
	if u == nil {
		return nil, fmt.Errorf("unsupported unary")
	}
	expr, err := convertParserPostfix(u.Value)
	if err != nil {
		return nil, err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		op := u.Ops[i]
		switch op {
		case "-":
			expr = &List{Elems: []Node{Symbol("-"), expr}}
		case "!":
			expr = &List{Elems: []Node{Symbol("not"), expr}}
		default:
			return nil, fmt.Errorf("unsupported unary op")
		}
	}
	return expr, nil
}

func convertParserPostfix(pf *parser.PostfixExpr) (Node, error) {
	if pf == nil || len(pf.Ops) > 0 {
		return nil, fmt.Errorf("unsupported postfix")
	}
	return convertParserPrimary(pf.Target)
}

func convertParserPrimary(p *parser.Primary) (Node, error) {
	switch {
	case p.Lit != nil && p.Lit.Int != nil:
		return IntLit(int(*p.Lit.Int)), nil
	case p.Lit != nil && p.Lit.Str != nil:
		return StringLit(*p.Lit.Str), nil
	case p.Lit != nil && p.Lit.Bool != nil:
		return BoolLit(bool(*p.Lit.Bool)), nil
	case p.Selector != nil && len(p.Selector.Tail) == 0:
		return Symbol(p.Selector.Root), nil
	case p.If != nil:
		return convertIfExpr(p.If)
	case p.Group != nil:
		return convertParserExpr(p.Group)
	}
	return nil, fmt.Errorf("unsupported primary")
}

func convertIfExpr(ie *parser.IfExpr) (Node, error) {
	cond, err := convertParserExpr(ie.Cond)
	if err != nil {
		return nil, err
	}
	thenNode, err := convertParserExpr(ie.Then)
	if err != nil {
		return nil, err
	}
	var elseNode Node = voidSym()
	if ie.ElseIf != nil {
		elseNode, err = convertIfExpr(ie.ElseIf)
		if err != nil {
			return nil, err
		}
	} else if ie.Else != nil {
		elseNode, err = convertParserExpr(ie.Else)
		if err != nil {
			return nil, err
		}
	}
	return &List{Elems: []Node{Symbol("if"), cond, thenNode, elseNode}}, nil
}

func makeBinary(op string, left, right Node) Node {
	isStr := func(n Node) bool {
		switch n.(type) {
		case StringLit:
			return true
		}
		return false
	}
	switch op {
	case "+":
		if isStr(left) || isStr(right) {
			return &List{Elems: []Node{Symbol("string-append"), left, right}}
		}
		return &List{Elems: []Node{Symbol("+"), left, right}}
	case "-", "*", "/":
		return &List{Elems: []Node{Symbol(op), left, right}}
	case "<":
		if isStr(left) || isStr(right) {
			return &List{Elems: []Node{Symbol("string<?"), left, right}}
		}
		return &List{Elems: []Node{Symbol("<"), left, right}}
	case "<=":
		if isStr(left) || isStr(right) {
			return &List{Elems: []Node{Symbol("string<=?"), left, right}}
		}
		return &List{Elems: []Node{Symbol("<="), left, right}}
	case ">":
		if isStr(left) || isStr(right) {
			return &List{Elems: []Node{Symbol("string>?"), left, right}}
		}
		return &List{Elems: []Node{Symbol(">"), left, right}}
	case ">=":
		if isStr(left) || isStr(right) {
			return &List{Elems: []Node{Symbol("string>=?"), left, right}}
		}
		return &List{Elems: []Node{Symbol(">="), left, right}}
	case "==":
		return &List{Elems: []Node{Symbol("="), left, right}}
	case "!=":
		return &List{Elems: []Node{Symbol("not"), &List{Elems: []Node{Symbol("="), left, right}}}}
	case "&&":
		return &List{Elems: []Node{Symbol("and"), left, right}}
	case "||":
		return &List{Elems: []Node{Symbol("or"), left, right}}
	default:
		return &List{Elems: []Node{Symbol(op), left, right}}
	}
}

func precedence(op string) int {
	switch op {
	case "||":
		return 1
	case "&&":
		return 2
	case "==", "!=", "<", "<=", ">", ">=":
		return 3
	case "+", "-":
		return 4
	case "*", "/", "%":
		return 5
	default:
		return 0
	}
}

func isBoolParserExpr(e *parser.Expr) bool {
	if e == nil || e.Binary == nil {
		return false
	}
	if len(e.Binary.Right) == 0 {
		p := e.Binary.Left.Value.Target
		return p != nil && p.Lit != nil && p.Lit.Bool != nil
	}
	op := e.Binary.Right[0].Op
	switch op {
	case "==", "!=", "<", "<=", ">", ">=", "&&", "||":
		return true
	default:
		return false
	}
}
