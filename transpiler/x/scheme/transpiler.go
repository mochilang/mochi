package scheme

import (
	"bytes"
	"fmt"
	"io"
	"time"

	"mochi/ast"
	"mochi/parser"
	"mochi/types"
)

// Node represents a Scheme AST node.
type Node interface{ Emit(io.Writer) }

type Symbol string

func (s Symbol) Emit(w io.Writer) { io.WriteString(w, string(s)) }

type StringLit string

func (s StringLit) Emit(w io.Writer) { fmt.Fprintf(w, "%q", string(s)) }

type IntLit int

func (i IntLit) Emit(w io.Writer) { fmt.Fprintf(w, "%d", int(i)) }

type List struct{ Elems []Node }

func (l *List) Emit(w io.Writer) {
	io.WriteString(w, "(")
	for i, e := range l.Elems {
		if i > 0 {
			io.WriteString(w, " ")
		}
		if e != nil {
			e.Emit(w)
		}
	}
	io.WriteString(w, ")")
}

type Program struct{ Forms []Node }

func (p *Program) Emit(w io.Writer) {
	for i, f := range p.Forms {
		if f != nil {
			f.Emit(w)
		}
		if i < len(p.Forms)-1 {
			io.WriteString(w, "\n")
		}
	}
}

func EmitString(p *Program) []byte {
	var buf bytes.Buffer
	if p != nil {
		p.Emit(&buf)
	}
	return buf.Bytes()
}

func Format(src []byte) []byte {
	if len(src) > 0 && src[len(src)-1] != '\n' {
		src = append(src, '\n')
	}
	return append(header(), src...)
}

func header() []byte {
	t := time.Now().UTC().Format(time.RFC3339)
	return []byte(fmt.Sprintf(";; Generated by Mochi transpiler on %s\n", t))
}

func voidSym() Node { return &List{Elems: []Node{Symbol("void")}} }

// Transpile converts a Mochi AST into a minimal Scheme AST supporting
// print statements with string literals.
func Transpile(prog *parser.Program, env *types.Env) (*Program, error) {
	_ = env
	p := &Program{}
	astProg := ast.FromProgram(prog)
	for _, st := range astProg.Children {
		switch st.Kind {
		case "call":
			if fn, ok := st.Value.(string); ok && fn == "print" {
				if len(st.Children) != 1 {
					return nil, fmt.Errorf("print needs 1 arg")
				}
				arg, err := convertExpr(st.Children[0])
				if err != nil {
					return nil, err
				}
				p.Forms = append(p.Forms, &List{Elems: []Node{Symbol("display"), arg}})
				p.Forms = append(p.Forms, &List{Elems: []Node{Symbol("newline")}})
				continue
			}
			return nil, fmt.Errorf("unsupported call")
		case "let":
			name, _ := st.Value.(string)
			var val Node
			if len(st.Children) == 0 {
				val = voidSym()
			} else if len(st.Children) == 1 {
				if st.Children[0].Kind == "type" {
					val = voidSym()
				} else {
					var err error
					val, err = convertExpr(st.Children[0])
					if err != nil {
						return nil, err
					}
				}
			} else if len(st.Children) == 2 {
				var err error
				val, err = convertExpr(st.Children[1])
				if err != nil {
					return nil, err
				}
			}
			p.Forms = append(p.Forms, &List{Elems: []Node{Symbol("define"), Symbol(name), val}})
		default:
			return nil, fmt.Errorf("unsupported statement kind %s", st.Kind)
		}
	}
	return p, nil
}

func convertExpr(n *ast.Node) (Node, error) {
	switch n.Kind {
	case "int":
		switch v := n.Value.(type) {
		case int:
			return IntLit(v), nil
		case parser.IntLit:
			return IntLit(int(v)), nil
		}
	case "string":
		if v, ok := n.Value.(string); ok {
			return StringLit(v), nil
		}
	case "selector":
		if str, ok := n.Value.(string); ok && len(n.Children) == 0 {
			return Symbol(str), nil
		}
	case "binary":
		if op, ok := n.Value.(string); ok {
			if len(n.Children) != 2 {
				return nil, fmt.Errorf("bad binary")
			}
			left, err := convertExpr(n.Children[0])
			if err != nil {
				return nil, err
			}
			right, err := convertExpr(n.Children[1])
			if err != nil {
				return nil, err
			}
			switch op {
			case "+", "-", "*", "/":
				return &List{Elems: []Node{Symbol(op), left, right}}, nil
			}
		}
	case "group":
		if len(n.Children) == 1 {
			return convertExpr(n.Children[0])
		}
	}
	return nil, fmt.Errorf("unsupported expression kind %s", n.Kind)
}
