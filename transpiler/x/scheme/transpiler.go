package scheme

import (
	"bytes"
	"fmt"
	"io"
	"time"

	"mochi/parser"
	"mochi/types"
)

// Node represents a Scheme AST node.
type Node interface{ Emit(io.Writer) }

type Symbol string

func (s Symbol) Emit(w io.Writer) { io.WriteString(w, string(s)) }

type StringLit string

func (s StringLit) Emit(w io.Writer) { fmt.Fprintf(w, "%q", string(s)) }

type List struct{ Elems []Node }

func (l *List) Emit(w io.Writer) {
	io.WriteString(w, "(")
	for i, e := range l.Elems {
		if i > 0 {
			io.WriteString(w, " ")
		}
		if e != nil {
			e.Emit(w)
		}
	}
	io.WriteString(w, ")")
}

type Program struct{ Forms []Node }

func (p *Program) Emit(w io.Writer) {
	for i, f := range p.Forms {
		if f != nil {
			f.Emit(w)
		}
		if i < len(p.Forms)-1 {
			io.WriteString(w, "\n")
		}
	}
}

func EmitString(p *Program) []byte {
	var buf bytes.Buffer
	if p != nil {
		p.Emit(&buf)
	}
	return buf.Bytes()
}

func Format(src []byte) []byte {
	if len(src) > 0 && src[len(src)-1] != '\n' {
		src = append(src, '\n')
	}
	return append(header(), src...)
}

func header() []byte {
	t := time.Now().UTC().Format(time.RFC3339)
	return []byte(fmt.Sprintf(";; Generated by Mochi transpiler on %s\n", t))
}

// Transpile converts a Mochi AST into a minimal Scheme AST supporting
// print statements with string literals.
func Transpile(prog *parser.Program, env *types.Env) (*Program, error) {
	_ = env
	p := &Program{}
	for _, st := range prog.Statements {
		if st.Expr == nil {
			return nil, fmt.Errorf("unsupported statement")
		}
		call := st.Expr.Expr.Binary.Left.Value.Target.Call
		if call == nil || call.Func != "print" || len(call.Args) != 1 {
			return nil, fmt.Errorf("unsupported expression")
		}
		arg := call.Args[0]
		lit := arg.Binary.Left.Value.Target.Lit
		if lit == nil || lit.Str == nil {
			return nil, fmt.Errorf("unsupported argument")
		}
		p.Forms = append(p.Forms, &List{Elems: []Node{Symbol("display"), StringLit(*lit.Str)}})
		p.Forms = append(p.Forms, &List{Elems: []Node{Symbol("newline")}})
	}
	return p, nil
}
