import "../kv/kv" as kv
import "../r2/r2" as r2
import "../queue/queue" as queue
import "../d1/d1" as d1
import "../cron/cron" as cron

// Union describing all possible bindings for a worker
// Each variant holds a reference to the resource

type Binding =
  KVBinding(store: kv.KV)
  | R2Binding(bucket: r2.Bucket)
  | QueueBinding(q: queue.Queue)
  | D1Binding(db: d1.Database)

// Worker represents a Cloudflare worker with optional triggers and bindings

type Worker {
  name: string
  code: string
  routes: list<string>
  crons: list<cron.Trigger>
  bindings: list<Binding>
}

// Create a new worker from a name and code path
fun new(name: string, code: string): Worker {
  return Worker {
    name: name,
    code: code,
    routes: [] as list<string>,
    crons: [] as list<cron.Trigger>,
    bindings: [] as list<Binding>
  }
}

// Add an HTTP route to the worker
fun route(w: Worker, path: string): Worker {
  return Worker {
    name: w.name,
    code: w.code,
    routes: w.routes + [path],
    crons: w.crons,
    bindings: w.bindings
  }
}

// Attach a cron trigger to the worker
fun onCron(w: Worker, t: cron.Trigger): Worker {
  return Worker {
    name: w.name,
    code: w.code,
    routes: w.routes,
    crons: w.crons + [t],
    bindings: w.bindings
  }
}

// Bind a KV store to the worker
fun bindKV(w: Worker, store: kv.KV): Worker {
  return Worker {
    name: w.name,
    code: w.code,
    routes: w.routes,
    crons: w.crons,
    bindings: w.bindings + [KVBinding(store: store)]
  }
}

// Bind an R2 bucket to the worker
fun bindR2(w: Worker, bucket: r2.Bucket): Worker {
  return Worker {
    name: w.name,
    code: w.code,
    routes: w.routes,
    crons: w.crons,
    bindings: w.bindings + [R2Binding(bucket: bucket)]
  }
}

// Bind a queue to the worker
fun bindQueue(w: Worker, q: queue.Queue): Worker {
  return Worker {
    name: w.name,
    code: w.code,
    routes: w.routes,
    crons: w.crons,
    bindings: w.bindings + [QueueBinding(q: q)]
  }
}

// Bind a D1 database to the worker
fun bindD1(w: Worker, db: d1.Database): Worker {
  return Worker {
    name: w.name,
    code: w.code,
    routes: w.routes,
    crons: w.crons,
    bindings: w.bindings + [D1Binding(db: db)]
  }
}

export type Worker
export type Binding
export fun new
export fun route
export fun onCron
export fun bindKV
export fun bindR2
export fun bindQueue
export fun bindD1
