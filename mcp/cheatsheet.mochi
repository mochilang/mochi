// 0. Mochi (v0.5.0)
// Mochi is a lightweight programming language for building AI agents, working with real-time data,
// and querying datasets. It combines declarative and functional programming, with built-in support
// for streams, datasets, tools, and prompt-based AI generation.


// 1. Variable Bindings
let name = "Mochi"
let age = 3
let active = true
var count = 0

print("name = ", name, ", age = ", age, ", active = ", active)

// let picture: image = load "cat.png"
// print(picture.size)


// 2. Control Flow
if age > 2 {
  print("Old enough")
} else {
  print("Still young")
}

for i in 0..3 {
  print(i) // prints 0, 1, 2
}

var j = 0
while j < 3 {
  print(j)
  j = j + 1
}


// 3. functions

fun add(a: int, b: int): int {
  return a + b
}

let square = fun(x: int): int => x * x
let double = fun(x: int): int => x * 2

fun greet(name: string): string {
  return "Hello, " + name
}

fun apply_twice(f: fun(int): int, x: int): int {
  return f(f(x))
}

fun make_adder(n: int): fun(int): int {
  return fun(x: int): int => x + n
}

print(add(2, 3))
print(square(4))
print(greet())
print(apply_twice(square, 2))

let add10 = make_adder(10)
print(add10(5))

// 4. Composite Types
let items = [1, 2, 3]
print(items[0]) // print 1

let scores = {"a": 10, "b": 20}
print(scores["a"]) // print 10

// 4.1 Loop over a list and map
for item in items {
    print("item: ", item)
}

for name in scores {
    print(name, " scored ", score)
}

// 4.2 String indexing and iteration
let text = "hello"
print(text[1]) // "e"

if "e" in text {
  print("found e")
}

for ch in text {
    print("char:", ch)
}

// 5. Test block with expect.
test "Some math operator" {
    expect 2 + 3 == 5
    expect 1 + 2 * 3 == 7
}

// 6. Generative AI
model quick {
  provider: "openai"
  name: "gpt-3.5-turbo"
}

let topic = "spring"
let poem = generate text {
  model: "quick"
  prompt: "Write a haiku about " + topic
}

print(poem)

// Generate a structured Person using AI

type Person {
  name: string
  age: int
  email: string
}

// Generate a Person using AI and a prompt
let p = generate Person {
  prompt: "Generate a fictional software engineer with name, age, and email."
}

// Print the generated fields manually
print("Generated Person:")
print("Name: ",p.name)
print("Age: ",  p.age)
print("Email: ", p.email)

// Request an embedding vector
let vec = generate embedding {
  text: "hello world"
  normalize: true
}
print(len(vec))

// 7. Pattern Matching
let day = "sun"
let mood = match day {
  "mon" => "tired"
  "sun" => "relaxed"
  _     => "normal"
}
print(mood)

// 8. Logical operators
let a = true
let b = false
if a && b || !b {
  print("logic works")
}

// 9. Union Types

type Tree =
  Leaf
  | Node(left: Tree, value: int, right: Tree)

fun sum(t: Tree): int {
  return match t {
    Leaf => 0
    Node(l, v, r) => sum(l) + v + sum(r)
  }
}

let t = Node { left: Leaf, value: 1, right: Leaf }
print(sum(t))

// 10. Methods

type Circle {
  radius: float

  fun area(): float {
    return 3.14 * radius * radius
  }
}

let c = Circle { radius: 5 }
print(c.area())

// 11. Dataset Queries
type Person {
  name: string
  age: int
}

let people = load "people.csv" as Person

let adults = from p in people
             where p.age >= 18
             select p.name
print(adults)

// Sort, skip and limit
let oldest = from p in people
             sort by -p.age
             take 2
             select p
print(oldest)

// Join and cross join
let orders = [
  { id: 1, customerId: 1, total: 250 },
  { id: 2, customerId: 2, total: 100 }
]

let customers = [
  { id: 1, name: "Alice" },
  { id: 2, name: "Bob" }
]

let joined = from o in orders
             join c in customers on o.customerId == c.id
             select { id: o.id, name: c.name }
print(joined)

let pairs = from o in orders
            from c in customers
            select { order: o.id, customer: c.name }
print(pairs)

let left = from o in orders
           left join c in customers on o.customerId == c.id
           select { order: o.id, cust: c }
print(left)

let right = from c in customers
            right join o in orders on o.customerId == c.id
            select { customer: c.name, order: o }
print(right)

let outer = from o in orders
            outer join c in customers on o.customerId == c.id
            select { order: o?.id, customer: c?.name }
print(outer)

// Group by with aggregation
let grouped = from p in people
              group by p.age >= 60 ? "senior" : "adult" into g
              select { type: g.key, count: count(g) }
print(grouped)

// Set operations
let listA = [1, 2]
let listB = [2, 3]

let u = (from x in listA select x)
        union
        (from y in listB select y)
print(u)

let ua = (from x in listA select x)
         union all
         (from y in listB select y)
print(ua)

let inter = (from x in listA select x)
            intersect
            (from y in listB select y)
print(inter)

let diff = (from x in listA select x)
           except
           (from y in listB select y)
print(diff)

// 12. HTTP Fetch

type Todo {
  userId: int
  id: int
  title: string
  completed: bool
}

let todo: Todo = fetch "https://example.com/todos/1"
print(todo.title)

let created: Todo = fetch "https://example.com/todos" with {
  method: "POST",
  body: todo
}
print(created.id)

// 13. Streams

stream Sensor {
  id: string
  temperature: float
}

on Sensor as r {
  print(r.id, r.temperature)
}

emit Sensor { id: "s1", temperature: 21.3 }

// 14. Agents
agent Monitor {
  var count: int = 0

  on Sensor as s {
    count = count + 1
  }

  intent status(): string {
    return "events = " + str(count)
  }
}

let m = Monitor {}
emit Sensor { id: "s2", temperature: 30.0 }
sleep(50)
print(m.status())
