package main

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"
)

func main() {
	root, _ := os.Getwd()
	srcDir := filepath.Join(root, "tests", "vm", "valid")
	outDir := filepath.Join(root, "tests", "transpiler", "x", "rb")
	readmePath := filepath.Join(root, "transpiler", "x", "rb", "README.md")
	files, _ := filepath.Glob(filepath.Join(srcDir, "*.mochi"))
	total := len(files)
	compiled := 0
	var lines []string
	for _, f := range files {
		name := strings.TrimSuffix(filepath.Base(f), ".mochi")
		mark := "[ ]"
		if _, err := os.Stat(filepath.Join(outDir, name+".out")); err == nil {
			compiled++
			mark = "[x]"
		}
		lines = append(lines, fmt.Sprintf("- %s %s", mark, name))
	}
	var buf bytes.Buffer
	buf.WriteString("# Mochi Ruby Transpiler\n\n")
	buf.WriteString("This directory contains Ruby code generated by the Mochi transpiler.\n\n")
	fmt.Fprintf(&buf, "## Golden Test Checklist (%d/%d)\n", compiled, total)
	buf.WriteString("Last updated: " + time.Now().Format("2006-01-02 15:04 -0700") + "\n\n")
	buf.WriteString(strings.Join(lines, "\n"))
	buf.WriteString("\n")
	os.WriteFile(readmePath, buf.Bytes(), 0o644)

	taskFile := filepath.Join(root, "transpiler", "x", "rb", "TASKS.md")
	tsRaw, _ := exec.Command("git", "log", "-1", "--format=%cI").Output()
	msgRaw, _ := exec.Command("git", "log", "-1", "--format=%s").Output()
	ts := strings.TrimSpace(string(tsRaw))
	if t, err := time.Parse(time.RFC3339, ts); err == nil {
		if loc, lerr := time.LoadLocation("Asia/Bangkok"); lerr == nil {
			ts = t.In(loc).Format("2006-01-02 15:04 -0700")
		} else {
			ts = t.Format("2006-01-02 15:04 MST")
		}
	}
	msg := strings.TrimSpace(string(msgRaw))
	compiledFiles, _ := filepath.Glob(filepath.Join(outDir, "*.rb"))
	compiledCount := len(compiledFiles)
	var buf2 bytes.Buffer
	buf2.WriteString(fmt.Sprintf("## Progress (%s)\n", ts))
	if msg != "" {
		buf2.WriteString("- " + msg + "\n")
	}
	fmt.Fprintf(&buf2, "- Generated Ruby for %d/%d programs\n", compiledCount, total)
	buf2.WriteString("- Updated README checklist and outputs\n\n")
	if data, err := os.ReadFile(taskFile); err == nil {
		buf2.Write(data)
	}
	os.WriteFile(taskFile, buf2.Bytes(), 0o644)
}
